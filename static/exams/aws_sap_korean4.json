[
    {
        "Question Number": "1",
        "Situation": "글로벌 전자상거래 회사가 다양한 지리적 지역에서 사용자에게 서비스를 제공할 때 지연 문제를 겪고 있습니다. 사용자 경험을 개선하기 위해, 회사는 트래픽 패턴을 고려하면서 사용자를 가장 가까운 애플리케이션 엔드포인트로 안내하는 DNS 솔루션을 구현하고자 합니다. 아키텍처는 사용자 트래픽을 효율적으로 처리하고 최고의 가용성을 보장하도록 설계되어야 합니다. (두 가지 선택)",
        "Question": "전자상거래 애플리케이션의 DNS 라우팅을 최적화하기 위해 솔루션 아키텍트가 구현해야 하는 옵션은 무엇입니까?",
        "Options": {
            "1": "모든 사용자를 단일 애플리케이션 엔드포인트로 안내하는 간단한 라우팅 정책을 Amazon Route 53에서 생성합니다. 사용자의 위치에 관계없이 모든 사용자를 해당 엔드포인트로 안내합니다.",
            "2": "Amazon Route 53에서 지연 기반 라우팅을 구현하여 사용자의 지리적 위치에 따라 가장 낮은 지연의 애플리케이션 엔드포인트로 사용자를 안내합니다.",
            "3": "Amazon Route 53에서 장애 조치 라우팅 정책을 배포하여 기본 엔드포인트가 비정상일 때만 백업 애플리케이션 엔드포인트로 트래픽을 라우팅합니다.",
            "4": "Amazon Route 53에서 지리적 위치에 따라 사용자를 라우팅하여 가장 가까운 지역 엔드포인트에 도달하도록 하는 지리적 위치 라우팅을 활용합니다.",
            "5": "Amazon Route 53에서 미리 정의된 가중치에 따라 여러 애플리케이션 엔드포인트에 트래픽을 분산시키기 위해 가중치 라우팅을 설정합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon Route 53에서 지연 기반 라우팅을 구현하여 사용자의 지리적 위치에 따라 가장 낮은 지연의 애플리케이션 엔드포인트로 사용자를 안내합니다.",
            "Amazon Route 53에서 지리적 위치에 따라 사용자를 라우팅하여 가장 가까운 지역 엔드포인트에 도달하도록 하는 지리적 위치 라우팅을 활용합니다."
        ],
        "Explanation": "Amazon Route 53의 지연 기반 라우팅과 지리적 위치 라우팅은 모두 사용자의 위치와 네트워크 조건에 따라 가장 적합한 엔드포인트로 사용자를 안내함으로써 애플리케이션 성능을 개선하는 효과적인 전략입니다. 지연 기반 라우팅은 사용자가 가장 낮은 지연의 엔드포인트에 연결되도록 보장하며, 지리적 위치 라우팅은 사용자가 가장 가까운 지역 엔드포인트로 안내되도록 하여 사용자 경험과 애플리케이션 효율성을 향상시킵니다.",
        "Other Options": [
            "간단한 라우팅은 사용자의 지리적 위치나 지연을 고려하지 않으므로 단일 엔드포인트에서 멀리 떨어진 사용자에게는 최적의 성능을 제공하지 못할 수 있습니다.",
            "가중치 라우팅은 가중치에 따라 트래픽을 분산할 수 있지만, 지연이나 지리적 근접성을 최적화하지 않으므로 글로벌 애플리케이션에서 사용자 경험을 개선하는 데 중요합니다.",
            "장애 조치 라우팅은 성능 최적화보다는 높은 가용성을 위해 설계되었으며, 기본 엔드포인트가 다운될 때만 백업 엔드포인트로 트래픽을 라우팅하므로 활성 사용자에 대한 지연 문제를 해결하지 않습니다."
        ]
    },
    {
        "Question Number": "2",
        "Situation": "회사가 수신 데이터를 처리하는 Lambda 함수의 새 버전을 배포하고 있습니다. 솔루션 아키텍트는 기존 사용자에게 영향을 미칠 위험을 최소화하면서 새 버전이 프로덕션과 유사한 환경에서 테스트되도록 해야 합니다. 아키텍트는 현재 버전과 새 버전 간의 트래픽을 라우팅하기 위해 별칭을 사용할 계획입니다. 라우팅 구성은 대부분의 트래픽이 기존 버전으로 계속 흐르도록 하면서 소량의 트래픽을 새 버전으로 보내 테스트할 수 있도록 해야 합니다.",
        "Question": "솔루션 아키텍트가 모든 필수 요구 사항을 충족하면서 이 트래픽 라우팅을 효과적으로 구현할 수 있도록 하는 구성은 무엇입니까?",
        "Options": {
            "1": "$LATEST 버전과 Lambda 함수의 이전 버전을 가리키는 별칭을 생성합니다. 트래픽의 90%를 $LATEST 버전으로, 10%를 이전 버전으로 라우팅하여 서로 다른 실행 역할을 갖도록 합니다.",
            "2": "기존 버전의 트래픽을 100%로 하고 새 버전의 트래픽을 0%로 하는 두 개의 별칭을 생성합니다. 나중에 새 버전을 테스트할 준비가 되면 비율을 각각 90%와 10%로 조정합니다.",
            "3": "기존 버전과 새 버전을 가리키는 별칭을 생성하고, 기존 버전으로 90%의 트래픽을 라우팅하고 새 버전으로 10%의 트래픽을 라우팅합니다. 두 버전 모두 동일한 실행 역할을 가지고 있으며, 데드 레터 큐 구성은 없습니다.",
            "4": "기존 버전과 새 버전을 가리키는 별칭을 생성하고, 기존 버전으로 80%의 트래픽을 라우팅하고 새 버전으로 20%의 트래픽을 라우팅합니다. 두 버전 모두 게시되어 있고 동일한 실행 역할을 가져야 합니다."
        },
        "Correct Answer": "기존 버전과 새 버전을 가리키는 별칭을 생성하고, 기존 버전으로 90%의 트래픽을 라우팅하고 새 버전으로 10%의 트래픽을 라우팅합니다. 두 버전 모두 동일한 실행 역할을 가지고 있으며, 데드 레터 큐 구성은 없습니다.",
        "Explanation": "이 옵션은 기존 및 새 버전의 Lambda 함수에 대해 지정된 비율의 트래픽을 라우팅하기 위해 별칭을 올바르게 설정합니다. 두 버전 모두 게시되어 있어야 하고, 동일한 실행 역할을 가져야 하며, 데드 레터 큐 구성을 사용하지 않아야 한다는 요구 사항을 준수합니다.",
        "Other Options": [
            "이 옵션은 별칭이 $LATEST 버전을 가리킬 수 없기 때문에 잘못된 것입니다. 이는 게시된 버전만 가리켜야 한다는 요구 사항을 충족하지 않습니다.",
            "이 옵션은 두 개의 별칭을 생성하는 것이 버전 간의 트래픽을 효과적으로 라우팅할 수 있는 기능을 제공하지 않기 때문에 잘못된 것입니다. 두 버전이 단일 별칭에 있어야 한다는 요구 사항을 충족하지 못합니다.",
            "이 옵션은 기존 버전으로 80%의 트래픽을 라우팅하고 새 버전으로 20%의 트래픽을 라우팅하므로, 기존 버전으로 90%의 트래픽을 라우팅하고 새 버전으로 10%의 트래픽을 라우팅해야 한다는 요구 사항과 일치하지 않습니다."
        ]
    },
    {
        "Question Number": "3",
        "Situation": "미디어 스트리밍 회사가 Amazon CloudFront를 사용하여 전 세계적으로 비디오 콘텐츠를 전달하고 있습니다. 그들은 성능에 영향을 주지 않으면서 사용자 선호도와 위치에 따라 콘텐츠를 개인화하고자 합니다. 회사는 요청과 응답을 엣지에서 수정할 수 있는 솔루션을 원하며, 변경 사항이 시청자에게 최대한 가깝게 실행되도록 보장하고자 합니다.",
        "Question": "사용자 선호도에 따라 CloudFront에서 제공되는 콘텐츠를 사용자화하기 위해 솔루션 아키텍트가 구현해야 하는 솔루션은 무엇입니까?",
        "Options": {
            "1": "CloudFront 배포 앞에 Amazon API Gateway를 설정하여 사용자 데이터에 따라 모든 요청 수정 및 응답을 처리합니다.",
            "2": "Lambda@Edge를 사용하여 뷰어 요청 이벤트에서 Lambda 함수를 실행하여 응답을 캐시하기 전에 사용자 선호도에 따라 요청을 수정합니다.",
            "3": "AWS WAF 규칙을 구현하여 CloudFront 배포에 도달하기 전에 요청 및 응답을 필터링하고 사용자화합니다.",
            "4": "CloudFront에서 오리진 요청 이벤트에서 실행될 AWS Lambda 함수를 구성하여 요청이 오리진 서버에 도달하기 전에 수정합니다."
        },
        "Correct Answer": "Lambda@Edge를 사용하여 뷰어 요청 이벤트에서 Lambda 함수를 실행하여 응답을 캐시하기 전에 사용자 선호도에 따라 요청을 수정합니다.",
        "Explanation": "Lambda@Edge를 사용하면 회사가 뷰어 요청 단계에서 요청을 사용자화할 수 있어, 콘텐츠가 CloudFront에 캐시되기 전에 사용자별 수정이 이루어져 성능을 저하시키지 않으면서 보다 개인화된 경험을 제공합니다.",
        "Other Options": [
            "이 옵션은 오리진 요청 이벤트에서 요청을 수정하는 것이므로 요청이 오리진 서버에 전송되기 전에 사용자 선호도에 따라 개인화할 수 없으므로 잘못된 것입니다. 이는 불필요한 지연을 초래할 수 있습니다.",
            "이 옵션은 API Gateway가 요청 수정을 관리할 수 있지만, Lambda@Edge를 CloudFront와 직접 사용하는 것보다 추가적인 지연과 복잡성을 초래하므로 잘못된 것입니다.",
            "이 옵션은 AWS WAF가 주로 악의적인 요청을 필터링하는 보안 목적을 위해 설계되었으며, 사용자 선호도에 따라 콘텐츠를 사용자화하는 데 사용되지 않으므로 잘못된 것입니다."
        ]
    },
    {
        "Question Number": "4",
        "Situation": "한 회사가 AWS에 배포한 애플리케이션이 리소스 제약으로 인해 간헐적인 실패를 경험하고 있습니다. 이 애플리케이션은 EC2 인스턴스에서 실행되며, 팀은 CPU 사용량을 모니터링하기 위해 CloudWatch 경고를 설정했습니다. 그러나 높은 가용성을 보장하고 수동 개입을 최소화하기 위해 더 강력한 경고 및 자동 복구 전략이 필요합니다.",
        "Question": "애플리케이션의 경고 및 자동 복구를 개선하기 위한 가장 효과적인 전략은 무엇입니까?",
        "Options": {
            "1": "CloudWatch 메트릭에 따라 EC2 인스턴스 수를 동적으로 조정하도록 Auto Scaling을 구성하고, 사전 알림을 위한 CloudWatch 경고를 설정합니다.",
            "2": "CloudWatch 경고가 트리거될 때 Amazon SNS를 사용하여 알림을 전송하여 운영 팀이 문제를 조사하고 수동으로 복구할 수 있도록 합니다.",
            "3": "실시간 메트릭을 제공하고 인스턴스 성능이 허용 수준 이하로 떨어질 때 팀에 이메일로 알리는 사용자 정의 CloudWatch 대시보드를 생성합니다.",
            "4": "CPU 사용량이 정의된 임계값을 초과할 때 EC2 인스턴스를 자동으로 재시작하도록 CloudWatch 경고에 의해 트리거되는 AWS Lambda 함수를 구현합니다."
        },
        "Correct Answer": "CloudWatch 메트릭에 따라 EC2 인스턴스 수를 동적으로 조정하도록 Auto Scaling을 구성하고, 사전 알림을 위한 CloudWatch 경고를 설정합니다.",
        "Explanation": "Auto Scaling을 사용하면 애플리케이션이 수요에 따라 용량을 자동으로 조정할 수 있어 신뢰성이 향상되고 수동 개입이 줄어듭니다. 이를 CloudWatch 경고와 결합하면 팀이 중요한 변화에 대해 통보받아 리소스를 사전 관리할 수 있습니다.",
        "Other Options": [
            "이 접근 방식은 수동 개입에 의존하므로 자동 복구의 목표와 일치하지 않습니다. EC2 인스턴스를 재시작하는 것은 문제를 일시적으로 해결할 수 있지만, 근본적인 리소스 제약을 효과적으로 해결하지는 못합니다.",
            "이 옵션은 수동 조사 및 복구를 포함하므로 자동 복구의 목적을 무색하게 합니다. 운영 팀이 다운타임을 방지하기 위해 신속하게 대응하지 못할 수 있습니다.",
            "사용자 정의 CloudWatch 대시보드는 모니터링에 유용하지만 자동 복구 기능을 제공하지 않습니다. 이메일로 전송된 알림은 수동 응답을 요구하며 높은 가용성을 보장하지 않습니다."
        ]
    },
    {
        "Question Number": "5",
        "Situation": "한 금융 서비스 회사가 비용을 최소화하면서 자주 사용되는 데이터에 빠르게 접근할 수 있는 새로운 애플리케이션을 개발하고 있습니다. 이들은 Amazon ElastiCache를 사용하여 캐싱 전략을 구현하는 것을 고려하고 있습니다. 회사의 주요 목표는 리소스를 과도하게 소모하지 않으면서 캐시가 효과적으로 유지되도록 하는 것입니다.",
        "Question": "업데이트된 데이터에 대한 필요성과 효율적인 리소스 사용을 균형 있게 유지하기 위해 솔루션 아키텍트가 추천해야 할 캐싱 전략은 무엇입니까?",
        "Options": {
            "1": "각 캐시 항목에 대해 TTL(유효 기간) 값을 가진 지연 로딩 캐싱 전략을 구현하여 리소스 사용을 최적화합니다.",
            "2": "TTL 없이 쓰기 스루 캐싱 전략을 활용하여 모든 데이터가 신선하게 유지되도록 하지만 불필요한 캐시 팽창의 위험이 있습니다.",
            "3": "TTL이 있는 쓰기 스루 캐싱 전략을 선택하여 데이터 신선도를 보장하면서 사용되지 않는 항목으로 인한 캐시 혼잡을 방지합니다.",
            "4": "TTL 없이 지연 로딩 전략을 채택하여 잠재적으로 오래된 데이터와 비효율적인 리소스 사용을 허용합니다."
        },
        "Correct Answer": "각 캐시 항목에 대해 TTL(유효 기간) 값을 가진 지연 로딩 캐싱 전략을 구현하여 리소스 사용을 최적화합니다.",
        "Explanation": "TTL이 있는 지연 로딩 캐싱 전략은 애플리케이션이 요청된 데이터만 저장하고, TTL을 통해 오래된 데이터를 자동으로 제거할 수 있게 합니다. 이는 효율성과 신선도를 균형 있게 유지하여 최적의 리소스 사용을 보장합니다.",
        "Other Options": [
            "TTL 없이 쓰기 스루 캐싱 전략은 모든 데이터가 지속적으로 캐시에 기록되므로 불필요한 캐시 팽창을 초래할 수 있습니다.",
            "TTL 없이 지연 로딩 전략을 채택하면 오래된 데이터가 캐시에 필요 이상으로 남아 비효율적인 리소스 사용과 구식 정보 제공으로 이어질 수 있습니다.",
            "TTL이 있는 쓰기 스루 캐싱 전략을 선택하면 데이터 신선도를 보장할 수 있지만, 신중하게 관리하지 않으면 불필요한 항목으로 캐시가 채워질 수 있습니다."
        ]
    },
    {
        "Question Number": "6",
        "Situation": "한 회사가 VPC에 웹 애플리케이션을 배포하고 있으며, 인터넷에서 EC2 인스턴스에 대한 안전한 접근을 요구하면서도 인스턴스 간의 내부 통신을 허용해야 합니다. 솔루션 아키텍트는 적절한 접근 제어 및 라우팅을 보장하기 위해 네트워크 설정을 구성하고 있습니다.",
        "Question": "다음 구성 중 EC2 인스턴스가 인터넷에서 접근 가능하고 동일한 서브넷 내의 인스턴스 간의 제한 없는 통신을 허용하는 구성을 보장하는 것은 무엇입니까?",
        "Options": {
            "1": "인터넷 게이트웨이에 대한 경로가 있는 공용 서브넷을 구현하고, 내부 트래픽을 허용하기 위해 보안 그룹을 사용합니다.",
            "2": "모든 수신 트래픽을 거부하고 아웃바운드 트래픽을 허용하는 네트워크 ACL을 설정합니다.",
            "3": "라우팅 테이블에 공용 경로를 구성하고 보안 그룹에서 모든 트래픽을 허용합니다.",
            "4": "라우팅 테이블에 개인 경로를 생성하고 보안 그룹 접근을 특정 IP 범위로 제한합니다."
        },
        "Correct Answer": "인터넷 게이트웨이에 대한 경로가 있는 공용 서브넷을 구현하고, 내부 트래픽을 허용하기 위해 보안 그룹을 사용합니다.",
        "Explanation": "이 구성은 공용 서브넷의 EC2 인스턴스가 인터넷 게이트웨이를 통해 인터넷에서 접근 가능하도록 하면서, 적절하게 구성된 보안 그룹을 통해 제한 없는 내부 통신을 허용합니다.",
        "Other Options": [
            "이 옵션은 인터넷 접근을 허용하지만, 공용 접근에 필요한 인터넷 게이트웨이에 대한 경로를 명시하지 않습니다.",
            "이 옵션은 모든 수신 트래픽을 차단하여 EC2 인스턴스에 대한 외부 접근을 방지하므로, 공용 애플리케이션에는 바람직하지 않습니다.",
            "이 옵션은 라우팅 테이블을 개인으로 설정하므로 인스턴스가 인터넷에서 접근할 수 없게 되어 공용 접근 요구 사항과 모순됩니다."
        ]
    },
    {
        "Question Number": "7",
        "Situation": "한 금융 서비스 회사가 AWS 사용을 최적화하고 비용을 최소화하려고 합니다. 이 회사는 여러 부서에 대해 여러 AWS 계정을 사용하고 있으며, 비용 원인에 대한 명확한 이해 없이 높은 월별 청구서를 보고 있습니다. 솔루션 아키텍트의 임무는 회사가 AWS 지출을 효과적으로 모니터링하고 분석할 수 있도록 돕는 전략을 구현하는 것입니다.",
        "Question": "이 시나리오에서 여러 계정에 걸쳐 AWS 비용을 모니터링하고 관리하는 데 가장 효과적인 도구는 무엇입니까?",
        "Options": {
            "1": "비용 한도를 설정하고 알림을 받기 위한 AWS Budgets와 상세한 지출 분석을 위한 AWS Cost Explorer.",
            "2": "향후 서비스 비용을 추정하기 위한 AWS Pricing Calculator와 감사용 API 호출을 기록하기 위한 AWS CloudTrail.",
            "3": "비용 추세를 시각화하기 위한 Amazon QuickSight와 코드로 인프라를 관리하기 위한 AWS CloudFormation.",
            "4": "모범 사례 권장 사항에 접근하기 위한 AWS Trusted Advisor와 리소스 구성 및 준수를 모니터링하기 위한 AWS Config."
        },
        "Correct Answer": "비용 한도를 설정하고 알림을 받기 위한 AWS Budgets와 상세한 지출 분석을 위한 AWS Cost Explorer.",
        "Explanation": "AWS Budgets는 사용자가 사용자 정의 비용 및 사용 예산을 설정할 수 있게 하여 한도를 초과할 때 알림을 제공합니다. 지출 패턴과 비용 원인에 대한 상세한 통찰력을 제공하는 AWS Cost Explorer와 결합하여, 이 조합은 여러 계정에 걸쳐 비용을 모니터링하고 관리하는 데 가장 효과적입니다.",
        "Other Options": [
            "AWS Pricing Calculator는 배포 전에 비용을 추정하는 데 주로 사용되며, 기존 비용의 지속적인 모니터링 및 관리에는 적합하지 않습니다. AWS CloudTrail은 API 호출을 기록하는 데 중점을 두며 비용 관리에 대한 통찰력을 제공하지 않습니다.",
            "AWS Trusted Advisor는 모범 사례 점검을 제공하지만 실시간 비용 모니터링은 제공하지 않습니다. AWS Config는 리소스 구성 및 준수를 추적하는 데 사용되며, 비용 분석에는 사용되지 않습니다.",
            "Amazon QuickSight는 데이터 시각화를 위한 비즈니스 인텔리전스 도구이지만 비용 관리에 본질적으로 초점을 맞추고 있지 않습니다. AWS CloudFormation은 인프라 관리를 위해 사용되며 비용 모니터링 기능을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "8",
        "Situation": "조직이 내부 보안 기준을 준수하기 위해 AWS 환경 전반에 걸쳐 패치 관리에 대한 새로운 정책을 구현하고 있습니다. 조직은 모든 EC2 인스턴스가 정기적으로 패치되고 최신 보안 업데이트를 준수하도록 해야 합니다.",
        "Question": "조직의 준수 요구 사항에 맞는 패치 관리 솔루션을 구현하기 위한 가장 효과적인 전략은 무엇입니까?",
        "Options": {
            "1": "EC2 인스턴스에 서드파티 패치 관리 솔루션을 배포하여 패치 프로세스를 자동화하고 조직 기준을 준수하도록 유지합니다.",
            "2": "각 EC2 인스턴스에 수동으로 로그인하여 각 운영 체제에 필요한 업데이트를 적용하여 준수를 보장합니다.",
            "3": "AWS Systems Manager Patch Manager를 활용하여 EC2 인스턴스의 패치를 자동화하고 정의된 패치 기준선에 따라 최신 상태를 유지합니다.",
            "4": "EC2 인스턴스에서 실행 중인 운영 체제에 대한 새로운 패치가 제공될 때 관리자가 알림을 받을 수 있도록 Amazon CloudWatch 경고를 설정합니다."
        },
        "Correct Answer": "AWS Systems Manager Patch Manager를 활용하여 EC2 인스턴스의 패치를 자동화하고 정의된 패치 기준선에 따라 최신 상태를 유지합니다.",
        "Explanation": "AWS Systems Manager Patch Manager는 인스턴스의 패치를 자동으로 관리할 수 있게 하여 조직 기준을 준수하도록 유지하면서 수동 노력과 인적 오류를 줄이는 데 도움을 줍니다.",
        "Other Options": [
            "각 EC2 인스턴스에 수동으로 로그인하여 업데이트를 적용하는 것은 비효율적이며 패치를 놓칠 수 있어 비준수 및 보안 취약성의 위험을 증가시킵니다.",
            "새로운 패치에 대한 CloudWatch 경고를 설정하는 것은 실제 패치 프로세스를 해결하지 않으므로 인스턴스가 알림에도 불구하고 패치되지 않을 수 있으며, 이는 준수를 보장하지 않습니다.",
            "서드파티 패치 관리 솔루션을 배포하는 것도 가능하지만, AWS Systems Manager Patch Manager를 사용하는 것이 AWS 환경에서 패치를 관리하는 데 더 통합되고 효율적인 접근 방식입니다."
        ]
    },
    {
        "Question Number": "9",
        "Situation": "대규모 전자상거래 회사가 비용 최적화를 위해 AWS 리소스 활용도를 분석하고 있습니다. 이 회사는 Amazon EC2, Amazon EBS, 컨테이너화된 애플리케이션을 위한 AWS Fargate, 서버리스 기능을 위한 AWS Lambda 등 다양한 서비스를 활용하고 있습니다. 솔루션 아키텍트는 활용 패턴에 따라 리소스 할당을 개선하기 위해 AWS Compute Optimizer를 구현하는 것을 고려하고 있습니다. 아키텍트는 리소스의 실제 사용을 반영하는 정확한 권장 사항을 받기를 원합니다.",
        "Question": "솔루션 아키텍트가 AWS Compute Optimizer가 EC2 인스턴스 및 Auto Scaling 그룹에 대한 최상의 권장 사항을 제공하도록 하려면 무엇을 해야 합니까?",
        "Options": {
            "1": "자동화된 권장 사항을 사용하지 않고 예상 작업 부하에 따라 인스턴스 크기를 수동으로 구성합니다.",
            "2": "EC2 인스턴스 및 Auto Scaling 그룹에 대해 향상된 인프라 메트릭을 활성화하여 상세한 활용 데이터를 캡처합니다.",
            "3": "현재 인스턴스 유형 및 크기를 검토하여 애플리케이션의 요구 사항에 맞는지 확인하되 메트릭은 사용하지 않습니다.",
            "4": "AWS Cost Explorer를 사용하여 지난 12개월 동안 EC2 인스턴스 및 Auto Scaling 그룹의 청구 데이터를 분석합니다."
        },
        "Correct Answer": "EC2 인스턴스 및 Auto Scaling 그룹에 대해 향상된 인프라 메트릭을 활성화하여 상세한 활용 데이터를 캡처합니다.",
        "Explanation": "향상된 인프라 메트릭을 활성화하면 AWS Compute Optimizer가 상세한 활용 데이터를 수집할 수 있어 인스턴스 유형 및 크기에 대한 정확한 권장 사항을 제공하는 데 필수적이며, 과도한 프로비저닝 및 부족한 프로비저닝을 방지합니다.",
        "Other Options": [
            "AWS Cost Explorer를 사용하는 것은 비용 추세를 이해하는 데 도움이 되지만 Compute Optimizer 권장 사항에 필요한 상세한 활용 데이터를 제공하지 않습니다.",
            "자동화된 권장 사항 없이 인스턴스 크기를 수동으로 구성하는 것은 비효율성을 초래할 수 있으며 AWS Compute Optimizer의 기능을 활용하지 못합니다.",
            "메트릭 없이 현재 인스턴스 유형 및 크기를 검토하는 것은 실제 활용 패턴을 무시하며, 이는 정보에 기반한 최적화 결정을 내리는 데 필수적입니다."
        ]
    },
    {
        "Question Number": "10",
        "Situation": "한 금융 서비스 회사가 실시간으로 거래를 처리하는 새로운 애플리케이션을 구축하고 있습니다. 이 애플리케이션은 신뢰할 수 있는 메시지 전달, 구성 요소의 분리 및 독립적으로 확장할 수 있는 기능이 필요합니다. 팀은 애플리케이션이 높은 가용성을 유지하고 다운타임 없이 가변 부하를 처리할 수 있도록 AWS 서비스를 평가하고 있습니다.",
        "Question": "회사가 이러한 요구 사항을 충족하기 위해 어떤 AWS 통합 서비스를 사용해야 합니까?",
        "Options": {
            "1": "Amazon SQS를 사용하여 애플리케이션 구성 요소 간의 메시지 큐를 관리하고, 신뢰할 수 있는 전달과 마이크로서비스의 분리를 보장합니다.",
            "2": "Amazon EventBridge를 활용하여 다양한 AWS 서비스의 이벤트에 응답하고 이를 필요한 애플리케이션 구성 요소로 라우팅합니다.",
            "3": "AWS Step Functions를 활용하여 마이크로서비스의 실행을 조정하고 거래 처리 워크플로를 관리합니다.",
            "4": "Amazon SNS를 구현하여 여러 구독자에게 알림을 방송하고 시스템의 다양한 부분에서 실시간 업데이트를 가능하게 합니다."
        },
        "Correct Answer": "Amazon SQS를 사용하여 애플리케이션 구성 요소 간의 메시지 큐를 관리하고, 신뢰할 수 있는 전달과 마이크로서비스의 분리를 보장합니다.",
        "Explanation": "Amazon SQS는 메시지 큐잉을 위해 특별히 설계되어 신뢰할 수 있는 메시지 전달과 애플리케이션 구성 요소의 분리를 제공합니다. 가변 부하를 효율적으로 처리할 수 있으며, 수신 구성 요소가 일시적으로 사용할 수 없는 경우에도 메시지가 처리되도록 보장합니다.",
        "Other Options": [
            "Amazon SNS는 주로 퍼블리시/서브스크라이브 메시징을 위한 것이며, 메시지 큐를 관리하거나 메시지가 수신된 순서대로 신뢰할 수 있게 처리되도록 보장하는 데 이상적이지 않습니다.",
            "AWS Step Functions는 서비스 간의 워크플로를 조정하는 데 중점을 두고 있으며, 메시지 전달을 직접 관리하는 것이 이 시나리오의 주요 요구 사항이 아닙니다.",
            "Amazon EventBridge는 이벤트 기반 아키텍처에 적합하지만, 거래 처리에 필요한 신뢰할 수 있는 메시지 큐잉 수준을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "11",
        "Situation": "한 회사가 다양한 환경에서 EC2 인스턴스, RDS 데이터베이스 및 S3 버킷과 같은 여러 AWS 리소스를 운영하고 있습니다. 관리자는 비용 최적화를 위해 사용되지 않는 리소스를 식별하고 제거하고자 합니다. 솔루션 아키텍트는 이 프로세스를 자동화하고 리소스 사용에 대한 통찰력을 제공할 수 있는 AWS 솔루션을 추천하는 임무를 맡고 있습니다.",
        "Question": "회사가 AWS 계정 전반에 걸쳐 사용되지 않는 리소스를 식별하는 데 가장 도움이 되는 솔루션은 무엇입니까?",
        "Options": {
            "1": "각 리소스 유형에 대해 Amazon CloudWatch 알람을 설정하여 비활성 상태를 알리고, 이후 AWS Systems Manager를 사용하여 알람을 검토합니다.",
            "2": "AWS Config 규칙을 구현하여 리소스 사용을 추적하고, 리소스 상태 변경에 따라 트리거되는 AWS Lambda 함수를 생성합니다.",
            "3": "AWS Trusted Advisor를 배포하여 리소스 사용을 모니터링하고 저조하게 사용되거나 유휴 상태인 리소스에 대한 권장 사항을 생성합니다.",
            "4": "AWS Cost Explorer를 사용하여 비용 및 사용 보고서를 분석하고, 특정 기간 동안 사용량이 0인 리소스를 필터링합니다."
        },
        "Correct Answer": "AWS Trusted Advisor를 배포하여 리소스 사용을 모니터링하고 저조하게 사용되거나 유휴 상태인 리소스에 대한 권장 사항을 생성합니다.",
        "Explanation": "AWS Trusted Advisor는 AWS 계정 사용에 대한 종합적인 뷰를 제공하고, 사용되지 않는 리소스를 식별하는 것을 포함하여 비용 최적화를 위한 구체적인 권장 사항을 제공합니다. 이 목적을 위해 설계되었으므로 회사의 요구에 효과적인 솔루션입니다.",
        "Other Options": [
            "AWS Config 규칙을 구현하는 것은 구성 변경을 추적하는 데 중점을 두고 있어 사용되지 않는 리소스를 직접 식별하는 데는 효과적이지 않습니다.",
            "AWS Cost Explorer를 사용하면 비용을 분석하는 데 도움이 되지만, 리소스의 사용 상태를 직접적으로 나타내지 않아 사용되지 않는 리소스에 대한 통찰력이 불완전할 수 있습니다.",
            "Amazon CloudWatch 알람을 비활성 상태에 대해 설정하는 것은 반응적인 접근 방식이며, 다양한 서비스에서 사용되지 않는 리소스를 효과적으로 식별하는 데 포괄적인 통찰력을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "12",
        "Situation": "한 회사가 Amazon API Gateway를 사용하여 외부 클라이언트에 서비스를 노출하는 API 세트를 배포했습니다. API는 트래픽 급증을 경험하고 있으며, 이로 인해 성능 저하가 발생할 수 있습니다. API가 응답성과 가용성을 유지하도록 하기 위해 솔루션 아키텍트는 효과적으로 속도 제한 및 쿼터를 구현해야 합니다.",
        "Question": "다음 구성 중 회사가 API 트래픽을 관리하고 과도한 요청으로 인한 서비스 중단을 방지하는 데 가장 도움이 되는 것은 무엇입니까?",
        "Options": {
            "1": "모든 API에 대해 계정 수준에서 하루 10,000 요청의 정적 쿼터를 설정하여 단일 API가 시스템을 압도하지 않도록 합니다.",
            "2": "API Gateway 앞에 캐싱 레이어를 구현하여 백엔드 서비스에 직접적으로 도달하는 요청 수를 줄입니다.",
            "3": "AWS WAF를 활성화하여 IP 주소에 따라 API에 대한 접근을 제한하여 총 요청 수를 제한합니다.",
            "4": "API Gateway 설정에서 각 API에 대해 초당 100 요청의 속도 제한과 500 요청의 버스트 제한을 구성합니다."
        },
        "Correct Answer": "API Gateway 설정에서 각 API에 대해 초당 100 요청의 속도 제한과 500 요청의 버스트 제한을 구성합니다.",
        "Explanation": "API Gateway에서 속도 제한 및 버스트 제한을 설정하면 들어오는 요청을 효과적으로 관리할 수 있어 API가 갑작스러운 트래픽 급증을 처리하면서 전반적인 응답성을 유지할 수 있습니다. 이 접근 방식은 요청 흐름을 제어하기 위해 토큰 버킷 알고리즘을 사용합니다.",
        "Other Options": [
            "모든 API에 대해 계정 수준에서 하루 10,000 요청의 정적 쿼터를 설정하는 것은 실시간 유연성을 제공하지 않으며, 피크 사용 시간 동안 즉각적인 과부하를 방지하지 못할 수 있습니다.",
            "캐싱 레이어를 구현하면 부하를 줄일 수 있지만, 들어오는 요청의 속도 제한을 직접적으로 해결하지 않으며, 높은 트래픽 동안 백엔드 서비스의 저하를 방지하지 못할 수 있습니다.",
            "AWS WAF를 활성화하여 IP 주소에 따라 접근을 제한하면 트래픽을 제한할 수 있지만, 전체 요청 속도를 효과적으로 관리하지 못할 수 있어 속도 제한 문제가 발생할 수 있습니다."
        ]
    },
    {
        "Question Number": "13",
        "Situation": "소매 회사는 비즈니스 요구 사항을 측정 가능한 지표로 변환하여 온라인 판매 플랫폼을 강화하고자 합니다. 그들은 고객 경험 개선, 재고 관리 최적화, 데이터 기반 결정을 통한 전환율 증가에 특히 집중하고 있습니다. 경영진은 전략을 알리고 성공을 측정하기 위해 관련 지표를 포착하는 솔루션을 찾고 있습니다.",
        "Question": "다음 전략 중 비즈니스 요구 사항을 측정 가능한 지표로 변환하는 회사의 목표를 가장 잘 충족하는 것은 무엇입니까?",
        "Options": {
            "1": "AWS IoT Core를 설정하여 소매 센서와 장치에서 데이터를 수집하고 고객 유입량 및 재고 수준에 대한 지표를 분석합니다. Amazon S3를 사용하여 데이터를 저장하여 역사적 쿼리를 수행합니다.",
            "2": "Amazon QuickSight를 사용하여 고객 참여 지표, 재고 회전율 및 전환율을 추적하는 대시보드를 생성하는 분석 솔루션을 구현합니다. 이를 Amazon Kinesis와 통합하여 실시간 데이터 스트림을 분석합니다.",
            "3": "AWS CloudTrail을 사용하여 전자 상거래 플랫폼의 API 호출을 모니터링하고 기록하여 사용자 활동 및 재고 조정과 관련된 지표를 추출합니다. Amazon CloudWatch를 사용하여 중요한 변화에 대한 경고를 생성합니다.",
            "4": "Amazon SageMaker를 사용하여 고객 구매 패턴을 예측하고 보고서를 생성하는 기계 학습 모델을 배포합니다. AWS Cost Explorer를 활용하여 재고 관리와 관련된 비용을 분석합니다."
        },
        "Correct Answer": "Amazon QuickSight를 사용하여 고객 참여 지표, 재고 회전율 및 전환율을 추적하는 대시보드를 생성하는 분석 솔루션을 구현합니다. 이를 Amazon Kinesis와 통합하여 실시간 데이터 스트림을 분석합니다.",
        "Explanation": "이 옵션은 비즈니스 요구 사항을 측정 가능한 지표로 변환할 필요성을 직접적으로 해결하며, 주요 성과 지표를 포착하고 의사 결정을 위한 실시간 통찰력을 제공하는 포괄적인 분석 솔루션을 구현합니다.",
        "Other Options": [
            "이 옵션은 예측 분석에 초점을 맞추고 있지만 고객 참여 및 전환율과 같은 주요 지표의 실시간 추적 필요성을 직접적으로 다루지 않으며, 이는 즉각적인 비즈니스 통찰력에 필수적입니다.",
            "이 옵션은 주로 API 호출 기록에 관한 것으로, 감사에는 유용하지만 회사의 목표와 직접적으로 관련된 실행 가능한 지표나 통찰력을 제공하지 않습니다.",
            "이 옵션은 소매 센서에서 데이터를 수집하는 것을 포함하지만, 온라인 판매 플랫폼에는 관련이 없을 수 있습니다. 초점은 물리적 소매 데이터보다 온라인 비즈니스에 직접 영향을 미치는 지표에 있어야 합니다."
        ]
    },
    {
        "Question Number": "14",
        "Situation": "한 회사는 여러 부서에 대해 여러 AWS 계정을 보유하고 있으며, 보안이나 관리 용이성을 해치지 않고 이러한 계정 간에 자원을 안전하게 공유하고자 합니다.",
        "Question": "다음 솔루션 중 여러 AWS 계정 간에 자원을 안전하고 효율적으로 공유하는 방법은 무엇입니까?",
        "Options": {
            "1": "AWS Organizations를 사용하여 계정을 통합하고 IAM 역할을 사용하여 자원을 공유합니다.",
            "2": "모든 계정 간에 VPC 피어링 연결을 생성하여 공유 자원에 대한 직접 액세스를 허용합니다.",
            "3": "AWS Resource Access Manager (RAM)를 설정하여 계정 간에 자원을 공유하고 권한을 중앙에서 관리합니다.",
            "4": "자원 공유를 위해 각 계정에서 IAM 역할을 수동으로 생성하여 교차 계정 액세스를 구현합니다."
        },
        "Correct Answer": "AWS Resource Access Manager (RAM)를 설정하여 계정 간에 자원을 공유하고 권한을 중앙에서 관리합니다.",
        "Explanation": "AWS Resource Access Manager (RAM)는 여러 계정 간에 AWS 자원을 안전하고 효율적으로 공유할 수 있게 하며, 권한을 중앙에서 관리할 수 있도록 하여 이 시나리오에 가장 적합한 선택입니다.",
        "Other Options": [
            "VPC 피어링은 두 개의 VPC 간에 자원을 공유하는 데 제한적이며, 여러 계정을 관리할 때 복잡해질 수 있어 더 넓은 자원 공유에 비효율적입니다.",
            "AWS Organizations는 계정 관리에 도움을 주지만, 자원 공유를 직접적으로 촉진하지 않으며, 자원을 효과적으로 공유하기 위해 추가 구성이 필요합니다.",
            "각 계정에서 자원 공유를 위해 IAM 역할을 수동으로 생성하는 것은 번거롭고 오류가 발생하기 쉬워 AWS RAM을 사용하는 것보다 관리가 덜 용이합니다."
        ]
    },
    {
        "Question Number": "15",
        "Situation": "한 회사는 AWS OpsWorks Stacks를 사용하여 웹 애플리케이션을 배포하고 있습니다. 이 애플리케이션은 로드 밸런서, 애플리케이션 서버 및 데이터베이스 계층을 포함하여 여러 계층이 필요합니다. 개발 팀은 각 계층이 올바르게 구성되고 인스턴스가 해당 계층과 올바르게 연결되도록 해야 합니다. 또한 애플리케이션 구성 요소의 수명 주기를 관리하기 위한 모범 사례를 구현하고자 합니다.",
        "Question": "개발 팀이 AWS OpsWorks Stacks를 사용하여 애플리케이션 배포를 효과적으로 관리하기 위해 채택해야 할 전략은 무엇입니까?",
        "Options": {
            "1": "OpsWorks를 사용하여 계층을 생성하지 않고 애플리케이션을 배포하며, 외부 스크립트에 의존하여 인스턴스의 구성 및 배포를 관리합니다.",
            "2": "필요한 모든 계층을 포함하는 스택을 생성하여 각 계층이 올바른 수명 주기 이벤트와 관련 인스턴스를 갖도록 합니다. 내장된 레시피를 사용하여 배포 및 구성을 관리합니다.",
            "3": "애플리케이션의 모든 구성 요소에 대해 단일 계층을 설정하고 이 계층에 여러 인스턴스를 추가하여 애플리케이션 내에서 다양한 역할을 처리합니다.",
            "4": "계층을 정의하지 않고 스택 내에서 인스턴스를 직접 프로비저닝하고, 각 인스턴스를 필요한 애플리케이션 및 서비스에 맞게 수동으로 구성합니다."
        },
        "Correct Answer": "필요한 모든 계층을 포함하는 스택을 생성하여 각 계층이 올바른 수명 주기 이벤트와 관련 인스턴스를 갖도록 합니다. 내장된 레시피를 사용하여 배포 및 구성을 관리합니다.",
        "Explanation": "정의된 계층으로 스택을 생성하면 애플리케이션의 각 구성 요소가 올바르게 조직되고 관리됩니다. 이 접근 방식은 OpsWorks의 내장 수명 주기 이벤트와 레시피를 활용하여 자동화된 배포 및 구성을 가능하게 하며, OpsWorks 사용을 위한 모범 사례와 일치합니다.",
        "Other Options": [
            "계층을 정의하지 않고 인스턴스를 직접 프로비저닝하는 것은 OpsWorks의 기본 설계에 반하며, 이는 애플리케이션을 계층을 통해 관리하기 위한 것입니다. 이 접근 방식은 애플리케이션을 효과적으로 확장하고 관리하는 데 어려움을 초래할 것입니다.",
            "모든 구성 요소에 대해 단일 계층을 설정하는 것은 OpsWorks에서 계층의 목적을 저해하며, 이는 서로 다른 애플리케이션의 측면을 독립적으로 관리하는 것입니다. 이로 인해 배포 및 구성 관리에 복잡성이 초래될 수 있습니다.",
            "계층을 생성하지 않고 OpsWorks를 사용하는 것은 애플리케이션 수명 주기를 효과적으로 관리하기 위한 플랫폼의 기능을 무시하는 것입니다. 외부 스크립트에 의존하는 것은 복잡성을 추가하고 OpsWorks와 같은 관리 서비스의 이점을 줄일 것입니다."
        ]
    },
    {
        "Question Number": "16",
        "Situation": "한 회사가 AWS 인프라 관리를 위한 운영 우수성을 향상시키기 위해 일상적인 작업을 자동화하고 시스템 신뢰성을 개선하고자 합니다. 솔루션 아키텍트는 성능을 최적화할 뿐만 아니라 운영 중 인적 오류의 가능성을 줄이는 전략을 식별해야 합니다.",
        "Question": "다음 전략 중 전체 운영 우수성을 향상시키는 데 도움이 되는 것은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "시스템이 항상 최신 패치를 실행하도록 보장하기 위해 수동 서버 업데이트를 위한 전담 팀을 구성합니다.",
            "2": "특정 사용 사례에 맞는 성능을 보장하기 위해 각 서비스와 리소스를 수동으로 구성합니다.",
            "3": "EC2 인스턴스 관리를 자동화하기 위해 AWS Systems Manager Run Command를 구현합니다.",
            "4": "애플리케이션 동작을 모니터링하기 위해 Amazon CloudWatch Logs를 사용하여 중앙 집중식 로깅 솔루션을 구축합니다.",
            "5": "AWS CloudFormation을 사용하여 인프라를 코드로 생성하고 관리하여 일관된 환경을 촉진합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "EC2 인스턴스 관리를 자동화하기 위해 AWS Systems Manager Run Command를 구현합니다.",
            "AWS CloudFormation을 사용하여 인프라를 코드로 생성하고 관리하여 일관된 환경을 촉진합니다."
        ],
        "Explanation": "AWS Systems Manager Run Command를 구현하면 여러 EC2 인스턴스에서 일상적인 작업을 자동화할 수 있어 인적 오류의 가능성을 줄이고 운영 효율성을 향상시킵니다. 또한 AWS CloudFormation을 사용하면 인프라를 코드로 관리할 수 있어 환경이 일관되고 쉽게 재현 가능하게 되어 운영 우수성의 핵심이 됩니다.",
        "Other Options": [
            "서비스를 수동으로 구성하면 불일치와 인적 오류의 위험이 증가하여 운영 우수성을 저해합니다. 자동화는 신뢰성과 효율성을 향상시키는 데 필수적입니다.",
            "중앙 집중식 로깅을 구축하는 것은 모니터링에 유익하지만, 그것만으로는 운영 우수성을 직접적으로 향상시키지 않습니다. 운영 효율성으로 이어지는 프로세스와 작업의 자동화가 더 중요합니다.",
            "수동 서버 업데이트를 위한 전담 팀을 구성하면 지연과 인적 오류가 발생할 수 있으며, 이는 운영 우수성의 원칙에 반합니다. 적시적이고 일관된 업데이트를 보장하기 위해 자동화가 우선시되어야 합니다."
        ]
    },
    {
        "Question Number": "17",
        "Situation": "한 소매 회사가 AWS에 호스팅된 온라인 쇼핑 플랫폼의 사용 패턴이 변동하고 있습니다. 회사의 솔루션 아키텍트는 피크 쇼핑 시즌 동안 최적의 성능을 보장하면서 비용을 줄이는 권장 크기 조정 전략을 개발해야 합니다. 이 솔루션은 과도한 프로비저닝을 최소화하고 다양한 작업 부하에 적응해야 합니다.",
        "Question": "솔루션 아키텍트가 온라인 쇼핑 플랫폼의 최상의 권장 크기 조정 결과를 달성하기 위해 구현해야 할 전략은 무엇입니까?",
        "Options": {
            "1": "매달 인스턴스 크기를 수동으로 검토하고 현재 사용량에 따라 다운그레이드합니다.",
            "2": "피크 사용 중 성능 요구 사항에 관계없이 모든 인스턴스를 가장 작은 크기로 설정하여 비용을 최소화합니다.",
            "3": "모든 인스턴스 유형에 대해 예약 인스턴스를 구현하여 실제 사용 패턴을 고려하지 않고 비용 절감을 보장합니다.",
            "4": "과거 사용 패턴을 분석하고 Auto Scaling을 구현하여 수요에 따라 인스턴스 수를 동적으로 조정합니다."
        },
        "Correct Answer": "과거 사용 패턴을 분석하고 Auto Scaling을 구현하여 수요에 따라 인스턴스 수를 동적으로 조정합니다.",
        "Explanation": "과거 사용 패턴에 기반하여 Auto Scaling을 구현하면 플랫폼이 실시간 수요 변동에 따라 자원을 자동으로 조정할 수 있습니다. 이는 피크 시간 동안 최적의 성능을 보장하고 비피크 시간 동안 비용을 최소화합니다.",
        "Other Options": [
            "매달 인스턴스 크기를 수동으로 검토하는 것은 자동화가 부족하고 변화하는 작업 부하에 대한 반응이 지연될 수 있어 과도한 프로비저닝이나 부족한 프로비저닝으로 이어질 수 있습니다.",
            "모든 인스턴스를 가장 작은 크기로 설정하면 피크 사용 시간 동안 성능이 크게 저하되어 고객 경험이 나빠지고 판매 손실로 이어질 수 있습니다.",
            "실제 사용 패턴을 고려하지 않고 예약 인스턴스를 구현하면 자원이 완전히 활용되지 않을 경우 불필요한 비용이 발생할 수 있어 권장 크기 조정의 목적을 무색하게 합니다."
        ]
    },
    {
        "Question Number": "18",
        "Situation": "한 회사가 데이터 저장 및 백업 요구 사항을 위해 AWS 서비스를 활용하고 있습니다. 그들은 객체 저장을 위해 Amazon S3를 사용하고 있으며 데이터가 효율적이고 안전하게 백업되도록 보장하고자 합니다. 이 회사는 또한 강력한 백업 전략을 필요로 하는 규정 준수 요구 사항이 있습니다. 그들은 이러한 요구를 충족하기 위해 다양한 백업 관행을 탐색하고 있습니다.",
        "Question": "회사가 데이터 내구성과 규정 준수를 보장하기 위해 구현할 수 있는 백업 관행 및 방법은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "Amazon S3 버킷에서 버전 관리를 활성화하고 수명 주기 정책을 구성하여 이전 버전을 Amazon S3 Glacier로 전환합니다.",
            "2": "백업 정책 준수를 보장하기 위해 매달 S3 객체를 온프레미스 저장소로 수동으로 다운로드합니다.",
            "3": "AWS Backup을 사용하여 S3 데이터를 지정된 백업 금고로 자동으로 백업하는 백업 계획을 생성합니다.",
            "4": "S3 버킷에서 교차 지역 복제를 구성하여 객체를 다른 AWS 지역의 S3 버킷으로 복제합니다.",
            "5": "정기적으로 S3 객체를 다른 지역의 S3 버킷으로 복사하는 예약된 AWS Lambda 함수를 생성합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon S3 버킷에서 버전 관리를 활성화하고 수명 주기 정책을 구성하여 이전 버전을 Amazon S3 Glacier로 전환합니다.",
            "S3 버킷에서 교차 지역 복제를 구성하여 객체를 다른 AWS 지역의 S3 버킷으로 복제합니다."
        ],
        "Explanation": "S3 버킷에서 버전 관리를 활성화하면 객체의 모든 버전이 유지되어 데이터 복구 및 규정 준수에 중요합니다. 또한 수명 주기 정책을 사용하여 이전 버전을 Amazon S3 Glacier로 전환하면 비용을 최적화하면서 데이터 내구성을 보장할 수 있습니다. 교차 지역 복제를 구성하면 데이터 중복성과 가용성이 향상되어 백업 전략을 더욱 강화합니다.",
        "Other Options": [
            "S3 객체를 다른 버킷으로 복사하는 예약된 AWS Lambda 함수를 생성하는 것은 잠재적인 솔루션이지만 지속적인 관리가 필요하며 버전 관리 및 수명 주기 정책과 같은 내구성을 제공하지 않습니다.",
            "S3에 대한 AWS Backup 사용은 현재 지원되지 않으며, AWS Backup은 주로 EBS, RDS 및 DynamoDB와 같은 서비스에 초점을 맞추고 있어 이 옵션은 부적절합니다.",
            "S3 객체를 온프레미스 저장소로 수동으로 다운로드하는 것은 효율적이거나 신뢰할 수 있는 백업 관행이 아니며, 인적 오류에 취약하고 AWS의 내장된 내구성 및 중복성 기능의 이점을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "19",
        "Situation": "글로벌 전자상거래 플랫폼에서 최근 애플리케이션 오류와 지연 문제가 급증했습니다. 솔루션 아키텍트는 팀이 성능 이상을 감지하고 실시간으로 문제를 해결할 수 있도록 하는 강력한 모니터링 솔루션을 구현해야 하며, 추가 분석을 위해 상세한 애플리케이션 메트릭을 기록해야 합니다. 팀은 복잡한 로깅 솔루션을 관리할 자원이 없으며, 기존 AWS 인프라와 잘 통합되는 완전 관리형 서비스를 선호합니다.",
        "Question": "주어진 요구 사항에 가장 적합한 모니터링 및 로깅 솔루션은 무엇입니까?",
        "Options": {
            "1": "EC2 인스턴스에 서드파티 모니터링 도구를 배포하여 애플리케이션 메트릭을 수집합니다.",
            "2": "AWS X-Ray를 구현하여 요청의 상세 추적을 수행하고 CloudTrail과 통합하여 로깅합니다.",
            "3": "Amazon QuickSight에서 사용자 정의 대시보드를 설정하여 애플리케이션 성능 메트릭을 시각화합니다.",
            "4": "Amazon CloudWatch를 사용하여 애플리케이션 로그를 수집하고 성능 이상에 대한 알람을 설정합니다."
        },
        "Correct Answer": "Amazon CloudWatch를 사용하여 애플리케이션 로그를 수집하고 성능 이상에 대한 알람을 설정합니다.",
        "Explanation": "Amazon CloudWatch는 모니터링, 로깅 및 알람 기능을 제공하는 완전 관리형 서비스로, 복잡한 관리 없이 실시간 성능 모니터링 및 애플리케이션 메트릭 로깅에 이상적인 선택입니다.",
        "Other Options": [
            "EC2 인스턴스에 서드파티 모니터링 도구를 배포하면 추가 관리 오버헤드가 필요하며, AWS의 기본 서비스를 활용하지 않으므로 아키텍처가 복잡해지고 비용이 증가할 수 있습니다.",
            "AWS X-Ray를 구현하는 것은 요청 추적에 유용하지만, 애플리케이션 메트릭 로깅 및 알람 설정의 필요를 직접적으로 해결하지 않으므로 독립형 솔루션으로는 적합하지 않습니다.",
            "Amazon QuickSight에서 사용자 정의 대시보드를 설정하는 것은 실시간 모니터링 및 로깅 요구 사항을 충족하지 않으며, QuickSight는 데이터 시각화를 위한 비즈니스 인텔리전스 도구이기 때문에 모니터링 솔루션이 아닙니다."
        ]
    },
    {
        "Question Number": "20",
        "Situation": "금융 서비스 회사는 보안 태세를 강화하기 위해 네트워크 트래픽을 모니터링해야 합니다. 이 회사는 기존 Amazon VPC 설정을 가지고 있으며, 규정 준수 및 보안 이유로 트래픽 패턴을 캡처하고 분석하고자 합니다. 이 목표를 달성하기 위해 AWS 기능을 사용하는 것을 고려하고 있습니다. 회사는 보안 분석에 중요한 Layer 7 트래픽을 분석할 수 있도록 보장하고자 합니다.",
        "Question": "회사가 Layer 7 분석을 포함하여 네트워크 트래픽을 효과적으로 모니터링하고 분석하기 위해 어떤 솔루션을 구현해야 합니까?",
        "Options": {
            "1": "VPC Flow Logs를 활성화하여 Layer 4 트래픽을 캡처하고 AWS Athena를 사용하여 분석을 위해 로그를 Amazon S3에 게시합니다.",
            "2": "Amazon CloudWatch Logs를 설정하여 VPC Flow Logs를 모니터링하고 캡처된 Layer 4 트래픽을 기반으로 알람을 생성합니다.",
            "3": "AWS Traffic Mirroring을 구현하여 EC2 인스턴스에서 모든 네트워크 트래픽을 캡처하고 보안 장치로 전송하여 Layer 7 분석을 수행합니다.",
            "4": "AWS CloudTrail을 사용하여 VPC 내에서 이루어진 API 호출을 기록하고 보안 준수를 위해 로그를 분석합니다."
        },
        "Correct Answer": "AWS Traffic Mirroring을 구현하여 EC2 인스턴스에서 모든 네트워크 트래픽을 캡처하고 보안 장치로 전송하여 Layer 7 분석을 수행합니다.",
        "Explanation": "AWS Traffic Mirroring은 회사가 모든 네트워크 트래픽을 캡처하고 분석할 수 있도록 하며, Layer 7 세부정보를 포함하여 보안 및 모니터링 장치로 전송합니다. 이 솔루션은 트래픽 패턴에 대한 포괄적인 가시성을 제공하며 규정 준수 및 보안 모니터링에 적합합니다.",
        "Other Options": [
            "VPC Flow Logs는 Layer 4 트래픽만 캡처하므로 Layer 7 분석에 필요한 상세한 통찰력을 제공하지 않습니다. S3에 게시하여 분석할 수 있지만, 회사의 요구 사항인 더 깊은 트래픽 검사를 충족하지 않습니다.",
            "AWS CloudTrail은 AWS 환경 내에서 이루어진 API 호출을 기록하도록 설계되었으며, 네트워크 트래픽 모니터링을 위한 것이 아닙니다. VPC를 통해 흐르는 패킷에 대한 필요한 정보를 제공하지 않으므로 회사의 요구에 적합하지 않습니다.",
            "Amazon CloudWatch Logs는 VPC Flow Logs를 모니터링할 수 있지만, Layer 4 트래픽만 캡처합니다. 이 접근 방식은 회사의 보안 태세에 중요한 Layer 7 트래픽 분석 요구 사항을 해결하지 않습니다."
        ]
    },
    {
        "Question Number": "21",
        "Situation": "금융 서비스 회사는 API 키, 데이터베이스 자격 증명 및 서드파티 서비스 토큰과 같은 민감한 정보를 관리하기 위해 AWS 서비스를 활용하고 있습니다. 현재 자격 증명은 애플리케이션 코드에 하드코딩되어 있어 안전하게 관리하고 회전하는 것이 어렵습니다. 회사는 이러한 비밀과 자격 증명을 안전하게 관리할 수 있는 강력한 솔루션을 찾고 있으며, 이를 통해 쉽게 회전하고 권한이 있는 애플리케이션만 접근할 수 있도록 보장하고자 합니다.",
        "Question": "비밀과 자격 증명을 안전하게 관리하기 위해 솔루션 아키텍트가 구현해야 할 옵션은 무엇입니까?",
        "Options": {
            "1": "AWS Systems Manager Parameter Store를 활용하여 비밀을 SecureString 매개변수로 저장하고 IAM 정책으로 접근을 관리합니다.",
            "2": "AWS Secrets Manager를 사용하여 비밀을 저장하고 이러한 비밀의 자동 회전을 구성합니다. IAM 역할을 사용하여 애플리케이션에 Secrets Manager에 접근할 수 있는 권한을 부여합니다.",
            "3": "Amazon S3를 사용하여 비밀을 암호화된 파일로 저장하고 버킷 정책을 사용하여 접근을 관리합니다.",
            "4": "비밀을 애플리케이션 코드 저장소에 직접 저장하고 IAM 역할을 사용하여 저장소에 대한 접근을 제어합니다."
        },
        "Correct Answer": "AWS Secrets Manager를 사용하여 비밀을 저장하고 이러한 비밀의 자동 회전을 구성합니다. IAM 역할을 사용하여 애플리케이션에 Secrets Manager에 접근할 수 있는 권한을 부여합니다.",
        "Explanation": "AWS Secrets Manager를 사용하면 비밀을 중앙에서 관리하고 자동 회전 및 IAM 정책을 통한 세분화된 접근 제어가 가능합니다. 이 접근 방식은 애플리케이션 코드에서 하드코딩된 비밀을 제거하고 민감한 정보가 권한이 있는 서비스만 접근할 수 있도록 보장하여 보안을 강화합니다.",
        "Other Options": [
            "비밀을 애플리케이션 코드 저장소에 직접 저장하는 것은 심각한 보안 위험을 초래하며, 버전 관리 시스템이나 우연한 코드 노출을 통해 민감한 정보가 노출될 가능성을 높입니다.",
            "AWS Systems Manager Parameter Store는 비밀을 안전하게 저장할 수 있지만, AWS Secrets Manager의 고급 기능인 자동 회전 및 통합 감사 기능이 부족하여 자격 증명을 관리하는 데 최적의 선택이 아닙니다.",
            "Amazon S3를 사용하여 비밀을 암호화된 파일로 저장하는 것은 민감한 정보를 관리하는 모범 사례가 아닙니다. S3는 자동 회전이나 생애 주기 관리와 같은 비밀 관리 기능을 제공하지 않으므로 AWS Secrets Manager에 비해 덜 적합합니다."
        ]
    },
    {
        "Question Number": "22",
        "Situation": "소매 회사가 데이터에 대한 불균형한 접근 패턴으로 인해 DynamoDB 테이블의 성능 문제를 겪고 있습니다. 일부 항목은 다른 항목보다 훨씬 더 많이 접근되어 핫 파티션과 스로틀링이 발생하고 있습니다. 회사는 읽기 및 쓰기 용량 활용을 최적화하면서 비용을 최소화하기 위해 데이터 구조를 재조직해야 합니다.",
        "Question": "DynamoDB 테이블의 성능을 개선하면서 읽기 및 쓰기 용량의 효율적인 분배를 보장하기 위한 가장 효과적인 전략은 무엇입니까?",
        "Options": {
            "1": "전체 테이블의 프로비저닝된 읽기 및 쓰기 용량을 증가시켜 스로틀링 없이 피크 부하를 처리합니다.",
            "2": "글로벌 보조 인덱스를 사용하여 기본 테이블에서 읽기 트래픽을 오프로드하여 서로 다른 파티션에 부하를 분산시킵니다.",
            "3": "복합 키를 구현하여 데이터가 파티션 간에 더 잘 분산되도록 하여 핫 파티션의 가능성을 줄입니다.",
            "4": "다양한 데이터 범주에 대해 여러 테이블을 생성하여 샤드 없는 파티셔닝을 통해 접근 패턴을 격리하여 핫 파티션을 방지합니다."
        },
        "Correct Answer": "복합 키를 구현하여 데이터가 파티션 간에 더 잘 분산되도록 하여 핫 파티션의 가능성을 줄입니다.",
        "Explanation": "복합 키를 사용하면 데이터가 파티션 간에 고르게 분산되어 핫 파티션 문제를 직접 해결하고 프로비저닝된 읽기 및 쓰기 용량의 사용을 최적화합니다.",
        "Other Options": [
            "전체 테이블의 프로비저닝된 용량을 증가시키는 것은 일시적으로 스로틀링을 완화할 수 있지만 불균형한 데이터 접근 패턴의 근본적인 문제를 해결하지 않으며 비용 증가로 이어질 수 있습니다.",
            "글로벌 보조 인덱스는 일부 읽기 트래픽을 오프로드하는 데 도움이 될 수 있지만, 기본 데이터 접근 패턴이 여전히 불균형하다면 핫 파티션 문제를 완전히 해결하지 못할 수 있습니다.",
            "샤드 없는 파티셔닝을 위해 여러 테이블을 생성하는 것은 데이터 관리 및 쿼리를 복잡하게 만들어 복합 키로 기존 테이블 구조를 최적화하는 것보다 비효율적일 수 있습니다."
        ]
    },
    {
        "Question Number": "23",
        "Situation": "금융 서비스 회사가 확장성을 개선하고 운영 오버헤드를 줄이기 위해 기존 애플리케이션을 AWS로 마이그레이션하고 있습니다. 회사는 마이크로서비스 아키텍처를 배포해야 하며 컨테이너 서비스를 사용하는 것을 고려하고 있습니다. 그들은 컨테이너화된 애플리케이션이 자동으로 확장될 수 있도록 하고 기본 인프라 관리가 최소화되기를 원합니다.",
        "Question": "기본 인프라 관리가 최소화된 상태에서 컨테이너화된 애플리케이션을 배포하고 관리하기 위해 회사의 요구 사항을 가장 잘 충족하는 AWS 서비스 조합은 무엇입니까?",
        "Options": {
            "1": "Amazon ECR에 컨테이너를 배포하고 AWS Lambda로 관리하여 서버리스 실행 및 자동 확장을 구현합니다.",
            "2": "컨테이너 실행을 위해 Amazon ECS와 Fargate를 설정하고 데이터베이스 관리를 위해 Amazon RDS를 사용합니다.",
            "3": "컨테이너 오케스트레이션을 위해 Amazon ECS와 EC2 런치 유형을 활용하고 EC2 인스턴스를 수동으로 관리하여 확장합니다.",
            "4": "오케스트레이션을 위해 Amazon EKS를 사용하고 기본 EC2 인스턴스를 관리하지 않고 AWS Fargate로 컨테이너를 실행합니다."
        },
        "Correct Answer": "오케스트레이션을 위해 Amazon EKS를 사용하고 기본 EC2 인스턴스를 관리하지 않고 AWS Fargate로 컨테이너를 실행합니다.",
        "Explanation": "Amazon EKS를 오케스트레이션에 사용하고 AWS Fargate와 결합하면 금융 서비스 회사가 기본 EC2 인스턴스를 관리하지 않고도 컨테이너화된 애플리케이션을 배포할 수 있습니다. 이 설정은 마이크로서비스 아키텍처에 필요한 확장성과 운영 효율성을 제공합니다.",
        "Other Options": [
            "Amazon ECS와 EC2 런치 유형을 활용하면 EC2 인스턴스를 관리해야 하므로 인프라 관리 최소화 요구 사항에 위배됩니다.",
            "Amazon ECR에 컨테이너를 배포하고 AWS Lambda로 관리하는 것은 Lambda가 단기 이벤트 기반 함수에 맞춰 설계되었기 때문에 장기 실행 컨테이너화된 애플리케이션에는 적합하지 않습니다.",
            "컨테이너 실행을 위해 Amazon ECS와 Fargate를 설정하고 Amazon RDS를 데이터베이스 관리에 사용하는 것은 Amazon EKS만큼 효과적으로 오케스트레이션 기능을 제공하지 않으며, 복잡한 마이크로서비스 아키텍처에 더 적합합니다."
        ]
    },
    {
        "Question Number": "24",
        "Situation": "금융 서비스 회사가 초당 수백만 건의 트랜잭션을 처리해야 하는 실시간 처리 시스템을 구축하고 있으며, 최소한의 지연 시간으로 메시지가 손실되지 않고 순서대로 처리되도록 해야 합니다. 회사는 메시지를 버퍼링하고 비동기적으로 애플리케이션 구성 요소가 통신할 수 있도록 하는 메시징 솔루션을 통합하고자 합니다.",
        "Question": "고속 처리, 메시지 내구성 및 순서 있는 메시지 처리를 위한 요구 사항을 충족하기 위해 회사가 구현해야 할 AWS 서비스는 무엇입니까?",
        "Options": {
            "1": "메시지 필터링이 있는 Amazon SNS",
            "2": "FIFO 큐가 있는 Amazon SQS",
            "3": "병렬 워크플로가 있는 AWS Step Functions",
            "4": "사용자 정의 이벤트가 있는 Amazon EventBridge"
        },
        "Correct Answer": "FIFO 큐가 있는 Amazon SQS",
        "Explanation": "FIFO 큐가 있는 Amazon SQS는 고속 처리 및 순서 있는 메시지 처리를 허용하도록 설계되어 있으며, 메시지가 손실되지 않도록 보장합니다. FIFO 큐는 정확히 한 번 처리 및 메시지 순서를 유지하여 이 사용 사례에 이상적입니다.",
        "Other Options": [
            "메시지 필터링이 있는 Amazon SNS는 주로 퍼블리시/구독 메시징 서비스로 메시지 순서를 보장하지 않으며 SQS와 같은 방식으로 메시지 내구성을 제공하지 않습니다.",
            "사용자 정의 이벤트가 있는 Amazon EventBridge는 이벤트 기반 아키텍처에 적합하지만 SQS FIFO 큐가 제공하는 메시지 내구성과 순서 수준을 동일하게 제공하지 않습니다.",
            "병렬 워크플로가 있는 AWS Step Functions는 마이크로서비스 오케스트레이션에 사용되지만 메시징 서비스가 아니며 필요한 내구성과 순서 처리 기능을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "25",
        "Situation": "한 금융 서비스 회사는 AWS에 호스팅된 웹 애플리케이션의 높은 가용성을 보장해야 합니다. 이 애플리케이션은 데이터베이스에 대한 낮은 지연 시간 접근이 필요하며 지역 장애에 대한 복원력이 있어야 합니다. 솔루션 아키텍트는 최적의 성능과 신뢰성을 위해 AWS 관리 서비스를 활용하는 솔루션을 설계하는 임무를 맡고 있습니다.",
        "Question": "어떤 아키텍처가 회사의 높은 가용성과 낮은 지연 시간 요구 사항을 가장 잘 충족할까요?",
        "Options": {
            "1": "AWS Lambda를 사용하여 애플리케이션을 구현하고 정적 콘텐츠를 위해 Amazon S3를 사용하며, 여러 리전에서 Amazon Aurora Serverless 데이터베이스를 사용합니다.",
            "2": "단일 가용 영역에서 Fargate 시작 유형으로 Amazon ECS 클러스터를 생성하고 데이터 저장을 위해 Amazon DynamoDB를 사용합니다.",
            "3": "AWS Elastic Beanstalk를 사용하여 여러 가용 영역에 걸쳐 애플리케이션을 배포하고, 데이터베이스를 위해 Multi-AZ 구성의 Amazon RDS를 사용합니다.",
            "4": "단일 가용 영역의 Amazon EC2 인스턴스에 애플리케이션을 배포하고 데이터베이스를 위해 Amazon RDS Multi-AZ 배포를 사용합니다."
        },
        "Correct Answer": "AWS Elastic Beanstalk를 사용하여 여러 가용 영역에 걸쳐 애플리케이션을 배포하고, 데이터베이스를 위해 Multi-AZ 구성의 Amazon RDS를 사용합니다.",
        "Explanation": "여러 가용 영역에 걸쳐 배포된 AWS Elastic Beanstalk를 사용하면 애플리케이션이 하나의 영역의 장애를 견딜 수 있으며, 자동 로드 밸런싱 및 스케일링을 통해 낮은 지연 시간 접근을 제공합니다. Multi-AZ 설정의 Amazon RDS와 결합하면 이 아키텍처는 데이터베이스에 대한 높은 가용성도 제공합니다.",
        "Other Options": [
            "단일 가용 영역에 애플리케이션을 배포하면 해당 영역이 실패할 경우 잠재적인 다운타임이 발생할 수 있으며, 이는 높은 가용성 요구 사항을 충족하지 못합니다.",
            "단일 가용 영역에서 Amazon ECS를 사용하면 영역 장애 발생 시 애플리케이션의 가용성을 유지하는 능력이 제한되며, DynamoDB는 높은 가용성을 제공하지만 애플리케이션에 필요한 관계형 데이터베이스 기능을 제공하지 않을 수 있습니다.",
            "AWS Lambda와 Amazon S3를 사용하여 애플리케이션을 구현하는 것은 서버리스 아키텍처에 적합하지만 데이터베이스 접근에 지연 문제를 일으킬 수 있으며, 단일 리전에 의존하면 리전에서 문제가 발생할 경우 가용성이 저하될 수 있습니다."
        ]
    },
    {
        "Question Number": "26",
        "Situation": "한 스타트업 회사가 AWS에서 매일 대량의 데이터를 처리할 기계 학습 애플리케이션을 배포하고 있습니다. 이 애플리케이션은 모델 훈련 및 추론을 위해 Amazon SageMaker를 활용할 것입니다. 회사는 사용자 수요의 증가로 인해 애플리케이션을 빠르게 확장할 것으로 예상하고 있습니다. 팀은 AWS 서비스 한도에 도달할 수 있는 것에 대해 우려하고 있으며, 이는 성능과 가용성에 영향을 미칠 수 있습니다.",
        "Question": "이 시나리오에서 서비스 쿼터와 한도를 관리하여 애플리케이션이 확장할 때 성능을 유지하기 위한 최선의 접근 방식은 무엇인가요?",
        "Options": {
            "1": "AWS CloudTrail을 사용하여 서비스 한도를 정기적으로 모니터링하고 필요에 따라 AWS Support Center를 통해 한도 증가를 요청합니다.",
            "2": "쿼트를 모니터링할 필요 없이 리소스를 자동으로 확장하는 AWS 서비스를 활용하여 서비스 한도에 도달하지 않도록 합니다.",
            "3": "서비스 한도에 접근할 때 팀에 알리기 위해 CloudWatch 알람을 설정하여 한도에 도달할 때 조정할 수 있도록 합니다.",
            "4": "현재 한도에 도달하기 전에 예상 사용량에 따라 한도 증가를 요청하는 일정을 수립하여 사전 대응 전략을 수립합니다."
        },
        "Correct Answer": "현재 한도에 도달하기 전에 예상 사용량에 따라 한도 증가를 요청하는 일정을 수립하여 사전 대응 전략을 수립합니다.",
        "Explanation": "이 접근 방식은 회사가 성장을 예측하고 서비스 한도를 사전 관리하여 수요 증가에 따라 서비스 중단이 없도록 합니다. 미리 계획함으로써 회사는 적시에 한도 증가 요청을 제출하여 애플리케이션의 성능과 가용성을 유지할 수 있습니다.",
        "Other Options": [
            "AWS CloudTrail을 사용하여 서비스 한도를 모니터링하는 것은 중요하지만, 사전 관리 없이 이를 의존하면 한도에 도달했을 때 예상치 못한 서비스 중단이 발생할 수 있습니다.",
            "어떤 AWS 서비스도 한도 없이 리소스를 자동으로 확장할 수 없으며, 모든 서비스는 모니터링 및 관리가 필요한 미리 정의된 쿼트를 가지고 있습니다. 그렇지 않다고 가정하면 과도한 사용과 서비스 실패로 이어질 수 있습니다.",
            "CloudWatch 알람을 설정하면 한도에 도달했을 때 알림을 제공할 수 있지만, 이는 반응적인 접근 방식입니다. 한도를 초과할 때 문제가 발생하는 것을 방지하지 않으며, 이는 애플리케이션 성능에 영향을 미칠 수 있습니다."
        ]
    },
    {
        "Question Number": "27",
        "Situation": "한 조직이 Amazon ECS와 Fargate를 사용하여 마이크로서비스 아키텍처를 배포하고 있습니다. 각 마이크로서비스는 Amazon ECR에서 이미지를 가져오고 AWS Secrets Manager에 저장된 비밀을 읽는 등 다양한 AWS 리소스에 접근해야 합니다. DevOps 팀은 ECS 작업이 기본 EC2 인스턴스에 과도한 권한을 부여하지 않고 적절한 권한을 갖도록 해야 합니다. 팀은 이를 위해 작업 실행 역할의 구현을 고려하고 있습니다.",
        "Question": "ECS 작업 실행을 위한 모범 사례를 보장하기 위해 솔루션 아키텍트가 구현해야 할 구성은 무엇인가요? (두 개 선택)",
        "Options": {
            "1": "Fargate 작업에 작업 실행 역할을 연결하여 Amazon ECR에서 이미지를 가져올 수 있도록 합니다.",
            "2": "다른 마이크로서비스에 대해 별도의 작업 실행 역할을 정의하여 권한 범위를 제한합니다.",
            "3": "Secrets Manager에 접근하기 위해 ECS 작업에 권한을 부여하기 위해 EC2 인스턴스 프로필을 사용합니다.",
            "4": "모든 서비스에 필요한 모든 AWS 리소스에 접근할 수 있는 단일 작업 실행 역할을 생성합니다.",
            "5": "ECS 작업이 CloudWatch Logs 대신 Amazon S3에 직접 로그를 기록할 수 있도록 허용합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Fargate 작업에 작업 실행 역할을 연결하여 Amazon ECR에서 이미지를 가져올 수 있도록 합니다.",
            "다른 마이크로서비스에 대해 별도의 작업 실행 역할을 정의하여 권한 범위를 제한합니다."
        ],
        "Explanation": "Fargate 작업에 작업 실행 역할을 연결하면 Amazon ECR에서 컨테이너 이미지를 가져오는 등의 특정 작업을 수행할 수 있으며 최소 권한 원칙을 준수합니다. 서로 다른 마이크로서비스에 대해 별도의 역할을 정의하면 각 서비스가 필요한 권한에만 접근할 수 있도록 하여 보안 및 규정 준수를 더욱 강화합니다.",
        "Other Options": [
            "광범위한 권한을 가진 단일 작업 실행 역할을 생성하는 것은 최소 권한 원칙을 위반하며, 불필요한 리소스가 잠재적인 오용에 노출될 수 있습니다.",
            "ECS 작업에 EC2 인스턴스 프로필을 사용하는 것은 작업 실행 역할의 이점을 저해하며, 이는 작업 자체가 아닌 EC2 인스턴스에 권한을 부여하여 과도한 권한을 초래합니다.",
            "CloudWatch Logs 대신 Amazon S3에 직접 로그를 기록하는 것은 권장되지 않는 관행으로, 로그 관리 및 모니터링을 복잡하게 하며, CloudWatch Logs를 사용하면 이러한 작업이 간소화됩니다."
        ]
    },
    {
        "Question Number": "28",
        "Situation": "금융 서비스 회사는 보안 정책 준수를 보장하고 소프트웨어 업데이트를 자동화하면서 여러 환경(개발, 테스트, 운영)에서 EC2 인스턴스의 플릿을 관리해야 합니다. 이 회사는 인스턴스의 상태를 파악하고 원하는 상태에서 벗어난 경우 자동으로 수정할 수 있는 중앙 집중식 구성 관리 솔루션이 필요합니다.",
        "Question": "솔루션 아키텍트가 회사의 요구 사항을 충족하기 위해 어떤 구성 관리 도구를 추천해야 합니까?",
        "Options": {
            "1": "AWS Systems Manager를 사용하여 패치 배포를 자동화하고 모든 환경에서 EC2 인스턴스의 상태를 관리하여 준수 및 보안을 보장합니다.",
            "2": "구성 관리를 위해 Ansible을 구현하되, EC2 인스턴스에서 배포 및 관리하여 환경 전반에 걸쳐 준수 및 소프트웨어 업데이트를 처리합니다.",
            "3": "Chef를 자가 관리 서버 설정에서 활용하여 EC2 인스턴스의 구성을 자동화하고 모든 환경에서 가시성과 준수를 제공합니다.",
            "4": "구성 관리를 위해 Puppet을 채택하되, 보안 준수를 보장하기 위해 운영 환경에만 사용을 제한합니다."
        },
        "Correct Answer": "AWS Systems Manager를 사용하여 패치 배포를 자동화하고 모든 환경에서 EC2 인스턴스의 상태를 관리하여 준수 및 보안을 보장합니다.",
        "Explanation": "AWS Systems Manager는 AWS에서 인프라의 가시성과 제어를 제공하는 완전 관리형 서비스입니다. 다양한 환경에서 패치 관리 및 준수 점검과 같은 작업을 자동화할 수 있어 EC2 인스턴스를 중앙 집중식으로 관리하는 데 이상적입니다.",
        "Other Options": [
            "Ansible은 관리 서버 설정이 필요하여 복잡성을 추가하고 Systems Manager만큼 AWS 서비스와의 통합 수준을 제공하지 않습니다.",
            "자가 관리 서버 설정에서 Chef를 사용하는 것은 Chef 서버 관리에 추가적인 오버헤드를 도입하며, 준수 및 자동화를 위한 AWS의 기본 기능을 활용하지 않습니다.",
            "Puppet은 유능한 구성 관리 도구이지만, 운영 환경에만 사용을 제한하는 것은 모든 환경을 일관되게 관리하는 요구 사항을 충족하지 않습니다."
        ]
    },
    {
        "Question Number": "29",
        "Situation": "금융 서비스 회사가 분석 워크로드를 AWS로 마이그레이션하고 있습니다. 이 워크로드는 SQL 데이터베이스 및 JSON 파일을 포함한 다양한 출처에서 대량의 구조화된 및 반구조화된 데이터를 처리하는 것을 포함합니다. 회사는 높은 처리량, 낮은 대기 시간 및 SQL 유사 구문을 사용하여 데이터를 쉽게 쿼리할 수 있는 솔루션이 필요합니다. 또한, 솔루션은 가용성이 높고 확장 가능하여 복잡한 관리 오버헤드 없이 변동하는 워크로드를 수용해야 합니다.",
        "Question": "다음 중 회사의 분석 워크로드 요구 사항을 가장 잘 충족하는 스토리지 서비스는 무엇입니까?",
        "Options": {
            "1": "Amazon ElastiCache for Redis를 활용하여 메모리에 데이터를 캐시하고 분석 애플리케이션에 낮은 대기 시간으로 제공합니다.",
            "2": "Amazon Redshift를 데이터 웨어하우징 솔루션으로 배포하여 다양한 출처에서 데이터를 수집하고 복잡한 쿼리 및 분석을 수행합니다.",
            "3": "Amazon RDS와 읽기 복제본을 구현하여 분석 쿼리를 처리하고 데이터를 관계형 형식으로 저장합니다.",
            "4": "Amazon S3를 사용하여 데이터를 저장하고 Amazon Athena를 사용하여 S3에서 직접 SQL을 사용하여 데이터를 쿼리합니다."
        },
        "Correct Answer": "Amazon S3를 사용하여 데이터를 저장하고 Amazon Athena를 사용하여 S3에서 직접 SQL을 사용하여 데이터를 쿼리합니다.",
        "Explanation": "Amazon S3와 Amazon Athena를 함께 사용하면 회사는 대량의 구조화된 및 반구조화된 데이터를 효율적으로 저장하고 인프라를 프로비저닝하거나 관리할 필요 없이 쿼리할 수 있습니다. Athena의 SQL 유사 쿼리 기능은 사용의 용이성 요구 사항을 충족하며, S3는 높은 내구성과 가용성을 제공합니다.",
        "Other Options": [
            "Amazon RDS와 읽기 복제본을 구현하면 일부 확장성을 제공할 수 있지만, 대량의 반구조화된 데이터를 처리하는 데 이상적이지 않으며 데이터베이스 인스턴스와 관련된 관리 오버헤드를 도입할 수 있습니다.",
            "Amazon ElastiCache for Redis는 캐싱을 위해 설계되었으며, 대량의 데이터 세트를 저장하는 데 적합하지 않습니다. 이는 주로 낮은 대기 시간의 데이터 검색을 위해 사용됩니다.",
            "Amazon Redshift를 배포하는 것은 데이터 웨어하우징에 좋은 옵션이지만, 데이터 웨어하우스를 프로비저닝하고 관리해야 하므로 S3와 Athena를 사용하여 변동하는 워크로드를 처리하는 것만큼 유연하거나 비용 효율적이지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "30",
        "Situation": "스타트업이 다양한 출처에서 대량의 스트리밍 데이터를 처리하는 실시간 분석 애플리케이션을 개발하고 있습니다. 이 애플리케이션은 낮은 대기 시간과 높은 처리량을 보장해야 하며, 데이터 양이 증가함에 따라 확장할 수 있는 능력을 유지해야 합니다. 스타트업은 최적의 성능을 위해 AWS 서비스를 고려하고 있습니다.",
        "Question": "스타트업이 스트리밍 분석 애플리케이션의 최상의 성능을 달성하기 위해 어떤 AWS 서비스 아키텍처를 구현해야 합니까?",
        "Options": {
            "1": "Amazon Kinesis Data Firehose를 사용하여 데이터 수집을 수행하고, Amazon EC2 인스턴스를 사용하여 처리하며, Amazon RDS를 사용하여 결과를 저장합니다.",
            "2": "Amazon Kinesis Data Streams를 사용하여 데이터 수집을 수행하고, AWS Glue를 사용하여 ETL 처리를 하며, Amazon Redshift를 사용하여 분석 쿼리를 수행합니다.",
            "3": "Amazon Kinesis Data Analytics를 사용하여 실시간 처리를 수행하고, Amazon SQS를 사용하여 버퍼링하며, Amazon DynamoDB를 사용하여 데이터를 저장합니다.",
            "4": "Amazon Kinesis Data Streams를 사용하여 데이터 수집을 수행하고, AWS Lambda를 사용하여 처리하며, Amazon S3를 사용하여 처리된 데이터를 저장합니다."
        },
        "Correct Answer": "Amazon Kinesis Data Streams를 사용하여 데이터 수집을 수행하고, AWS Glue를 사용하여 ETL 처리를 하며, Amazon Redshift를 사용하여 분석 쿼리를 수행합니다.",
        "Explanation": "이 옵션은 낮은 대기 시간으로 실시간 스트리밍 데이터를 처리하기 위한 강력한 아키텍처를 제공합니다. Kinesis Data Streams는 높은 처리량의 데이터 수집을 가능하게 하며, AWS Glue는 데이터를 변환하는 효율적인 ETL 기능을 제공합니다. Amazon Redshift는 처리된 데이터에 대한 복잡한 분석 쿼리를 대규모로 처리할 수 있어 분석 워크로드에 최적의 성능을 보장합니다.",
        "Other Options": [
            "이 옵션은 AWS Lambda를 사용하여 처리를 수행할 경우 콜드 스타트 문제와 실행 시간 제한으로 인해 실시간 데이터 처리에 지연 문제가 발생할 수 있어 높은 처리량 시나리오에 덜 적합합니다.",
            "이 옵션은 데이터 수집 및 처리를 허용하지만, Amazon EC2를 사용하여 처리를 수행하는 것은 관리형 스트리밍 서비스만큼의 확장성과 사용 용이성을 제공하지 않아 높은 부하에서 성능 병목 현상을 초래할 수 있습니다.",
            "이 옵션은 Amazon SQS를 버퍼링에 사용하는 것이 실시간 데이터 처리에 적합하지 않으며 지연을 초래할 수 있기 때문에 잘못된 것입니다. Kinesis Data Analytics는 분석 애플리케이션의 실시간 요구 사항에 더 적합합니다."
        ]
    },
    {
        "Question Number": "31",
        "Situation": "한 헬스케어 스타트업이 모델 훈련을 위해 상당한 계산 능력을 요구하는 머신 러닝 애플리케이션을 호스팅하려고 합니다. 이 애플리케이션은 작업 부하에 따라 동적으로 확장될 것으로 예상되며, 팀은 자원 할당 관리를 유연하게 유지하면서 운영 오버헤드를 최소화하고자 합니다. 이들은 이러한 요구를 충족하기 위해 다양한 AWS 컴퓨팅 서비스를 고려하고 있습니다.",
        "Question": "확장성과 최소한의 관리 오버헤드가 모두 필요한 스타트업의 머신 러닝 애플리케이션에 가장 적합한 AWS 서비스는 무엇입니까?",
        "Options": {
            "1": "서버리스 아키텍처에서 머신 러닝 추론을 실행하기 위한 AWS Lambda.",
            "2": "머신 러닝 애플리케이션을 실행하기 위한 가상 사설 서버를 배포하기 위한 Amazon Lightsail.",
            "3": "서버 관리 없이 컨테이너화된 머신 러닝 작업을 실행하기 위한 Amazon ECS와 Fargate.",
            "4": "수요에 따라 인스턴스 확장을 관리하기 위한 Auto Scaling 그룹을 갖춘 Amazon EC2."
        },
        "Correct Answer": "서버 관리 없이 컨테이너화된 머신 러닝 작업을 실행하기 위한 Amazon ECS와 Fargate.",
        "Explanation": "Amazon ECS와 Fargate는 스타트업이 기본 가상 머신을 관리할 필요 없이 컨테이너화된 애플리케이션을 실행할 수 있게 하여 머신 러닝 작업에 필요한 운영의 단순성과 확장성을 제공합니다. Fargate는 컴퓨팅 자원을 자동으로 프로비저닝하고 확장하므로 머신 러닝 애플리케이션에서 일반적으로 발생하는 변동하는 작업 부하에 이상적입니다.",
        "Other Options": [
            "Amazon EC2와 Auto Scaling 그룹은 EC2 인스턴스를 구성하고 유지 관리하는 데 더 많은 관리 노력이 필요하므로 Fargate와 같은 완전 관리형 서비스에 비해 운영 오버헤드가 증가할 수 있습니다.",
            "AWS Lambda는 단기 작업을 실행하는 데 적합하지만, 장기 머신 러닝 훈련 프로세스에는 일관된 컴퓨팅 자원이 더 많이 필요하므로 이상적이지 않을 수 있습니다.",
            "Amazon Lightsail은 더 간단한 웹 애플리케이션과 작업을 위해 설계되었으며, ECS와 Fargate에 비해 복잡한 머신 러닝 애플리케이션에 필요한 동일한 수준의 확장성과 유연성을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "32",
        "Situation": "한 금융 서비스 회사가 변동하는 작업 부하를 경험할 것으로 예상되는 새로운 애플리케이션을 배포할 계획입니다. 이 애플리케이션은 갑작스러운 급증과 지속적인 트래픽 증가를 처리할 수 있도록 효율적으로 확장되도록 설계되어야 합니다. 솔루션 아키텍트는 이러한 요구를 충족하면서 비용과 성능을 최적화하기 위한 애플리케이션 확장 옵션을 평가하고 있습니다. 아키텍트는 애플리케이션 아키텍처에 대해 수직 확장(스케일 업)과 수평 확장(스케일 아웃) 전략 중에서 선택해야 합니다.",
        "Question": "솔루션 아키텍트가 변동하는 작업 부하를 가장 효과적으로 처리할 수 있도록 애플리케이션에 권장해야 할 전략은 무엇입니까?",
        "Options": {
            "1": "여러 인스턴스에 부하를 분산시켜 수평 확장 접근 방식으로 애플리케이션을 설계하여 수요에 따라 인스턴스를 추가하거나 제거할 수 있도록 합니다.",
            "2": "요청량에 따라 자동으로 확장되는 서버리스 아키텍처를 선택하여 인스턴스 크기나 수를 관리할 필요를 없앱니다.",
            "3": "애플리케이션 서버에 더 큰 인스턴스를 사용하여 수직 확장 전략을 구현하여 피크 부하를 수용할 수 있도록 CPU와 메모리 자원을 높입니다.",
            "4": "수직 및 수평 확장을 결합한 하이브리드 접근 방식을 활용하여 필요에 따라 인스턴스를 크기 조정하고 여러 인스턴스를 추가할 수 있도록 합니다."
        },
        "Correct Answer": "여러 인스턴스에 부하를 분산시켜 수평 확장 접근 방식으로 애플리케이션을 설계하여 수요에 따라 인스턴스를 추가하거나 제거할 수 있도록 합니다.",
        "Explanation": "수평 확장 접근 방식으로 애플리케이션을 설계하면 여러 인스턴스에 트래픽을 분산시켜 변동하는 작업 부하를 효과적으로 처리할 수 있습니다. 이 방법은 단일 인스턴스의 크기를 단순히 늘리는 것보다 갑작스러운 부하 급증을 더 동적으로 그리고 비용 효율적으로 수용할 수 있습니다.",
        "Other Options": [
            "수직 확장 전략을 구현하면 애플리케이션의 유연성이 제한될 수 있으며, 피크 부하를 수용하기 위해 단일 인스턴스를 사용할 경우 비용이 더 높아질 수 있습니다. 이는 낮은 트래픽 기간 동안에는 필요하지 않을 수 있습니다.",
            "하이브리드 접근 방식을 활용하면 관리의 복잡성이 증가할 수 있으며, 변동하는 작업 부하 요구 사항에 대해 가장 효과적인 확장 방법을 최적화하지 않을 수 있습니다.",
            "서버리스 아키텍처를 선택하는 것은 유익할 수 있지만, 특정 인스턴스 구성이나 완전히 관리되지 않는 상태 저장 서비스가 필요한 모든 애플리케이션 유형에 항상 적합하지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "33",
        "Situation": "한 글로벌 전자상거래 플랫폼이 고객의 대기 시간과 가용성을 개선하기 위해 여러 지역으로 서비스를 확장할 계획입니다. 이들은 북미, 유럽 및 아시아에 위치한 사용자들의 잠재적인 대기 시간 문제를 고려하면서 최적의 네트워크 성능을 보장할 AWS 리전과 가용 영역을 선택하기 위한 최선의 전략을 결정해야 합니다. 현재 플랫폼은 단일 AWS 리전에서 운영되고 있습니다.",
        "Question": "전자상거래 플랫폼의 확장을 위해 AWS 리전과 가용 영역을 선택하여 대기 시간을 최소화하고 네트워크 성능을 최적화하기 위한 최선의 접근 방식은 무엇입니까?",
        "Options": {
            "1": "단일 AWS 리전을 선택하고 해당 리전 내의 모든 가용 영역에 리소스를 배포하여 최대 중복성을 보장합니다.",
            "2": "회사의 본사에 가장 가까운 AWS 리전을 선택하고 그 가용 영역에 리소스를 복제합니다.",
            "3": "북미, 유럽 및 아시아의 고객과 지리적으로 가까운 여러 AWS 리전에 리소스를 배포합니다.",
            "4": "사용자 위치에 따라 가장 가까운 AWS 리전으로 트래픽을 라우팅하기 위해 AWS Global Accelerator를 활용합니다."
        },
        "Correct Answer": "북미, 유럽 및 아시아의 고객과 지리적으로 가까운 여러 AWS 리전에 리소스를 배포합니다.",
        "Explanation": "고객과 지리적으로 가까운 여러 AWS 리전에 리소스를 배포함으로써 전자상거래 플랫폼은 대기 시간을 크게 줄이고 네트워크 성능을 개선할 수 있습니다. 이 전략은 다양한 지리적 위치에 있는 사용자에게 적합한 분산 아키텍처를 가능하게 하여 더 나은 사용자 경험을 보장합니다.",
        "Other Options": [
            "단일 AWS 리전을 선택하고 모든 가용 영역에 리소스를 배포하는 것은 중복성을 제공하지만, 해당 리전에서 멀리 떨어진 사용자에 대한 대기 시간 문제를 해결하지 못합니다. 이는 세계의 다른 지역에 있는 사용자에게 최적의 성능을 제공하지 못할 수 있습니다.",
            "회사의 본사에 가장 가까운 AWS 리전을 선택하는 것은 다른 지역에 위치한 고객을 효과적으로 서비스하지 못할 수 있으며, 이로 인해 해당 사용자에 대한 대기 시간이 증가할 수 있습니다. 본사와의 근접성보다는 지리적 분포를 고려하는 것이 중요합니다.",
            "AWS Global Accelerator를 사용하면 트래픽을 라우팅하여 애플리케이션의 가용성과 성능을 향상시킬 수 있지만, 대기 시간 문제를 직접 해결하기 위해 여러 리전에 리소스를 배포해야 하는 기본적인 필요성을 해결하지는 못합니다. Global Accelerator에만 의존하는 것은 지리적 분포에 대한 최적의 솔루션을 제공하지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "34",
        "Situation": "한 회사가 다양한 지리적 위치에서 Amazon S3로 대량의 데이터를 마이그레이션할 계획입니다. 그들은 데이터 전송이 효율적이고 S3 버킷 지역에서 멀리 떨어진 클라이언트의 업로드 시간을 최소화하도록 보장하고 싶어합니다. 어떤 AWS 서비스가 이 데이터 전송 프로세스를 최적화하는 데 도움을 줄 수 있을까요?",
        "Question": "솔루션 아키텍트가 장거리에서 더 빠른 데이터 업로드를 촉진하기 위해 활성화해야 할 Amazon S3의 기능은 무엇인가요?",
        "Options": {
            "1": "모든 객체에 대해 Amazon S3 표준 스토리지 클래스를 사용하여 가용성을 개선합니다.",
            "2": "데이터 보존 및 전환 관리를 위한 Amazon S3 라이프사이클 정책을 사용합니다.",
            "3": "모든 데이터 업로드가 보존되고 복구 가능하도록 Amazon S3 버전 관리를 사용합니다.",
            "4": "최적화된 전송을 위해 CloudFront 엣지 위치를 활용하는 Amazon S3 전송 가속을 사용합니다."
        },
        "Correct Answer": "최적화된 전송을 위해 CloudFront 엣지 위치를 활용하는 Amazon S3 전송 가속을 사용합니다.",
        "Explanation": "Amazon S3 전송 가속은 Amazon CloudFront 엣지 네트워크를 사용하여 먼 거리에서 S3로의 데이터 업로드 속도를 높입니다. 이 기능은 네트워크 경로를 최적화하여 지연 시간을 줄이고 전송 속도를 크게 개선합니다.",
        "Other Options": [
            "Amazon S3 표준 스토리지 클래스는 가용성을 향상시키지만 장거리 데이터 전송 속도에는 영향을 미치지 않습니다.",
            "Amazon S3 버전 관리는 데이터 복구 및 관리에 유용하지만 데이터 업로드 속도를 개선하지는 않습니다.",
            "Amazon S3 라이프사이클 정책은 데이터 보존 및 스토리지 클래스 간 전환을 관리하지만 데이터 전송 속도에는 영향을 미치지 않습니다."
        ]
    },
    {
        "Question Number": "35",
        "Situation": "한 금융 서비스 회사가 AWS에서 인프라의 배포를 자동화하려고 합니다. 팀은 인프라가 일관되게 프로비저닝되고 관리되며, 템플릿을 버전 관리하고 재사용할 수 있는 능력을 보장하고 싶어합니다. 그들은 이 목표를 달성하기 위해 AWS CloudFormation을 사용하는 것을 고려하고 있습니다.",
        "Question": "인프라 배포를 자동화하면서 유지 관리 가능하고 반복 가능한 최상의 솔루션을 제공하는 접근 방식은 무엇인가요?",
        "Options": {
            "1": "AWS CloudFormation을 구현하여 EC2 인스턴스, VPC 구성 및 보안 그룹을 포함한 전체 인프라를 JSON 또는 YAML 형식으로 코드로 정의합니다. CloudFormation Designer를 사용하여 템플릿을 시각화하고 관리합니다.",
            "2": "AWS Elastic Beanstalk를 사용하여 애플리케이션 환경을 관리하고 CloudFormation은 데이터베이스 및 네트워크 구성 요소 설정에만 의존합니다. CloudFormation 템플릿에 대한 버전 관리를 피합니다.",
            "3": "인프라의 다양한 구성 요소를 관리하기 위해 중첩 스택을 포함하는 AWS CloudFormation 템플릿 세트를 생성합니다. AWS CodePipeline을 사용하여 템플릿을 배포하여 버전 관리 및 자동 업데이트를 보장합니다.",
            "4": "각 환경에 대해 AWS Management Console을 사용하여 인프라를 수동으로 프로비저닝하고 설정을 내부 위키에 문서화합니다. 애플리케이션 코드의 배포만 자동화하기 위해 스크립트를 사용합니다."
        },
        "Correct Answer": "인프라의 다양한 구성 요소를 관리하기 위해 중첩 스택을 포함하는 AWS CloudFormation 템플릿 세트를 생성합니다. AWS CodePipeline을 사용하여 템플릿을 배포하여 버전 관리 및 자동 업데이트를 보장합니다.",
        "Explanation": "중첩 스택을 포함하는 AWS CloudFormation 템플릿 세트를 생성함으로써 회사는 인프라를 관리 가능한 구성 요소로 분해할 수 있어 유지 관리 및 업데이트가 더 쉬워집니다. AWS CodePipeline을 통합하면 배포가 자동화되고 일관되며 버전 관리가 이루어져 인프라를 코드로 관리하는 모범 사례에 부합합니다.",
        "Other Options": [
            "이 옵션은 수동 프로비저닝에 의존하므로 불일치 및 인적 오류의 위험이 있습니다. 인프라를 코드로 관리하기 위해 CloudFormation의 전체 기능을 활용하지 않습니다.",
            "Elastic Beanstalk는 애플리케이션 관리를 단순화하지만 특정 구성 요소에 대해서만 CloudFormation에 의존하는 것은 인프라를 코드로 사용할 때의 이점을 저해합니다. 또한 버전 관리를 사용하지 않으면 시간이 지남에 따라 변경 사항 관리에 어려움이 발생할 수 있습니다.",
            "중첩 스택을 사용하는 것은 유익하지만 CodePipeline을 생략하면 배포 프로세스에 자동화 및 버전 관리가 부족하여 환경 간 일관된 인프라를 유지하는 데 중요합니다."
        ]
    },
    {
        "Question Number": "36",
        "Situation": "한 회사가 레거시 애플리케이션을 AWS로 마이그레이션하고 있으며, 애플리케이션이 수동 개입 없이 수요에 따라 확장될 수 있도록 보장해야 합니다. 애플리케이션은 주로 웹 기반이며 배포를 위한 신뢰할 수 있는 환경이 필요합니다. 솔루션 아키텍트는 자동으로 확장, 로드 밸런싱 및 애플리케이션 상태 모니터링을 처리할 수 있는 서비스를 선택해야 합니다.",
        "Question": "솔루션 아키텍트가 회사의 애플리케이션 배포 요구 사항을 충족하기 위해 추천해야 할 AWS 서비스는 무엇인가요?",
        "Options": {
            "1": "AWS Lambda 함수를 Amazon API Gateway와 함께 사용하여 웹 애플리케이션을 서버리스로 실행하고 수요에 따라 자동으로 확장합니다.",
            "2": "Amazon ECS와 Fargate를 구현하여 애플리케이션을 위한 Docker 컨테이너를 실행하고 확장 및 로드 밸런싱을 관리합니다.",
            "3": "Amazon EC2 Auto Scaling 그룹과 Elastic Load Balancing을 사용하여 웹 애플리케이션의 확장 및 로드 밸런싱을 관리합니다.",
            "4": "AWS Elastic Beanstalk에 애플리케이션을 배포하여 자동으로 확장, 로드 밸런싱 및 상태 모니터링을 처리합니다."
        },
        "Correct Answer": "AWS Elastic Beanstalk에 애플리케이션을 배포하여 자동으로 확장, 로드 밸런싱 및 상태 모니터링을 처리합니다.",
        "Explanation": "AWS Elastic Beanstalk는 광범위한 인프라 관리 없이 웹 애플리케이션의 배포 및 관리를 용이하게 하도록 설계되었습니다. 필요한 리소스를 자동으로 프로비저닝하고 수요에 따라 확장을 처리하며, 내장된 로드 밸런싱 및 상태 모니터링 기능을 포함하여 회사의 요구 사항에 가장 적합합니다.",
        "Other Options": [
            "Amazon EC2 Auto Scaling 그룹과 Elastic Load Balancing을 사용하는 것은 확장 및 로드 밸런싱을 효과적으로 관리할 수 있지만, Elastic Beanstalk에 비해 더 많은 수동 설정 및 관리가 필요하므로 회사의 요구에 덜 적합합니다.",
            "AWS Lambda와 Amazon API Gateway는 서버리스 애플리케이션에 적합하지만 상태 연결이나 특정 서버 구성이 필요한 전통적인 웹 애플리케이션에는 적합하지 않을 수 있으며, Elastic Beanstalk가 이를 처리할 수 있습니다.",
            "Amazon ECS와 Fargate는 컨테이너화된 애플리케이션이 자동으로 확장되도록 허용하지만, Elastic Beanstalk의 간단한 배포 기능에 비해 더 복잡한 아키텍처 및 관리가 필요할 수 있습니다."
        ]
    },
    {
        "Question Number": "37",
        "Situation": "한 금융 서비스 회사가 애플리케이션 아키텍처의 보안 취약점에 직면하여 여러 데이터 유출이 발생했습니다. 이 회사는 산업 규정을 준수하면서 이러한 보안 문제를 해결하기 위한 잠재적 수정 솔루션을 평가해야 합니다. 보안 평가 팀이 다양한 솔루션을 테스트하고 애플리케이션의 전반적인 보안 태세를 강화하기 위한 권장 사항을 제시하는 임무를 맡았습니다.",
        "Question": "회사가 애플리케이션 보안을 개선하기 위한 수정 솔루션으로 구현해야 할 최선의 권장 사항은 무엇입니까?",
        "Options": {
            "1": "AWS WAF를 구현하여 애플리케이션을 일반 웹 공격으로부터 보호하고 미리 정의된 규칙에 따라 악성 요청을 차단하도록 구성합니다.",
            "2": "DDoS 보호를 위해 AWS Shield Advanced를 활성화하고 CloudTrail을 설정하여 애플리케이션 전반의 API 사용을 모니터링합니다.",
            "3": "AWS Secrets Manager를 활용하여 애플리케이션에서 사용하는 API 키 및 데이터베이스 자격 증명과 같은 민감한 정보를 안전하게 저장하고 관리합니다.",
            "4": "Amazon Inspector를 배포하여 애플리케이션의 취약점을 스캔하고 규정 준수 감사에 대한 상세 보고서를 생성합니다."
        },
        "Correct Answer": "AWS WAF를 구현하여 애플리케이션을 일반 웹 공격으로부터 보호하고 미리 정의된 규칙에 따라 악성 요청을 차단하도록 구성합니다.",
        "Explanation": "AWS WAF를 구현하면 일반 웹 취약점에 대한 즉각적인 보호를 제공하여 애플리케이션의 보안을 크게 강화합니다. 적절한 규칙으로 구성하면 SQL 인젝션 및 크로스 사이트 스크립팅과 같은 일반 공격으로부터의 위험을 완화하는 데 도움이 됩니다.",
        "Other Options": [
            "Amazon Inspector를 배포하는 것은 주로 취약점을 식별하는 데 중점을 두지만, 공격에 대한 실시간 보호를 제공하지 않으므로 독립적인 수정 솔루션으로는 효과적이지 않습니다.",
            "AWS Shield Advanced를 활성화하는 것은 DDoS 보호에 유용하지만 AWS WAF가 완화할 수 있는 더 넓은 범위의 웹 애플리케이션 취약점을 해결하지 않습니다.",
            "AWS Secrets Manager를 활용하는 것은 민감한 자격 증명을 관리하는 데 중요하지만, 외부 공격으로부터 애플리케이션을 직접 보호하지 않으므로 회사의 보안 요구 사항의 중요한 측면입니다."
        ]
    },
    {
        "Question Number": "38",
        "Situation": "한 금융 서비스 회사가 애플리케이션을 AWS로 마이그레이션하고 있습니다. 이들은 민감한 고객 데이터를 처리하며, 데이터가 정지 상태와 전송 중 모두 강력한 암호화 조치를 요구합니다. 회사는 성능을 최적화하면서 산업 규정을 준수하는 것을 보장하고자 합니다.",
        "Question": "회사가 안전한 데이터 처리를 보장하기 위해 구현해야 할 전략은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "데이터를 Amazon S3에 업로드하기 전에 클라이언트 측 암호화를 사용합니다.",
            "2": "클라이언트와 로드 밸런서 간에 SSL/TLS 암호화를 구현하여 전송 중 데이터를 보호합니다.",
            "3": "AWS Key Management Service (KMS)를 사용하여 Amazon S3의 정지 상태 데이터에 대한 암호화 키를 관리합니다.",
            "4": "쿼리 성능을 최적화하기 위해 Amazon RDS에 민감한 데이터를 평문으로 저장합니다.",
            "5": "기본 AWS 관리 키를 사용하여 Amazon RDS에서 정지 상태 암호화를 구성합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Key Management Service (KMS)를 사용하여 Amazon S3의 정지 상태 데이터에 대한 암호화 키를 관리합니다.",
            "클라이언트와 로드 밸런서 간에 SSL/TLS 암호화를 구현하여 전송 중 데이터를 보호합니다."
        ],
        "Explanation": "AWS Key Management Service (KMS)를 사용하면 회사가 Amazon S3에서 정지 상태 데이터를 암호화하는 데 사용되는 암호화 키를 관리하고 제어할 수 있어 민감한 데이터가 적절하게 보호됩니다. 클라이언트와 로드 밸런서 간에 SSL/TLS 암호화를 구현하면 전송 중 데이터를 보호하고 산업 규정을 준수할 수 있습니다.",
        "Other Options": [
            "Amazon RDS에 민감한 데이터를 평문으로 저장하는 것은 심각한 보안 위험이며 암호화 요구 사항을 준수하지 않습니다. 이 옵션은 고객 데이터를 적절하게 보호하지 못합니다.",
            "클라이언트 측 암호화는 복잡성을 추가하고 데이터 관리에 추가적인 오버헤드를 초래할 수 있습니다. 보안을 강화하지만 AWS 관리 암호화 옵션을 효과적으로 활용하는 경우 필요하지 않습니다.",
            "Amazon RDS에서 정지 상태 암호화를 위해 기본 AWS 관리 키를 사용하는 것은 안전하지만 AWS KMS를 사용하는 것에 비해 키 관리에 대한 완전한 제어를 제공하지 않으므로 규정 준수 및 감사 요구 사항에 더 나은 솔루션입니다."
        ]
    },
    {
        "Question Number": "39",
        "Situation": "한 미디어 회사가 AWS에서 Amazon S3를 저장소로, Amazon EC2 인스턴스를 처리용으로, Amazon RDS를 데이터베이스 서비스로 활용하는 다계층 애플리케이션을 운영하고 있습니다. 이 회사는 애플리케이션의 높은 가용성과 자동 복구를 보장해야 하며, 또한 수요에 따라 수동 개입 없이 확장해야 합니다. 어떤 솔루션이 이러한 요구 사항을 가장 잘 충족할까요?",
        "Question": "회사가 자동 장애 조치, 데이터 복제 및 탄력성을 달성하기 위해 구현해야 할 아키텍처는 무엇입니까?",
        "Options": {
            "1": "S3에 저장된 데이터를 처리하기 위해 AWS Lambda 함수를 사용하고 Amazon CloudWatch Events를 사용하여 함수를 트리거하며, 상태 정보를 Amazon DynamoDB 테이블에 저장합니다.",
            "2": "여러 지역에 읽기 복제본이 있는 Amazon RDS 인스턴스를 생성하고 EC2 인스턴스를 기본 RDS 인스턴스에 연결합니다.",
            "3": "CPU 사용량에 따라 확장하도록 Auto Scaling이 구성된 단일 Amazon EC2 인스턴스를 설정하고 정적 콘텐츠 제공을 위해 Amazon S3를 사용합니다.",
            "4": "애플리케이션을 여러 가용 영역(AZ)에 배포하고 EC2 인스턴스 앞에 애플리케이션 로드 밸런서(ALB)를 두며, 데이터베이스에 대해 RDS Multi-AZ를 구성합니다."
        },
        "Correct Answer": "애플리케이션을 여러 가용 영역(AZ)에 배포하고 EC2 인스턴스 앞에 애플리케이션 로드 밸런서(ALB)를 두며, 데이터베이스에 대해 RDS Multi-AZ를 구성합니다.",
        "Explanation": "이 옵션은 애플리케이션을 여러 AZ에 분산시켜 높은 가용성을 보장하며, 자동 장애 조치 및 자가 치유 기능을 제공합니다. ALB는 EC2 인스턴스 간의 트래픽을 균형 있게 분산시키고, RDS Multi-AZ는 자동 장애 조치 및 데이터 복제를 제공하여 탄력성과 신뢰성 요구 사항을 충족합니다.",
        "Other Options": [
            "이 옵션은 AWS Lambda에만 의존하므로 높은 가용성을 제공하지 않으며 EC2 인스턴스나 RDS 데이터베이스에 대한 장애 조치 또는 데이터 복제를 해결하지 않습니다.",
            "이 옵션은 어느 정도의 탄력성을 제공하지만 자동 장애 조치 및 데이터 복제 기능이 부족하여 높은 가용성 요구 사항에 적합하지 않습니다.",
            "이 옵션은 읽기 복제본을 포함하지만 애플리케이션 계층에 대한 자동 장애 조치 및 자가 치유를 보장하지 않으므로 높은 가용성을 유지하는 데 필수적입니다."
        ]
    },
    {
        "Question Number": "40",
        "Situation": "글로벌 전자상거래 회사가 전 세계 고객을 위한 낮은 대기 시간과 높은 가용성을 보장하기 위해 여러 AWS 리전에서 웹 애플리케이션을 배포할 계획입니다. 이 회사는 배포 전략에 대한 정보에 입각한 결정을 내리기 위해 AWS의 글로벌 인프라, 즉 리전과 가용 영역의 의미를 이해해야 합니다. 특히 AWS의 글로벌 존재를 활용하여 애플리케이션 성능을 향상시키는 방법에 관심이 있습니다.",
        "Question": "다음 중 AWS 리전과 가용 영역을 정확하게 설명하는 진술은 무엇입니까?",
        "Options": {
            "1": "AWS 리전은 지리적으로 분산된 여러 가용 영역으로 구성되지만, 리전 내의 각 가용 영역은 데이터 복제를 위해 서로에 의존합니다.",
            "2": "AWS 리전은 서로 완전히 격리되도록 설계된 독립적인 가용 영역으로 구성되어 데이터 손실을 방지합니다.",
            "3": "AWS 가용 영역은 리전 내의 격리된 위치로 설계되었지만, 서로 간의 통신을 향상시키기 위해 모두 고대역 링크로 연결되어 있습니다.",
            "4": "AWS 리전은 서로 격리되어 있으며, 각 리전은 저대역 링크로 연결된 여러 가용 영역을 가지고 있습니다."
        },
        "Correct Answer": "AWS 리전은 서로 격리되어 있으며, 각 리전은 저대역 링크로 연결된 여러 가용 영역을 가지고 있습니다.",
        "Explanation": "AWS 리전은 실제로 서로 격리되어 장애 내성을 향상시키며, 각 리전 내에는 높은 가용성을 제공하도록 설계된 여러 가용 영역이 있습니다. 이러한 가용 영역은 저대역 링크로 연결되어 있어 원활한 통신과 데이터 복제를 가능하게 하며, 이는 중복성과 성능이 필요한 애플리케이션에 필수적입니다.",
        "Other Options": [
            "이 진술은 가용 영역이 고대역 링크로 연결되어 있다고 제안하므로 부정확합니다. 가용 영역은 효율적인 데이터 전송을 촉진하기 위해 저대역 연결로 설계되었습니다.",
            "이 진술은 가용 영역이 데이터 복제를 위해 서로에 의존한다고 암시하므로 부정확합니다. 실제로 가용 영역은 독립적으로 작동하도록 설계되어 장애 격리를 허용합니다.",
            "이 진술은 가용 영역이 데이터 손실을 방지하는 방식으로 서로 완전히 격리되어 있다고 잘못 제안합니다. 가용 영역은 연쇄 실패를 피하기 위해 독립적으로 설계되었지만, 운영 효율성을 위해 여전히 서로 연결되어 있습니다."
        ]
    },
    {
        "Question Number": "41",
        "Situation": "금융 서비스 회사가 거래를 처리하고 사기 활동을 감지하기 위한 실시간 분석 플랫폼을 구축하고 있습니다. 이 시스템은 실시간 처리 요구 사항을 충족하기 위해 낮은 대기 시간으로 높은 처리량을 처리할 수 있어야 합니다. 이 회사는 데이터 수집을 위해 Amazon Kinesis Data Streams를 사용하는 것을 고려하고 있지만, 솔루션 구현에 대한 최선의 방법에 대한 지침이 필요합니다.",
        "Question": "다음 중 Amazon Kinesis Data Streams에 데이터를 수집하기 위한 최상의 성능을 제공하는 설계는 무엇입니까?",
        "Options": {
            "1": "각각 다른 Kinesis 데이터 스트림에 데이터를 전송하는 여러 개별 프로듀서 애플리케이션을 사용하여 부하를 분산합니다.",
            "2": "Kinesis Data Firehose를 구성하여 프로듀서 애플리케이션에서 Kinesis 데이터 스트림으로 데이터를 자동으로 라우팅합니다.",
            "3": "Kinesis Producer Library (KPL)를 활용하여 여러 레코드를 배치하고 이를 단일 API 호출로 Kinesis 데이터 스트림에 전송합니다.",
            "4": "최대 초당 1,000개의 레코드를 Kinesis 데이터 스트림에 직접 전송하는 단일 프로듀서 애플리케이션을 구현합니다."
        },
        "Correct Answer": "Kinesis Producer Library (KPL)를 활용하여 여러 레코드를 배치하고 이를 단일 API 호출로 Kinesis 데이터 스트림에 전송합니다.",
        "Explanation": "Kinesis Producer Library (KPL)를 사용하면 여러 레코드를 효율적으로 배치하여 단일 API 호출로 전송할 수 있어 처리량을 크게 증가시키고 Kinesis 데이터 스트림에 대한 요청 수를 줄일 수 있습니다. 이는 데이터 수집 성능을 극대화하는 가장 효과적인 방법입니다.",
        "Other Options": [
            "단일 프로듀서 애플리케이션을 구현하여 Kinesis 데이터 스트림에 직접 데이터를 전송하면 초당 1,000개의 레코드로 처리량이 제한되어 고용량 애플리케이션에는 충분하지 않을 수 있습니다.",
            "여러 개별 프로듀서 애플리케이션을 사용하는 것은 애플리케이션 관리의 복잡성을 증가시킬 수 있으며 Kinesis의 최대 처리량 기능을 효과적으로 활용하지 못할 수 있습니다. 단일 프로듀서의 성능을 최적화하는 것이 더 좋습니다.",
            "이 시나리오에 대해 Kinesis Data Firehose를 구성하는 것은 적합하지 않을 수 있습니다. Firehose는 Kinesis Data Streams와 같은 고처리량 데이터 수집보다는 데이터 전송을 위해 설계되었으며 불필요한 대기 시간을 추가할 수 있습니다."
        ]
    },
    {
        "Question Number": "42",
        "Situation": "미디어 회사가 Amazon S3에 대용량 비디오 파일을 저장하고 배포하기 위해 업로드할 준비를 하고 있습니다. 그들은 업로드가 효율적이고 유연하게 관리될 수 있도록 해야 하며, 특히 일부 비디오 파일의 크기가 1GB를 초과합니다. 이 파일을 업로드하는 최선의 방법을 고려하고 있습니다.",
        "Question": "Amazon S3에 대용량 비디오 파일을 저장하기 위해 멀티파트 업로드를 사용하는 주요 장점은 무엇입니까?",
        "Options": {
            "1": "멀티파트 업로드는 여러 S3 버킷에 객체를 동시에 저장할 수 있어 데이터 관리를 개선합니다.",
            "2": "멀티파트 업로드는 파일 부분의 병렬 업로드를 허용하여 업로드 속도를 개선하고 네트워크 문제로부터 다른 부분에 영향을 주지 않고 복구할 수 있게 합니다.",
            "3": "멀티파트 업로드는 전체 객체가 단일 트랜잭션으로 업로드되도록 보장하여 실패 시 부분 업로드를 방지합니다.",
            "4": "멀티파트 업로드는 업로드 과정에서 파일을 자동으로 암호화하여 추가 단계 없이 데이터 보안을 보장합니다."
        },
        "Correct Answer": "멀티파트 업로드는 파일 부분의 병렬 업로드를 허용하여 업로드 속도를 개선하고 네트워크 문제로부터 다른 부분에 영향을 주지 않고 복구할 수 있게 합니다.",
        "Explanation": "멀티파트 업로드는 대용량 파일을 더 작은 부분으로 나누어 동시에 업로드할 수 있게 하여 업로드 프로세스를 개선합니다. 이 방법은 전체 처리량을 향상시키고 실패로부터 복구할 수 있는 유연성을 제공합니다.",
        "Other Options": [
            "멀티파트 업로드는 자동으로 암호화를 처리하지 않으며, 암호화는 업로드 과정에서 별도로 관리해야 합니다.",
            "멀티파트 업로드는 부분 업로드를 방지하지 않으며, 부분을 독립적으로 업로드할 수 있도록 허용하는 기능입니다.",
            "멀티파트 업로드는 여러 S3 버킷에 객체를 저장하는 것을 촉진하지 않으며, 단일 버킷에 부분으로 단일 객체를 업로드하는 데 중점을 둡니다."
        ]
    },
    {
        "Question Number": "43",
        "Situation": "글로벌 전자상거래 플랫폼은 휴일 시즌 동안 사용자 트래픽이 크게 증가하는 것을 관찰하였고, 이로 인해 AWS에 호스팅된 애플리케이션의 성능 저하가 발생했습니다. 솔루션 아키텍트는 성능을 유지하고 비용을 최소화하면서 수요를 충족할 수 있도록 애플리케이션이 확장 가능하도록 해야 합니다. 아키텍트는 변동하는 사용자 트래픽 패턴에 자동으로 적응할 수 있는 솔루션을 설계하는 임무를 맡고 있습니다.",
        "Question": "이 시나리오에서 동적 확장 및 비용 효율성의 필요성을 가장 잘 해결할 수 있는 전략은 무엇입니까?",
        "Options": {
            "1": "Amazon ECS와 Fargate를 사용하여 관리형 컨테이너 서비스를 배포하고, 수신 트래픽에 따라 리소스를 자동으로 확장하며, Amazon ElastiCache로 캐싱 레이어를 구현합니다.",
            "2": "Amazon CloudFront를 CDN으로 활용하여 전 세계적으로 콘텐츠를 배포하고, 예상되는 트래픽 증가에 따라 EC2 인스턴스 크기를 수동으로 조정합니다.",
            "3": "API Gateway에 의해 트리거되는 AWS Lambda 함수를 설정하여 수신 요청을 처리하고, 정적 콘텐츠 제공을 위해 Amazon S3를 활용하여 EC2 인스턴스가 필요 없도록 합니다.",
            "4": "과거 트래픽 패턴에 기반한 예약된 확장 정책으로 Amazon EC2 Auto Scaling을 구현하고, 증가된 데이터베이스 부하를 처리하기 위해 Amazon RDS 읽기 복제본을 결합합니다."
        },
        "Correct Answer": "Amazon ECS와 Fargate를 사용하여 관리형 컨테이너 서비스를 배포하고, 수신 트래픽에 따라 리소스를 자동으로 확장하며, Amazon ElastiCache로 캐싱 레이어를 구현합니다.",
        "Explanation": "Amazon ECS와 Fargate를 사용하면 트래픽 변화에 따라 컨테이너화된 애플리케이션의 자동 확장이 가능하여 탄력성과 비용 효율성을 제공합니다. 이를 ElastiCache와 결합하면 자주 접근되는 데이터를 캐싱하여 성능을 향상시키고 백엔드 서비스의 부하를 줄일 수 있습니다.",
        "Other Options": [
            "예약된 확장 정책을 구현하면 갑작스러운 트래픽 급증에 신속하게 대응하지 못할 수 있어, 중요한 시기에 성능 문제를 초래할 수 있습니다. 또한, RDS 읽기 복제본은 유용하지만 애플리케이션 서버의 확장 문제를 해결하지 않습니다.",
            "AWS Lambda 함수는 트래픽 급증을 효율적으로 처리할 수 있지만, 이 접근 방식은 지속적인 연결이나 복잡한 트랜잭션을 요구하는 모든 유형의 작업에 적합하지 않을 수 있습니다. 또한, S3를 통한 정적 콘텐츠 제공은 동적 애플리케이션 확장 문제를 해결하지 않습니다.",
            "CloudFront를 사용하는 것은 콘텐츠 제공에 유리하지만, EC2 인스턴스를 동적으로 확장하는 문제를 직접적으로 해결하지 않습니다. 인스턴스 크기를 수동으로 조정하는 것은 갑작스러운 트래픽 변화에 비효율적이며 반응성이 떨어져 성능 병목 현상을 초래할 수 있습니다."
        ]
    },
    {
        "Question Number": "44",
        "Situation": "금융 서비스 회사는 고객 데이터를 저장하기 위해 Amazon S3를 활용하고 있습니다. 규제 요구 사항을 준수하기 위해, 회사는 저장된 데이터에 대한 공개 접근을 방지하는 엄격한 버킷 정책을 구현해야 합니다. 솔루션 아키텍트는 공개 접근이 허용되지 않도록 구성이 올바르게 설정되었는지 확인해야 합니다.",
        "Question": "S3 버킷 및 그 객체에 대한 모든 공개 접근을 효과적으로 차단하기 위해 솔루션 아키텍트가 구현해야 할 구성은 무엇입니까?",
        "Options": {
            "1": "IgnorePublicAcls를 true로 설정하고 BlockPublicAcls를 false로 설정하여 특정 공개 접근을 허용합니다.",
            "2": "BlockPublicAcls 및 IgnorePublicAcls를 활성화하고 버킷 정책을 통해 공개 접근을 허용합니다.",
            "3": "버킷 정책을 사용하여 모든 공개 접근을 거부하되, 특정 IAM 역할이 데이터에 접근할 수 있도록 허용합니다.",
            "4": "S3 버킷에서 BlockPublicAcls 및 BlockPublicPolicy를 활성화하고 RestrictPublicBuckets를 true로 설정합니다."
        },
        "Correct Answer": "S3 버킷에서 BlockPublicAcls 및 BlockPublicPolicy를 활성화하고 RestrictPublicBuckets를 true로 설정합니다.",
        "Explanation": "BlockPublicAcls 및 BlockPublicPolicy를 활성화하면 모든 공개 접근 제어가 무시되고, 버킷 정책을 통해 공개 접근을 설정하려는 시도가 차단됩니다. RestrictPublicBuckets를 true로 설정하면 버킷 소유자의 AWS 계정만 버킷 내 콘텐츠에 접근할 수 있도록 하여 공개 접근에 대한 포괄적인 보안 모델을 제공합니다.",
        "Other Options": [
            "IgnorePublicAcls를 true로 설정하고 BlockPublicAcls를 false로 설정하면 버킷이나 객체에 공개 ACL이 할당될 경우 공개 접근이 가능해지므로 모든 공개 접근을 차단하는 요구 사항을 충족하지 않습니다.",
            "버킷 정책을 사용하여 공개 접근을 거부하는 것은 공개 ACL이 설정되는 것을 방지하지 않습니다. 따라서 ACL이 제공되면 여전히 공개 접근을 허용할 수 있어 규정 준수 요구 사항에 위배됩니다.",
            "BlockPublicAcls를 활성화하면서 버킷 정책을 통해 공개 접근을 허용하는 것은 공개 접근을 차단하는 목표와 모순되며, 정책이 ACL 설정을 무시할 수 있어 민감한 데이터의 노출 가능성을 초래할 수 있습니다."
        ]
    },
    {
        "Question Number": "45",
        "Situation": "금융 서비스 회사는 온라인 거래 플랫폼에 크게 의존하고 있습니다. 비즈니스 연속성을 보장하기 위해, 주요 사이트 장애 발생 시 신속하게 백업 시스템으로 전환할 수 있는 강력한 재해 복구 전략이 필요합니다. 현재 AWS 내에서 데이터베이스를 위해 다중 AZ 아키텍처를 활용하고 있지만, 이를 애플리케이션 서버 및 기타 중요한 구성 요소로 확장하고자 합니다.",
        "Question": "이 시나리오에서 비즈니스 연속성을 위한 최상의 설계를 제공하는 솔루션은 무엇입니까?",
        "Options": {
            "1": "다른 AWS 리전에서 데이터베이스의 읽기 복제본을 설정하고 장애 발생 시에만 사용합니다.",
            "2": "장애 발생 시 다른 리전에서 애플리케이션 서버 배포를 자동화하기 위해 AWS CloudFormation 템플릿을 구현합니다.",
            "3": "여러 AWS 리전에서 애플리케이션 서버를 배포하고 Route 53을 사용하여 DNS 장애 조치를 수행합니다.",
            "4": "AWS Elastic Load Balancing을 활용하여 단일 리전 내 여러 EC2 인스턴스에 트래픽을 분산합니다."
        },
        "Correct Answer": "여러 AWS 리전에서 애플리케이션 서버를 배포하고 Route 53을 사용하여 DNS 장애 조치를 수행합니다.",
        "Explanation": "여러 AWS 리전에서 애플리케이션 서버를 배포하면 한 리전이 사용할 수 없게 될 경우 애플리케이션이 다른 리전으로 원활하게 장애 조치할 수 있도록 하여 비즈니스 연속성을 위한 강력한 솔루션을 제공합니다. Route 53을 사용한 DNS 장애 조치는 트래픽을 건강한 리전으로 리디렉션하여 다운타임을 최소화하는 데 도움을 줍니다.",
        "Other Options": [
            "다른 AWS 리전에서 데이터베이스의 읽기 복제본을 설정하는 것은 일부 중복성을 제공하지만, 비즈니스 연속성에 중요한 애플리케이션 서버를 다루지 않습니다.",
            "단일 리전 내에서 AWS Elastic Load Balancing을 활용하는 것은 지역 장애에 대한 보호를 제공하지 않으므로 강력한 재해 복구 전략에 필수적입니다.",
            "AWS CloudFormation 템플릿을 사용하여 서버 배포를 자동화하는 것은 프로비저닝에 유용하지만, 효과적인 비즈니스 연속성을 위해 지역 간 필요한 중복성을 본질적으로 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "46",
        "Situation": "한 금융 서비스 회사가 인프라 관리와 관련된 오버헤드를 줄여 애플리케이션 아키텍처를 현대화하려고 합니다. 이 회사는 자주 업데이트와 패치가 필요한 레거시 애플리케이션을 보유하고 있으며, 이는 번거로워졌습니다. 솔루션 아키텍트는 운영을 간소화하고 인프라 관리가 아닌 애플리케이션 개발에 집중할 수 있도록 관리형 서비스 모델로 전환하는 임무를 맡았습니다.",
        "Question": "솔루션 아키텍트가 인프라 프로비저닝 및 패치 오버헤드를 효과적으로 줄이기 위해 추천해야 할 솔루션은 무엇입니까?",
        "Options": {
            "1": "애플리케이션을 Amazon EC2 인스턴스로 마이그레이션하고 업데이트 및 패치를 위한 사용자 지정 자동화 스크립트를 사용합니다.",
            "2": "애플리케이션을 온프레미스 Kubernetes 클러스터로 이동하여 컨테이너 오케스트레이션을 관리하고 유연성을 유지합니다.",
            "3": "서버 관리를 없애고 내장된 보안 기능을 활용하기 위해 Amazon ECS에 Fargate를 사용하여 애플리케이션을 배포합니다.",
            "4": "인프라에 대한 제어를 유지하기 위해 애플리케이션을 EC2 인스턴스에 연결된 Amazon EBS 볼륨으로 리프트 앤 시프트합니다."
        },
        "Correct Answer": "서버 관리를 없애고 내장된 보안 기능을 활용하기 위해 Amazon ECS에 Fargate를 사용하여 애플리케이션을 배포합니다.",
        "Explanation": "Amazon ECS와 Fargate를 사용하면 회사가 서버나 클러스터를 관리하지 않고도 컨테이너를 실행할 수 있습니다. 이는 인프라 프로비저닝 및 패치의 오버헤드를 크게 줄여 팀이 애플리케이션 개발 및 배포에 집중할 수 있게 합니다.",
        "Other Options": [
            "Amazon EC2 인스턴스로 마이그레이션하면 팀이 업데이트 및 패치를 포함한 기본 인프라를 관리해야 하므로 오버헤드를 줄이는 목표와 일치하지 않습니다.",
            "애플리케이션을 EC2 인스턴스에 연결된 Amazon EBS 볼륨으로 리프트 앤 시프트하면 인프라 관리의 필요성이 사라지지 않으며, 회사는 여전히 EC2 인스턴스를 유지하고 패치해야 합니다.",
            "온프레미스 Kubernetes 클러스터로 애플리케이션을 이동하면 회사가 기본 하드웨어와 소프트웨어를 관리해야 하므로 인프라 오버헤드를 줄이지 못하고 인프라 관리 최소화 목표에 반합니다."
        ]
    },
    {
        "Question Number": "47",
        "Situation": "한 금융 서비스 회사가 AWS의 여러 환경(개발, 테스트 및 프로덕션)에서 민감한 구성 데이터에 접근해야 하는 새로운 애플리케이션을 개발하고 있습니다. 애플리케이션은 이러한 구성 정보를 소스 코드에 하드코딩하지 않고 안전하게 검색해야 합니다. 팀은 리소스와 구성을 관리하기 위해 AWS CloudFormation을 사용하기로 결정했습니다. 또한 필요에 따라 이러한 구성을 쉽게 관리하고 업데이트할 수 있기를 원합니다.",
        "Question": "개발 팀이 AWS CloudFormation을 사용하여 애플리케이션의 민감한 구성 데이터를 안전하게 관리하려면 어떻게 해야 합니까?",
        "Options": {
            "1": "CloudFormation 템플릿의 Parameters 섹션에서 Systems Manager Parameters를 정의하고 민감한 값을 위해 SSM 파라미터 키를 사용합니다.",
            "2": "AWS Secrets Manager를 사용하여 민감한 구성 데이터를 저장하고 CloudFormation 템플릿에서 직접 참조합니다.",
            "3": "CloudFormation 스택 생성 과정에서 S3에서 민감한 데이터를 검색하는 Lambda 함수를 생성합니다.",
            "4": "접근을 간소화하기 위해 민감한 구성 데이터를 CloudFormation 템플릿에 일반 텍스트 매개변수로 직접 저장합니다."
        },
        "Correct Answer": "CloudFormation 템플릿의 Parameters 섹션에서 Systems Manager Parameters를 정의하고 민감한 값을 위해 SSM 파라미터 키를 사용합니다.",
        "Explanation": "CloudFormation 템플릿에서 Systems Manager Parameters를 사용하면 팀이 AWS Systems Manager Parameter Store에 저장된 민감한 구성 데이터를 안전하게 참조할 수 있습니다. 이 접근 방식은 스택 작업 중에 매개변수가 안전하게 검색되도록 하여 템플릿 자체에 민감한 정보를 노출하지 않습니다.",
        "Other Options": [
            "민감한 구성 데이터를 CloudFormation 템플릿에 일반 텍스트 매개변수로 직접 저장하는 것은 버전 관리 및 스택 작업 중에 민감한 정보를 노출하므로 상당한 보안 위험을 초래합니다.",
            "AWS Secrets Manager는 민감한 데이터를 관리하기 위해 설계되었지만, Systems Manager Parameters와 같은 방식으로 CloudFormation 템플릿에 직접 통합되지 않으므로 이 접근 방식은 안전한 구성 관리에 덜 적합합니다.",
            "S3에서 민감한 데이터를 검색하는 Lambda 함수를 생성하는 것은 불필요한 복잡성과 잠재적인 보안 취약점을 추가하며, 이는 민감한 정보를 노출할 수 있는 추가 리소스 및 권한 관리를 요구합니다."
        ]
    },
    {
        "Question Number": "48",
        "Situation": "한 스타트업 회사가 사용자 데이터 및 거래를 처리하기 위한 백엔드 서비스가 필요한 새로운 모바일 애플리케이션을 출시하고 있습니다. 이 회사는 변동하는 사용자 트래픽에 대한 비용 관리에 대해 우려하고 있습니다. 그들은 수요에 따라 백엔드 서비스가 자동으로 확장될 수 있도록 하면서 비용을 최소화하고자 합니다. 이 회사는 이 솔루션을 구현하기 위해 다양한 AWS 서비스를 고려하고 있습니다.",
        "Question": "모바일 애플리케이션의 백엔드 리소스를 효율적으로 관리하기 위해 솔루션 아키텍트가 추천해야 할 비용 최적화 전략은 무엇입니까?",
        "Options": {
            "1": "백엔드 서비스에 AWS Lambda 함수를 구현하여 트래픽에 따라 자동으로 확장하고, Amazon API Gateway를 사용하여 함수에 대한 접근을 관리합니다. 사용자 데이터를 Amazon DynamoDB에 저장하여 요청당 요금 모델을 활용합니다.",
            "2": "백엔드 서비스를 처리하기 위해 Auto Scaling 그룹에서 Amazon EC2 인스턴스의 플릿을 프로비저닝하고, 데이터베이스에 Amazon RDS를 사용합니다. 예약 인스턴스를 활용하여 시간이 지남에 따라 비용을 줄입니다.",
            "3": "백엔드 서비스를 실행하기 위해 고정 크기의 Amazon EC2 인스턴스를 설정하고, 빠른 데이터베이스 접근을 위해 프로비저닝된 IOPS를 사용하는 Amazon RDS를 사용하며, 수동 확장 방식을 적용합니다.",
            "4": "컨테이너화된 백엔드 서비스를 실행하기 위해 Amazon ECS에 Fargate를 배포합니다. 정적 저장소에 Amazon S3를 사용하고, 데이터베이스에 대해 온디맨드 요금제를 가진 Amazon RDS 인스턴스를 프로비저닝합니다."
        },
        "Correct Answer": "백엔드 서비스에 AWS Lambda 함수를 구현하여 트래픽에 따라 자동으로 확장하고, Amazon API Gateway를 사용하여 함수에 대한 접근을 관리합니다. 사용자 데이터를 Amazon DynamoDB에 저장하여 요청당 요금 모델을 활용합니다.",
        "Explanation": "AWS Lambda를 사용하면 백엔드가 들어오는 트래픽에 따라 자동으로 확장되어 사용한 컴퓨팅 시간에 대해서만 비용을 지불함으로써 비용을 최소화할 수 있습니다. Amazon API Gateway는 모바일 애플리케이션이 Lambda 함수와 상호작용할 수 있는 안전하고 확장 가능한 인터페이스를 제공합니다. 또한, DynamoDB의 요청당 요금 모델은 스타트업이 요청한 만큼만 비용을 지불하게 하여 비용 최적화를 더욱 촉진합니다.",
        "Other Options": [
            "Amazon EC2 인스턴스의 플릿을 프로비저닝하는 것은 초기 비용이 발생하며, 저트래픽 기간 동안 과도한 프로비저닝으로 이어질 수 있어 스타트업의 비용 최적화 목표와 일치하지 않습니다. 예약 인스턴스는 또한 약정이 필요하며 변동하는 트래픽에 필요한 유연성을 제공하지 않습니다.",
            "Amazon ECS에 Fargate를 배포하는 것은 더 유연한 솔루션이지만, 트래픽이 낮을 때 Lambda에 비해 더 높은 비용이 발생할 수 있습니다. RDS의 온디맨드 요금제를 사용할 경우 데이터베이스가 유휴 상태일 때 비용이 증가할 수 있어 비용 관리에 덜 최적화됩니다.",
            "고정 크기의 Amazon EC2 인스턴스를 설정하는 것은 변동하는 트래픽에 필요한 확장성을 제공하지 않으며, 비수기 동안 저활용으로 이어질 수 있습니다. Amazon RDS의 프로비저닝된 IOPS는 애플리케이션이 지속적으로 높은 성능을 요구하지 않는 경우 불필요한 비용을 추가할 수 있습니다."
        ]
    },
    {
        "Question Number": "49",
        "Situation": "글로벌 전자상거래 회사가 지연 시간과 신뢰성을 개선하기 위해 여러 지역으로 서비스를 확장하고 있습니다. 이 회사는 콘텐츠 배달을 위해 Amazon CloudFront를 사용하고 웹 애플리케이션 호스팅을 위해 AWS Regions를 고려하고 있습니다. 그들은 아키텍처가 높은 가용성과 재해 복구를 위해 최적화되기를 원하지만, AWS 글로벌 인프라 전반에 걸쳐 리소스를 배포하는 최선의 방법에 대해 확신이 없습니다.",
        "Question": "다음 중 여러 AWS Regions에서 높은 가용성과 재해 복구를 지원하는 접근 방식은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "트래픽 관리를 위해 Route 53 라우팅 정책을 사용하여 여러 AWS Regions에 웹 애플리케이션을 배포합니다.",
            "2": "AWS Direct Connect를 활용하여 온프레미스 데이터 센터와 단일 AWS Region 간의 전용 연결을 설정합니다.",
            "3": "아키텍처를 단순화하기 위해 단일 AWS Region에서 정적 콘텐츠 저장을 위해 Amazon S3를 사용합니다.",
            "4": "여러 AWS Regions에서 애플리케이션 가용성과 성능을 개선하기 위해 AWS Global Accelerator를 활용합니다.",
            "5": "데이터 중복성과 빠른 장애 조치를 보장하기 위해 교차 지역 읽기 복제본을 사용하여 Amazon RDS를 구현합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "트래픽 관리를 위해 Route 53 라우팅 정책을 사용하여 여러 AWS Regions에 웹 애플리케이션을 배포합니다.",
            "여러 AWS Regions에서 애플리케이션 가용성과 성능을 개선하기 위해 AWS Global Accelerator를 활용합니다."
        ],
        "Explanation": "Route 53 라우팅 정책을 사용하여 여러 AWS Regions에 웹 애플리케이션을 배포하면 효과적인 트래픽 관리가 가능하고 사용자가 가장 가까운 가용 리소스로 안내되어 가용성이 향상됩니다. AWS Global Accelerator는 건강, 지리 및 라우팅 정책에 따라 최적의 엔드포인트로 트래픽을 라우팅하여 지역 간 성능과 가용성을 모두 개선합니다.",
        "Other Options": [
            "단일 AWS Region에서 정적 콘텐츠 저장을 위해 Amazon S3를 사용하는 것은 여러 지역에서 높은 가용성이나 재해 복구를 제공하지 않으며, 단일 실패 지점을 생성합니다.",
            "교차 지역 읽기 복제본을 사용하여 Amazon RDS를 구현하면 데이터 중복성을 향상시키지만, 웹 애플리케이션 자체의 높은 가용성을 보장하지 않으며, 데이터베이스 가용성에 주로 초점을 맞춥니다.",
            "단일 AWS Region에 대한 전용 연결을 설정하기 위해 AWS Direct Connect를 활용하는 것은 여러 지역에서 높은 가용성을 지원하지 않으며, 연결성을 단일 지점으로 제한하여 중복성을 감소시킵니다."
        ]
    },
    {
        "Question Number": "50",
        "Situation": "한 회사가 애플리케이션을 AWS로 마이그레이션하고 안전한 접근 관리 전략을 구현해야 합니다. 솔루션 아키텍트는 특정 AWS 서비스가 서로 상호작용할 수 있도록 하면서 민감한 정보가 보호되도록 하는 IAM 역할에 대한 정책을 정의하는 임무를 맡고 있습니다. 이 정책은 과도한 권한을 부여하지 않으면서 특정 리소스에 대한 작업을 허용해야 합니다.",
        "Question": "안전한 접근 관리 요구 사항을 고려할 때, 솔루션 아키텍트가 회사의 요구를 충족하기 위해 구현해야 하는 IAM 역할 정책은 무엇입니까?",
        "Options": {
            "1": "EC2 및 S3 리소스에 대한 무제한 접근을 허용하는 IAM 역할을 구현하여 모든 IAM 역할 및 정책을 삭제할 수 있도록 하여 관리를 단순화합니다.",
            "2": "모든 AWS 서비스 및 리소스에 대한 전체 접근을 허용하는 IAM 역할을 생성하여 사용자가 필요에 따라 IAM 사용자 및 그룹을 관리할 수 있도록 합니다.",
            "3": "IAM 및 Organizations에만 접근을 허용하는 IAM 역할을 생성하여 S3 또는 EC2 리소스에 대한 접근을 차단하여 높은 보안을 유지합니다.",
            "4": "S3 및 EC2 리소스에 대한 작업을 허용하면서 IAM 및 Organizations와 관련된 작업을 명시적으로 거부하는 IAM 역할을 정의하여 필요할 때 서비스 연결 역할을 생성할 수 있도록 합니다."
        },
        "Correct Answer": "S3 및 EC2 리소스에 대한 작업을 허용하면서 IAM 및 Organizations와 관련된 작업을 명시적으로 거부하는 IAM 역할을 정의하여 필요할 때 서비스 연결 역할을 생성할 수 있도록 합니다.",
        "Explanation": "이 옵션은 S3 및 EC2에 대한 특정 작업을 허용하면서 IAM 및 Organizations와 관련된 권한을 제한해야 하는 필요성과 일치하여 안전한 환경을 유지합니다. 또한 필요할 때 서비스 연결 역할 생성을 지원합니다.",
        "Other Options": [
            "이 옵션은 모든 AWS 서비스 및 리소스에 대한 전체 접근을 허용하여 과도한 권한을 부여하며, 이는 보안 취약점을 초래할 수 있고 최소 권한 요구 사항을 충족하지 않습니다.",
            "이 옵션은 IAM 및 Organizations에만 접근을 제한하여 S3 및 EC2 리소스에 대한 작업을 허용해야 하는 요구 사항과 모순되므로 애플리케이션의 요구를 충족하지 못합니다.",
            "이 옵션은 EC2 및 S3 리소스에 대한 무제한 접근을 허용하고 IAM 역할 및 정책을 삭제할 수 있도록 하여 계정 보안을 위협하는 주요 보안 위험을 초래합니다."
        ]
    },
    {
        "Question Number": "51",
        "Situation": "한 스타트업이 AWS에서 여러 애플리케이션을 운영하고 있으며, 매달 증가하는 AWS 청구서에 대해 우려하고 있습니다. 그들은 비용 최적화 전략을 구현하면서 지출 패턴에 대한 가시성을 확보하고자 합니다. 스타트업은 소규모 DevOps 팀을 보유하고 있으며 서비스에 대한 최소한의 중단을 보장해야 합니다.",
        "Question": "스타트업이 AWS 지출의 비용 최적화 및 가시성을 달성하기 위해 어떤 접근 방식을 취해야 합니까?",
        "Options": {
            "1": "Amazon CloudTrail을 사용하여 API 호출을 모니터링하고 AWS Config를 사용하여 리소스 변경 사항을 추적하는 중앙 집중식 로깅 솔루션을 설정합니다. 비용 영향을 이해하기 위해 매달 로그를 검토합니다.",
            "2": "Amazon CloudWatch를 사용하여 모든 AWS 서비스를 모니터링하고 사용량의 비정상적인 급증에 대한 경고를 생성합니다. 비용을 관리하기 위해 서비스 한계를 조정합니다.",
            "3": "AWS Budgets를 구현하여 다양한 팀을 위한 맞춤형 비용 및 사용 예산을 설정합니다. 애플리케이션별로 지출을 추적하기 위해 비용 할당 태그를 활성화하고 예산 한도에 대한 경고를 설정합니다.",
            "4": "모든 애플리케이션을 AWS Lambda로 마이그레이션하여 사용한 만큼만 지불하는 가격 모델의 혜택을 누립니다. 과거 사용 데이터를 분석하여 미래 비용을 예측하고 그에 따라 조정합니다."
        },
        "Correct Answer": "AWS Budgets를 구현하여 다양한 팀을 위한 맞춤형 비용 및 사용 예산을 설정합니다. 애플리케이션별로 지출을 추적하기 위해 비용 할당 태그를 활성화하고 예산 한도에 대한 경고를 설정합니다.",
        "Explanation": "AWS Budgets를 구현하면 스타트업이 특정 비용 목표를 설정하고 지출을 모니터링하며 예산 한도에 접근할 때 경고를 받을 수 있습니다. 비용 할당 태그를 활성화하면 비즈니스의 어떤 부분이 비용을 유발하는지에 대한 가시성을 제공하여 효과적인 비용 관리를 지원합니다.",
        "Other Options": [
            "Amazon CloudWatch로 모니터링하는 것은 유익하지만, 주로 성능 메트릭에 초점을 맞추고 있어 비용 최적화에 필요한 비용 가시성이나 예산 관리 기능을 직접 제공하지 않습니다.",
            "모든 애플리케이션을 AWS Lambda로 마이그레이션하면 유휴 리소스와 관련된 비용을 줄일 수 있지만, 전체 AWS 지출을 추적하고 관리하거나 애플리케이션별 비용에 대한 가시성을 제공하는 포괄적인 전략을 제공하지 않습니다.",
            "Amazon CloudTrail 및 AWS Config를 사용하여 중앙 집중식 로깅을 설정하는 것은 규정 준수 및 리소스 추적에 유용하지만, 비용 최적화나 실제 지출에 대한 실시간 가시성을 직접적으로 해결하지 않습니다."
        ]
    },
    {
        "Question Number": "52",
        "Situation": "금융 기관이 기존의 온프레미스 애플리케이션을 AWS 클라우드로 마이그레이션할 계획입니다. 애플리케이션은 매우 복잡하며 클라우드 아키텍처 표준을 충족하기 위해 상당한 수정이 필요합니다. 기관은 7Rs 프레임워크를 기반으로 다양한 마이그레이션 전략을 평가하여 위험을 최소화하고 이점을 극대화하는 최선의 접근 방식을 결정하고자 합니다. 솔루션 아키텍트는 애플리케이션에 가장 적합한 전략을 선택하는 임무를 맡고 있습니다.",
        "Question": "솔루션 아키텍트가 기존 애플리케이션에 대해 고려해야 할 마이그레이션 전략은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "애플리케이션을 리팩토링하여 마이크로서비스 및 서버리스 아키텍처와 같은 클라우드 네이티브 기능을 최대한 활용합니다.",
            "2": "코드에 최소한의 변경을 가하여 애플리케이션을 Amazon EC2 인스턴스로 재플랫폼합니다.",
            "3": "AWS 모범 사례에 맞는 현대적인 프로그래밍 언어와 아키텍처를 사용하여 애플리케이션을 처음부터 다시 구축합니다.",
            "4": "상업적으로 제공되는 소프트웨어를 구매하여 유사한 기능을 보다 효율적으로 제공하는 애플리케이션을 재구매합니다.",
            "5": "애플리케이션을 온프레미스에 유지하고 하이브리드 클라우드 솔루션을 통해 AWS 서비스와 통합하여 기능을 확장합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "애플리케이션을 리팩토링하여 마이크로서비스 및 서버리스 아키텍처와 같은 클라우드 네이티브 기능을 최대한 활용합니다.",
            "AWS 모범 사례에 맞는 현대적인 프로그래밍 언어와 아키텍처를 사용하여 애플리케이션을 처음부터 다시 구축합니다."
        ],
        "Explanation": "애플리케이션을 리팩토링하면 클라우드 네이티브 기능을 활용할 수 있어 확장성과 유지 관리성이 향상되며, 다시 구축하면 현대 개발 관행을 채택할 수 있는 새로운 출발을 제공하여 본질적으로 클라우드와의 호환성을 높입니다.",
        "Other Options": [
            "재플랫폼은 클라우드 기능을 완전히 활용하지 못할 수 있으며 다른 전략에 비해 상당한 이점을 제공하지 않을 수 있습니다. 최소한의 변경을 포함하므로 애플리케이션의 복잡성을 효과적으로 해결하지 못할 수 있습니다.",
            "애플리케이션을 온프레미스에 유지하는 것은 AWS로의 마이그레이션 목표에 모순되며 클라우드의 확장성과 유연성을 충분히 활용하지 못합니다.",
            "소프트웨어를 재구매하는 것은 실행 가능한 옵션이 될 수 있지만 기존 비즈니스 프로세스와의 정렬을 보장하지 않으면서 라이센스 비용이 증가할 수 있습니다."
        ]
    },
    {
        "Question Number": "53",
        "Situation": "금융 서비스 회사가 온프레미스 워크로드의 일부를 AWS로 이동하려고 합니다. 그들은 AWS에서 애플리케이션을 실행하는 데 드는 비용에 대해 걱정하고 있으며 성능 요구 사항과 예산 제약을 균형 있게 맞춰야 합니다. 워크로드는 사용 패턴이 다양하여 일부는 지속적으로 실행되고 다른 일부는 피크 비즈니스 시간 동안만 사용됩니다. 회사는 비용을 최적화하기 위해 다양한 구매 옵션을 고려하고 있습니다.",
        "Question": "다음 중 회사에 안정적인 워크로드와 가변 워크로드 모두에 대해 최상의 비용-성능 균형을 제공할 구매 옵션은 무엇입니까?",
        "Options": {
            "1": "모든 워크로드에 대해 On-Demand 인스턴스만 사용하여 비용 영향을 고려하지 않고 유연성을 유지합니다.",
            "2": "모든 워크로드에 대해 Dedicated Hosts를 배포하여 인스턴스 배치 및 리소스 활용에 대한 최고의 제어를 얻습니다.",
            "3": "안정적인 상태의 워크로드에 대해 Reserved Instances를 구매하고 피크 시간 동안 가변 워크로드에 대해 Spot Instances를 사용하여 비용을 최소화합니다.",
            "4": "모든 워크로드를 커버하기 위해 Savings Plans를 선택하여 회사가 특정 인스턴스 유형에 묶이지 않고 비용 절감의 혜택을 누릴 수 있도록 합니다."
        },
        "Correct Answer": "안정적인 상태의 워크로드에 대해 Reserved Instances를 구매하고 피크 시간 동안 가변 워크로드에 대해 Spot Instances를 사용하여 비용을 최소화합니다.",
        "Explanation": "안정적인 상태의 워크로드에 대해 Reserved Instances를 사용하면 On-Demand 가격에 비해 낮은 비용을 제공하며, 피크 시간 동안 가변 워크로드에 대해 Spot Instances를 활용하면 여유 용량에 대한 낮은 가격을 이용할 수 있습니다. 이 전략은 비용 최적화 및 성능 요구 사항에 잘 부합합니다.",
        "Other Options": [
            "On-Demand 인스턴스만 사용하는 것은 유연성을 제공할 수 있지만, 특히 Reserved Instances로 최적화할 수 있는 안정적인 워크로드에 대해 상당히 높은 비용이 발생할 수 있습니다.",
            "Savings Plans는 다양한 인스턴스 유형에 대해 유연성과 비용 절감을 제공하지만, 회사의 특정 워크로드 패턴에 맞춘 Reserved와 Spot Instances의 조합만큼의 절감을 제공하지 않을 수 있습니다.",
            "Dedicated Hosts를 배포하는 것은 일반적으로 더 비쌀 수 있으며 모든 워크로드에 필요하지 않을 수 있어, 덜 중요한 애플리케이션에 대해 성능 이점 없이 더 높은 비용이 발생할 수 있습니다."
        ]
    },
    {
        "Question Number": "54",
        "Situation": "소매 회사는 고객 관계 관리를 위한 Salesforce와 웹사이트 성능 추적을 위한 Google Analytics를 포함한 다양한 SaaS 애플리케이션을 사용하고 있습니다. 회사는 분석 목적으로 Salesforce에서 Amazon S3로 고객 데이터를 자동으로 전송하고 싶어하며, 이 데이터가 수동 개입 없이 정기적으로 업데이트되도록 하기를 원합니다. 또한, 데이터가 변환되고 분석을 위해 준비되도록 하고 싶습니다. 회사는 운영 오버헤드를 최소화하고 AWS 서비스와의 쉬운 통합을 허용하는 솔루션을 찾고 있습니다.",
        "Question": "솔루션 아키텍트가 Salesforce와 Amazon S3 간의 데이터 흐름을 자동화하면서 데이터가 변환되고 분석을 위해 준비되도록 하기 위해 구현해야 할 솔루션은 무엇입니까?",
        "Options": {
            "1": "Amazon Kinesis Data Firehose를 설정하여 Salesforce에서 Amazon S3로 거의 실시간으로 데이터를 스트리밍합니다.",
            "2": "AWS Glue 작업을 사용하여 Salesforce에서 데이터를 추출하고 미리 정의된 일정에 따라 Amazon S3로 로드합니다.",
            "3": "Amazon AppFlow를 구성하여 Salesforce에서 Amazon S3로 데이터를 전송하고 과정 중에 필요한 변환을 적용합니다.",
            "4": "AWS Lambda와 Salesforce API를 사용하여 데이터를 추출하고 Amazon S3로 로드하는 사용자 지정 애플리케이션을 개발합니다."
        },
        "Correct Answer": "Amazon AppFlow를 구성하여 Salesforce에서 Amazon S3로 데이터를 전송하고 과정 중에 필요한 변환을 적용합니다.",
        "Explanation": "Amazon AppFlow는 Salesforce와 Amazon S3와 같은 AWS 서비스 간의 데이터 전송 프로세스를 단순화하는 완전 관리형 서비스입니다. 데이터 흐름을 쉽게 구성할 수 있으며, 데이터가 이동하는 동안 변환을 적용할 수 있는 기능을 제공하여 회사의 자동화 및 데이터 준비 요구 사항을 충족합니다.",
        "Other Options": [
            "사용자 지정 애플리케이션을 개발하는 것은 불필요한 복잡성과 운영 오버헤드를 추가하여 운영 부담을 최소화하려는 요구 사항에 반합니다. 코드를 유지 관리하고 API 속도 제한을 수동으로 처리해야 합니다.",
            "Amazon Kinesis Data Firehose는 예약된 데이터 전송보다는 실시간 스트리밍 애플리케이션에 더 적합합니다. Amazon AppFlow만큼 효과적으로 내장된 변환 기능을 제공하지 않습니다.",
            "AWS Glue 작업은 일반적으로 ETL 프로세스에 사용되며 작업을 예약하고 관리하기 위한 추가 설정이 필요합니다. 목표를 달성할 수 있지만 Amazon AppFlow의 간단한 구성에 비해 더 많은 복잡성을 도입합니다."
        ]
    },
    {
        "Question Number": "55",
        "Situation": "성장하는 온라인 소매 회사가 온프레미스 인프라를 AWS로 마이그레이션하는 총 소유 비용(TCO)을 평가하고 있습니다. 그들은 직접 비용뿐만 아니라 운영 비용 및 전환 중 발생할 수 있는 다운타임과 같은 간접 비용도 이해하고자 합니다. 이 이동의 전반적인 재정적 영향을 평가하기 위해 솔루션 아키텍트와 상담했습니다.",
        "Question": "회사가 AWS로의 마이그레이션에 대한 총 소유 비용(TCO)을 정확하게 계산하기 위해 가장 효과적인 접근 방식은 무엇입니까?",
        "Options": {
            "1": "다른 요소를 고려하지 않고 그들이 사용할 AWS 서비스의 가격에만 집중합니다.",
            "2": "그들의 산업에서 다른 회사들이 수행한 유사한 마이그레이션의 역사적 데이터를 기반으로 비용을 추정합니다.",
            "3": "온프레미스 데이터 센터를 유지하지 않음으로써 발생할 수 있는 잠재적 절감액만 고려합니다.",
            "4": "AWS TCO Calculator를 활용하여 분석에 직접 비용과 간접 비용을 모두 포함합니다."
        },
        "Correct Answer": "AWS TCO Calculator를 활용하여 분석에 직접 비용과 간접 비용을 모두 포함합니다.",
        "Explanation": "AWS TCO Calculator를 사용하면 AWS로의 이동에 따른 재정적 영향을 포괄적으로 파악할 수 있으며, 직접 비용(예: 컴퓨팅 및 스토리지)과 간접 비용(예: 운영 비용 및 잠재적 다운타임)을 모두 고려합니다. 이러한 전체적인 접근 방식은 회사가 정확한 재정 예측에 기반하여 정보에 입각한 결정을 내릴 수 있도록 보장합니다.",
        "Other Options": [
            "AWS 서비스 가격에만 집중하는 것은 간접 비용 및 운영 영향을 포함한 더 넓은 재정적 그림을 무시하여 실제 TCO를 과소평가할 수 있습니다.",
            "다른 회사의 역사적 데이터를 기반으로 비용을 추정하는 것은 회사의 고유한 상황, 특정 작업 부하 및 운영 요구 사항을 정확하게 반영하지 않을 수 있습니다.",
            "온프레미스 데이터 센터를 없애는 것에서 발생할 수 있는 잠재적 절감액만 고려하는 것은 AWS 서비스와 관련된 지속적인 비용, 운영 변화 및 초기 마이그레이션 비용을 고려하지 못합니다."
        ]
    },
    {
        "Question Number": "56",
        "Situation": "한 회사가 Amazon ECS를 사용하여 EC2 런치 타입으로 마이크로서비스 아키텍처를 운영하고 있습니다. 그들은 비용을 줄이기 위해 Spot 인스턴스를 활용하는 것을 고려하고 있으며, 인스턴스 종료 중 서비스 중단을 최소화하고자 합니다. 회사는 ECS가 기본 EC2 인스턴스와 함께 작업 종료를 어떻게 관리하는지 이해하고자 합니다.",
        "Question": "Amazon ECS는 EC2 인스턴스 종료 중 서비스 중단을 최소화하기 위해 마이크로서비스 아키텍처에서 Spot 인스턴스의 사용을 어떻게 향상시킵니까?",
        "Options": {
            "1": "ECS는 작업 DRAINING을 관리하여 연결을 우아하게 종료하고 새로운 EC2 인스턴스에서 대체 작업을 예약합니다.",
            "2": "ECS는 Spot 인스턴스 종료를 처리하기 위해 수동 개입이 필요하여 고가용성에 덜 효율적입니다.",
            "3": "ECS는 종료된 Spot 인스턴스를 대체하기 위해 예약 인스턴스를 사용하여 작업의 지속적인 가용성을 보장합니다.",
            "4": "ECS는 작업이 더 이상 실행되지 않을 때 Spot 인스턴스를 자동으로 종료하여 효율적인 자원 활용을 보장합니다."
        },
        "Correct Answer": "ECS는 작업 DRAINING을 관리하여 연결을 우아하게 종료하고 새로운 EC2 인스턴스에서 대체 작업을 예약합니다.",
        "Explanation": "Amazon ECS는 Spot 인스턴스 종료 중 고유한 DRAINING 기능을 활용하여 작업을 우아하게 중지하고, 연결을 깔끔하게 종료하며, 대체 작업을 효율적으로 예약하여 서비스 중단을 최소화합니다.",
        "Other Options": [
            "이 옵션은 ECS가 작업 상태에 따라 Spot 인스턴스를 자동으로 종료하지 않기 때문에 잘못되었습니다. 대신, 기본 인스턴스가 종료될 때 작업의 우아한 종료를 관리합니다.",
            "이 옵션은 ECS가 종료된 Spot 인스턴스를 대체하기 위해 예약 인스턴스에 의존하지 않기 때문에 잘못되었습니다. 대신, 작업 종료 및 새로운 인스턴스에서의 대체 작업 예약을 관리하기 위해 DRAINING 기능을 활용합니다.",
            "이 옵션은 ECS가 작업 관리를 위한 자동화를 제공하지만 Spot 인스턴스 종료를 처리하기 위해 수동 개입이 필요하지 않기 때문에 잘못되었습니다. DRAINING 프로세스를 자동화합니다."
        ]
    },
    {
        "Question Number": "57",
        "Situation": "한 소매 회사가 고객 주문을 실시간으로 처리하는 새로운 애플리케이션을 구축하고 있습니다. 이 애플리케이션은 성수기 동안 가변 작업 부하를 처리할 것으로 예상되며 최소한의 관리 오버헤드가 필요합니다. 솔루션 아키텍트는 이러한 요구 사항을 충족하기 위해 서버리스 컴퓨팅 옵션을 고려하고 있습니다.",
        "Question": "가변 작업 부하를 처리하면서 관리 오버헤드를 최소화하기 위해 어떤 AWS 서버리스 컴퓨팅 서비스가 가장 적합합니까?",
        "Options": {
            "1": "컨테이너화된 애플리케이션을 실행하기 위한 Amazon ECS with Fargate",
            "2": "인스턴스 스케일링 관리를 위한 Amazon EC2 Auto Scaling",
            "3": "이벤트에 응답하여 코드를 실행하기 위한 AWS Lambda",
            "4": "애플리케이션 배포 및 관리를 위한 AWS Elastic Beanstalk"
        },
        "Correct Answer": "AWS Lambda를 사용하여 이벤트에 응답하여 코드를 실행합니다.",
        "Explanation": "AWS Lambda는 서버리스 컴퓨팅을 위해 설계되었으며, 들어오는 요청에 따라 자동으로 확장할 수 있어 관리 오버헤드를 최소화하면서 가변 작업 부하를 처리하는 데 이상적입니다.",
        "Other Options": [
            "Amazon ECS with Fargate는 컨테이너화된 애플리케이션에 대해 서버리스이지만 AWS Lambda에 비해 더 많은 관리 및 구성이 필요합니다. AWS Lambda는 이벤트 기반이며 관리할 서버 인프라가 없습니다.",
            "Amazon EC2 Auto Scaling은 EC2 인스턴스의 플릿을 관리하며 인스턴스 프로비저닝 및 관리에 수동 개입이 필요하므로 최소한의 관리 오버헤드 요구 사항과 모순됩니다.",
            "AWS Elastic Beanstalk는 애플리케이션 배포를 단순화하지만 여전히 기본 리소스에 대한 일부 관리가 필요하므로 가변 작업 부하를 처리하기 위해 설계된 완전한 서버리스 아키텍처에는 덜 적합합니다."
        ]
    },
    {
        "Question Number": "58",
        "Situation": "글로벌 전자상거래 회사가 현재 단일 AWS 리전에서 운영 중인 데이터베이스의 지연 시간 및 데이터 일관성 문제를 겪고 있습니다. 경영진은 다양한 지리적 지역의 사용자에게 저지연 읽기를 제공하고 재해 복구 기능을 보장하는 것을 목표로 하고 있습니다. 이들은 이러한 요구 사항을 충족하기 위해 Amazon Aurora를 사용하는 것을 고려하고 있습니다.",
        "Question": "다음 솔루션 중 솔루션 아키텍트가 여러 리전에서 애플리케이션 성능과 가용성을 개선하기 위해 추천해야 할 것은 무엇입니까?",
        "Options": {
            "1": "각 AWS 리전에서 Amazon RDS 읽기 복제본을 활용하여 읽기 트래픽을 분산시키고, 한 리전에서 쓰기 작업을 위한 단일 기본 데이터베이스 인스턴스를 유지합니다.",
            "2": "Amazon Aurora Global Database를 구현하여 여러 AWS 리전에서 저지연 읽기를 가능하게 하고 재해 복구 기능을 보장합니다. 쓰기를 위한 기본 리전과 읽기 복제본을 위한 보조 리전을 구성합니다.",
            "3": "Amazon Aurora Multi-Master 클러스터를 배포하여 서로 다른 AWS 리전에서 여러 읽기-쓰기 인스턴스를 허용하고 높은 가용성과 장애 조치 기능을 제공합니다.",
            "4": "각 AWS 리전에서 별도의 Amazon Aurora 인스턴스를 설정하고 AWS Database Migration Service를 사용하여 데이터의 지속적인 복제를 통해 데이터 일관성을 보장하고 지연 시간을 최소화합니다."
        },
        "Correct Answer": "Amazon Aurora Global Database를 구현하여 여러 AWS 리전에서 저지연 읽기를 가능하게 하고 재해 복구 기능을 보장합니다. 쓰기를 위한 기본 리전과 읽기 복제본을 위한 보조 리전을 구성합니다.",
        "Explanation": "Amazon Aurora Global Database는 전 세계적으로 분산된 애플리케이션을 위해 특별히 설계되어 저지연 읽기를 가능하게 하고 지역 중단으로부터 재해 복구를 제공합니다. 이 솔루션은 회사의 요구 사항을 효과적으로 충족합니다.",
        "Other Options": [
            "Amazon Aurora Multi-Master는 여러 읽기-쓰기 인스턴스를 허용하지만 리전 간 배포를 지원하지 않아 서로 다른 리전에서 저지연 접근이 필요한 요구에 적합하지 않습니다.",
            "각 리전에서 별도의 Amazon Aurora 인스턴스를 설정하면 데이터 관리와 일관성이 복잡해지며, Aurora의 글로벌 데이터베이스 기능의 이점을 활용하지 못합니다.",
            "Amazon RDS 읽기 복제본을 사용하면 읽기 트래픽을 분산시킬 수 있지만, Aurora Global Database와 같은 수준의 재해 복구 및 저지연 기능을 여러 리전에서 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "59",
        "Situation": "글로벌 전자상거래 회사가 전 세계 다양한 지역의 고객에게 서비스를 제공하는 웹사이트를 운영하고 있습니다. 이 회사는 AWS Route 53을 사용하여 DNS 레코드를 관리하고 있으며, 사용자에게 저지연 및 높은 가용성을 보장하기 위해 트래픽 라우팅을 최적화하고자 합니다. 이 회사는 여러 AWS 리전에서 배포된 웹 서버를 보유하고 있으며, 사용자 경험과 자원 활용을 최적의 균형으로 맞추는 라우팅 전략을 구현하고자 합니다.",
        "Question": "회사가 사용자 요청에 대해 가장 낮은 지연 시간을 제공하는 AWS 리전으로 사용자를 유도하기 위해 어떤 라우팅 정책을 구현해야 합니까?",
        "Options": {
            "1": "지연 시간 라우팅 정책을 사용하여 가장 좋은 응답 시간을 제공하는 리전으로 트래픽을 라우팅합니다.",
            "2": "가중치 라우팅 정책을 사용하여 여러 리전 간에 트래픽을 비례적으로 분배합니다.",
            "3": "지리적 위치 라우팅 정책을 사용하여 사용자의 지리적 위치에 따라 사용자를 유도합니다.",
            "4": "장애 조치 라우팅 정책을 사용하여 기본 리전이 실패할 경우 백업 리전으로 트래픽을 전환합니다."
        },
        "Correct Answer": "지연 시간 라우팅 정책을 사용하여 가장 좋은 응답 시간을 제공하는 리전으로 트래픽을 라우팅합니다.",
        "Explanation": "지연 시간 라우팅 정책은 사용자를 가장 낮은 지연 시간을 제공하는 AWS 리전으로 라우팅하도록 특별히 설계되어 사용자 요청에 대한 최적의 성능을 보장합니다. 이는 응답 시간을 최소화하고 전체 사용자 경험을 개선합니다.",
        "Other Options": [
            "지리적 위치 라우팅 정책은 사용자 위치에 따라 트래픽을 유도하므로, 서로 다른 리전에서 경험하는 지연 시간을 기준으로 하지 않기 때문에 모든 사용자에게 가장 낮은 지연 시간을 제공하지 않을 수 있습니다.",
            "가중치 라우팅 정책은 여러 리소스 간에 트래픽을 분배할 수 있지만, 지연 시간을 고려하지 않기 때문에 한 리전이 다른 리전보다 상당히 빠를 경우 사용자에게 최적의 성능을 제공하지 못할 수 있습니다.",
            "장애 조치 라우팅 정책은 기본 리전이 실패할 경우에만 백업 리소스로 트래픽을 전환하는 재해 복구 시나리오를 위한 것이며, 정상 운영 중에는 저지연을 적극적으로 최적화하지 않습니다."
        ]
    },
    {
        "Question Number": "60",
        "Situation": "소매 회사가 여러 매장에서 재고를 관리하기 위한 새로운 애플리케이션을 개발하고 있습니다. 이 애플리케이션은 데이터베이스 서비스로 Amazon DynamoDB를 사용할 것입니다. 팀은 카테고리 및 매장 위치별로 재고 항목을 쿼리하기 위해 다양한 쿼리 패턴에 따라 읽기 및 쓰기 작업을 최적화해야 합니다. 이들은 이를 달성하기 위해 보조 인덱스의 사용을 고려하고 있습니다. 팀은 Global Secondary Indexes (GSI)와 Local Secondary Indexes (LSI)의 차이를 알고 있지만, 최적의 성능을 위해 어떤 인덱스를 구현해야 하는지에 대한 지침이 필요합니다.",
        "Question": "Solutions Architect가 DynamoDB 모범 사례를 준수하면서 카테고리 및 매장 위치별로 재고 항목을 효율적으로 쿼리하기 위해 어떤 접근 방식을 추천해야 합니까?",
        "Options": {
            "1": "카테고리를 정렬 키로 하고 매장 위치를 정렬 키로 하는 두 개의 Local Secondary Indexes를 생성하며, 두 인덱스 모두 테이블과 동일한 파티션 키를 공유합니다.",
            "2": "매장 위치에 대해 테이블과 동일한 파티션 키를 사용하여 Local Secondary Index를 생성하되, 카테고리를 정렬 키로 사용합니다. 이를 통해 매장 위치와 카테고리별로 쿼리할 수 있습니다.",
            "3": "매장 위치를 파티션 키로 하고 카테고리를 정렬 키로 사용하는 Global Secondary Index를 생성합니다. 그런 다음 카테고리를 파티션 키로 하고 타임스탬프를 정렬 키로 하는 또 다른 Global Secondary Index를 생성합니다.",
            "4": "매장 위치를 파티션 키로 하고 카테고리를 정렬 키로 하는 하나의 Global Secondary Index를 생성합니다. 카테고리를 파티션 키로 하고 타임스탬프를 정렬 키로 하는 또 다른 Global Secondary Index를 생성합니다."
        },
        "Correct Answer": "매장 위치를 파티션 키로 하고 카테고리를 정렬 키로 하는 하나의 Global Secondary Index를 생성합니다. 카테고리를 파티션 키로 하고 타임스탬프를 정렬 키로 하는 또 다른 Global Secondary Index를 생성합니다.",
        "Explanation": "Global Secondary Indexes를 사용하면 서로 다른 파티션 및 정렬 키를 사용할 수 있어 원래 테이블의 파티션 키에 제한받지 않고 매장 위치와 카테고리별로 효율적으로 쿼리할 수 있습니다. 이는 다양한 쿼리 패턴을 최적화하는 요구 사항에 부합합니다.",
        "Other Options": [
            "이 옵션은 Local Secondary Index를 사용하면 파티션 키당 인덱싱된 항목의 총 크기가 10GB로 제한되기 때문에 잘못된 것입니다. 또한 카테고리와 매장 위치별로 효율적으로 쿼리하기 위해 필요한 유연성을 제공할 수 없습니다.",
            "이 옵션은 두 개의 Local Secondary Index를 생성하는 것을 제안하므로 잘못된 것입니다. Local Secondary Index는 테이블과 동일한 파티션 키를 공유하므로 서로 다른 파티션 키를 기반으로 한 별도의 쿼리 패턴을 효과적으로 생성할 수 없습니다.",
            "이 옵션은 Global Secondary Indexes를 생성하는 것을 제안하지만, 제안된 키 조합은 카테고리와 매장 위치별로 재고 항목을 효과적으로 쿼리하는 데 최적화되지 않습니다. 두 인덱스를 모두 갖는 것은 중복이며, 하나의 인덱스가 두 쿼리 패턴을 처리할 수 있도록 구조화될 수 있습니다."
        ]
    },
    {
        "Question Number": "61",
        "Situation": "한 금융 서비스 회사가 비용 최적화를 위해 다양한 AWS 가격 모델을 평가하고 있습니다. 이 회사는 상당한 컴퓨팅 파워를 요구하는 일관된 작업량을 가지고 있지만, 보고 요구 사항으로 인해 특정 시기에 사용량이 예측 가능한 급증을 경험합니다. 그들은 성능을 유지하면서 가장 비용 효율적인 결정을 내리고 싶어합니다.",
        "Question": "다음 중 회사의 예측 가능한 작업량과 사용량 급증에 대한 비용을 최적화하면서 가장 적합한 가격 모델은 무엇입니까?",
        "Options": {
            "1": "기본 작업량을 충족하기 위해 온디맨드 인스턴스를 활용하고, 비용 절감을 위해 피크 사용 기간 동안 예약 인스턴스를 구매합니다.",
            "2": "비용에 관계없이 작업량에 대한 최대 성능과 규정을 보장하기 위해 전용 호스트를 선택합니다.",
            "3": "일관된 작업량과 급증에 대해 스팟 인스턴스를 배포하여 가장 비용 효율적인 옵션을 제공합니다.",
            "4": "컴퓨팅 사용량에 대한 세이빙 플랜을 구현하여 변화하는 작업량에 적응할 수 있는 유연성을 제공하면서도 낮은 요금의 혜택을 누립니다."
        },
        "Correct Answer": "컴퓨팅 사용량에 대한 세이빙 플랜을 구현하여 변화하는 작업량에 적응할 수 있는 유연성을 제공하면서도 낮은 요금의 혜택을 누립니다.",
        "Explanation": "세이빙 플랜은 비용을 효과적으로 관리할 수 있는 능력을 제공하면서 작업량의 유연성을 허용합니다. 이 모델은 회사가 예측 가능한 급증에 적응할 수 있도록 하여 경직된 가격 구조에 얽매이지 않고 전체 지출을 최적화할 수 있게 합니다.",
        "Other Options": [
            "온디맨드 인스턴스는 장기 작업량에 대해 비용이 많이 들 수 있으며, 피크 사용 시 예약 인스턴스나 세이빙 플랜만큼의 절감 효과를 제공하지 않습니다.",
            "스팟 인스턴스는 일관된 작업량과 예측 가능한 급증에 적합하지 않으며, 가용성이 변동할 수 있어 필요할 때 필요한 컴퓨팅 파워를 보장하지 않을 수 있습니다.",
            "전용 호스트는 일반적으로 더 비쌉니다. 특정 인스턴스 유형에 대한 약속이 필요하며, 회사의 요구에 대해 비용을 효과적으로 최적화하지 않습니다."
        ]
    },
    {
        "Question Number": "62",
        "Situation": "한 소매 회사가 Amazon RDS에 호스팅된 온라인 거래 처리 시스템에서 성능 문제를 겪고 있습니다. 애플리케이션은 데이터베이스 연결을 자주 열고 닫아 데이터베이스의 높은 대기 시간과 자원 고갈을 초래합니다. 솔루션 아키텍트는 확장성과 복원력을 개선하면서 데이터베이스에 대한 안전한 접근을 보장하는 임무를 맡았습니다. 애플리케이션은 관계형 데이터베이스 요구를 위해 Amazon Aurora를 사용합니다.",
        "Question": "어떤 솔루션이 데이터베이스 연결을 최적화하고 애플리케이션의 성능을 개선할 수 있습니까?",
        "Options": {
            "1": "Amazon Elasticache를 사용하여 데이터베이스 응답을 캐시하고 Amazon Aurora 데이터베이스에 대한 직접 쿼리 수를 최소화합니다.",
            "2": "Amazon Aurora 데이터베이스의 인스턴스 크기를 늘려 더 많은 동시 연결을 처리하고 성능을 개선합니다.",
            "3": "데이터베이스를 Amazon DynamoDB로 마이그레이션하여 연결 관리의 필요성을 없애고 확장성을 개선합니다.",
            "4": "Amazon RDS Proxy를 구현하여 데이터베이스 연결을 풀링하고 관리하여 애플리케이션에서 열고 닫는 연결 수를 줄입니다."
        },
        "Correct Answer": "Amazon RDS Proxy를 구현하여 데이터베이스 연결을 풀링하고 관리하여 애플리케이션에서 열고 닫는 연결 수를 줄입니다.",
        "Explanation": "Amazon RDS Proxy를 구현하면 애플리케이션이 데이터베이스 연결을 풀링하고 공유할 수 있어 반복적으로 연결을 설정하는 오버헤드를 줄입니다. 이는 성능과 확장성을 개선하고 데이터베이스 실패에 대한 복원력을 강화합니다.",
        "Other Options": [
            "인스턴스 크기를 늘리면 성능이 개선될 수 있지만, 연결 관리의 근본적인 문제를 해결하지 않으며 불필요한 비용을 초래할 수 있습니다.",
            "Amazon DynamoDB로 마이그레이션하면 애플리케이션 아키텍처에 상당한 변경이 필요하며 현재의 관계형 모델과 일치하지 않을 수 있어 비현실적인 솔루션이 될 수 있습니다.",
            "Amazon Elasticache를 사용하면 데이터베이스에 대한 직접 쿼리를 줄이는 데 도움이 될 수 있지만, 성능 저하를 초래하는 연결 관리 문제를 해결하지는 않습니다."
        ]
    },
    {
        "Question Number": "63",
        "Situation": "한 금융 서비스 회사가 민감한 고객 데이터를 처리하는 애플리케이션을 AWS에 배포했습니다. 관리자는 모든 정지 데이터가 암호화되고 민감한 리소스에 대한 접근이 엄격하게 통제되도록 요구합니다. 보안 준수의 일환으로, 그들은 모든 접근 요청을 감사하고 기존의 신원 관리 시스템과 통합할 수 있는 솔루션을 구현하고자 합니다.",
        "Question": "준수 요구 사항을 충족하면서 애플리케이션의 보안을 강화하기 위해 어떤 조치를 취할 수 있습니까? (두 가지 선택)",
        "Options": {
            "1": "AWS IAM 역할을 사용하여 AWS 리소스에 대한 세밀한 접근 제어를 허용합니다.",
            "2": "AWS Directory Service를 활용하여 기존의 신원 관리 시스템과 통합합니다.",
            "3": "AWS Key Management Service (KMS)를 활성화하여 정지 데이터에 대한 암호화 키를 관리합니다.",
            "4": "AWS CloudTrail을 배포하여 감사 목적으로 모든 API 호출을 기록하고 모니터링합니다.",
            "5": "Amazon CloudWatch Logs를 구현하여 접근 요청을 추적하지만 로그를 보존하지 않습니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Key Management Service (KMS)를 활성화하여 정지 데이터에 대한 암호화 키를 관리합니다.",
            "AWS CloudTrail을 배포하여 감사 목적으로 모든 API 호출을 기록하고 모니터링합니다."
        ],
        "Explanation": "AWS Key Management Service (KMS)를 활성화하면 정지 데이터 암호화에 사용되는 암호화 키에 대한 중앙 집중식 제어를 제공하여 민감한 정보의 기밀성을 보장하는 데 필수적입니다. AWS CloudTrail을 배포하면 애플리케이션과 관련된 모든 API 활동을 포괄적으로 기록하여 접근 요청의 감사 및 모니터링을 가능하게 하여 준수에 매우 중요합니다.",
        "Other Options": [
            "세밀한 접근 제어를 위한 IAM 역할 사용은 중요하지만, KMS와 CloudTrail만큼 효과적으로 데이터 암호화 및 감사에 대한 특정 요구 사항을 직접적으로 해결하지는 않습니다.",
            "CloudWatch Logs를 구현하면 접근 요청을 추적하는 데 도움이 될 수 있지만, 로그를 보존하지 않고 단순히 추적하는 것은 CloudTrail이 제공할 수 있는 감사 요구 사항을 충족하지 않습니다.",
            "AWS Directory Service는 기존 신원 관리 시스템과의 통합을 용이하게 하지만, 데이터 암호화 및 접근 감사와 관련하여 보안이나 준수를 본질적으로 강화하지는 않습니다."
        ]
    },
    {
        "Question Number": "64",
        "Situation": "한 금융 서비스 회사가 높은 처리량과 낮은 대기 시간을 요구하는 미션 크리티컬 애플리케이션을 지원하기 위해 다양한 Amazon Elastic Block Store (EBS) 볼륨 유형을 평가하고 있습니다. 이들은 무작위 I/O 작업을 처리할 수 있고, 가장 높은 내구성과 성능을 요구하는 EBS 볼륨 유형을 선택해야 합니다. 애플리케이션은 대기 시간에 민감하며, 작업 부하 요구에 따라 IOPS를 프로비저닝할 수 있는 능력이 필요합니다.",
        "Question": "다음 중 회사의 요구 사항에 가장 적합한 EBS 볼륨 유형은 무엇입니까?",
        "Options": {
            "1": "sc1: 덜 자주 접근되는 작업 부하와 콜드 스토리지를 위해 설계된 가장 저렴한 HDD 볼륨.",
            "2": "st1: 자주 접근되는, 처리량 집약적인 작업 부하를 위해 설계된 저비용 HDD 볼륨.",
            "3": "gp2: 다양한 작업 부하에 대해 균형 잡힌 가격과 성능을 제공하는 일반 목적 SSD 볼륨.",
            "4": "io1: 미션 크리티컬한 낮은 대기 시간 또는 높은 처리량 작업 부하를 위한 최고 성능 SSD 볼륨."
        },
        "Correct Answer": "io1: 미션 크리티컬한 낮은 대기 시간 또는 높은 처리량 작업 부하를 위한 최고 성능 SSD 볼륨.",
        "Explanation": "io1 볼륨 유형은 최고의 성능을 제공하며 최대 64,000 IOPS를 프로비저닝할 수 있어 낮은 대기 시간과 높은 처리량 성능이 요구되는 미션 크리티컬 애플리케이션에 이상적입니다. 또한 무작위 I/O에 의존하는 작업 부하를 위해 특별히 설계되어 회사의 요구 사항과 완벽하게 일치합니다.",
        "Other Options": [
            "gp2 볼륨 유형은 다재다능하지만 io1과 동일한 수준의 IOPS 프로비저닝을 제공하지 않으며 미션 크리티컬 애플리케이션의 낮은 대기 시간 요구를 충족하지 못할 수 있습니다.",
            "sc1 볼륨 유형은 덜 자주 접근되는 작업 부하와 콜드 스토리지를 위해 설계되었으며, 애플리케이션의 높은 성능 요구를 충족하지 못합니다.",
            "st1 볼륨 유형은 처리량 집약적인 작업 부하를 위해 설계되었지만 낮은 대기 시간 애플리케이션에는 적합하지 않으며 io1의 성능과 내구성을 따라갈 수 없습니다."
        ]
    },
    {
        "Question Number": "65",
        "Situation": "한 글로벌 전자상거래 회사가 AWS Backup을 활용하여 Amazon RDS, Amazon EFS 및 EC2 인스턴스를 포함한 다양한 AWS 서비스 전반에 걸쳐 데이터 보호를 중앙 집중화하고 자동화하고 있습니다. 이 회사는 규제 준수로 인해 다양한 데이터 유형에 대한 백업 빈도와 보존 기간에 대한 특정 요구 사항이 있습니다. 경영진은 백업 정책이 쉽게 조정 가능하고, 단일 대시보드에서 백업 활동을 모니터링할 수 있도록 하고 싶어합니다.",
        "Question": "다음 중 회사의 중앙 집중식 백업 관리 및 준수 요구 사항을 가장 잘 충족하는 접근 방식은 무엇입니까?",
        "Options": {
            "1": "각 서비스에 대한 백업을 자동화하고 모니터링을 위해 CloudWatch에 로그를 저장하기 위해 AWS Lambda 함수를 구현합니다.",
            "2": "AWS Backup을 활용하여 빈도 및 보존 정책을 정의하는 중앙 집중식 백업 계획을 생성하고 AWS Backup 대시보드에서 모든 활동을 모니터링합니다.",
            "3": "각 AWS 서비스에 대한 개별 백업 계획을 생성하고 각 서비스의 콘솔을 통해 상태를 수동으로 모니터링합니다.",
            "4": "AWS Systems Manager Automation 문서를 예약하여 각 서비스의 백업을 수행하고 결과를 S3 버킷에 집계합니다."
        },
        "Correct Answer": "AWS Backup을 활용하여 빈도 및 보존 정책을 정의하는 중앙 집중식 백업 계획을 생성하고 AWS Backup 대시보드에서 모든 활동을 모니터링합니다.",
        "Explanation": "AWS Backup은 여러 AWS 서비스 전반에 걸쳐 백업 관리를 중앙 집중화하고, 조정 가능한 정책으로 백업 작업을 자동화하며, 통합 대시보드에서 백업 활동을 모니터링할 수 있는 완전 관리형 서비스를 제공합니다. 이는 준수 및 관리에 가장 적합한 선택입니다.",
        "Other Options": [
            "각 AWS 서비스에 대한 개별 백업 계획을 생성하면 관리가 복잡해지고 중앙 집중식 뷰를 제공하지 않아 조직 전반의 준수를 보장하기 어렵습니다.",
            "AWS Lambda 함수를 사용하는 것은 백업을 자동화할 수 있지만, 백업을 모니터링하고 관리하는 데 더 많은 복잡성과 수동 노력이 필요하여 중앙 집중화 목표를 저해합니다.",
            "AWS Systems Manager Automation 문서를 예약하는 것도 각 서비스에 대한 별도의 관리가 필요하며, AWS Backup의 중앙 집중식 및 자동화된 기능이 부족하여 준수 요구 사항을 효과적으로 충족하지 못합니다."
        ]
    },
    {
        "Question Number": "66",
        "Situation": "한 개발 팀이 AWS Lambda에서 실행되는 서버리스 애플리케이션의 새 버전을 배포할 준비를 하고 있습니다. 이 애플리케이션은 상당한 사용자 기반을 가지고 있으며, 팀은 배포 과정에서 위험을 최소화하고자 합니다. 그들은 성능 모니터링을 허용하면서 새로운 버전으로 트래픽을 점진적으로 전환할 수 있는 배포 구성을 선택해야 합니다.",
        "Question": "다음 중 Lambda 함수의 새 버전으로 트래픽을 점진적으로 전환하면서 성능 모니터링을 허용하는 배포 구성은 무엇입니까?",
        "Options": {
            "1": "Linear: 지정된 기간 동안 동일한 비율로 트래픽을 전환하여 점진적인 모니터링을 허용합니다.",
            "2": "Rolling: 안정성을 보장하기 위해 한 번에 하나의 버전으로 순차적으로 트래픽을 전환합니다.",
            "3": "Canary: 처음에 새로운 버전으로 소량의 트래픽을 전환한 후 모니터링 후 나머지를 전환합니다.",
            "4": "All-at-once: 점진적인 전환 없이 모든 트래픽을 즉시 새로운 버전으로 전환합니다."
        },
        "Correct Answer": "Canary: 처음에 새로운 버전으로 소량의 트래픽을 전환한 후 모니터링 후 나머지를 전환합니다.",
        "Explanation": "Canary 배포 구성은 새로운 버전으로의 점진적인 트래픽 전환을 허용하여 성능 모니터링과 위험 최소화에 이상적입니다. 이 접근 방식은 팀이 전체 전환 전에 소수의 사용자와 함께 새로운 버전의 동작을 평가할 수 있게 합니다.",
        "Other Options": [
            "Linear 배포는 점진적인 트래픽 전환을 허용하지만, canary 접근 방식만큼의 위험 관리 및 모니터링 수준을 제공하지 않기 때문에 이 시나리오에 가장 적합한 옵션이 아닙니다.",
            "All-at-once 배포는 모든 트래픽을 즉시 새로운 버전으로 전환하므로, 모니터링 기회 없이 전체 사용자 기반에 문제를 도입할 위험이 증가하기 때문에 권장되지 않습니다.",
            "Rolling 배포는 AWS Lambda에 대한 정의된 배포 전략으로 존재하지 않기 때문에 유효한 옵션이 아닙니다. Lambda는 canary, linear 및 all-at-once 구성을 지원합니다."
        ]
    },
    {
        "Question Number": "67",
        "Situation": "한 금융 서비스 회사가 애플리케이션을 실행하기 위해 Amazon EC2 인스턴스를 사용하고 있습니다. 그들은 월별 AWS 청구서가 예상보다 높다는 것을 알게 되었습니다. 팀은 성능을 저하시키지 않으면서 비용 최적화 기회를 식별하는 임무를 맡고 있습니다.",
        "Question": "회사가 비용을 줄이기 위해 구현할 수 있는 두 가지 전략은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "예측 가능한 워크로드에 대해 예약 인스턴스를 구현합니다.",
            "2": "비핵심 워크로드에 대해 스팟 인스턴스로 전환합니다.",
            "3": "성능 향상을 위해 기존 EC2 인스턴스의 크기를 늘립니다.",
            "4": "수요에 따라 EC2 인스턴스 수를 조정하기 위해 Auto Scaling을 사용합니다.",
            "5": "애플리케이션을 단일 대형 EC2 인스턴스로 마이그레이션합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "비핵심 워크로드에 대해 스팟 인스턴스로 전환합니다.",
            "예측 가능한 워크로드에 대해 예약 인스턴스를 구현합니다."
        ],
        "Explanation": "비핵심 워크로드에 대해 스팟 인스턴스로 전환하면 회사는 사용되지 않는 EC2 용량에 대한 낮은 가격을 활용할 수 있어 비용을 크게 줄일 수 있습니다. 예약 인스턴스를 구현하면 예측 가능한 워크로드에 대한 비용 효율적인 솔루션을 제공하며, 온디맨드 가격에 비해 할인 혜택을 제공합니다.",
        "Other Options": [
            "애플리케이션을 단일 대형 EC2 인스턴스로 마이그레이션하면 비용이 더 높아질 수 있으며, AWS에서 제공하는 비용 절감 전략을 활용하지 못합니다. 이 접근 방식은 성능 병목 현상을 유발할 수도 있습니다.",
            "수요에 따라 EC2 인스턴스 수를 조정하기 위해 Auto Scaling을 사용하는 것은 자원을 효율적으로 관리하는 좋은 방법이지만, 비용 절감 인스턴스 유형이나 가격 모델과 결합되지 않는 한 직접적으로 비용을 줄이지는 않습니다.",
            "기존 EC2 인스턴스의 크기를 늘리는 것은 비용을 줄이기보다는 증가시킬 가능성이 높아, 비용 최적화 목표에 역행하는 결과를 초래합니다."
        ]
    },
    {
        "Question Number": "68",
        "Situation": "한 금융 서비스 회사는 중요한 애플리케이션이 복원력이 있고 재해로부터 신속하게 복구될 수 있도록 해야 합니다. 회사는 최소한의 데이터 손실과 다운타임에 대한 엄격한 요구 사항을 가지고 있습니다. 그들은 복구 시간 목표(RTO) 및 복구 지점 목표(RPO)에 따라 다양한 재해 복구 전략을 고려하고 있습니다.",
        "Question": "솔루션 아키텍트가 회사의 최소 데이터 손실 및 다운타임 요구 사항을 충족하기 위해 추천해야 할 재해 복구 전략은 무엇입니까?",
        "Options": {
            "1": "애플리케이션의 축소된 버전이 보조 지역에서 실행되는 웜 스탠바이 솔루션을 구현하여 재해 발생 시 신속하게 확장할 수 있도록 합니다.",
            "2": "매시간 시점 백업을 수행하여 24시간 이내에 데이터 복구가 가능하도록 백업 및 복원 전략을 활용합니다.",
            "3": "필수 구성 요소가 보조 지역에서 실행되도록 하는 파일럿 라이트 전략을 수립하고, 나머지 인프라는 재해 발생 시 신속하게 프로비저닝합니다.",
            "4": "여러 지역에서 실시간 트래픽을 제공하는 다중 지역 활성-활성 아키텍처를 배포하여 데이터 손실을 제로로 하고 즉각적인 장애 조치 기능을 보장합니다."
        },
        "Correct Answer": "여러 지역에서 실시간 트래픽을 제공하는 다중 지역 활성-활성 아키텍처를 배포하여 데이터 손실을 제로로 하고 즉각적인 장애 조치 기능을 보장합니다.",
        "Explanation": "다중 지역 활성-활성 아키텍처는 여러 지역에서 트래픽을 적극적으로 제공하여 최소한의 데이터 손실 및 다운타임 요구 사항을 충족하며, 이는 거의 제로 RPO 및 잠재적으로 제로 RTO를 제공합니다. 이 접근 방식은 지역 중단 동안에도 애플리케이션이 계속 사용 가능하도록 보장합니다.",
        "Other Options": [
            "웜 스탠바이 솔루션은 RTO를 줄이지만, 축소된 버전의 애플리케이션으로 운영되기 때문에 필요한 데이터 손실 보장을 제공하지 않을 수 있어 복구 지연을 초래할 수 있습니다.",
            "백업 및 복원 전략은 RTO와 RPO가 훨씬 길어 회사의 엄격한 최소 다운타임 및 데이터 손실 요구 사항과 일치하지 않습니다.",
            "파일럿 라이트 전략도 요구 사항을 완전히 충족하지 않으며, 재해 발생 시 추가 자원을 프로비저닝하는 데 의존하므로 복구 지연을 초래할 수 있습니다."
        ]
    },
    {
        "Question Number": "69",
        "Situation": "한 금융 서비스 회사는 AWS에 호스팅된 웹 애플리케이션에 대한 잠재적인 DDoS 공격에 대해 우려하고 있습니다. 그들은 합법적인 트래픽에 영향을 주지 않으면서 이러한 위협을 자동으로 감지하고 완화할 수 있는 솔루션을 구현하고자 합니다. 회사는 또한 보안 경고를 모니터링하고 다양한 AWS 서비스에 대한 보안 태세를 종합적으로 파악할 수 있는 기능이 필요합니다.",
        "Question": "DDoS 공격에 대한 가장 포괄적인 보호를 제공하면서 모니터링 및 경고 기능을 허용하는 AWS 관리 보안 서비스는 무엇입니까?",
        "Options": {
            "1": "트래픽 필터링을 위한 사용자 정의 규칙이 포함된 AWS WAF와 중앙 집중식 보안 관리를 위한 AWS Security Hub.",
            "2": "기본 DDoS 보호를 위한 AWS Shield Standard와 준수 모니터링을 위한 AWS Config.",
            "3": "취약성 평가를 위한 Amazon Inspector와 사고 대응을 위한 AWS Security Hub.",
            "4": "위협 감지 및 경고를 위한 Amazon GuardDuty와 함께 사용하는 AWS Shield Advanced."
        },
        "Correct Answer": "위협 감지 및 경고를 위한 Amazon GuardDuty와 함께 사용하는 AWS Shield Advanced.",
        "Explanation": "AWS Shield Advanced는 향상된 DDoS 보호를 제공하며, 실시간 공격 가시성 및 완화 기능을 포함하여 웹 애플리케이션 보호에 적합합니다. 지능형 위협 감지를 제공하는 Amazon GuardDuty와 함께 사용하면 이 조합은 포괄적인 보안 및 모니터링 기능을 보장합니다.",
        "Other Options": [
            "사용자 정의 규칙이 포함된 AWS WAF는 악성 트래픽 필터링에 효과적이지만 DDoS 완화 기능을 제공하지 않습니다. AWS Security Hub는 중앙 집중식 보안 관리에 유용하지만 DDoS 공격에 대한 직접적인 보호를 제공하지 않습니다.",
            "AWS Shield Standard는 기본 DDoS 보호를 제공하지만 Shield Advanced의 고급 기능 및 능동적 대응 기능이 부족합니다. AWS Config는 준수 모니터링에 중점을 두며 DDoS 위협을 직접적으로 다루지 않습니다.",
            "Amazon Inspector는 주로 취약성 평가에 사용되며 DDoS 보호나 트래픽 모니터링 기능을 제공하지 않습니다. AWS Security Hub는 보안 사고에 대한 통찰력을 제공할 수 있지만 완화 솔루션으로 작용하지 않습니다."
        ]
    },
    {
        "Question Number": "70",
        "Situation": "한 금융 서비스 회사가 AWS 인프라 전반에 걸쳐 보안 및 규정 준수를 강화하기 위해 중앙 집중식 로깅 솔루션을 구현하려고 합니다. 이 회사는 애플리케이션 로그, API 호출 및 시스템 이벤트를 포함한 모든 로그가 집계되고 의심스러운 활동에 대해 모니터링되도록 해야 합니다. 또한 즉각적인 주의가 필요한 중요한 로그 항목에 대한 이벤트 알림을 받고자 합니다.",
        "Question": "중앙 집중식 로깅 및 이벤트 알림 전략을 달성하는 데 도움이 되는 옵션의 조합은 무엇입니까? (두 개 선택)",
        "Options": {
            "1": "Amazon CloudWatch Logs를 활용하여 다양한 AWS 서비스 및 애플리케이션의 로그를 집계합니다.",
            "2": "AWS Config를 사용하여 구성 변경 사항을 모니터링하고 비준수 리소스에 대한 경고를 보냅니다.",
            "3": "추가 처리 또는 알림 메커니즘 없이 Amazon S3를 로그 저장소로 구현합니다.",
            "4": "AWS Lambda 함수를 설정하여 로그를 처리하고 중요한 이벤트에 대해 Amazon SNS 주제로 알림을 트리거합니다.",
            "5": "Amazon Elasticsearch Service를 활용하여 로그를 분석하고 특정 패턴에 대한 경고를 설정합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon CloudWatch Logs를 활용하여 다양한 AWS 서비스 및 애플리케이션의 로그를 집계합니다.",
            "AWS Lambda 함수를 설정하여 로그를 처리하고 중요한 이벤트에 대해 Amazon SNS 주제로 알림을 트리거합니다."
        ],
        "Explanation": "Amazon CloudWatch Logs를 활용하면 여러 출처의 로그를 집계할 수 있어 중앙 집중식 로깅에 필수적입니다. AWS Lambda 함수를 설정하여 알림을 트리거하면 중요한 이벤트가 신속하게 처리되어 조직의 보안 태세를 강화합니다.",
        "Other Options": [
            "처리 없이 Amazon S3를 로그 저장소로 구현하는 것은 실시간 모니터링 및 알림 요구 사항을 충족하지 않습니다.",
            "AWS Config 사용은 규정 준수 모니터링에 더 관련이 있으며 애플리케이션 및 시스템 로그의 중앙 집중식 로깅과 직접적으로 관련되지 않습니다.",
            "Amazon Elasticsearch Service를 활용하여 로그를 분석할 수 있지만, 추가 설정 없이 중앙 집중식 집계 기능을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "71",
        "Situation": "한 금융 서비스 회사가 디지털 전환을 진행 중이며 AWS 리소스를 효과적으로 관리하기 위해 클라우드 거버넌스 모델을 구현하고자 합니다. 이 회사는 규제 요구 사항을 준수하면서 개발 팀에 혁신할 수 있는 유연성을 제공해야 합니다. 경영진은 솔루션 아키텍트에게 다양한 프로젝트에서 작업하는 여러 팀을 위한 통제와 민첩성을 균형 있게 유지하는 거버넌스 모델을 설계해 달라고 요청했습니다.",
        "Question": "이 회사가 팀 자율성을 보장하면서 규정 준수를 유지하기 위해 가장 적합한 거버넌스 모델은 무엇입니까?",
        "Options": {
            "1": "각 팀이 감독 없이 독립적으로 운영되는 분산 거버넌스 모델을 수립하여 최대한의 민첩성을 촉진합니다.",
            "2": "중앙 집중식 및 분산 접근 방식을 결합한 하이브리드 거버넌스 모델을 사용하여 팀에 일부 자율성을 부여하면서 전체적인 규정 준수 통제를 유지합니다.",
            "3": "계정 수준에서 엄격한 정책이 시행되는 중앙 집중식 거버넌스 모델을 구현하여 팀의 리소스 접근을 제한합니다.",
            "4": "팀이 자체 AWS 계정을 관리하면서 공유된 규정 준수 지침을 준수할 수 있도록 하는 연합 거버넌스 모델을 채택합니다."
        },
        "Correct Answer": "팀이 자체 AWS 계정을 관리하면서 공유된 규정 준수 지침을 준수할 수 있도록 하는 연합 거버넌스 모델을 채택합니다.",
        "Explanation": "연합 거버넌스 모델은 개발 팀이 자신의 AWS 계정에 대한 통제를 가지면서도 공통의 규정 준수 지침을 따르도록 할 수 있어 적합합니다. 이 접근 방식은 규정 준수의 필요성과 민첩성 및 혁신의 필요성을 균형 있게 유지하여 회사의 요구 사항에 이상적입니다.",
        "Other Options": [
            "중앙 집중식 거버넌스 모델은 팀 자율성을 저해하고 혁신을 저해할 수 있어 개발 유연성을 촉진하려는 회사의 목표와 모순됩니다.",
            "분산 거버넌스 모델은 팀이 감독 없이 운영되도록 하여 규정 준수에 상당한 위험을 초래합니다.",
            "하이브리드 거버넌스 모델은 팀 자율성과 중앙 집중식 통제의 범위를 명확히 정의하지 않아 책임 및 규정 준수에 대한 혼란을 초래할 수 있습니다."
        ]
    },
    {
        "Question Number": "72",
        "Situation": "한 대규모 전자상거래 회사가 사용자 인증 메커니즘을 제3자 신원 제공자와 통합하기 위해 전환하고 있습니다. 이 회사는 보안을 강화하고 고객에게 원활한 사용자 경험을 제공하는 것을 목표로 하고 있습니다. 솔루션 아키텍트는 사용자 데이터가 안전하고 쉽게 관리될 수 있도록 기존 애플리케이션 아키텍처에 이러한 신원 제공자를 통합하는 최선의 접근 방식을 선택해야 합니다. (두 개 선택)",
        "Question": "다음 옵션 중 솔루션 아키텍트가 이러한 목표를 달성하기 위해 구현해야 할 것은 무엇입니까?",
        "Options": {
            "1": "AWS Lambda를 활용하여 제3자 신원 제공자로부터 토큰을 검증합니다.",
            "2": "SAML 기반의 단일 로그인(SSO)을 구성하여 사용자가 제3자 신원 제공자로 인증할 수 있도록 합니다.",
            "3": "Amazon Cognito를 구현하여 제3자 신원 제공자로부터 사용자 신원을 연합합니다.",
            "4": "Amazon API Gateway를 활용하여 제3자 신원 제공자를 위한 맞춤형 인증 흐름을 생성합니다.",
            "5": "AWS IAM 역할을 사용하여 제3자 신원 제공자로부터 사용자 접근을 직접 관리합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon Cognito를 구현하여 제3자 신원 제공자로부터 사용자 신원을 연합합니다.",
            "SAML 기반의 단일 로그인(SSO)을 구성하여 사용자가 제3자 신원 제공자로 인증할 수 있도록 합니다."
        ],
        "Explanation": "Amazon Cognito를 구현하면 애플리케이션이 사용자 신원을 쉽게 관리할 수 있으며 여러 제3자 제공자와의 통합을 지원합니다. 또한 SAML 기반 SSO를 구성하면 사용자가 별도의 자격 증명을 관리할 필요 없이 안전하게 인증할 수 있는 방법을 제공하여 전체 사용자 경험을 향상시킵니다.",
        "Other Options": [
            "AWS IAM 역할을 사용하는 것은 제3자 제공자와의 사용자 인증 관리에 적합하지 않으며, IAM 역할은 주로 AWS 서비스 권한을 위한 것이기 때문입니다.",
            "Amazon API Gateway를 활용하여 맞춤형 인증 흐름을 만드는 것은 불필요한 복잡성을 추가하며 Cognito와 같은 서비스가 제공하는 내장 보안 및 사용자 관리 기능을 제공하지 않습니다.",
            "AWS Lambda를 사용하여 토큰을 검증하는 것은 가능하지만, Cognito나 SAML 기반 SSO와 같은 내장 솔루션을 사용하는 것에 비해 추가적인 사용자 정의 개발 및 관리 오버헤드가 필요합니다."
        ]
    },
    {
        "Question Number": "73",
        "Situation": "한 금융 서비스 회사는 현재 Amazon EC2 인스턴스에서 자가 관리하는 PostgreSQL 데이터베이스를 사용하여 거래 데이터를 처리하고 있습니다. 이 데이터베이스는 다양한 작업 부하를 수용하기 위해 자주 확장이 필요하며, 팀은 애플리케이션 아키텍처에 큰 변화를 주지 않으면서 자동 백업, 확장 및 고가용성을 제공할 수 있는 관리형 솔루션을 찾고 있습니다. 또한, 이 회사는 데이터 보안 및 재해 복구에 대한 엄격한 규정 준수 요구 사항을 가지고 있습니다.",
        "Question": "다음 옵션 중 AWS에서 관리형 데이터베이스 솔루션에 대한 회사의 요구 사항을 가장 잘 충족하는 것은 무엇입니까?",
        "Options": {
            "1": "PostgreSQL 데이터베이스를 Amazon RDS for PostgreSQL로 마이그레이션하여 자동 백업, 확장 및 고가용성 기능을 활용하면서 규정 준수 및 보안을 보장합니다.",
            "2": "Amazon DynamoDB로 전환하여 거래 데이터 저장을 위해 성능 및 확장 기능을 활용하되 애플리케이션 논리에 큰 변화를 요구하지 않습니다.",
            "3": "Amazon EC2에서 자가 관리하는 PostgreSQL 데이터베이스를 계속 사용하고, 필요에 따라 백업 및 확장을 위한 수동 스크립트를 구현하여 마이그레이션 복잡성을 피합니다.",
            "4": "Amazon OpenSearch Service를 배포하여 거래 데이터를 인덱싱하고 쿼리하여 실시간 분석을 가능하게 하며, 데이터 저장을 위해 EC2에서 기존 데이터베이스를 유지합니다."
        },
        "Correct Answer": "PostgreSQL 데이터베이스를 Amazon RDS for PostgreSQL로 마이그레이션하여 자동 백업, 확장 및 고가용성 기능을 활용하면서 규정 준수 및 보안을 보장합니다.",
        "Explanation": "Amazon RDS for PostgreSQL로 마이그레이션하면 자동 백업, 확장 및 고가용성을 포함하는 완전 관리형 데이터베이스 솔루션을 제공하여 애플리케이션 아키텍처에 큰 변화를 주지 않으면서 규정 준수 및 보안 기준을 충족하는 관리형 서비스의 필요와 일치합니다.",
        "Other Options": [
            "Amazon DynamoDB로 전환하는 것은 애플리케이션 논리에 상당한 변화를 요구할 것이며, DynamoDB는 NoSQL 데이터베이스이고 현재 사용 사례는 관계형 데이터베이스에 더 적합한 거래 데이터를 포함합니다.",
            "Amazon OpenSearch Service를 배포하는 것은 거래 작업 부하를 처리하고 규정 준수 요구 사항을 충족할 수 있는 관리형 관계형 데이터베이스 솔루션의 필요를 직접적으로 해결하지 않으며, 주로 검색 및 분석을 위해 설계되었습니다.",
            "EC2에서 자가 관리하는 PostgreSQL 데이터베이스를 계속 사용하는 것은 자동 백업 및 확장이 포함된 관리형 솔루션의 요구 사항을 충족하지 않으며, 이는 운영 오버헤드를 증가시키고 데이터 보안 기준에 대한 비준수 위험을 높입니다."
        ]
    },
    {
        "Question Number": "74",
        "Situation": "한 금융 서비스 회사는 AWS에서 호스팅되는 중요한 애플리케이션을 운영하고 있으며, 이는 재해 발생 시 높은 가용성과 신속한 복구가 필요합니다. 이 애플리케이션은 민감한 금융 거래를 처리하며 규제 요구 사항을 준수해야 합니다. 회사는 최소한의 다운타임과 데이터 손실을 보장하기 위해 재해 복구(DR) 전략을 평가하고 있습니다.",
        "Question": "회사가 재해 복구 계획을 개선하기 위해 고려해야 할 두 가지 전략은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "AWS Elastic Disaster Recovery를 사용하여 장애 조치 절차를 자동화합니다.",
            "2": "Amazon RDS 데이터베이스의 정기적인 스냅샷을 생성하고 이를 Amazon S3에 저장합니다.",
            "3": "EC2 인스턴스 및 EBS 볼륨의 예약된 백업을 위해 AWS Backup을 활용합니다.",
            "4": "활성-활성 구성으로 다중 지역 배포를 구현합니다.",
            "5": "신속한 복구를 위해 동일 지역에 읽기 복제본을 배포합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "활성-활성 구성으로 다중 지역 배포를 구현합니다.",
            "AWS Elastic Disaster Recovery를 사용하여 장애 조치 절차를 자동화합니다."
        ],
        "Explanation": "활성-활성 구성으로 다중 지역 배포를 구현하면 애플리케이션이 서로 다른 지역에서 가용성을 유지할 수 있어, 한 지역이 실패할 경우 다른 지역이 최소한의 다운타임으로 거래를 계속 처리할 수 있습니다. 또한, AWS Elastic Disaster Recovery를 사용하면 자동 장애 조치 및 복구 옵션을 제공하여 복구 시간 목표(RTO)를 크게 줄이고 재해 발생 시 데이터 일관성을 보장합니다.",
        "Other Options": [
            "Amazon RDS 데이터베이스의 정기적인 스냅샷을 생성하고 Amazon S3에 저장하는 것은 백업을 제공하지만, 스냅샷의 빈도에 따라 데이터 손실이 발생할 수 있으므로 재해 발생 시 높은 가용성이나 신속한 복구를 보장하지 않습니다.",
            "동일 지역에 읽기 복제본을 배포하면 읽기 성능을 향상시킬 수 있지만, 지역 전체 실패 시 재해 복구를 위한 실질적인 솔루션을 제공하지 않습니다.",
            "EC2 인스턴스 및 EBS 볼륨의 예약된 백업을 위해 AWS Backup을 활용하는 것은 데이터 보호를 위한 좋은 관행이지만, 장애 조치나 높은 가용성을 다루지 않기 때문에 포괄적인 재해 복구 전략은 아닙니다."
        ]
    },
    {
        "Question Number": "75",
        "Situation": "한 금융 서비스 회사는 다양한 AWS 서비스와 애플리케이션을 통합해야 하며, 서비스 간의 안전하고 효율적인 통신을 보장해야 합니다. 아키텍트는 성능과 보안을 향상시키기 위해 이러한 통합을 위한 적절한 서비스 엔드포인트를 선택하는 임무를 맡고 있습니다. (두 가지 선택)",
        "Question": "위 요구 사항을 달성하기 위한 권장 조치는 무엇입니까?",
        "Options": {
            "1": "온프레미스 데이터 센터와의 직접 연결에서 서비스 엔드포인트를 구성합니다.",
            "2": "VPC에 호스팅된 서비스에 대한 안전한 액세스를 위해 AWS PrivateLink를 구현합니다.",
            "3": "공용 인터넷을 통하지 않고 AWS 서비스에 연결하기 위해 VPC 엔드포인트를 활용합니다.",
            "4": "VPC 비용을 피하기 위해 모든 AWS 서비스 통합에 공용 인터넷 엔드포인트를 사용합니다.",
            "5": "AWS Global Accelerator를 활용하여 서비스 엔드포인트의 가용성과 성능을 향상시킵니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "공용 인터넷을 통하지 않고 AWS 서비스에 연결하기 위해 VPC 엔드포인트를 활용합니다.",
            "VPC에 호스팅된 서비스에 대한 안전한 액세스를 위해 AWS PrivateLink를 구현합니다."
        ],
        "Explanation": "VPC 엔드포인트를 활용하면 Amazon 네트워크 내에서 트래픽을 유지하면서 AWS 서비스에 대한 개인 연결을 가능하게 하여 보안과 성능을 향상시킵니다. AWS PrivateLink를 구현하면 VPC에 호스팅된 서비스에 대한 안전한 액세스를 제공하여 통신이 AWS 네트워크를 벗어나지 않도록 하여 잠재적인 위협에 대한 노출을 줄입니다.",
        "Other Options": [
            "공용 인터넷 엔드포인트를 사용하면 보안 위험에 대한 노출이 증가하고 지연 문제를 초래할 수 있으며, 이는 민감한 금융 데이터에 적합하지 않습니다.",
            "온프레미스 데이터 센터와의 직접 연결에서 서비스 엔드포인트를 구성하는 것은 AWS 인프라의 이점을 활용하지 못하고 불필요한 복잡성을 초래할 수 있습니다.",
            "AWS Global Accelerator는 성능을 향상시키는 데 도움이 될 수 있지만, VPC 엔드포인트 및 PrivateLink와 같은 안전한 서비스 통합을 위해 특별히 설계된 것은 아닙니다."
        ]
    }
]