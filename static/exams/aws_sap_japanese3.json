[
    {
        "Question Number": "1",
        "Situation": "ある企業は、異なる部門のために複数のAWSアカウントを持っており、1つのアカウントのユーザーが別のアカウントのリソースに安全にアクセスできるように、クロスアカウントアクセス管理を実装したいと考えています。アクセスは長期的な資格情報を使用せずに効果的に管理する必要があります。彼らはこれを達成するためにさまざまなAWSサービスと方法論を検討しています。",
        "Question": "安全なクロスアカウントアクセス管理を実装するために、どのアクションの組み合わせを取る必要がありますか？（2つ選択）",
        "Options": {
            "1": "AWS Organizationsを使用して、すべてのアカウントで特定のリソースへのアクセスを許可するサービスコントロールポリシー（SCP）を作成します。",
            "2": "ターゲットアカウントに必要な権限を付与するIAMロールを作成します。ソースアカウントのユーザーがこのロールをロールARNを使用して引き受けることを許可します。",
            "3": "ターゲットアカウントのリソースにリソースベースのポリシーを作成し、ソースアカウントのIAMユーザーにアクセスを許可します。",
            "4": "すべてのアカウント間でユーザーのアイデンティティをフェデレーションし、リソースへのアクセスを管理する集中型アイデンティティプロバイダー（IdP）を実装します。",
            "5": "ソースアカウントにAmazon Cognitoアイデンティティプールを設定し、ターゲットアカウントのリソースへのアクセスを付与するように構成します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "ターゲットアカウントに必要な権限を付与するIAMロールを作成します。ソースアカウントのユーザーがこのロールをロールARNを使用して引き受けることを許可します。",
            "ターゲットアカウントのリソースにリソースベースのポリシーを作成し、ソースアカウントのIAMユーザーにアクセスを許可します。"
        ],
        "Explanation": "ターゲットアカウントにIAMロールを作成することで、ソースアカウントのユーザーがこのロールを引き受けることができ、長期的な資格情報を必要とせずに必要な権限を付与されます。さらに、ターゲットアカウントのリソースにリソースベースのポリシーを実装することで、ソースアカウントの特定のIAMユーザーがそれらのリソースに直接アクセスできるようになり、セキュリティと管理の向上が図れます。",
        "Other Options": [
            "ソースアカウントにAmazon Cognitoアイデンティティプールを設定することは、このシナリオにおけるクロスアカウントアクセス管理の適切な解決策ではありません。なぜなら、主にユーザー認証を促進し、他のアカウントのAWSリソースへの直接アクセスを提供しないからです。",
            "AWS Organizationsをサービスコントロールポリシー（SCP）と共に使用することは、アカウント間のリソースへのアクセスを直接付与するものではありません。SCPは、クロスアカウントアクセスを促進するのではなく、組織レベルでの権限を制御するために設計されています。",
            "集中型アイデンティティプロバイダー（IdP）を実装してフェデレーテッドアイデンティティを管理することは、より複雑な解決策であり、1つのアカウントの特定のユーザーが別のアカウントのリソースにアクセスできるようにする要件には必要ないかもしれません。"
        ]
    },
    {
        "Question Number": "2",
        "Situation": "ある金融サービス会社は最近、インフラをAWSに移行しました。彼らは環境のセキュリティについて懸念しており、無許可のアクセスや潜在的な脅威を検出できることを確認したいと考えています。さまざまなAWSセキュリティサービスをレビューした後、彼らはAmazon GuardDutyを実装してセキュリティ姿勢を強化することに決めました。",
        "Question": "Amazon GuardDutyに関する次のうち、どの記述が正しいですか？",
        "Options": {
            "1": "Amazon GuardDutyは、追加の設定を必要とせずに、AWS CloudTrailログ、VPCフローログ、およびDNSログを自動的に分析して悪意のある行動を検出します。",
            "2": "Amazon GuardDutyは、AWSリソースのリアルタイム監視を提供するサービスですが、疑わしい活動のログを分析しません。",
            "3": "Amazon GuardDutyは、ネットワーク活動を効果的に監視するために脅威インテリジェンスソースの手動設定を必要とします。",
            "4": "Amazon GuardDutyは、事前定義されたシグネチャに基づいてのみ脅威を検出でき、新しい脅威に適応することはできません。"
        },
        "Correct Answer": "Amazon GuardDutyは、追加の設定を必要とせずに、AWS CloudTrailログ、VPCフローログ、およびDNSログを自動的に分析して悪意のある行動を検出します。",
        "Explanation": "Amazon GuardDutyは、CloudTrail、VPCフローログ、およびDNSログを含むさまざまなAWSソースからのログデータを自動的に分析することで、継続的な脅威検出を提供するように設計されています。この機能により、手動設定を必要とせずに潜在的な脅威を特定でき、AWS環境のセキュリティを強化するための貴重なツールとなります。",
        "Other Options": [
            "この記述は不正確です。なぜなら、Amazon GuardDutyは組み込みの脅威インテリジェンスを使用し、効果的に機能するために脅威インテリジェンスソースの手動設定を必要としないからです。",
            "この記述は不正確です。なぜなら、Amazon GuardDutyは事前定義されたシグネチャだけでなく、機械学習と異常検出を利用して新しい脅威を特定するからです。",
            "この記述は不正確です。GuardDutyの機能を誤解しています。GuardDutyは疑わしい活動のログを分析し、リアルタイムで潜在的なセキュリティ脅威を特定することに焦点を当てています。"
        ]
    },
    {
        "Question Number": "3",
        "Situation": "ある企業は、複数のAWSアカウントを管理するためにAWS Organizationsを実装しました。彼らは、メンバーアカウント全体でセキュリティとコンプライアンスを強化するためにサービスコントロールポリシー（SCP）を定義しました。セキュリティチームは、これらのアカウントのユーザーに付与される権限について懸念しており、他のSCPに明示的なAllowステートメントが存在しても、特定のアクションが許可されないことを確認したいと考えています。",
        "Question": "このシナリオにおけるサービスコントロールポリシー（SCP）に関する次のうち、どの記述が正しいですか？",
        "Options": {
            "1": "SCPは、マスターアカウントのルートユーザーのアクションを制限するために使用できます。",
            "2": "SCPの明示的なAllowは、他のSCPのDenyステートメントに関係なく権限を付与することができます。",
            "3": "SCPの明示的なDenyは、他のSCPによって付与されたAllow権限を上書きします。",
            "4": "SCPは、メンバーアカウントのサービスリンクロールを管理するために適用できます。"
        },
        "Correct Answer": "SCPの明示的なDenyは、他のSCPによって付与されたAllow権限を上書きします。",
        "Explanation": "サービスコントロールポリシー（SCP）は、AWS Organizations全体で権限を管理するために設計されています。明示的なDenyは、他のAllow権限よりも常に優先され、制限されたアクションが他のポリシーで許可されていても実行できないことを保証します。",
        "Other Options": [
            "この記述は不正確です。なぜなら、SCPの明示的なAllowは、同じまたは別のSCPの明示的なDenyを上書きすることはないからです。Denyは常に優先されます。",
            "この記述は不正確です。なぜなら、SCPはマスターアカウントのルートユーザーには影響を与えず、メンバーアカウントにのみ適用されるからです。",
            "この記述は不正確です。なぜなら、SCPはサービスリンクロールには適用されず、アカウントレベルで管理され、SCPの影響を受けないからです。"
        ]
    },
    {
        "Question Number": "4",
        "Situation": "金融機関がアプリケーションをAWSに移行しており、特定のリソースにアクセスできるのは認可された担当者のみである必要があります。セキュリティチームは、リスクを軽減するために最小権限の原則を厳守する必要性を強調しています。ソリューションアーキテクトとして、さまざまなサービスとユーザーにわたってこの原則を強制するIAMポリシーを設計する任務を負っています。",
        "Question": "このAWS環境において、ユーザーとロールの最小権限アクセスを最も効果的に実装するアプローチはどれですか？",
        "Options": {
            "1": "AWSアカウントレベルに基づいてIAM権限を割り当て、そのアカウントのすべてのユーザーにすべてのリソースへのアクセスを許可します。",
            "2": "各ユーザーグループに対して、職務に必要な権限のみを付与する特定のIAMポリシーを作成し、それを対応するIAMロールに適用します。",
            "3": "フルアクセス権限を持つ単一のIAMロールを作成し、AWSリソースにアクセスが必要なすべてのユーザーに割り当てます。",
            "4": "すべての管理タスクに単一のIAMユーザーを利用し、チームメンバー間で資格情報を共有してアクセス管理を簡素化します。"
        },
        "Correct Answer": "各ユーザーグループに対して、職務に必要な権限のみを付与する特定のIAMポリシーを作成し、それを対応するIAMロールに適用します。",
        "Explanation": "このアプローチは、各ユーザーまたはロールが職務を遂行するために必要な権限のみを持つことを保証し、最小権限の原則を遵守します。IAMポリシーをユーザーグループに合わせて調整することで、過剰な権限や潜在的なセキュリティ侵害のリスクを最小限に抑えます。",
        "Other Options": [
            "フルアクセス権限を持つ単一のIAMロールを作成することは、最小権限の原則に違反し、そのロールに割り当てられたすべてのユーザーに過剰な権限を付与し、セキュリティリスクを高めます。",
            "アカウントレベルでIAM権限を割り当てることは、すべてのユーザーにすべてのリソースへの制限のないアクセスを許可し、最小権限の原則に反し、無許可のアクセスを引き起こす可能性があります。",
            "すべての管理タスクに単一のIAMユーザーを利用することは、資格情報の共有が責任問題を引き起こし、資格情報の漏洩リスクを高めるため、セキュリティのベストプラクティスを損ないます。"
        ]
    },
    {
        "Question Number": "5",
        "Situation": "多国籍小売企業がAWS上で複数のリージョンにアプリケーションを展開しています。企業は、オンプレミスのデータセンターとAWSリソース間の安全な通信を促進する高可用性のアーキテクチャを必要としています。彼らは、AWS Direct Connectを活用し、異なるリージョンのAmazon VPC間でトラフィックが効率的にルーティングされるソリューションを実装したいと考えています。また、リンク障害が発生した場合に備えて冗長性も提供する必要があります。",
        "Question": "企業の要件を満たすために、ソリューションアーキテクトがAWSで実装すべきオプションはどれですか？（2つ選択）",
        "Options": {
            "1": "同じAWSリージョンに冗長なDirect Connect接続を確立し、フェイルオーバー用に仮想プライベートゲートウェイを構成します。",
            "2": "Direct Connectゲートウェイを作成し、異なるリージョンの複数のVPCに関連付けてVPCピアリングを有効にします。",
            "3": "AWS Global Acceleratorを実装して、複数のAWSリージョン間でトラフィックをルーティングすることで可用性とパフォーマンスを向上させます。",
            "4": "Direct Connect接続のバックアップとしてサイト間VPNを構成し、障害が発生した場合に接続を維持します。",
            "5": "AWS Transit Gatewayを使用して複数のVPCとオンプレミスネットワークを接続し、ルーティングの管理のための単一の管理ポイントを提供します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Transit Gatewayを使用して複数のVPCとオンプレミスネットワークを接続し、ルーティングの管理のための単一の管理ポイントを提供します。",
            "Direct Connect接続のバックアップとしてサイト間VPNを構成し、障害が発生した場合に接続を維持します。"
        ],
        "Explanation": "AWS Transit Gatewayを使用することで、企業は複数のVPCとオンプレミスネットワーク間の接続を効率的に管理し、スケーラブルで集中管理されたルーティングソリューションを実現できます。サイト間VPNはDirect Connect接続の信頼できるバックアップとして機能し、障害が発生した場合でも通信が途切れずに続けられることを保証します。",
        "Other Options": [
            "Direct Connectゲートウェイを作成し、複数のVPCに関連付けることは冗長性を提供せず、フェイルオーバーメカニズムが欠如しており、Direct Connectのみに依存します。",
            "同じAWSリージョンに冗長なDirect Connect接続を確立することは、リージョン間通信に対処せず、包括的なフェイルオーバー戦略を提供しません。",
            "AWS Global Acceleratorを実装することは、オンプレミスとAWSリソース間の直接接続を確立するには適しておらず、主にAWSリージョン間のアプリケーションのトラフィックルーティングを最適化します。"
        ]
    },
    {
        "Question Number": "6",
        "Situation": "金融サービス会社が業界規制への準拠をAWSリソースを使用して管理しています。現在、AWS Configを設定してリソースを監視していますが、準拠とガバナンスのフレームワークを強化したいと考えています。チームは、リソースの構成のずれや非準拠を自動的に修正するための自動修復戦略を実装することを検討しています。",
        "Question": "AWSにおけるリソースの準拠の監視と修復を自動化するために、ソリューションアーキテクトが実装すべきソリューションはどれですか？",
        "Options": {
            "1": "AWS Configが構成の問題を検出したときに、非準拠のインスタンスでスクリプトを実行するためにAWS Systems Manager Run Commandを実装します。",
            "2": "AWS Configを有効にして、リソースの構成のスナップショットを24時間ごとに作成し、企業のポリシーに準拠しているかを手動で確認します。",
            "3": "AWS Configが非準拠のリソースを検出するたびに運用チームに警告するAmazon CloudWatchアラームを設定し、問題を解決するために手動で対応できるようにします。",
            "4": "AWS Configルールの違反時にトリガーされるAWS Lambda関数を作成し、リソースを準拠した状態に自動的に戻すことで問題を修復します。"
        },
        "Correct Answer": "AWS Configルールの違反時にトリガーされるAWS Lambda関数を作成し、リソースを準拠した状態に自動的に戻すことで問題を修復します。",
        "Explanation": "このアプローチは、AWS Lambdaを活用して準拠の問題を自動的に解決し、手動の介入なしにリソースを迅速に準拠状態に戻すことを保証します。これは、自動監視と修復の目標を完全にサポートします。",
        "Other Options": [
            "このオプションはスナップショットの手動レビューに依存しており、リアルタイムの修復を提供せず、非準拠の期間が長引く可能性があります。",
            "CloudWatchアラームはチームに準拠の問題を警告できますが、修復を自動化せず、問題を解決するために手動の介入が必要です。",
            "Systems Manager Run Commandを使用することである程度の自動化は可能ですが、準拠違反に基づく自動修復のためにAWS Configルールに直接結びついていません。"
        ]
    },
    {
        "Question Number": "7",
        "Situation": "ある金融サービス会社が、AWS上に機密の顧客データを扱うウェブアプリケーションを展開しました。このアプリケーションは、Elastic Load Balancerの背後にあるAmazon EC2インスタンス上で実行され、データベースにはAmazon RDSを使用しています。会社は、ネットワークからアプリケーション、データに至るまで、アーキテクチャのすべての層でセキュリティが維持されることを確保する必要があります。あなたは、実装されたソリューションをレビューし、セキュリティを強化するための推奨事項を作成する任務を負っています。",
        "Question": "アーキテクチャのすべての層で包括的な保護を確保するために、どのようなセキュリティ対策を推奨すべきですか？",
        "Options": {
            "1": "AWS WAFを実装して、アプリケーションを一般的なウェブの脅威から保護し、AWS Key Management Service (KMS)を使用してすべてのデータを静止状態で暗号化します。",
            "2": "EC2インスタンスにIAMロールを実装して最小特権アクセスを確保し、AWS CloudTrailを使用して監視のための中央集権的なログソリューションを展開します。",
            "3": "AWS Shieldを使用してDDoS攻撃から保護し、Amazon CloudFrontを有効にしてコンテンツをキャッシュし、アプリケーションサーバーへの負荷を軽減します。",
            "4": "Amazon Inspectorを展開してEC2インスタンスの脆弱性を定期的に評価し、必要なポートへの受信トラフィックを制限するためにセキュリティグループを構成します。"
        },
        "Correct Answer": "AWS WAFを実装して、アプリケーションを一般的なウェブの脅威から保護し、AWS Key Management Service (KMS)を使用してすべてのデータを静止状態で暗号化します。",
        "Explanation": "AWS WAFを実装することで、ウェブベースの攻撃に対する強力なセキュリティ層が提供され、AWS KMSを使用して静止状態のデータを暗号化することで、機密の顧客情報が保護されます。この組み合わせにより、アプリケーションとデータ層の両方でセキュリティが確保されます。",
        "Other Options": [
            "Amazon Inspectorを展開することは脆弱性評価のための良いプラクティスですが、AWS WAFと同じレベルのウェブ攻撃に対する保護を提供せず、データの暗号化にも対応していません。",
            "AWS Shieldを使用することでDDoS攻撃から保護されますが、アプリケーションの脆弱性や静止状態のデータの暗号化に対する包括的なセキュリティ対策を提供しません。",
            "IAMロールを実装することはアクセス制御に不可欠ですが、AWS WAFやデータ暗号化のような追加の対策がなければ、すべての層にわたるセキュリティニーズに完全には対応できません。"
        ]
    },
    {
        "Question Number": "8",
        "Situation": "大規模なeコマースプラットフォームが頻繁にDistributed Denial of Service (DDoS)攻撃を受けており、AWS上にホストされているウェブアプリケーションの可用性とパフォーマンスに影響を与えています。このプラットフォームは、信頼性とサービスの継続性を確保しつつ、ポジティブなユーザー体験を維持するための強力な緩和戦略を必要としています。",
        "Question": "ソリューションアーキテクトは、eコマースプラットフォームのために効果的な攻撃緩和戦略を開発するためにどのアプローチを推奨すべきですか？",
        "Options": {
            "1": "DDoS保護のためにAWS Shield Advancedを利用し、トラフィックスパイクを自動的に処理するためにAuto Scalingグループを設定します。",
            "2": "悪意のあるリクエストをフィルタリングするためにAWS WAFを実装し、静的コンテンツをエッジロケーションでキャッシュするためにAmazon CloudFrontを使用します。",
            "3": "DNS管理のためにAmazon Route 53を使用し、影響を受けたリソースからトラフィックを再ルーティングするためにヘルスチェックを構成します。",
            "4": "ウェブアプリケーションファイアウォールを備えたアプリケーションロードバランサーを展開し、すべてのトラフィックをVPN経由でルーティングして追加のセキュリティを確保します。"
        },
        "Correct Answer": "DDoS保護のためにAWS Shield Advancedを利用し、トラフィックスパイクを自動的に処理するためにAuto Scalingグループを設定します。",
        "Explanation": "AWS Shield Advancedは、複雑な攻撃に特化した強化されたDDoS保護を提供し、Auto Scalingは、トラフィックの増加に応じて自動的にキャパシティを調整することでアプリケーションが増加したトラフィックに対応できるようにします。この組み合わせは、攻撃を効果的に緩和し、アプリケーションのパフォーマンスを維持します。",
        "Other Options": [
            "AWS WAFを単独で実装することは、大規模なDDoS攻撃に対して十分ではなく、CloudFrontでのキャッシングは役立ちますが、攻撃緩和の根本的な問題には対処していません。",
            "ウェブアプリケーションファイアウォールを備えたアプリケーションロードバランサーを展開することで追加のセキュリティが提供されますが、すべてのトラフィックをVPN経由でルーティングすると遅延と複雑さが生じ、パフォーマンスが低下する可能性があります。",
            "Amazon Route 53をDNS管理に使用することはルーティングに役立ちますが、それ自体では必要なDDoS保護や攻撃下でのアプリケーションの可用性を確保するためのスケーラビリティを提供しません。"
        ]
    },
    {
        "Question Number": "9",
        "Situation": "ある金融サービス会社が、オンプレミスのMySQLデータベースをAWSに移行する計画を立てています。データベースは、アプリケーションのダウンタイムを最小限に抑えるために、移行プロセス中も稼働し続ける必要があります。さらに、会社は初回の移行が完了した後もデータベースへの継続的な変更をキャプチャする必要があります。これらの要件を満たすために、ソリューションアーキテクトはどのAWSサービスを推奨すべきですか？",
        "Question": "どのAWSサービスが、最小限のダウンタイムでデータベースを移行し、移行後の変更の継続的なレプリケーションを可能にしますか？",
        "Options": {
            "1": "Amazon RDS Read Replica",
            "2": "AWS Database Migration Service (DMS)",
            "3": "Amazon Aurora Global Database",
            "4": "AWS Snowball"
        },
        "Correct Answer": "AWS Database Migration Service (DMS)",
        "Explanation": "AWS Database Migration Service (DMS)は、最小限のダウンタイムでシームレスなデータベース移行を可能にします。データベースの変更を継続的にレプリケーションできるため、移行プロセス全体でソースデータベースが稼働し続けます。",
        "Other Options": [
            "Amazon RDS Read Replicaは読み取り操作のスケーリングのために設計されており、このシナリオに必要な継続的なデータ移行や変更キャプチャ機能を提供しません。",
            "AWS Snowballは、大量のデータをAWSに移動するために主に使用されるデータ転送サービスであり、継続的なデータベース移行や変更データキャプチャをサポートしていません。",
            "Amazon Aurora Global Databaseは、グローバルに分散したアプリケーション向けに設計されており、最小限のダウンタイムで既存のデータベースを移行することには焦点を当てていません。"
        ]
    },
    {
        "Question Number": "10",
        "Situation": "ある企業が、モバイルアプリケーションのユーザーアクティビティログを保存するためにAmazon DynamoDBを使用しています。彼らは、データの変更をリアルタイムでキャプチャし、これらの変更を処理して別の分析テーブルを更新するソリューションを実装したいと考えています。また、特定のアクションがDynamoDBテーブル内の特定のイベントが発生したときにユーザーに通知をトリガーすることを保証したいと考えています。",
        "Question": "DynamoDBの変更をリアルタイムで処理し、ユーザーに通知を送信するために使用できるオプションはどれですか？（2つ選択）",
        "Options": {
            "1": "ユーザーアクティビティログテーブルでDynamoDB Streamsを有効にし、ストリームをAWS Lambda関数に関連付けて、ユーザーに直接通知を送信します。",
            "2": "DynamoDBテーブルに変更があるたびに通知を公開するためにAmazon SNSを利用し、Lambda関数がこれらの通知を購読します。",
            "3": "DynamoDB Streamsを使用してテーブルの変更をキャプチャし、AWS Lambdaの代わりにメッセージを処理するためにAmazon SQSキューを設定します。",
            "4": "ユーザーアクティビティログテーブルでDynamoDB Streamsを有効にし、ストリームを処理して分析テーブルを更新するためにAWS Lambda関数を設定します。",
            "5": "DynamoDBテーブルを毎分ポーリングしてデータの変更を確認するためにスケジュールされたAWS Lambda関数を作成します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "ユーザーアクティビティログテーブルでDynamoDB Streamsを有効にし、ストリームを処理して分析テーブルを更新するためにAWS Lambda関数を設定します。",
            "ユーザーアクティビティログテーブルでDynamoDB Streamsを有効にし、ストリームをAWS Lambda関数に関連付けて、ユーザーに直接通知を送信します。"
        ],
        "Explanation": "DynamoDB Streamsを有効にし、AWS Lambda関数を設定することで、企業はリアルタイムで変更を自動的に処理し、分析テーブルを更新し、これらの変更に基づいてユーザーに通知を送信できます。このアプローチは、データの変更とユーザー通知を効率的かつスケーラブルに処理する方法を提供します。",
        "Other Options": [
            "DynamoDBテーブルを毎分ポーリングするスケジュールされたLambda関数を作成することは、リアルタイム処理には効率的ではなく、遅延を引き起こし、変更に即座に反応しません。",
            "DynamoDB Streamsを使用せずにAmazon SNSを利用して通知を行うことは、データの変更を処理するための直接的なリンクを提供せず、変更を監視するための追加のロジックが必要です。",
            "DynamoDB Streamsからのメッセージを処理するためにSQSキューを使用することは、アーキテクチャを複雑にする追加の層であり、Lambda関数がストリームを直接処理できるため不要です。"
        ]
    },
    {
        "Question Number": "11",
        "Situation": "ある金融サービス会社が、オンプレミスのOracleデータベースをAWSに移行する計画を立てています。彼らは、移行プロセスが効率的であり、既存のデータベースのスキーマがターゲットのAWSデータベースサービスと互換性があることを確認したいと考えています。会社にはOracleに精通しているデータベース管理者のチームがいますが、AWSサービスには不慣れです。彼らは、現在の環境を評価し、ダウンタイムを最小限に抑えながら移行を促進するためのツールを探しています。（2つ選択）",
        "Question": "移行を効率的に実現するために役立つツールの組み合わせはどれですか？",
        "Options": {
            "1": "移行プロセスにAWS Database Migration Service (AWS DMS)を使用し、データベーススキーマを分析および変換するためにAWS Schema Conversion Tool (AWS SCT)を使用します。",
            "2": "データ転送にAWS Snowballを実装し、継続的なレプリケーションを処理するためにAWS Database Migration Service (AWS DMS)を使用します。",
            "3": "データをレプリケートするためにAWS Database Migration Service (AWS DMS)を使用し、データベーススキーマを変換するためにAWS Schema Conversion Tool (AWS SCT)を使用します。",
            "4": "データ移行のためにAWS Glueを利用してETLジョブを作成し、スキーマ変換のためにAWS Schema Conversion Tool (AWS SCT)を使用します。",
            "5": "データをAmazon RDSに移動するためにAWS Data Pipelineを利用し、スキーマ評価のためにAWS Schema Conversion Tool (AWS SCT)を使用します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "データをレプリケートするためにAWS Database Migration Service (AWS DMS)を使用し、データベーススキーマを変換するためにAWS Schema Conversion Tool (AWS SCT)を使用します。",
            "移行プロセスにAWS Database Migration Service (AWS DMS)を使用し、データベーススキーマを分析および変換するためにAWS Schema Conversion Tool (AWS SCT)を使用します。"
        ],
        "Explanation": "両方の正解は、データ移行にAWS DMSを、スキーマ変換にAWS SCTを利用しており、これはAWSへのデータベース移行を効果的に行うために特別に設計されています。",
        "Other Options": [
            "AWS Data Pipelineは主にデータオーケストレーションに使用され、データベース移行専用に設計されていません。AWS SCTと同じレベルのスキーマ変換機能を提供しません。",
            "AWS Snowballは大規模なデータ転送に使用されますが、継続的なレプリケーションシナリオには適していません。このオプションはスキーマ変換の必要性に対処していません。",
            "AWS GlueはETLサービスであり、データベース移行に主に焦点を当てていません。データ移行を促進することはできますが、AWS SCTが提供する専用のスキーマ変換機能は提供しません。"
        ]
    },
    {
        "Question Number": "12",
        "Situation": "ある金融サービス会社が、組織内の異なるチームによってさまざまなAWSリソースにアクセスする必要がある安全なアプリケーションを設計しています。会社はIAMロールを利用してアクセスを安全に管理しています。特定のユーザーとサービスのみが特定のロールを引き受けることができるようにし、SSL証明書をアップロードして安全な通信を確保する必要があります。これらの要件を考慮して、ロールアクセスとSSL証明書を管理するための最良の戦略は何ですか？",
        "Question": "IAMロールへのアクセスを効果的に制御し、SSL証明書を管理するために会社が実装すべき戦略はどれですか？",
        "Options": {
            "1": "会社は、どのユーザーがロールを引き受けることができるかを指定する信頼ポリシーを持つIAMロールを作成する必要があります。さらに、アプリケーションのドメインのためにAWS Certificate Manager (ACM)にSSL証明書をアップロードして、安全な通信を確保します。",
            "2": "会社は、信頼ポリシーを指定せずにIAMロールを作成し、任意のAWSアカウントがそれらを引き受けることを許可します。SSL証明書はACMを使用せずにIAMにアップロードして管理する必要があります。",
            "3": "会社は、各チームのために制限的な信頼ポリシーを持つ複数のIAMロールを作成し、ACMの代わりにIAMにSSL証明書をアップロードして安全な通信を確保します。",
            "4": "会社は、すべての内部ユーザーがロールを引き受けることを許可する広範な信頼ポリシーを持つ単一のIAMロールを作成する必要があります。SSL証明書はACMを使用せずにサーバーに直接アップロードして管理する必要があります。"
        },
        "Correct Answer": "会社は、どのユーザーがロールを引き受けることができるかを指定する信頼ポリシーを持つIAMロールを作成する必要があります。さらに、アプリケーションのドメインのためにAWS Certificate Manager (ACM)にSSL証明書をアップロードして、安全な通信を確保します。",
        "Explanation": "このオプションは、IAMロールのための特定の信頼ポリシーを通じて最小権限アクセスを実装することで、指定されたユーザーのみがロールを引き受けることができることを保証し、AWSリソースのSSL証明書を管理するためにAWS Certificate Manager (ACM)を使用することを正しく提案しています。",
        "Other Options": [
            "このオプションは、最小権限の原則に従わない広範な信頼ポリシーを提案しており、未承認のアクセスを許可する可能性があります。さらに、SSL証明書をサーバーに直接管理することは安全性が低く、AWSの最良のサービスを利用していません。",
            "このオプションは、信頼ポリシーなしでIAMロールを作成することを示しており、任意のAWSアカウントからの未承認のアクセスを許可することになります。また、ACMを使用するのに比べてIAMにSSL証明書をアップロードすることは最良の方法ではありません。",
            "このオプションは、複数のロールを使用することを提案していますが、ACMの代わりにIAMを通じてSSL証明書を管理することを誤って示しており、推奨されず、不必要な複雑さやセキュリティ問題を引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "13",
        "Situation": "金融サービス会社がアプリケーションをAWSに移行しており、Amazon ECS環境でのコスト削減のためにSpotインスタンスを活用したいと考えています。この会社は、Spotインスタンスの中断中にサービスへの影響を最小限に抑えつつ、タスクの高可用性とパフォーマンスを維持するソリューションを必要としています。彼らは、Spotインスタンスの中断に応じてタスクのライフサイクルを管理するためにECSの機能を利用したいと考えています。",
        "Question": "Spotインスタンス上で実行されているECSタスクがサービスの中断を引き起こすことなく、優雅に終了し置き換えられることを保証するための構成はどれですか？",
        "Options": {
            "1": "ECSを設定してタスクをオンデマンドインスタンス専用で実行し、Spotインスタンスの終了による中断を回避し、より高いコストで一貫した可用性を確保します。",
            "2": "スケジュールされたタスクを使用してSpotインスタンスの中断を定期的にチェックし、終了したタスクをクラスター内の健全なインスタンスで手動で新しいタスクに置き換えます。",
            "3": "Spotインスタンスの中断中にいくつかのタスクが終了できるように、最小健全割合を持つECSサービスを設定し、サービスの全体的な容量を維持します。",
            "4": "ECSの自動Spotインスタンス排出を有効にし、2分の中断通知を受け取った際にタスクを排出し優雅にシャットダウンし、他のインスタンスで置き換えタスクをスケジュールします。"
        },
        "Correct Answer": "ECSの自動Spotインスタンス排出を有効にし、2分の中断通知を受け取った際にタスクを排出し優雅にシャットダウンし、他のインスタンスで置き換えタスクをスケジュールします。",
        "Explanation": "ECSの自動Spotインスタンス排出を有効にすることで、固有のDRAINING機能を使用してタスクを優雅に終了させることができます。このプロセスにより、タスクがシームレスに停止し置き換えられ、サービスの中断を最小限に抑え、Spotインスタンスの使用効率を最大化します。",
        "Other Options": [
            "スケジュールされたタスクを使用して終了したタスクを手動で置き換えることは、Spotインスタンスの中断に自動的に対応しないため、遅延や潜在的なサービス中断を引き起こす可能性があります。",
            "ECSを設定してタスクをオンデマンドインスタンス専用で実行することは、Spotインスタンスのコストメリットを排除し、中断が発生した際の対処方法を示しません。",
            "最小健全割合を設定すると、Spotインスタンスの中断中にサービスの劣化を引き起こす可能性があり、すべてのタスクが優雅に終了または適時に置き換えられることを保証しません。"
        ]
    },
    {
        "Question Number": "14",
        "Situation": "金融サービス会社は、高可用性とデータ保護を必要とする重要なアプリケーションを運営しています。会社の災害復旧計画には、最小限のダウンタイムとデータ損失を確保するための具体的な復旧時間目標（RTO）と復旧ポイント目標（RPO）が含まれています。チームは、これらの目標を効果的に達成するために、さまざまなAWSサービスを検討しています。",
        "Question": "重要なアプリケーションのRTOとRPO目標を達成するために、どのAWSサービスの組み合わせが最も効果的ですか？",
        "Options": {
            "1": "アプリケーションのデプロイメントにAWS Elastic Beanstalkを、データ保護にAWS Backupを実装する。",
            "2": "高可用性のために、自動バックアップとMulti-AZデプロイメントを備えたAmazon RDSを活用する。",
            "3": "データストレージにAmazon S3を、データバックアップの処理にAWS Lambdaを使用する。",
            "4": "データバックアップと復旧のために、Amazon EC2とEBSスナップショットを利用する。"
        },
        "Correct Answer": "高可用性のために、自動バックアップとMulti-AZデプロイメントを備えたAmazon RDSを活用する。",
        "Explanation": "Amazon RDSは、自動バックアップとMulti-AZデプロイメントを備えており、迅速なフェイルオーバーと時点復旧を可能にすることで、RTOとRPOの両方を向上させます。これにより、高可用性と最小限のデータ損失を要求する重要なアプリケーションに適した選択肢となります。",
        "Other Options": [
            "Amazon EC2とEBSスナップショットは復旧オプションを提供できますが、スナップショットの手動性により、RDSのような管理サービスと比較してRTOとRPOが長くなる可能性があります。",
            "AWS Elastic Beanstalkはアプリケーションのデプロイメントを容易にしますが、データベースのバックアップや可用性を本質的に管理しないため、厳格なRTOとRPO要件にはあまり適していません。",
            "Amazon S3は耐久性のあるストレージオプションですが、高可用性やアプリケーションレベルの復旧に必要な組み込み機能が不足しており、低いRTOとRPO目標を達成するには重要です。"
        ]
    },
    {
        "Question Number": "15",
        "Situation": "ある企業が、さまざまなサービスがAWS Lambda関数を同期的に呼び出す必要があるサーバーレスアーキテクチャを設計しています。ソリューションアーキテクトは、リアルタイムデータ処理とユーザーインタラクションを処理するために、どのサービスがLambda関数を同期的に直接トリガーできるかを特定する必要があります。",
        "Question": "次のうち、どのサービスがAWS Lambda関数を同期的に呼び出すことができますか？",
        "Options": {
            "1": "Amazon Kinesis Data Firehose、Amazon S3 Batch、Amazon CloudFront、Amazon Cognito",
            "2": "Amazon CloudFront、Amazon Lex、Elastic Load Balancing、Amazon S3 Batch",
            "3": "Amazon Lex、Amazon API Gateway、AWS Step Functions、Elastic Load Balancing",
            "4": "Amazon API Gateway、Amazon Kinesis Data Firehose、AWS Step Functions、Amazon Cognito"
        },
        "Correct Answer": "Amazon Lex、Amazon API Gateway、AWS Step Functions、Elastic Load Balancing",
        "Explanation": "Amazon Lex、Amazon API Gateway、AWS Step Functions、およびElastic Load Balancingはすべて、AWS Lambda関数を同期的に呼び出すことができます。これらのサービスはリアルタイムリクエストを処理するために設計されており、処理を進める前にLambda関数からの応答を待つことができます。",
        "Other Options": [
            "オプション1は不正解です。なぜなら、Amazon API GatewayとAWS Step FunctionsはLambda関数を同期的に呼び出すことができますが、Amazon Kinesis Data Firehoseは主にストリーミングデータに使用され、Lambdaを同期的に呼び出すことはなく、Amazon Cognitoは直接呼び出しではなくユーザー認証に焦点を当てているからです。",
            "オプション2は不正解です。なぜなら、Amazon LexはLambda関数を呼び出すことができますが、Amazon CloudFrontとAmazon S3 BatchはLambdaを同期的に呼び出しません。CloudFrontはリクエスト/レスポンス操作のためにLambda@Edgeを使用し、S3 Batchは非同期で動作します。",
            "オプション4は不正解です。なぜなら、Amazon Kinesis Data FirehoseはLambdaと統合できますが、Lambdaを同期的に呼び出すことはなく、さらにAmazon S3 BatchはLambda関数の同期的な呼び出しのために設計されていないからです。"
        ]
    },
    {
        "Question Number": "16",
        "Situation": "あるテクノロジー企業がAWS Elastic Beanstalkを使用してウェブアプリケーションの新しいバージョンを展開しています。このアプリケーションは顧客取引にとって重要であり、企業は展開プロセス中のダウンタイムを最小限に抑えたいと考えています。彼らは目標を達成するためにElastic Beanstalkが提供するさまざまな展開ポリシーを検討しています。",
        "Question": "アプリケーションの展開中にダウンタイムを最小限に抑えるために、ソリューションアーキテクトはどの展開ポリシーを選択すべきですか？（2つ選択）",
        "Options": {
            "1": "Blue/Green",
            "2": "RollingWithAdditionalBatch",
            "3": "Immutable",
            "4": "Rolling",
            "5": "AllAtOnce"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "RollingWithAdditionalBatch",
            "Immutable"
        ],
        "Explanation": "'RollingWithAdditionalBatch'と'Immutable'の両方の展開ポリシーは、展開中のアプリケーションの可用性を維持するのに役立ちます。'RollingWithAdditionalBatch'は、展開が始まる前に追加のインスタンスバッチを起動できるため、キャパシティが維持されます。'Immutable'は、新しいアプリケーションバージョンを持つ新しいインスタンスセットを別のAuto Scalingグループで起動し、古いバージョンが新しいインスタンスが準備できるまでそのまま残ることを保証し、ダウンタイムをゼロにします。",
        "Other Options": [
            "'AllAtOnce'は新しいバージョンをすべてのインスタンスに同時に展開しますが、展開が失敗した場合や新しいバージョンに問題がある場合、ダウンタイムが発生する可能性があります。",
            "'Rolling'は標準的なローリング展開を可能にしますが、古いインスタンスが更新される前に追加のインスタンスが準備されていない可能性があるため、'RollingWithAdditionalBatch'と同じレベルのキャパシティ保証を提供しません。",
            "'Blue/Green'はElastic Beanstalkの直接的な展開ポリシーではなく、代わりに2つの同一環境間でトラフィックを切り替える展開戦略を指します。これによりダウンタイムゼロを達成できますが、Elastic Beanstalk自体の展開ポリシーには分類されません。"
        ]
    },
    {
        "Question Number": "17",
        "Situation": "ある金融サービス企業は、厳しく規制された環境でアプリケーションワークロードのためにAmazon EC2インスタンスに依存しています。企業は、すべてのEC2インスタンスがセキュリティ基準に準拠するために定期的にパッチを適用されることを保証する必要があります。ITセキュリティチームは、パッチの頻度、パッチの種類、およびロールバック手順の必要性を指定するパッチ管理ポリシーを作成しました。企業は、ダウンタイムを最小限に抑え、パッチ管理ポリシーに準拠しながらEC2インスタンスのパッチ適用を自動化したいと考えています。",
        "Question": "企業がパッチ管理ポリシーに従いながらEC2インスタンスのパッチ適用を自動化するための最良のアプローチは何ですか？",
        "Options": {
            "1": "AWS Configルールを利用してEC2インスタンスのパッチ管理ポリシーへの準拠を監視します。AWS Configによって生成された準拠レポートに基づいて手動でパッチを適用します。",
            "2": "EC2インスタンス上にサードパーティのパッチ管理ツールを展開し、AWSサービスと統合してパッチ適用プロセスを自動化し、レポート機能を提供します。",
            "3": "スケジュールに基づいてトリガーされるAWS Lambda関数を設定し、SSHを使用してEC2インスタンスに直接パッチを適用します。失敗した場合に関数が再試行するようにエラーハンドリングを実装します。",
            "4": "AWS Systems Manager Patch Managerを使用して、定義されたパッチ適用スケジュールに従ってパッチ適用を自動化します。パッチを適用するタイミングを指定するためにメンテナンスウィンドウを設定します。パッチベースラインに必要なパッチが含まれていることを確認します。"
        },
        "Correct Answer": "AWS Systems Manager Patch Managerを使用して、定義されたパッチ適用スケジュールに従ってパッチ適用を自動化します。パッチを適用するタイミングを指定するためにメンテナンスウィンドウを設定します。パッチベースラインに必要なパッチが含まれていることを確認します。",
        "Explanation": "AWS Systems Manager Patch Managerを使用することは、EC2インスタンスのパッチ適用を自動化するための最適なソリューションです。これはAWSサービスと直接統合され、メンテナンスウィンドウのスケジューリングを可能にし、集中管理されたパッチ管理アプローチを提供します。これにより、企業のパッチ管理ポリシーに準拠しながらダウンタイムを最小限に抑えることができます。",
        "Other Options": [
            "AWS Lambda関数を設定してSSH経由でパッチ適用を管理することは、自動化のベストプラクティスではありません。なぜなら、カスタムコーディングが必要であり、Systems Managerの組み込みの準拠機能が欠けており、SSHキーが正しく管理されていない場合にセキュリティリスクを引き起こす可能性があるからです。",
            "AWS Configルールを利用して準拠を監視することは有用ですが、パッチ適用プロセス自体を自動化するものではありません。これは準拠状況の可視性を提供するだけであり、パッチを適用するためには手動の介入が依然として必要です。",
            "サードパーティのパッチ管理ツールを展開すると、複雑さや潜在的な統合の課題が追加される可能性があります。さらに、AWS Systems ManagerのようにAWSサービスとの統合レベルが同じではない可能性があります。"
        ]
    },
    {
        "Question Number": "18",
        "Situation": "ある金融サービス企業がAWS上でホストされる新しいオンラインバンキングアプリケーションを開発しています。このアプリケーションは、障害が発生した場合に高可用性と最小限のデータ損失を保証し、複数の地域でエンドユーザーに対して低遅延を維持する必要があります。",
        "Question": "オンラインバンキングアプリケーションの高可用性と災害復旧を達成するための最も効果的なアーキテクチャはどれですか？",
        "Options": {
            "1": "アプリケーションロジックにAWS Lambdaを利用し、データベースにDynamoDBを使用し、すべてを単一のリージョンに展開し、ピーク負荷を処理するためにプロビジョニングされたスループットを使用します。",
            "2": "単一のリージョン内で複数のアベイラビリティゾーンにわたるEC2インスタンスのAuto Scalingグループを実装し、データベースにはMulti-AZ展開のAmazon Auroraを使用し、DNSフェイルオーバーのためにRoute 53を設定します。",
            "3": "コンテナ管理にAWS Fargateを使用し、データストレージにAmazon S3を使用するサーバーレスアーキテクチャを作成し、すべてを単一のリージョン内の複数のアベイラビリティゾーンに展開します。",
            "4": "アプリケーションを複数のAWSリージョンに展開し、Application Load Balancerの背後にAmazon EC2インスタンスを配置します。各リージョンにAmazon RDSのリードレプリカを使用し、クロスリージョンレプリケーションを有効にします。"
        },
        "Correct Answer": "アプリケーションを複数のAWSリージョンに展開し、Application Load Balancerの背後にAmazon EC2インスタンスを配置します。各リージョンにAmazon RDSのリードレプリカを使用し、クロスリージョンレプリケーションを有効にします。",
        "Explanation": "アプリケーションを複数のAWSリージョンに展開することで、1つのリージョンがダウンしてもアプリケーションが利用可能な状態を維持します。EC2インスタンスとApplication Load Balancerを使用することで、トラフィックを効率的に分散させることができます。各リージョンのAmazon RDSのリードレプリカはデータの冗長性を提供し、異なるリージョンのユーザーに低遅延アクセスを提供し、クロスリージョンレプリケーションはリージョン障害時のデータ損失を軽減します。",
        "Other Options": [
            "AWS LambdaとDynamoDBを単一のリージョンで使用することは、地域間の冗長性が欠如しており、地域の障害に対して十分な高可用性や災害復旧を提供しません。",
            "Auto ScalingグループとMulti-AZ展開を実装することで、単一のリージョン内での可用性は向上しますが、地域の障害に対して保護されないため、金融サービスアプリケーションには重要です。",
            "AWS FargateとS3を使用したサーバーレスアーキテクチャは、単一のリージョンでは高可用性や災害復旧には不十分であり、最小限のダウンタイムとデータ損失を保証するために必要なクロスリージョン冗長性が欠けています。"
        ]
    },
    {
        "Question Number": "19",
        "Situation": "大手eコマース企業が急成長しており、スケーラビリティとレジリエンスを確保するためにアーキテクチャを再設計する必要があります。企業は、コストを最小限に抑えながら変動するトラフィックパターンに対応することを目指しています。彼らは、需要に基づいてリソースを自動的に調整でき、ピーク使用時に高い可用性とパフォーマンスを維持するというビジネス目標に合致したソリューションを必要としています。",
        "Question": "次のうち、企業の弾力的でコスト効果の高いソリューションに対する要件を最もよく満たすアーキテクチャデザインはどれですか？",
        "Options": {
            "1": "Application Load Balancerの背後にEC2インスタンスを持つオートスケーリンググループを実装して、受信トラフィックを処理します。CPU使用率メトリックに基づいてスケーリングポリシーを設定します。",
            "2": "Amazon ECSのようなコンテナオーケストレーションサービスを設定し、すべてのノードに固定数のタスクを持たせてトラフィックを管理し、リソースが常に利用可能であることを確保します。",
            "3": "AWS Lambda関数を利用して受信リクエストを処理し、使用に応じて自動的にスケーリングします。Amazon API Gatewayを統合してフロントエンドのためのRESTfulインターフェースを提供します。",
            "4": "複数のアベイラビリティゾーンにわたって固定サイズのEC2インスタンスのフリートを展開して高可用性を確保します。動的スケーリングなしでDNSベースのフェイルオーバーにRoute 53を使用します。"
        },
        "Correct Answer": "Application Load Balancerの背後にEC2インスタンスを持つオートスケーリンググループを実装して、受信トラフィックを処理します。CPU使用率メトリックに基づいてスケーリングポリシーを設定します。",
        "Explanation": "このオプションは動的スケーリング機能を提供し、アーキテクチャがリアルタイムの需要に基づいて自動的に調整できるようにします。Application Load Balancerを使用したオートスケーリンググループにより、リソースを効率的にスケールアップまたはスケールダウンでき、トラフィックの変動時にレジリエンスとコスト効果を提供します。",
        "Other Options": [
            "このオプションは動的スケーリング機能を提供しません。アベイラビリティゾーンにインスタンスを分散させることで高可用性を確保しますが、変化するトラフィックパターンに対応できず、低トラフィック期間中に過剰プロビジョニングとコストの増加を招く可能性があります。",
            "AWS Lambda関数を使用することはスケーラブルなソリューションですが、このオプションはAmazon API Gatewayの使用について言及しておらず、これは明確に定義されたRESTfulインターフェースに不可欠です。さらに、特定のシナリオではEC2インスタンスほど効率的に複雑なワークロードを処理できないかもしれません。",
            "このオプションは動的スケーリングを提供しません。Amazon ECSはコンテナを管理できますが、固定数のタスクを持つことでアーキテクチャが変動するトラフィックに応じて反応する能力が制限され、ピーク時にパフォーマンスの問題を引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "20",
        "Situation": "ある金融サービス会社がAmazon EC2インスタンスを使用してアプリケーションをクラウドで実行しています。彼らは、一部のインスタンスが常に過小利用されている一方で、他のインスタンスが最大容量で稼働していることに気付きました。チームは、コストとパフォーマンスを最適化するために、どのリソースが過小利用され、どのリソースが過剰利用されているかを特定するために使用レポートを分析したいと考えています。彼らはAWS CloudWatchメトリクスとAWS Cost Explorerにアクセスできます。",
        "Question": "使用レポートを分析し、過小利用されているEC2インスタンスと過剰利用されているEC2インスタンスを特定するための最良のアプローチは何ですか？",
        "Options": {
            "1": "AWS Trusted Advisorを利用してインスタンスの利用状況を確認し、推奨事項を受け取ります。",
            "2": "CloudWatchでEC2インスタンスのメトリクスを分析し、CPUとメモリの使用パターンを特定します。",
            "3": "AWS Cost Explorerを使用して各インスタンスに関連する総コストを評価し、異常を特定します。",
            "4": "AWS Budgetsを活用して各EC2インスタンスの支出制限を設定し、レポートを分析します。"
        },
        "Correct Answer": "CloudWatchでEC2インスタンスのメトリクスを分析し、CPUとメモリの使用パターンを特定します。",
        "Explanation": "CloudWatchでEC2インスタンスのメトリクスを分析することで、CPUとメモリの利用状況などのパフォーマンスメトリクスを直接観察できます。このデータは、インスタンスが過小利用されているか過剰利用されているかを実際の使用パターンに基づいて判断するために重要であり、効果的なリソース最適化を可能にします。",
        "Other Options": [
            "AWS Trusted Advisorはベストプラクティスとリソース最適化に基づいて推奨事項を提供しますが、過小利用または過剰利用されているインスタンスを正確に特定するために必要な詳細なメトリクスを提供しません。",
            "AWS Cost Explorerは全体的なコストとトレンドを理解するのに役立ちますが、個々のインスタンスのパフォーマンスを効果的に評価するために必要な特定の使用メトリクスを提供しません。",
            "AWS Budgetsは支出制限の追跡に役立ちますが、EC2インスタンスの過小利用または過剰利用を特定するために必要な詳細なパフォーマンスメトリクスを提供しません。"
        ]
    },
    {
        "Question Number": "21",
        "Situation": "ある企業が、定期的な構成更新とメンテナンスタスクを必要とするAmazon ECSコンテナインスタンスのフリートを管理しています。オペレーションチームは、各コンテナインスタンスに個別にログインすることなく、複数のコンテナインスタンスでコマンドを実行するプロセスを効率化したいと考えています。彼らは、コンテナインスタンスへの安全なアクセスを確保しながら、これらのコマンドのステータスと結果を可視化するソリューションが必要です。",
        "Question": "オペレーションチームがECSコンテナインスタンス全体で構成更新と管理タスクを効率的に管理するために使用すべきAWSサービスはどれですか？",
        "Options": {
            "1": "AWS CloudFormationを活用して、ECSコンテナインスタンスの望ましい状態を定義するスタックを作成し、すべての構成がフリート全体で一貫して適用されるようにします。",
            "2": "Amazon EventBridgeを利用して、各ECSコンテナインスタンスでローカルにスクリプトを実行するタスクをスケジュールします。",
            "3": "AWS Systems Manager Run Commandを使用して、複数のECSコンテナインスタンスで同時にコマンドを実行し、コマンド実行のステータスと結果の中央ビューを提供します。",
            "4": "AWS Lambda関数を実装して、CloudWatch Eventsでトリガーし、構成変更があるたびにECSコンテナインスタンスを自動的に更新します。"
        },
        "Correct Answer": "AWS Systems Manager Run Commandを使用して、複数のECSコンテナインスタンスで同時にコマンドを実行し、コマンド実行のステータスと結果の中央ビューを提供します。",
        "Explanation": "AWS Systems Manager Run Commandを使用すると、複数のEC2インスタンスまたはECSコンテナインスタンス全体で管理タスクを安全かつ効率的に管理および自動化できます。コマンドを実行し、そのステータスを表示するための中央インターフェースを提供し、与えられたシナリオに最適です。",
        "Other Options": [
            "AWS CloudFormationはインフラストラクチャをコードとして使用するためのものであり、既存の稼働中のインスタンスでコマンドを実行したり構成を管理したりする直接的な能力を提供しません。リソースのプロビジョニングと管理に焦点を当てています。",
            "AWS Lambda関数はイベント駆動型アーキテクチャに最適ですが、イベントに基づいてアクションをトリガーするために使用できますが、複数のECSインスタンスで一括コマンドを実行するための簡単な方法を提供せず、コマンド実行結果の可視性も提供しません。",
            "Amazon EventBridgeは、AWS環境内のイベントに応答するために使用できるサーバーレスイベントバスサービスですが、ECSコンテナインスタンスでローカルにコマンドを実行することを本質的に許可しません。スクリプトを実行するためには追加の設定が必要であり、Systems Managerの中央コマンド実行および報告機能が欠けています。"
        ]
    },
    {
        "Question Number": "22",
        "Situation": "ある金融サービス会社がアプリケーションをAWSに移行しており、すべての機密データが静止時および転送中に暗号化されていることを確認する必要があります。チームは、業界標準に準拠しながら効果的な暗号化管理のためのさまざまなAWSサービスを検討しています。彼らは、暗号化キーの管理に関する運用負荷を最小限に抑えるソリューションを実装したいと考えています。",
        "Question": "会社が静止データと転送データの両方に対して暗号化を効果的に実装するために採用すべき戦略はどれですか？",
        "Options": {
            "1": "AWS CloudHSMを利用して暗号化キーを管理し、転送中のデータに対してアプリケーションレベルの暗号化を設定します。",
            "2": "AWS Key Management Service (KMS)を使用して暗号化キーを管理し、KMSキーを使用してS3サーバーサイド暗号化を有効にします。",
            "3": "Amazon S3バケットポリシーを展開してアクセスを制限し、静止データに対してクライアントサイド暗号化を使用します。",
            "4": "Amazon RDS暗号化を有効にし、追加のキー管理なしでSSL/TLSを使用して転送中のデータを保護します。"
        },
        "Correct Answer": "AWS Key Management Service (KMS)を使用して暗号化キーを管理し、KMSキーを使用してS3サーバーサイド暗号化を有効にします。",
        "Explanation": "AWS Key Management Service (KMS)を使用すると、暗号化キーの管理が簡素化され、AWSサービスとの統合が容易になります。KMSキーを使用してS3サーバーサイド暗号化を有効にすることで、静止データに対して強力な暗号化が提供され、規制要件への準拠も可能になります。このアプローチは、HTTPSと組み合わせることで、静止データと転送データの両方を効果的に保護します。",
        "Other Options": [
            "AWS CloudHSMの利用は、キー管理において複雑さと運用負荷を追加し、AWS KMSがよりシンプルなソリューションを提供できる場合には必要ないかもしれません。アプリケーションレベルの暗号化は、追加の実装作業も必要です。",
            "Amazon RDS暗号化を有効にすると静止データを保護できますが、SSL/TLSが転送中のデータを保護する一方で、このオプションはキー管理に対処していません。両方の側面に対してより包括的なソリューションが必要です。",
            "Amazon S3バケットポリシーを展開することでアクセスを制限できますが、静止データ自体の暗号化は提供されません。クライアントサイド暗号化は、アプリケーションにキー管理の負担をかけるため、効率が低下します。"
        ]
    },
    {
        "Question Number": "23",
        "Situation": "ある金融サービス会社は、障害から自動的に回復できるアーキテクチャを必要としています。このアーキテクチャは、重要なアプリケーションが最小限のダウンタイムで利用可能であり、異なるリージョン間でのフェイルオーバーを効率的に管理できる必要があります。会社は、最小限の手動介入でAWSサービスを活用するソリューションを好みます。",
        "Question": "次のうち、会社のアプリケーションに対して最も効果的な自動回復メカニズムを提供するソリューションはどれですか？",
        "Options": {
            "1": "複数のAWSリージョンにアプリケーションを展開し、Amazon Route 53を使用してヘルスチェックとフェイルオーバールーティングポリシーを設定します。障害が発生した場合にアプリケーションの状態をバックアップするAWS Lambda関数を設定します。",
            "2": "データベースレプリケーションのためにAmazon RDSを使用したマルチリージョンアーキテクチャを実装します。DNSフェイルオーバーのためにAmazon Route 53を使用し、データベースインスタンスが不健康になるとアラートを出すようにAmazon CloudWatchを設定します。",
            "3": "単一のリージョン内の複数のアベイラビリティゾーンにわたってAWS Elastic Load Balancingを設定します。ヘルスチェックを使用して、トラフィックが健康なインスタンスにのみルーティングされるようにします。",
            "4": "Amazon EC2 Auto Scalingを使用して、単一のリージョン内で常に健康なインスタンスの最小数が稼働するようにします。CloudWatchアラームを設定してインスタンスを監視し、不健康なインスタンスを自動的に交換します。"
        },
        "Correct Answer": "複数のAWSリージョンにアプリケーションを展開し、Amazon Route 53を使用してヘルスチェックとフェイルオーバールーティングポリシーを設定します。障害が発生した場合にアプリケーションの状態をバックアップするAWS Lambda関数を設定します。",
        "Explanation": "このオプションは、可用性と回復力を高めるマルチリージョン展開を活用することで、最も包括的な自動回復メカニズムを提供します。Route 53のヘルスチェックを使用することで、リージョン特有の障害が発生した場合にシームレスなフェイルオーバーが可能になり、Lambda関数はアプリケーションの状態を保持し、回復可能にします。",
        "Other Options": [
            "このオプションは、単一のリージョン内でのAuto Scalingのみに依存しており、地理的冗長性を提供せず、地域の障害を効果的に処理できない可能性があります。",
            "このオプションはマルチリージョン設定を含みますが、主にデータベースレプリケーションに焦点を当てており、包括的なディザスタリカバリのためのアプリケーションレベルのフェイルオーバーメカニズムには十分に対処していません。",
            "このオプションは単一のリージョンに制限され、アベイラビリティゾーン間の負荷分散に焦点を当てています。地域全体の障害が発生した場合の自動回復のための必要な措置が欠けており、会社の要件には効果的ではありません。"
        ]
    },
    {
        "Question Number": "24",
        "Situation": "ある金融サービス会社がレガシーアプリケーションをAWSに移行する計画を立てています。これらのアプリケーションは、依存関係とリソース利用状況を分析する必要がある複数のコンポーネントで構成されています。会社は、ビジネス運営への影響を最小限に抑えつつ、クラウドへのスムーズな移行を確保したいと考えています。彼らは、発見と移行プロセスを支援するためにさまざまなAWSツールを検討しています。",
        "Question": "移行計画フェーズにおいて、既存のレガシーアプリケーションの依存関係とリソース利用状況を特定するために最も効果的なツールはどれですか？",
        "Options": {
            "1": "AWS Application Discovery Serviceを使用して、オンプレミスアプリケーションに関するデータを収集および分析し、そのリソース利用状況と依存関係を含めます。",
            "2": "AWS CloudTrailを使用して、移行後のAWSアカウント内のAPI呼び出しとユーザーアクティビティを監視します。",
            "3": "AWS Configを使用して、移行後のアプリケーションのリソース構成とコンプライアンスを追跡します。",
            "4": "AWS Systems Managerを使用して、移行後のAWS環境内でアプリケーションの運用を管理および自動化します。"
        },
        "Correct Answer": "AWS Application Discovery Serviceを使用して、オンプレミスアプリケーションに関するデータを収集および分析し、そのリソース利用状況と依存関係を含めます。",
        "Explanation": "AWS Application Discovery Serviceは、アプリケーションの依存関係とリソース利用状況を自動的に特定することで、組織がAWSへの移行を計画するのを支援するために特別に設計されています。これにより、より情報に基づいた移行戦略が可能になります。",
        "Other Options": [
            "AWS CloudTrailは、AWSアカウント内のAPI活動のログ記録と監視に焦点を当てており、移行前のオンプレミスアプリケーションの依存関係やリソース利用状況に関する洞察を提供しません。",
            "AWS Configは、AWSリソースの構成を監視および管理するために使用されますが、移行前のレガシーアプリケーションの分析には適用されません。",
            "AWS Systems Managerは、主にAWS内でのアプリケーションの管理と運用に使用され、移行後の管理機能を提供しますが、オンプレミスアプリケーションの依存関係の発見には役立ちません。"
        ]
    },
    {
        "Question Number": "25",
        "Situation": "金融サービス会社は、レガシーなオンプレミスアプリケーションをAWSに移行する計画を立てています。会社にはいくつかのワークロードがあり、その中にはビジネス運営にとって重要なものもあれば、緊急性の低いものもあります。移行チームが結成され、どのワークロードを優先して移行するかを決定する必要があります。彼らはビジネスへの影響を最小限に抑え、クラウドの利点を最大化したいと考えています。",
        "Question": "移行チームがAWSへの移行のためにワークロードを優先する最も効果的なアプローチは何ですか？",
        "Options": {
            "1": "ビジネスへの影響と移行の複雑さに基づいてワークロードを優先する。",
            "2": "一貫性を保つために、ワークロードをアルファベット順に移行する。",
            "3": "移行プロセスをテストするために、最も重要でないワークロードから始める。",
            "4": "全てのワークロードを一度に移行して全体のダウンタイムを最小限に抑える。"
        },
        "Correct Answer": "ビジネスへの影響と移行の複雑さに基づいてワークロードを優先する。",
        "Explanation": "このアプローチにより、移行チームは最も重要なアプリケーションにまず焦点を当て、最も重要なサービスがクラウド環境で正常に機能することを確保できます。また、移行プロセスにおける潜在的な課題を早期に特定し、今後の計画をより良くすることができます。",
        "Other Options": [
            "このオプションは、全てのワークロードを一度に移行することでリソースが圧倒され、潜在的な失敗につながる可能性があるため、重大なダウンタイムを引き起こす可能性があります。",
            "アルファベット順に移行することは、実際のビジネスニーズやアプリケーションの複雑さを考慮していないため、混乱や非効率を引き起こす可能性があります。",
            "最も重要でないワークロードから始めることは、クラウドからの利点の実現を遅らせ、より重要なワークロードが未対応のままになるため、ビジネスに不必要なリスクをもたらす可能性があります。"
        ]
    },
    {
        "Question Number": "26",
        "Situation": "金融サービス会社は、新しい技術とマネージドサービスを採用して運用効率を向上させ、コストを削減するためにインフラを強化しようとしています。会社はクラウドネイティブソリューションを活用できるいくつかの領域を特定しましたが、実装のための明確な戦略が不足しています。彼らはコンプライアンスとセキュリティを確保しながらアーキテクチャを近代化するオプションを検討しています。",
        "Question": "会社はリスクを最小限に抑えながら新しい技術とマネージドサービスを効果的に採用するためにどのアプローチを取るべきですか？",
        "Options": {
            "1": "現在のワークロードを徹底的に評価し、マネージドサービスが従来のインフラを置き換えられる具体的なユースケースを特定し、その後段階的な実装計画を立てる。",
            "2": "詳細な評価なしに、すべての既存アプリケーションをサーバーレスアーキテクチャに即座に移行してクラウドの機能を活用する。",
            "3": "複数のクラウドプロバイダーにワークロードを分散させてベンダーロックインを回避するためにマルチクラウド戦略を実施するが、それが管理を複雑にする場合でも。",
            "4": "すべてのアプリケーションを再設計せずにクラウドにリフトアンドシフト戦略を採用し、現在のインフラへの変更を最小限に抑える。"
        },
        "Correct Answer": "現在のワークロードを徹底的に評価し、マネージドサービスが従来のインフラを置き換えられる具体的なユースケースを特定し、その後段階的な実装計画を立てる。",
        "Explanation": "徹底的な評価を行うことで、会社は現在のワークロードを理解し、マネージドサービスから利益を得られる具体的な領域を特定できます。このアプローチは、急いだ移行に伴うリスクを軽減し、ビジネス目標に沿った構造化された段階的な実装を可能にします。",
        "Other Options": [
            "評価なしにすべての既存アプリケーションをサーバーレスアーキテクチャに即座に移行することは、予期しない問題や互換性の問題、コストの増加を引き起こす可能性があります。すべてのアプリケーションがサーバーレスモデルに適しているわけではありません。",
            "明確なニーズなしにマルチクラウド戦略を実施すると、管理が複雑になり、運用コストが増加し、セキュリティやコンプライアンスに課題をもたらす可能性がありますが、即時の利点は提供されません。",
            "リフトアンドシフト戦略は、アプリケーションがクラウド環境に完全に最適化されていないため、パフォーマンスが最適でなく、コストの非効率を引き起こすことがよくあります。クラウドネイティブ機能の利点を逃すことになります。"
        ]
    },
    {
        "Question Number": "27",
        "Situation": "ある会社は、異なるワークロードに最適なEC2インスタンスタイプを評価しています。彼らは高いI/Oパフォーマンスを必要とするウェブアプリケーション、高い計算能力を必要とする機械学習モデル、キャッシングのために大きなメモリ容量を必要とするデータベースを持っています。",
        "Question": "会社のワークロードのニーズを最もよく満たすインスタンスファミリーの組み合わせはどれですか？（2つ選択）",
        "Options": {
            "1": "バースト可能なパフォーマンスのためのT3インスタンス。",
            "2": "計算集約型ワークロードのためのC5インスタンス。",
            "3": "高I/OパフォーマンスのためのI3インスタンス。",
            "4": "汎用ワークロードのためのM5インスタンス。",
            "5": "メモリ集約型ワークロードのためのR5インスタンス。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "高I/OパフォーマンスのためのI3インスタンス。",
            "計算集約型ワークロードのためのC5インスタンス。"
        ],
        "Explanation": "I3インスタンスは高I/Oパフォーマンスに最適化されており、ストレージへの迅速なアクセスを必要とするワークロードに理想的です。C5インスタンスは計算集約型タスクのために設計されており、高い処理能力を提供し、機械学習モデルや他の計算負荷の高いアプリケーションに適しています。",
        "Other Options": [
            "R5インスタンスはメモリ最適化されていますが、状況で指定された高I/Oパフォーマンスや計算集約型タスクの主な要件ではありません。",
            "T3インスタンスは変動するワークロードに適したバースト可能なパフォーマンスを提供しますが、指定されたアプリケーションに必要なI/Oや計算能力を提供しません。",
            "M5インスタンスは汎用であり、特定のI/Oや計算能力を必要とするワークロードには最適ではありません。"
        ]
    },
    {
        "Question Number": "28",
        "Situation": "ある企業が、クラウドリソースの使用状況をより良く把握するためにタグ付け戦略を実装してAWSコストを最適化しようとしています。この企業には複数のビジネスユニットがあり、それぞれ異なる予算とリソース要件があります。リソースがこれらのビジネスユニットに沿った方法でタグ付けされ、コスト追跡が容易になるようにする必要があります。",
        "Question": "コスト配分のために効果的なタグ付け戦略を実装するのに役立つ以下の選択肢のうち、どれを選びますか？（2つ選択）",
        "Options": {
            "1": "各ビジネスユニットに関連するすべてのリソースに特定のタグの使用を義務付けるタグ付けポリシーを作成します。",
            "2": "特定のタグに関連するコストを分析するためにAWS Cost Explorerを実装します。",
            "3": "タグを必要とせずにビジネスユニットごとに支出を監視するためにAWS Budgetsを使用します。",
            "4": "リソースの作成とタグ付けに関連するAPIコールを追跡するためにAWS CloudTrailを利用します。",
            "5": "リソースタグを評価するAWS Configルールを使用してタグ付けの遵守を強制します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "各ビジネスユニットに関連するすべてのリソースに特定のタグの使用を義務付けるタグ付けポリシーを作成します。",
            "特定のタグに関連するコストを分析するためにAWS Cost Explorerを実装します。"
        ],
        "Explanation": "タグ付けポリシーを作成することで、すべてのリソースがビジネスユニットに従って一貫してタグ付けされ、コストを効果的に追跡しやすくなります。AWS Cost Explorerを使用すると、定義したタグに基づいてコストを分析でき、ビジネスユニットごとの支出を可視化できます。",
        "Other Options": [
            "AWS Budgetsは支出を監視できますが、その運用にはタグ付けを必ずしも必要としないため、タグ付け戦略の実施にはあまり効果的ではありません。",
            "AWS CloudTrailはAPIコールの監査に役立ちますが、タグ付けやコスト配分戦略に直接寄与するものではありません。",
            "AWS Configルールはタグ付けの遵守を強制できますが、それらのタグに関連するコストの実際の分析には役立ちません。"
        ]
    },
    {
        "Question Number": "29",
        "Situation": "ある金融サービス機関がアプリケーションをAWSに移行しています。この機関は、複数のAWSアカウントにわたるユーザーのアイデンティティとアクセス権限を管理するための安全な方法を必要としています。ユーザーがさまざまなAWSサービスにシングルサインオン（SSO）アクセスを持ちながら、きめ細かなアクセス制御を維持できるソリューションを実装したいと考えています。この機関はすでにユーザー管理のために企業ディレクトリを使用しています。",
        "Question": "複数のAWSアカウントにわたるユーザーアクセスを管理するために、どのアプローチがこの機関の要件を最もよく満たしますか？",
        "Options": {
            "1": "各AWSアカウントにIAMユーザーを作成し、手動でアクセス権限を管理します。AWS Organizationsを使用して請求を統合します。",
            "2": "AWS IAMロールを利用し、各ユーザーのためにクロスアカウントロールアクセスを確立し、すべてのユーザーの手動資格情報管理を要求します。",
            "3": "AWS IAM Identity Center（AWS SSO）を設定し、企業ディレクトリに接続します。AWSアカウント全体でユーザーのアクセスレベルを定義するための権限セットを作成します。",
            "4": "AWS Cognitoを使用してアイデンティティ連携ソリューションを展開し、AWSアカウント全体でユーザーのアイデンティティとアクセス権限を管理します。"
        },
        "Correct Answer": "AWS IAM Identity Center（AWS SSO）を設定し、企業ディレクトリに接続します。AWSアカウント全体でユーザーのアクセスレベルを定義するための権限セットを作成します。",
        "Explanation": "AWS IAM Identity Center（AWS SSO）を使用することで、複数のアカウントにわたるユーザーのアイデンティティとアクセス権限を集中管理でき、シングルサインオン機能を持つため、この機関のセキュリティと使いやすさの要件に直接合致します。",
        "Other Options": [
            "各アカウントにIAMユーザーを作成することは非効率的で、集中管理ソリューションを提供しません。このアプローチは管理オーバーヘッドと複雑さを増加させ、各アカウントで権限を別々に管理する必要があります。",
            "AWS Cognitoはユーザーのアイデンティティを管理できますが、主にウェブおよびモバイルアプリケーション向けに設計されており、複数のアカウントにわたるAWSサービスへのアクセス管理においてAWS IAM Identity Centerと同じレベルの統合と管理を提供しません。",
            "クロスアカウントアクセスのためにIAMロールを使用すると、ユーザーが自分の資格情報を管理する必要があり、シンプルなSSO体験を提供しません。このアプローチはセキュリティリスクと資格情報管理の複雑さを増加させる可能性があります。"
        ]
    },
    {
        "Question Number": "30",
        "Situation": "ある金融サービス会社が、さまざまなビジネスユニットを管理するために複数のAWSアカウントを運営しています。各アカウントは、特定のAWSリソースが変更されたときに、中央集権的なAmazon SNSトピックからイベント通知を受け取る能力を必要としています。ソリューションアーキテクトは、すべての関連アカウントにイベント通知が配信されることを確認しながら、セキュリティと管理のベストプラクティスを遵守する必要があります。",
        "Question": "AWSサービスを使用して複数アカウントのイベント通知を設定する最も効果的な方法は何ですか？",
        "Options": {
            "1": "マスターアカウントでAWS Lambdaを利用して各メンバーアカウントからイベントをポーリングし、それらのイベントを中央集権的なAmazon SNSトピックに公開します。",
            "2": "各メンバーアカウントにAmazon EventBridgeイベントバスを展開し、イベントをマスターアカウントのAmazon SNSトピックに送信するルールを設定します。",
            "3": "マスターアカウントにAmazon SNSトピックを作成し、各メンバーアカウントがそのトピックを購読できるようにクロスアカウント権限を設定します。",
            "4": "各メンバーアカウントにAWS Configルールを設定し、AWS Step FunctionをトリガーしてマスターアカウントのAmazon SNSトピックに通知を送信します。"
        },
        "Correct Answer": "マスターアカウントにAmazon SNSトピックを作成し、各メンバーアカウントがそのトピックを購読できるようにクロスアカウント権限を設定します。",
        "Explanation": "マスターアカウントにAmazon SNSトピックを作成し、クロスアカウント権限を設定することで、すべてのメンバーアカウントが中央集権的なトピックに安全に購読できるようになります。このアプローチは通知プロセスを簡素化し、複数アカウントアーキテクチャのベストプラクティスに従います。",
        "Other Options": [
            "各メンバーアカウントにAmazon EventBridgeイベントバスを展開することは、通知をマスターアカウントに集中させるという目標に対して不必要な複雑さを追加します。このオプションはイベント転送のために追加の設定が必要です。",
            "各メンバーアカウントからイベントをポーリングするためにAWS Lambdaを使用すると、オーバーヘッドが発生し、遅延やコストの増加を引き起こす可能性があります。クロスアカウントの購読を使用してSNSを直接利用する方が効率的です。",
            "AWS Configルールを設定するとリソース変更のイベントが生成されますが、通知を直接促進するものではありません。このオプションはSNSトピックが提供する直接的な統合と効率性に欠けています。"
        ]
    },
    {
        "Question Number": "31",
        "Situation": "スタートアップは、日中の変動するワークロードを持つAmazon EC2インスタンス上でウェブアプリケーションを運営しています。スタートアップは、ピーク時にアプリケーションが応答性を保ちながらコストを削減することを懸念しています。現在はオンデマンドインスタンスを使用していますが、パフォーマンスを犠牲にすることなく、よりコスト効率の良いオプションを模索したいと考えています。",
        "Question": "コストを最適化しながらアプリケーションのパフォーマンスを維持するために、ソリューションアーキテクトはどのアーキテクチャの選択肢を推奨すべきですか？",
        "Options": {
            "1": "アプリケーションをAWS Lambdaに移行し、EC2インスタンスのプロビジョニングを完全に回避し、サーバーレスの価格設定を活用します。",
            "2": "すべてのEC2インスタンスをオンデマンドインスタンスとしてデプロイし、ピーク時にインスタンスサイズを増やしてトラフィックを処理します。",
            "3": "すべてのEC2インスタンスにリザーブドインスタンスを使用して、アプリケーションが常に低コストで利用可能であることを保証します。",
            "4": "オンデマンドインスタンスとスポットインスタンスの組み合わせでオートスケーリングを実装し、オフピーク時にコスト削減を図ります。"
        },
        "Correct Answer": "オンデマンドインスタンスとスポットインスタンスの組み合わせでオートスケーリングを実装し、オフピーク時にコスト削減を図ります。",
        "Explanation": "オンデマンドインスタンスとスポットインスタンスの組み合わせでオートスケーリングを使用することで、スタートアップはワークロードの変化に動的に適応し、需要が少ない時間帯に低コストのスポットインスタンスを活用することで大幅なコスト削減を実現できます。",
        "Other Options": [
            "アプリケーションをAWS Lambdaに移行することは、アプリケーションが永続的な状態を必要としたり、長時間実行されるプロセスがある場合には実現不可能な場合があります。Lambdaはイベント駆動型の短期間のタスクに最適です。",
            "すべてのEC2インスタンスにリザーブドインスタンスを使用すると、スタートアップは長期的なコミットメントに縛られ、変動するワークロードや財政状況を考慮すると最適ではありません。",
            "すべてのEC2インスタンスをオンデマンドインスタンスとしてデプロイし、スポットインスタンスやオートスケーリングを考慮しない場合、高コストにつながり、ピーク時とオフピーク時に必要な柔軟性を提供しません。"
        ]
    },
    {
        "Question Number": "32",
        "Situation": "金融サービス会社は、オンプレミスのワークロードをAWSに移行することを検討しています。現在のアーキテクチャは、スケールやメンテナンスが難しい専用サーバー上で動作するモノリシックアプリケーションで構成されています。会社はデータの整合性とセキュリティに関する厳格なコンプライアンス要件を持っています。ビジネスオペレーションへの最小限の影響を確保しながら、段階的な移行戦略をサポートできるさまざまなAWSサービスを評価しています。",
        "Question": "スケーラビリティとコンプライアンス要件に対応しながら、既存のワークロードをAWSに移行するために、ソリューションアーキテクトはどのオプションを推奨すべきですか？",
        "Options": {
            "1": "アプリケーション全体をAmazon EC2インスタンスにリフトアンドシフトし、追加のセキュリティのためにAWS Shieldを実装します。",
            "2": "AWS Elastic Beanstalkを使用してアプリケーションを再アーキテクチャし、静的コンテンツ配信のためにAmazon S3バケットを使用します。",
            "3": "アプリケーションをAWS Lambdaを使用してマイクロサービスにリファクタリングし、データはトランザクションの整合性のためにAmazon RDSに保存します。",
            "4": "Amazon ECSを使用してアプリケーションをコンテナ化し、共有ストレージアクセスのためにAmazon EFSでデプロイします。"
        },
        "Correct Answer": "アプリケーションをAWS Lambdaを使用してマイクロサービスにリファクタリングし、データはトランザクションの整合性のためにAmazon RDSに保存します。",
        "Explanation": "アプリケーションをAWS Lambdaを使用してマイクロサービスにリファクタリングすることで、より良いスケーラビリティと柔軟性を実現できます。Amazon RDSを使用することで、会社はデータの整合性とコンプライアンス要件を満たしつつ、コスト効率と運用負担の軽減を図ることができます。",
        "Other Options": [
            "リフトアンドシフトは、モノリシックアーキテクチャに固有のスケーラビリティとメンテナンスの問題に対処しておらず、AWS Shieldにのみ依存することはデータの整合性要件のコンプライアンスを保証しません。",
            "AWS Elastic Beanstalkを使用するとデプロイが簡素化されますが、サーバーレスアーキテクチャの利点を完全に活用できない可能性があり、成長するアプリケーションのスケーラビリティと柔軟性を制限する可能性があります。",
            "Amazon ECSでアプリケーションをコンテナ化すると、コンテナ管理とオーケストレーションに関連する複雑さが生じ、段階的な移行戦略の目標と一致しない可能性があります。"
        ]
    },
    {
        "Question Number": "33",
        "Situation": "金融サービス会社は、Amazon EC2上でホストされている重要なアプリケーションのために災害復旧（DR）戦略を実施しています。彼らは、災害が発生した場合に最小限のダウンタイムとデータ損失を確保するソリューションが必要です。会社は、レジリエントなDRアーキテクチャを実現するためのさまざまなオプションを検討しています。",
        "Question": "最小限のデータ損失で最高の可用性を確保するために、ソリューションアーキテクトはどの災害復旧戦略を推奨すべきですか？",
        "Options": {
            "1": "別のリージョンでEC2インスタンスを実行するウォームスタンバイアーキテクチャを設定し、災害時に迅速にスケールアップできるようにします。",
            "2": "Amazon Route 53を使用してトラフィック分散を行い、複数のAWSリージョンにわたるアクティブ-アクティブ構成を実装します。",
            "3": "バックアップストレージにAmazon S3を使用し、定義された期間後に古いバックアップを削除するライフサイクルポリシーを設定します。",
            "4": "セカンダリリージョンにアプリケーションの最小限のフットプリントを維持し、迅速にアクティブ化できるパイロットライトDR戦略を展開します。"
        },
        "Correct Answer": "Amazon Route 53を使用してトラフィック分散を行い、複数のAWSリージョンにわたるアクティブ-アクティブ構成を実装します。",
        "Explanation": "アクティブ-アクティブ構成は、アプリケーションが複数のリージョンで完全に稼働していることを保証し、最高の可用性を提供し、ダウンタイムを最小限に抑えます。このセットアップにより、Amazon Route 53を使用してシームレスなトラフィック分散と負荷分散が可能になり、堅牢な災害復旧ソリューションが実現します。",
        "Other Options": [
            "Amazon S3をバックアップストレージとして使用し、ライフサイクルポリシーを実装することは、即時のフェイルオーバー機能を提供しません。データ保持には重要ですが、災害時のダウンタイムを最小限に抑えることはできず、これは重要な要件です。",
            "ウォームスタンバイアーキテクチャは、迅速にスケールアップできる縮小版のアプリケーションを維持することを含みますが、それでもダウンタイムが発生する可能性があります。このアプローチは、アクティブ-アクティブ構成と同じレベルの可用性を保証しません。",
            "パイロットライトDR戦略は、アクティブ-アクティブセットアップと比較してセカンダリ環境を完全にアクティブ化するのにより多くの時間を要します。コスト効率の良いアプローチではありますが、災害時に必要な即時の可用性を提供せず、データ損失やサービスの中断につながる可能性があります。"
        ]
    },
    {
        "Question Number": "34",
        "Situation": "ある企業が、低遅延と高スループットを必要とする高可用性アプリケーションをAWS上に展開しようとしています。彼らは、Elastic Load Balancingを使用して、複数のターゲットに対して受信トラフィックを分散させることを検討しています。アプリケーションはさまざまな地理的場所からアクセスされるため、トラフィックが効率的にルーティングされることを確保する必要があります。また、オンプレミスネットワークとの統合を向上させるために、静的IPアドレスを設定したいと考えています。",
        "Question": "これらの要件を満たすために、企業はどの機能の組み合わせを活用すべきですか？（2つ選択）",
        "Options": {
            "1": "WebSocket接続のみを処理するためにApplication Load Balancerを展開する。",
            "2": "各アベイラビリティゾーンに静的IPアドレスを持つNetwork Load Balancerを実装する。",
            "3": "スティッキーセッションを設定したApplication Load Balancerを使用する。",
            "4": "Network Load Balancerを利用してVPCエンドポイントサービスを作成する。",
            "5": "Network Load Balancerを設定して、受信トラフィック制御のためにセキュリティグループを使用する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "各アベイラビリティゾーンに静的IPアドレスを持つNetwork Load Balancerを実装する。",
            "Network Load Balancerを利用してVPCエンドポイントサービスを作成する。"
        ],
        "Explanation": "静的IPアドレスを持つNetwork Load Balancerを実装することで、企業はオンプレミスネットワークからの接続を容易にするための既知のIPアドレスを維持でき、Network Load BalancerをVPCエンドポイントサービスに使用することで、VPC内のアプリケーションターゲットへのトラフィックの効率的なルーティングを確保できます。",
        "Other Options": [
            "スティッキーセッションを設定したApplication Load Balancerを使用することは適切ではありません。なぜなら、要件は静的IPアドレスと高スループットを必要としており、これらはNetwork Load Balancerによってより適切に処理されるからです。",
            "WebSocket接続専用にApplication Load Balancerを展開することは、静的IPの必要性に対処せず、すべての種類のトラフィックに対して最良のパフォーマンスを提供しない可能性があります。",
            "Network Load Balancerを設定してセキュリティグループを使用することは不正解です。なぜなら、Network Load Balancerは接続レベルで動作し、インスタンスレベルではないため、セキュリティグループをサポートしていないからです。"
        ]
    },
    {
        "Question Number": "35",
        "Situation": "ある企業がAWS CloudFormationを使用してインフラストラクチャを管理しています。企業は、データベースのパスワードやAPIキーなどの機密情報をテンプレートにハードコーディングせずに安全に保存したいと考えています。彼らはこれを達成するためにSystems Manager Parameter Storeを利用することに決めました。ソリューションアーキテクトは、CloudFormationテンプレート内でこれらのパラメータを参照する必要があります。",
        "Question": "CloudFormationテンプレート内でSystems Managerパラメータを正しく参照するための設定はどれですか？",
        "Options": {
            "1": "Parameters: MyParameter: Type: AWS::SSM::Parameter::Value<String> Default: /myapp/dbpassword",
            "2": "Parameters: MyParameter: Type: AWS::SSM::Parameter::Value<String> Value: /myapp/dbpassword",
            "3": "Parameters: MyParameter: Type: AWS::SSM::Parameter::Value<String>",
            "4": "Parameters: MyParameter: Type: String Default: /myapp/dbpassword"
        },
        "Correct Answer": "Parameters: MyParameter: Type: AWS::SSM::Parameter::Value<String> Default: /myapp/dbpassword",
        "Explanation": "正しいオプションは、CloudFormationでSystems Managerパラメータを定義するための適切な構文を使用しています。タイプを正しくAWS::SSM::Parameter::Value<String>として指定し、有効なデフォルト値を提供することで、CloudFormationがParameter Storeからパラメータを取得できるようにします。",
        "Other Options": [
            "このオプションは不正解です。なぜなら、デフォルト値を指定しておらず、CloudFormationがSystems Managerからパラメータを取得するために必要だからです。",
            "このオプションは不正解です。なぜなら、タイプを正しく指定していますが、デフォルト値を定義していないからです。デフォルト値がないため、CloudFormationはパラメータを取得できません。",
            "このオプションは不正解です。なぜなら、この文脈で'Value'キーは有効ではありません。代わりに、パラメータキーを指定するために'Default'を使用するのが正しいアプローチです。"
        ]
    },
    {
        "Question Number": "36",
        "Situation": "ある組織が、オンプレミスのOracleデータベースをAmazon RDS for Oracleに移行する計画を立てています。このデータベースには、組織の運用にとって重要な複数の機能があります。データベース管理者は、RDS環境で必要なすべての機能がサポートされていることを確認する必要があります。",
        "Question": "Amazon RDS for Oracleを使用する際にサポートされていないOracleデータベースの機能はどれですか？",
        "Options": {
            "1": "Real Application Clusters (Oracle RAC)",
            "2": "Automatic Storage Management (ASM)",
            "3": "データ転送のためのAmazon S3との統合",
            "4": "MySQLのクロスリージョンレプリケーション"
        },
        "Correct Answer": "Real Application Clusters (Oracle RAC)",
        "Explanation": "Amazon RDS for OracleはReal Application Clusters (Oracle RAC)をサポートしていません。これは、Oracleデータベースを移行する際に考慮すべき重要な制限です。RACは、クラスタリング機能を通じて高可用性とスケーラビリティを提供するように設計されており、RDSでは利用できません。",
        "Other Options": [
            "Automatic Storage Management (ASM)はAmazon RDS for Oracleではサポートされていませんが、このオプションは明示的に述べられていないため、質問がサポートされている機能を求めているため、誤解を招く可能性があります。",
            "MySQLのクロスリージョンレプリケーションはRDSでサポートされている機能ですが、Oracleデータベースには関連しておらず、したがって質問のOracle機能に対する焦点には合致しません。",
            "データ転送のためのAmazon S3との統合はAmazon RDS for Oracleのサポートされている機能であり、安全で効率的なデータ転送を可能にするため、このオプションは質問に合致しないため不正解です。"
        ]
    },
    {
        "Question Number": "37",
        "Situation": "メディア会社は、画像や動画ファイルを保存するためにAmazon S3を使用しています。彼らは、メディアファイルの複数のバージョンを維持するためにS3バケットでバージョニングを有効にしています。ソリューションアーキテクトは、会社が削除されたファイルを復元し、適切なセキュリティ対策を実施しながらバージョンを効果的に管理できるようにする必要があります。",
        "Question": "video.mp4という名前のファイルが、すでに同じファイルのバージョンを含むバージョニングが有効なS3バケットにアップロードされた場合、以前のバージョンと新しいアップロードの取り扱いに関して次のうちどの文が正しいですか？",
        "Options": {
            "1": "video.mp4の新しいバージョンが作成され、以前のバージョンは上書きされることなくバケットに残ります。",
            "2": "以前のバージョンがバケットに存在する場合、アップロード操作は失敗します。",
            "3": "delete markerがvideo.mp4の以前のバージョンに適用され、それが現在のバージョンになります。",
            "4": "video.mp4の以前のバージョンは永久に削除され、復元できません。"
        },
        "Correct Answer": "video.mp4の新しいバージョンが作成され、以前のバージョンは上書きされることなくバケットに残ります。",
        "Explanation": "バージョニングが有効なS3バケットでは、既存のオブジェクトの新しいバージョンをアップロードしても、以前のバージョンは削除または上書きされません。代わりに、新しいアップロードには新しいバージョンIDが割り当てられ、古いバージョンはバケット内でアクセス可能なままです。",
        "Other Options": [
            "このオプションは不正確です。バージョニングにより、新しいアップロードが行われる際に以前のバージョンを保持できるため、特に要求されない限り、永久に削除されることはありません。",
            "このオプションは不正確です。バージョニングされたバケットでのアップロード操作は、同じキーに以前のバージョンが存在しても常に成功します。",
            "このオプションは不正確です。delete markerはオブジェクトが明示的に削除されたときにのみ適用され、新しいバージョンがアップロードされたときには適用されません。"
        ]
    },
    {
        "Question Number": "38",
        "Situation": "金融サービス会社は、リアルタイムのトランザクション処理と分析を必要とする新しいアプリケーションを構築しています。このアプリケーションは、高いデータ量を低遅延で効率的に処理し、データが報告目的で簡単にクエリできることを保証する必要があります。ソリューションアーキテクトは、これらの要件を満たすためにさまざまなデータベースオプションを評価しています。",
        "Question": "リアルタイムのトランザクション処理システムを実装し、効率的なクエリ機能を持つために最も適したデータベースソリューションはどれですか？",
        "Options": {
            "1": "高スループットを処理し、リアルタイム分析のために低遅延を提供するために、リードレプリカを持つAmazon RDS for MySQL。",
            "2": "複雑なクエリに最適化されたデータウェアハウジングのためのAmazon Redshiftですが、リアルタイムのトランザクション処理には適していません。",
            "3": "リアルタイムトランザクションのために低遅延アクセスを確保し、分析のための高可用性を持つプロビジョニングスループットを持つAmazon DynamoDB。",
            "4": "PostgreSQL互換のAmazon Auroraは、高トランザクションボリュームのためにスケールアウトし、クエリパフォーマンスを維持するためにサーバーレス機能を利用します。"
        },
        "Correct Answer": "PostgreSQL互換のAmazon Auroraは、高トランザクションボリュームのためにスケールアウトし、クエリパフォーマンスを維持するためにサーバーレス機能を利用します。",
        "Explanation": "PostgreSQL互換のAmazon Auroraは、高パフォーマンスを目的として設計されており、リアルタイムのトランザクション処理を効率的に処理できます。そのサーバーレス機能により、需要に基づいて自動的にスケーリングでき、高トランザクションボリュームを処理しながらクエリの低遅延を維持できるため、このシナリオに最適です。",
        "Other Options": [
            "リードレプリカを持つAmazon RDS for MySQLは、分析のためのレプリケーション遅延により遅延を引き起こすため、リアルタイムのトランザクション処理には最適ではなく、Auroraほど効果的にスケールしない可能性があります。",
            "Amazon DynamoDBは低遅延アクセスに適していますが、Auroraのようなリレーショナルデータベースと比較して、分析にしばしば必要とされる同じレベルのクエリ機能や複雑な結合を提供できない可能性があります。",
            "Amazon Redshiftは主に複雑な分析クエリのために設計されたデータウェアハウジングソリューションであり、リアルタイムのトランザクション処理には適していないため、このアプリケーションの要件には不適切です。"
        ]
    },
    {
        "Question Number": "39",
        "Situation": "多国籍企業は、ユーザーがGoogleアカウントを使用して認証できるモバイルアプリケーションを開発しました。このアプリケーションは、認証されたユーザーに代わってAWSリソースに安全にアクセスする必要があり、ユーザーが直接AWS資格情報を管理する必要はありません。会社は、この認証および承認プロセスを促進するためにAWSサービスを使用することを検討しています。",
        "Question": "次のうち、アプリケーションが認証されたユーザーの一時的なAWS資格情報を取得できるソリューションはどれですか？（2つ選択）",
        "Options": {
            "1": "ユーザーが提供するGoogle認証トークンを使用して、一時的なセキュリティ資格情報を取得するためにAssumeRoleWithWebIdentityを実装します。",
            "2": "アプリケーションの各ユーザーのためにIAMユーザーを作成し、認証のためにアクセスキーを配布します。",
            "3": "AWS STSとインターフェースを持つカスタムアイデンティティプロバイダーを利用して、ユーザーログインに基づいて一時的な資格情報を発行します。",
            "4": "AWS Cognitoを使用してユーザーを認証し、特定のAWSリソースへのアクセスを許可するロールを構成します。",
            "5": "AWS SSOを使用してユーザーアクセスを直接管理し、アプリケーションのためにフェデレーテッド認証を有効にします。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Cognitoを使用してユーザーを認証し、特定のAWSリソースへのアクセスを許可するロールを構成します。",
            "ユーザーが提供するGoogle認証トークンを使用して、一時的なセキュリティ資格情報を取得するためにAssumeRoleWithWebIdentityを実装します。"
        ],
        "Explanation": "AWS CognitoとAssumeRoleWithWebIdentityは、Googleのような外部アイデンティティプロバイダーを介して認証されたユーザーに一時的なセキュリティ資格情報を提供するために設計されています。AWS Cognitoはユーザープールとロールの管理を容易にし、AssumeRoleWithWebIdentityはWebアイデンティティトークンを使用したフェデレーテッド認証を直接促進します。",
        "Other Options": [
            "すべてのアプリケーションユーザーのためにIAMユーザーを作成することはスケーラブルではなく、長期的な資格情報の管理を避けるために設計されたフェデレーテッドアクセスの目的に反します。",
            "AWS SSOはAWSアカウントやサービス全体のアクセス管理に焦点を当てていますが、外部Webアイデンティティプロバイダーを使用して一時的な資格情報を直接発行することはありません。",
            "カスタムアイデンティティプロバイダーを利用することは不必要な複雑さをもたらす可能性があり、AWSサービスが提供する組み込みのサポートと比較して、一時的なAWS資格情報を取得するための標準的なアプローチではありません。"
        ]
    },
    {
        "Question Number": "40",
        "Situation": "グローバルなオンライン小売企業が、国際的なユーザーのパフォーマンスを向上させ、レイテンシを削減するために、アプリケーションをAWSに移行しています。この企業は、さまざまなAWSサービスのエンドポイントを介して相互に通信するいくつかのマイクロサービスを持っています。ソリューションアーキテクトは、アプリケーションがAWSサービスとシームレスに相互作用できるようにしながら、セキュリティを維持し、コストを最小限に抑える必要があります。",
        "Question": "ソリューションアーキテクトがAWSサービスのエンドポイントの使用を最適化するために実装すべき戦略はどれですか？（2つ選択してください）",
        "Options": {
            "1": "VPCエンドポイントを利用して、インターネットを経由せずにAWSサービスにプライベートに接続します。",
            "2": "AWS Global Acceleratorを実装して、複数のAWSリージョンにホストされているアプリケーションの可用性とパフォーマンスを向上させます。",
            "3": "AWS PrivateLinkを構成して、パブリックIPを使用せずに別のVPCにホストされているサービスに安全にアクセスします。",
            "4": "AWS Direct Connectを活用して、オンプレミスのデータセンターからAWSへの専用ネットワーク接続を確立します。",
            "5": "AWS Transit Gatewayを使用して、複数のVPCとオンプレミスネットワーク間の接続を簡素化します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "VPCエンドポイントを利用して、インターネットを経由せずにAWSサービスにプライベートに接続します。",
            "AWS PrivateLinkを構成して、パブリックIPを使用せずに別のVPCにホストされているサービスに安全にアクセスします。"
        ],
        "Explanation": "VPCエンドポイントを使用することで、インターネットにトラフィックをさらすことなくAWSサービスにプライベートに接続でき、セキュリティが向上し、レイテンシが削減されます。AWS PrivateLinkは、パブリックIPアドレスを利用せずに他のVPCにホストされているサービスに安全にアクセスする方法を提供し、サービス間の相互作用におけるセキュリティと効率性にも寄与します。",
        "Other Options": [
            "AWS Global Acceleratorの実装は、リージョン間のパフォーマンスと可用性を向上させるのに役立ちますが、サービスエンドポイントの使用を最適化することには特に対処していません。",
            "AWS Transit Gatewayを使用すると、VPC間のネットワーク管理と接続が簡素化されますが、サービスエンドポイントの使用を直接最適化するものではありません。",
            "AWS Direct Connectを活用すると、AWSへの専用接続が提供され、ハイブリッドアーキテクチャにとって有益ですが、サービスエンドポイントの使用を最適化することには焦点を当てていません。"
        ]
    },
    {
        "Question Number": "41",
        "Situation": "ある企業が、インフラコストを削減し、スケーラビリティを向上させるために、既存のオンプレミスアプリケーションをAWSに移行する計画を立てています。彼らは、堅牢なデータベースソリューションを必要とするウェブアプリケーションとバックエンドサービスの混合を持っています。企業は、パフォーマンスを損なうことなくコストを最適化することに特に関心を持っています。彼らは、ユーザートラフィックとデータボリュームの増加に対応するためにアプリケーションをスケールさせる長期的な成長戦略を持っています。",
        "Question": "AWSにおけるコスト最適化とスケーラビリティの目標に最も合致する資産計画戦略はどれですか？",
        "Options": {
            "1": "ウェブアプリケーションをAWS Lambda関数に変換し、データベースにAmazon Aurora Serverlessを使用して需要に応じて自動的にスケールし、コストを削減するサーバーレスアーキテクチャを採用します。",
            "2": "アプリケーションをAWSに移行し、Amazon EC2インスタンスにデプロイし、トラフィックパターンに基づいて手動でリソースをスケールしますが、これによりリソースの無駄遣いやコストの増加が生じる可能性があります。",
            "3": "既存の仮想マシンをAmazon EC2インスタンスに移動し、アプリケーションに変更を加えずにリフトアンドシフト移行戦略を実装します。コスト最適化を考慮せずに既存のデータベースにAmazon RDSを使用します。",
            "4": "アプリケーションをAmazon ECSでFargate上で実行するように再アーキテクチャし、データベースをAmazon DynamoDBに移行しますが、アーキテクチャの複雑さにより運用コストが高くなります。"
        },
        "Correct Answer": "ウェブアプリケーションをAWS Lambda関数に変換し、データベースにAmazon Aurora Serverlessを使用して需要に応じて自動的にスケールし、コストを削減するサーバーレスアーキテクチャを採用します。",
        "Explanation": "このオプションは、企業のコスト最適化とスケーラビリティの目標を効果的に満たします。AWS Lambdaを使用したサーバーレスアーキテクチャを利用することで、企業は使用したコンピュート時間に対してのみ支払うため、インフラコストを大幅に削減できます。さらに、Amazon Aurora Serverlessは、実際のワークロードに基づいて容量を調整するオンデマンドの自動スケーリングデータベースソリューションを提供し、パフォーマンスとコスト効率を両立させます。",
        "Other Options": [
            "このオプションは、リフトアンドシフトアプローチを含むため、コスト最適化に効果的に対処しておらず、AWSのスケーラビリティ機能を活用できない可能性があります。",
            "このオプションはスケーラブルなソリューションを提案していますが、Amazon DynamoDBを使用すると、既存のアプリケーションに必要な関係データベース機能が提供されない可能性があり、複雑さが増す可能性があります。",
            "このアプローチは、手動でのスケーリングがリソースの過剰提供や不足提供を引き起こす可能性があるため、非効率的なリソース利用につながり、最終的にコストが増加し、最適なスケーラビリティを達成できない可能性があります。"
        ]
    },
    {
        "Question Number": "42",
        "Situation": "グローバル小売企業は、在庫管理とeコマースプラットフォームを管理するために、オンプレミスのデータセンターとAWSクラウドリソースの両方を運営しています。企業は、オンプレミスインフラからのDNSクエリが内部および外部のドメイン名をシームレスに解決できることを確認したいと考えています。さらに、条件付きフォワーディングやDNSクエリログなどの高度なDNS機能を実装するソリューションを求めています。彼らは、Amazon Route 53 Resolverを使用してこの目標を達成することを検討しています。",
        "Question": "レイテンシと管理オーバーヘッドを最小限に抑えながら、オンプレミスDNSとAmazon Route 53 Resolverの最も効率的な統合を提供するオプションはどれですか？",
        "Options": {
            "1": "VPC内にRoute 53 Resolverのインバウンドエンドポイントを構成します。オンプレミスDNSサーバーに条件付きフォワーダーを設定して、AWSホストのドメインに対するクエリをResolverに転送します。Route 53でDNSクエリのログを実装してトラフィックパターンを監視します。",
            "2": "内部ドメイン名用のRoute 53プライベートホステッドゾーンと、VPC内のアウトバウンドエンドポイントを作成します。オンプレミスDNSサーバーをアウトバウンドエンドポイントにポイントしてAWSリソースを解決し、外部DNS解決を別に保ちます。",
            "3": "オンプレミスのデータセンターとAWS間にVPN接続を設定し、オンプレミスDNSサーバーをAWSドメイン名を直接解決するように構成します。外部DNS管理にはRoute 53を使用しますが、オンプレミスDNSとの統合は行いません。",
            "4": "VPC内にDNSプロキシとしてEC2インスタンスをデプロイし、すべてのDNSクエリをオンプレミスDNSサーバーに転送します。オンプレミスDNSを設定して、AWSリソースに対するリクエストをEC2インスタンスに転送します。Amazon CloudWatchを利用してDNSクエリを監視します。"
        },
        "Correct Answer": "VPC内にRoute 53 Resolverのインバウンドエンドポイントを構成します。オンプレミスDNSサーバーに条件付きフォワーダーを設定して、AWSホストのドメインに対するクエリをResolverに転送します。Route 53でDNSクエリのログを実装してトラフィックパターンを監視します。",
        "Explanation": "Route 53 Resolverのインバウンドエンドポイントを構成することで、オンプレミスDNSはAWSホストのドメインに対するクエリを直接Route 53に転送でき、シームレスな統合が可能になります。これにより、クエリはAWS環境内で解決されるためレイテンシが最小限に抑えられ、条件付きフォワーディングやクエリログなどの高度な機能を利用でき、管理が簡素化されます。",
        "Other Options": [
            "EC2インスタンスをDNSプロキシとしてデプロイすると、不必要な複雑さと管理オーバーヘッドが追加されます。すべてのDNSクエリが追加のレイヤーを経由する必要があるため、レイテンシが増加し、Route 53 Resolverとの直接統合と比較して最適ではありません。",
            "VPN接続を設定し、オンプレミスDNSサーバーがAWSドメイン名を直接解決できるようにすることは、Route 53 Resolverの高度な機能を欠いています。このアプローチでは、条件付きフォワーディングやログ機能が提供されず、企業のDNS管理能力が制限されます。",
            "プライベートホステッドゾーンとアウトバウンドエンドポイントを作成すると、内部ドメインの解決が可能になりますが、外部クエリのシームレスな統合を促進しません。さらに、オンプレミスDNSサーバーをアウトバウンドエンドポイントにポイントすることで、条件付きフォワーディングなどのRoute 53 Resolverの利点が制限されます。"
        ]
    },
    {
        "Question Number": "43",
        "Situation": "ある金融サービス会社が、Amazon EC2インスタンスとAmazon S3ストレージの予測できない使用パターンとコストの上昇に直面しています。会社は、AWSの可視化ツールを使用してリソースの利用状況をより良く把握し、リソースを効果的に最適化したいと考えています。ソリューションアーキテクトは、これらのリソースの使用状況を評価し最適化するための最良のアプローチを特定する任務を負っています。",
        "Question": "ソリューションアーキテクトは、コンピュートおよびストレージリソースを効果的に分析し最適化するために、どのツールを利用すべきですか？",
        "Options": {
            "1": "一般的なベストプラクティスのためにAWS Trusted Advisorを実装し、リソースの支出を追跡するためにAWS Budgetsを使用します。",
            "2": "EC2インスタンスの使用状況を評価するためにAWS Compute Optimizerを利用し、ストレージ最適化の洞察を得るためにAmazon S3 Storage Lensを使用します。",
            "3": "支出パターンを分析するためにAWS Cost Explorerを使用し、リソースのAPI使用状況を監視するためにAWS CloudTrailを使用します。",
            "4": "コンプライアンスを評価するためにAWS Configを活用し、リソースパフォーマンスのリアルタイム監視のためにAmazon CloudWatchを使用します。"
        },
        "Correct Answer": "EC2インスタンスの使用状況を評価するためにAWS Compute Optimizerを利用し、ストレージ最適化の洞察を得るためにAmazon S3 Storage Lensを使用します。",
        "Explanation": "AWS Compute Optimizerは、実際の使用状況に基づいてEC2インスタンスタイプを最適化するための推奨事項を提供し、Amazon S3 Storage Lensはストレージ使用パターンに関する洞察を提供し、コンピュートおよびストレージリソースのコスト削減の機会を特定するのに役立ちます。",
        "Other Options": [
            "AWS Trusted Advisorは一般的なベストプラクティスを提供しますが、EC2およびS3のリソース利用状況や最適化に関する具体的な洞察を提供しません。AWS Budgetsはリソースの最適化ではなくコスト追跡に焦点を当てています。",
            "AWS Cost Explorerは支出パターンを分析するのに役立ちますが、コンピュートおよびストレージリソースの最適化に関する推奨事項を直接提供しません。AWS CloudTrailは主にAPIコールの監視に使用され、リソースの最適化には役立ちません。",
            "AWS Configはリソースのコンプライアンスを評価し、特定の基準を満たしていることを確認するために使用されますが、パフォーマンスの最適化には焦点を当てていません。Amazon CloudWatchは監視に役立ちますが、リソースの割り当てやコストの最適化に関する具体的な洞察を提供しません。"
        ]
    },
    {
        "Question Number": "44",
        "Situation": "ある会社がオンプレミスのデータベースをAWSに移行しています。データベーススキーマは複雑で、Amazon RDSインスタンスの形式に合わせて変換する必要があります。会社は、移行を効率的に処理するためにAWS Schema Conversion Tool (AWS SCT)を使用することを決定しました。また、データを安全に段階的に転送するためにAWS Snowball Edgeデバイスを使用する予定です。さらに、ソースデータベースとターゲットデータベースの間に大きな違いがあるため、変換が必要です。",
        "Question": "AWS Schema Conversion Tool (AWS SCT)とAWS SCTエージェントを使用してデータベース移行プロセスを促進する方法を最もよく説明しているのはどれですか？",
        "Options": {
            "1": "AWS SCTのみに依存してスキーマ変換とデータ抽出を行い、移行プロセスに外部エージェントを必要としない。",
            "2": "AWS SCTを使用してデータベーススキーマを変換し、エージェントなしでターゲットのAmazon RDSインスタンスに直接接続してデータ移行を行う。",
            "3": "AWS SCTをスキーマ変換に使用し、データがターゲットのAmazon RDSインスタンスに移行される際にAWS Lambda関数を使用してデータを変換する。",
            "4": "AWS SCTを使用してスキーマを変換し、移行中に追加のデータ変換を処理するためにAmazon EC2インスタンスにAWS SCTエージェントを展開する。"
        },
        "Correct Answer": "AWS SCTを使用してスキーマを変換し、移行中に追加のデータ変換を処理するためにAmazon EC2インスタンスにAWS SCTエージェントを展開する。",
        "Explanation": "正しい答えは、スキーマ変換のためにAWS SCTを使用し、データ変換のためにAWS SCTエージェントを使用することの組み合わせを強調しています。エージェントはEC2インスタンス上で必要な変換を実行でき、ソースデータベースとターゲットデータベースの間に大きな違いがある場合に不可欠です。",
        "Other Options": [
            "このオプションは不正確です。AWS SCTはデータベーススキーマを変換できますが、複雑な変換のためにエージェントなしでターゲットのAmazon RDSインスタンスに直接接続することはできません。",
            "このオプションは不正確です。AWS SCTのみに依存してスキーマ変換とデータ抽出を行うことは、複雑な変換が必要なシナリオには実行可能ではありません。",
            "このオプションは不正確です。AWS Lambda関数は、移行中のデータ変換の目的でAWS SCTと統合されておらず、エージェントの役割はこれらのタスクのために特別に設計されています。"
        ]
    },
    {
        "Question Number": "45",
        "Situation": "ある金融サービス会社が、ミッションクリティカルなアプリケーションをAWSに移行しています。このアプリケーションは、大量のトランザクションを効率的に処理するために低遅延で高スループットのストレージを必要としています。ソリューションアーキテクトは、コストと耐久性のバランスを取りながら、これらのパフォーマンス要件を満たす最も適切なAmazon EBSボリュームタイプを選択する必要があります。",
        "Question": "アプリケーションの最適なパフォーマンスと耐久性を確保するために、ソリューションアーキテクトはどのAmazon EBSボリュームタイプを選択すべきですか？",
        "Options": {
            "1": "一般的なワークロードに適した価格とパフォーマンスのバランスを提供するgp2ボリュームですが、高いトランザクション要求には応えられない可能性があります。",
            "2": "スループット集約型ワークロード向けに設計されたst1ボリュームですが、低遅延アプリケーションに必要なパフォーマンスが不足しています。",
            "3": "高パフォーマンス、低遅延、99.999%の耐久性を提供し、トランザクションワークロードに理想的なio2ボリューム。",
            "4": "最も低コストのオプションであるsc1ボリュームですが、頻繁にアクセスされるまたは低遅延の要件には適していません。"
        },
        "Correct Answer": "高パフォーマンス、低遅延、99.999%の耐久性を提供し、トランザクションワークロードに理想的なio2ボリューム。",
        "Explanation": "io2ボリュームは、遅延に敏感なトランザクションワークロード向けに特別に設計されており、最大64,000のIOPSと99.999%の耐久性を持つ最高のパフォーマンスを提供します。これにより、金融サービスアプリケーションに最適な選択となります。",
        "Other Options": [
            "gp2ボリュームは一般的なワークロードに対して良好なバランスを提供できますが、ミッションクリティカルな金融アプリケーションに必要な一貫した低遅延と高スループットを提供できない可能性があります。",
            "st1ボリュームはスループットに優れた低コストのHDDオプションですが、低遅延ワークロード向けには設計されていないため、このシナリオには不適切です。",
            "sc1ボリュームは、アクセス頻度の低いデータやコールドストレージ向けに最適化されており、高需要で低遅延のアプリケーションのパフォーマンスニーズには応えられません。"
        ]
    },
    {
        "Question Number": "46",
        "Situation": "ある金融サービス会社が、Amazon RDSでホストされているオンライン取引処理システムのパフォーマンス問題に直面しています。アプリケーションはピーク使用時に応答時間が遅くなっており、経営陣はパフォーマンスのボトルネックを特定して解決したいと考えています。会社は、既存のアーキテクチャへの変更を最小限に抑えながら、クエリパフォーマンスやリソース利用状況に関する洞察を提供できるソリューションを検討しています。",
        "Question": "Amazon RDSデータベースのパフォーマンスボトルネックを特定する最も効果的な方法はどれですか？",
        "Options": {
            "1": "Amazon CloudWatchアラームを実装してRDSインスタンスのCPUおよびディスクI/Oメトリクスを監視します。しきい値が超えた場合、手動でデータベースパフォーマンスメトリクスを確認して潜在的なボトルネックを特定します。",
            "2": "AWS CloudTrailを利用してRDSインスタンスに対するAPIコールをログに記録し、データベースの使用パターンに関する情報を収集します。ログを分析してピーク時のリソース競合の問題を特定します。",
            "3": "Amazon RDS Performance Insightsを有効にしてデータベースの負荷を分析し、問題のあるクエリを特定します。ダッシュボードを使用して、時間の経過に伴うCPU、メモリ、I/Oの使用状況を監視します。提供された洞察に基づいて特定されたクエリを最適化します。",
            "4": "RDSインスタンスで強化モニタリングを有効にして、オペレーティングシステムのパフォーマンスに関する詳細なメトリクスをキャプチャします。OSレベルのメトリクスを確認して、パフォーマンス問題の原因が基盤となるサーバーリソースにあるかどうかを判断します。"
        },
        "Correct Answer": "Amazon RDS Performance Insightsを有効にしてデータベースの負荷を分析し、問題のあるクエリを特定します。ダッシュボードを使用して、時間の経過に伴うCPU、メモリ、I/Oの使用状況を監視します。提供された洞察に基づいて特定されたクエリを最適化します。",
        "Explanation": "Amazon RDS Performance Insightsは、データベースパフォーマンスを分析するための強力なツールを提供します。データベースの負荷を視覚的に表現し、パフォーマンスボトルネックを引き起こしている可能性のある特定のクエリを掘り下げて分析することができます。このアプローチは、アーキテクチャへの大規模な変更の必要性を最小限に抑えつつ、最適化のための実用的な洞察を提供します。",
        "Other Options": [
            "AWS CloudTrailは主にAPIコールのログ記録と監視に使用されます。データベースのパフォーマンスやリソース利用状況に関する直接的な洞察を提供しないため、RDSのパフォーマンスボトルネックを特定するには効果が薄いです。",
            "Amazon CloudWatchはCPUおよびI/Oメトリクスを監視できますが、しきい値が超えた際にメトリクスを手動で確認することは、Performance Insightsのような専用のパフォーマンス分析ツールを活用するよりも効果的ではありません。",
            "強化モニタリングはOSレベルのメトリクスを提供しますが、データベースパフォーマンスの問題に直接関連するとは限りません。Performance Insightsが提供するクエリパフォーマンスや負荷分散に関する集中した洞察が欠けているため、RDSのボトルネックを特定するにはあまり関連性がありません。"
        ]
    },
    {
        "Question Number": "47",
        "Situation": "ある会社には、開発アカウントと本番アカウントの2つのAWSアカウントがあります。開発アカウントには、アプリケーションインフラストラクチャを作成および管理する必要がある開発者とオペレーターのチームがホストされています。セキュリティとガバナンスを維持するために、会社はアプリケーションがデプロイされている本番アカウントへの制御されたアクセスを提供したいと考えています。会社は、ベストプラクティスに従って両方のアカウントにIAMグループとユーザーを設定しています。",
        "Question": "会社は、開発アカウントの開発者とオペレーターが最小権限の原則に従いながら本番アカウントに安全にアクセスできるように、IAMロールとポリシーをどのように構成すべきですか？",
        "Options": {
            "1": "開発アカウントにアプリケーションインフラストラクチャを管理する権限を持つ共有IAMロールを作成し、本番アカウントがこのロールを引き受けることを許可します。",
            "2": "本番アカウントにアプリケーション管理の権限を持つIAMグループを作成し、開発アカウントのIAMユーザーを直接このグループに追加します。",
            "3": "本番アカウントにアプリケーションインフラストラクチャを作成および削除する権限を持つ共有IAMロールを作成します。信頼ポリシーを更新して、開発アカウントのユーザーがこのロールを引き受けることを許可します。",
            "4": "開発アカウントの各開発者とオペレーターのために本番アカウントにIAMユーザーを作成し、アプリケーションインフラストラクチャを作成および削除する権限を付与します。"
        },
        "Correct Answer": "本番アカウントにアプリケーションインフラストラクチャを作成および削除する権限を持つ共有IAMロールを作成します。信頼ポリシーを更新して、開発アカウントのユーザーがこのロールを引き受けることを許可します。",
        "Explanation": "本番アカウントに必要な権限を持つ共有IAMロールを作成することで、開発アカウントのユーザーに対する制御されたアクセスが可能になります。信頼ポリシーを更新することで、開発者とオペレーターがこのロールを引き受けることを特に許可し、最小権限の原則を遵守しながら必要なアクセスを提供します。",
        "Other Options": [
            "本番アカウントに各開発者とオペレーターのためにIAMユーザーを作成することは、管理の負担や潜在的なセキュリティリスクを引き起こすため、ベストプラクティスではありません。代わりに、ロールを使用することで、より安全で管理しやすいソリューションが提供されます。",
            "本番アカウントにIAMグループを作成し、開発アカウントのIAMユーザーを直接このグループに追加することは機能しません。なぜなら、1つのアカウントのIAMユーザーを別のアカウントのグループに追加することはできないからです。クロスアカウントロールがアクセス管理の適切なメカニズムです。",
            "開発アカウントに共有IAMロールを作成しても、オペレーターや開発者が本番アカウントにアクセスするのには役立ちません。このロールは、本番アカウントで定義され、開発アカウントがそれを引き受けることを許可する信頼ポリシーが必要です。"
        ]
    },
    {
        "Question Number": "48",
        "Situation": "ある会社が既存のオンプレミスのワークロードをAWSに移行する計画を立てています。アーキテクチャはコスト効果が高く、リソースが効率的に利用されることが求められています。会社は特に、季節的なワークロードに対して十分なキャパシティを確保しながらコストを管理することに焦点を当てています。彼らは、EC2インスタンスとRDSデータベースに採用すべき最適な料金モデルを理解したいと考えています。",
        "Question": "変動するワークロードに対応しながらコストを最適化するために、ソリューションアーキテクトはどの料金モデルを検討すべきですか？（2つ選択）",
        "Options": {
            "1": "Savings PlansとSpot Instancesを組み合わせて、ワークロード全体でコスト削減を最適化します。",
            "2": "すべてのワークロードに対してOn-Demand Instancesを利用して、最大の柔軟性を維持します。",
            "3": "複数のインスタンスファミリーとリージョンにわたる柔軟な料金オプションのためにSavings Plansを使用します。",
            "4": "Spot Instancesを活用して、未使用のEC2キャパシティを割引料金で利用します。",
            "5": "長期的なワークロードのためにReserved Instancesを購入し、キャパシティ予約を確保します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "複数のインスタンスファミリーとリージョンにわたる柔軟な料金オプションのためにSavings Plansを使用します。",
            "Savings PlansとSpot Instancesを組み合わせて、ワークロード全体でコスト削減を最適化します。"
        ],
        "Explanation": "Savings Plansはインスタンスタイプやリージョンにわたる柔軟性を提供し、変動するワークロードに有益です。これをSpot Instancesと組み合わせることで、重要度の低いワークロードに対して低価格を活用し、全体的なコストを最適化できます。",
        "Other Options": [
            "Reserved Instancesを購入すると、特定のインスタンスタイプやリージョンにロックされるため、柔軟性が求められる変動するワークロードには理想的ではありません。",
            "すべてのワークロードに対してOn-Demand Instancesを利用すると高額になる可能性があり、長期使用や未使用キャパシティに関連するコスト削減を提供しません。",
            "Spot Instancesのみを活用することは、ピーク時にキャパシティを保証しない可能性があり、重要なワークロードに対するサービス中断を引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "49",
        "Situation": "金融サービス会社は、静止データと転送中のデータの両方を暗号化することを義務付ける厳格な規制要件に準拠する必要があります。会社はアプリケーションをAWSに移行しており、AWSサービスとの間で送信されるすべてのデータが暗号化されていることを確認する必要があります。さらに、Amazon S3に保存されているデータも、細かいアクセス制御を可能にする方法で暗号化される必要があります。",
        "Question": "どのアクションの組み合わせが暗号化要件の遵守を確保しますか？",
        "Options": {
            "1": "Amazon S3 Transfer Accelerationを利用して、暗号化なしでアップロードを高速化します。IAMポリシーを使用して、任意のユーザーにS3オブジェクトへのアクセスを許可します。データ保持ポリシーを設定してオブジェクトのライフサイクルを管理します。",
            "2": "S3バケットに対してAWS KMSキーを使用したサーバーサイド暗号化を有効にします。AWSサービスへのすべてのAPI呼び出しにHTTPSを使用します。KMSキーへのアクセスを制限するためにIAMポリシーを設定します。",
            "3": "S3にアップロードする前にデータのクライアントサイド暗号化を実装します。AWSとオンプレミスのデータセンター間で暗号化されていないデータ転送を使用します。アクセス制御のためにS3バケットポリシーに依存します。",
            "4": "AWS CloudHSMを使用してS3の暗号化キーを管理します。すべてのアプリケーションを設定して、データ転送に暗号化されていないHTTPを使用します。S3バケットへのアクセスを制限するためにセキュリティグループを実装します。"
        },
        "Correct Answer": "S3バケットに対してAWS KMSキーを使用したサーバーサイド暗号化を有効にします。AWSサービスへのすべてのAPI呼び出しにHTTPSを使用します。KMSキーへのアクセスを制限するためにIAMポリシーを設定します。",
        "Explanation": "AWS KMSキーを使用したサーバーサイド暗号化を有効にすることで、S3における静止データが暗号化され、HTTPSを使用することで転送中のデータが暗号化されます。KMSキーへのアクセスを制限するためにIAMポリシーを設定することで、暗号化キーに対する追加のセキュリティと制御の層が追加され、規制要件を満たします。",
        "Other Options": [
            "AWS CloudHSMを使用して暗号化キーを管理することは安全なアプローチですが、アプリケーションを暗号化されていないHTTPを使用するように設定することは、転送中の暗号化要件を満たさず、このオプションは規制に準拠していません。",
            "Amazon S3 Transfer Accelerationを利用することでパフォーマンスの利点が得られるかもしれませんが、暗号化を強制するものではありません。任意のユーザーにS3オブジェクトへのアクセスを許可することは、細かいアクセス制御の必要性を無視し、コンプライアンス基準を満たしていません。",
            "クライアントサイド暗号化を実装することは、S3に到達する前にデータを保護するための有効な戦略ですが、暗号化されていないデータ転送を使用することは、転送中のデータのセキュリティを損ないます。アクセス制御のためにS3バケットポリシーのみに依存することは、厳格な規制フレームワークの要件には不十分です。"
        ]
    },
    {
        "Question Number": "50",
        "Situation": "ある会社がAWS上にマイクロサービスアーキテクチャを構築しており、eコマースプラットフォームをサポートしています。各サービスは特定のビジネス機能を担当し、他のサービスとシームレスに通信する必要があります。会社は、サービスが緩やかに結合され、独立してスケールできることを確保したいと考えています。ソリューションアーキテクトは、これらのマイクロサービス間の通信を促進するために最も適切なアプリケーション統合サービスを選択する任務を負っています。",
        "Question": "ソリューションアーキテクトは、マイクロサービスの統合要件を達成するためにどのオプションを実装すべきですか？（2つ選択）",
        "Options": {
            "1": "AWS AppSyncを利用して、マイクロサービスをクライアントアプリケーションに直接接続します。",
            "2": "Amazon EventBridgeを活用して、特定のパターンに基づいてマイクロサービス間でイベントをルーティングします。",
            "3": "Amazon Simple Queue Service (SQS)を使用してサービスをデカップルし、非同期通信を可能にします。",
            "4": "AWS Step Functionsを設定して、マイクロサービス間のワークフローをオーケストレーションします。",
            "5": "イベントが発生したときに複数のサービスに通知を送信するためにAmazon SNSを実装します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon Simple Queue Service (SQS)を使用してサービスをデカップルし、非同期通信を可能にします。",
            "Amazon EventBridgeを活用して、特定のパターンに基づいてマイクロサービス間でイベントをルーティングします。"
        ],
        "Explanation": "Amazon SQSを使用することで、マイクロサービス間で非同期でデカップルされた通信が可能になり、スケーラビリティとレジリエンスが向上します。Amazon EventBridgeを活用することで、イベント駆動型アーキテクチャが実現され、サービスがリアルタイムでイベントに反応しながら緩やかな結合を維持できます。",
        "Other Options": [
            "Amazon SNSは複数のサービスに通知をプッシュできますが、SQSと同じレベルのデカップリングと非同期処理を提供しません。",
            "AWS AppSyncは主にGraphQL APIに使用され、このシナリオでのマイクロサービス統合には最適ではない可能性があります。",
            "AWS Step Functionsはワークフローのオーケストレーションにより適しており、マイクロサービス間の直接通信を提供するものではありません。"
        ]
    },
    {
        "Question Number": "51",
        "Situation": "金融サービス会社が、機密の顧客データを処理する新しいアプリケーションを開発しています。会社はセキュリティのベストプラクティスにコミットしており、すべてのAWSサービスとリソースが最小権限アクセスの原則に従って構成されるようにソリューションアーキテクトが任命されています。アーキテクトは、アプリケーション内のさまざまな役割に対するユーザー権限を確立し、ユーザーが特定の職務を遂行するために必要なリソースにのみアクセスできるようにする必要があります。",
        "Question": "ソリューションアーキテクトは、アプリケーションユーザーの最小権限アクセスの原則を最もよく実装するためにどのようなアクションを取るべきですか？",
        "Options": {
            "1": "各職務に特定の権限を持つIAMロールを作成し、それをユーザーに割り当てます。",
            "2": "広範な権限を持つ単一のIAMロールを作成し、すべてのユーザーに割り当てます。",
            "3": "ユーザーに管理者と同じ権限を付与して、必要なすべてのアクセスを確保します。",
            "4": "アプリケーション開発中に権限の問題が発生しないように、すべてのユーザーに完全なアクセスを付与します。"
        },
        "Correct Answer": "各職務に特定の権限を持つIAMロールを作成し、それをユーザーに割り当てます。",
        "Explanation": "各職務に特定の権限を持つIAMロールを作成することで、ユーザーは自分のタスクに必要なリソースにのみアクセスできるようになります。これは最小権限の原則に沿っており、過剰な権限に関連するセキュリティリスクを最小限に抑えます。",
        "Other Options": [
            "すべてのユーザーに完全なアクセスを付与することは、不要な権限を提供することでセキュリティを損なうため、最小権限の原則に反します。",
            "広範な権限を持つ単一のIAMロールを作成することは、アプリケーションをセキュリティリスクにさらすことになり、すべてのユーザーが必要のないリソースにアクセスできるようになります。",
            "ユーザーに管理者と同じ権限を付与することは、最小権限の原則を損ない、機密リソースの誤用や意図的な悪用につながる可能性があります。"
        ]
    },
    {
        "Question Number": "52",
        "Situation": "メディア会社は、ユーザーによって毎日生成されアップロードされる大量のビデオコンテンツを持っています。会社は、このコンテンツを効率的に保存および管理し、ビデオがストリーミング可能であることを確保する必要があります。アップロードされたビデオの大部分は、アップロード後の最初の数日間以外はほとんどアクセスされませんが、コンプライアンスの理由から保持する必要があります。ソリューションアーキテクトは、コストを最小限に抑えつつ、ビデオへの必要な耐久性とアクセス性を提供するストレージソリューションを設計する任務を負っています。",
        "Question": "次のストレージソリューションのうち、コスト効率の良いビデオコンテンツの保存とアクセス性に関する会社の要件を最もよく満たすものはどれですか？",
        "Options": {
            "1": "すべてのビデオにAmazon S3 Standardを使用し、ライフサイクルポリシーを実装して古いコンテンツをAmazon S3 Glacierに移行します。",
            "2": "すべてのビデオをAmazon S3 Intelligent-Tieringに保存し、使用パターンに基づいて頻繁アクセスと非頻繁アクセスの階層間でデータを自動的に移動させます。",
            "3": "すべてのビデオストレージにAmazon EFSを利用し、ライフサイクル管理を気にせずに複数のインスタンスから簡単に共有およびアクセスできるようにします。",
            "4": "最近アップロードされたビデオにはAmazon S3 Standardを使用し、30日間アクセスがない場合にAmazon S3 One Zone-IAに移行するライフサイクルポリシーを設定します。"
        },
        "Correct Answer": "使用パターンに基づいて頻繁アクセスと非頻繁アクセスの階層間でデータを自動的に移動させるためにAmazon S3 Intelligent-Tieringを使用します。",
        "Explanation": "Amazon S3 Intelligent-Tieringは、未知または変化するアクセスパターンのデータ向けに設計されています。手動介入なしでコストを最適化しながら、頻繁アクセスと非頻繁アクセスの2つのアクセス階層間でデータを自動的に移動します。これは、メディア会社が新しくアップロードされたコンテンツのアクセス性を確保しつつコストを最小限に抑える要件に理想的です。",
        "Other Options": [
            "すべてのビデオにAmazon S3 Standardを使用すると、特に初回アップロード後にほとんどアクセスされないビデオに対して高いコストが発生する可能性があり、Intelligent-Tieringと比較してコスト効率が悪くなります。",
            "Amazon EFSは、このシナリオには最適ではなく、特にアクセス頻度が低いコンテンツの大量データを保存する場合、通常はS3よりも高価です。",
            "Amazon S3 Standardを使用し、30日後にS3 One Zone-IAに移行するライフサイクルポリシーを設定することは可能なオプションですが、Intelligent-Tieringが提供する自動最適化が欠けており、ビデオの予測不可能なアクセスパターンを考慮すると重要です。"
        ]
    },
    {
        "Question Number": "53",
        "Situation": "金融サービス会社は、スケーラビリティを向上させ、運用コストを削減するために、オンプレミスのデータベースをAWSに移行しています。彼らは、Amazon RDSインスタンスに転送する必要がある大量のトランザクションデータを扱っています。会社は、移行中のダウンタイムを最小限に抑え、データの整合性を維持したいと考えています。ソリューションアーキテクトは、データベースをAWSに転送するための最も適切な方法を選択する任務を負っています。",
        "Question": "ダウンタイムを最小限に抑え、データの整合性を維持するために、次のオプションの中で最も適切なソリューションはどれですか？",
        "Options": {
            "1": "データベースの手動バックアップを実行し、バックアップファイルをAmazon RDSに転送し、データベースを復元します。このプロセス中はアプリケーションをオフラインにします。",
            "2": "データベースをフラットファイルにエクスポートし、Amazon S3にアップロードしてから、RDSインスタンスにインポートしますが、これにはかなりのダウンタイムが必要です。",
            "3": "AWS Database Migration Serviceを使用し、継続的なデータレプリケーションのためにレプリケーションインスタンスを設定し、ほぼゼロダウンタイムの移行を可能にします。",
            "4": "AWS Snowballを使用してデータベース全体をAWSに転送しますが、これには数日かかり、移行中に長時間のダウンタイムが発生します。"
        },
        "Correct Answer": "AWS Database Migration Serviceを使用し、継続的なデータレプリケーションのためにレプリケーションインスタンスを設定し、ほぼゼロダウンタイムの移行を可能にします。",
        "Explanation": "AWS Database Migration Service (DMS)は、ダウンタイムを最小限に抑えてデータベースを移行する方法を提供します。レプリケーションインスタンスを使用することで、DMSはソースデータベースからターゲットRDSインスタンスへの変更を継続的にレプリケートでき、最終的な切り替えまでアプリケーションを稼働させ続け、データの整合性と最小限の中断を確保します。",
        "Other Options": [
            "データベースをフラットファイルにエクスポートするには、エクスポートプロセス中にデータベースをオフラインにする必要があるため、ダウンタイムを最小限に抑えるには不適切です。",
            "手動バックアップと復元プロセスを実行すると、アプリケーションをオフラインにする必要があり、移行中にサービスに大きなダウンタイムと中断が発生します。",
            "データベース転送にAWS Snowballを使用することは、このシナリオには効率的ではなく、データが物理的に輸送されAWSにアップロードされる間に長時間のダウンタイムが発生します。"
        ]
    },
    {
        "Question Number": "54",
        "Situation": "金融サービス会社は、AWS上でホストされている重要なアプリケーションのために災害復旧ソリューションを実装する必要があります。アプリケーションは、障害が発生した場合に最小限のダウンタイムとデータ損失で利用可能でなければなりません。会社は現在、高可用性のために単一のリージョン内で複数のアベイラビリティゾーンを使用していますが、災害復旧戦略を強化したいと考えています。予算は限られており、回復ポイント目標（RPO）は1時間未満の要件があります。",
        "Question": "AWS上での次の災害復旧ソリューションのうち、最小限のダウンタイムと低データ損失に関する会社の要件を最もよく満たすものはどれですか？",
        "Options": {
            "1": "2つのAWSリージョンにわたるアクティブ-アクティブアーキテクチャを実装し、同期データレプリケーションとRoute 53によるDNSフェイルオーバーを行います。",
            "2": "Amazon RDS Multi-AZデプロイメントを使用したウォームスタンバイソリューションを確立し、データを定期的にAmazon S3にバックアップして復旧します。",
            "3": "ストレージにAmazon S3を使用し、必要に応じてAWS Lambdaを使用してフェイルオーバープロセスを自動化するアクティブ-パッシブアーキテクチャを展開します。",
            "4": "別のリージョンにAmazon RDSリードレプリカを持つパイロットライト災害復旧戦略を設定し、迅速なデプロイメントのためにAWS CloudFormationを利用します。"
        },
        "Correct Answer": "Amazon RDS Multi-AZデプロイメントを使用したウォームスタンバイソリューションを確立し、データを定期的にAmazon S3にバックアップして復旧します。",
        "Explanation": "Amazon RDS Multi-AZを使用したウォームスタンバイソリューションは、自動フェイルオーバー機能を提供し、高可用性を確保します。また、Amazon S3への定期的なバックアップは、1時間未満のRPO要件を満たし、障害が発生した場合の効率的な復旧を可能にします。",
        "Other Options": [
            "アクティブ-アクティブアーキテクチャの実装は一般的により複雑で高価であり、最小限のダウンタイムを提供できますが、会社の限られた予算を超える可能性があり、要件を考慮すると必要ありません。",
            "パイロットライト戦略は、コスト効率の良いソリューションを提供しますが、通常は災害時に手動介入と設定時間が多く必要となるため、1時間未満のRPOを効果的に満たすことができない可能性があります。",
            "S3とAWS Lambdaを使用したアクティブ-パッシブアーキテクチャは、フェイルオーバーに遅延をもたらす可能性があり、アプリケーションの迅速な可用性を確保できないため、最小限のダウンタイムという会社の要件には適していません。"
        ]
    },
    {
        "Question Number": "55",
        "Situation": "金融サービス会社は、耐久性、セキュリティ、および規制要件の遵守を確保する方法で機密顧客データを保存する必要があります。彼らは、ライフサイクル管理機能と静止データの暗号化を提供できるスケーラブルなオブジェクトストレージを提供するAWSストレージソリューションを探しています。会社はまた、データがAPIを介してアクセスでき、アクセス頻度が低い場合のコストが低いことを確認したいと考えています。",
        "Question": "これらの要件を満たすために、ソリューションアーキテクトはどのAWSストレージサービスを推奨すべきですか？",
        "Options": {
            "1": "データ保護のためにObject Lockを有効にし、サーバー側の暗号化を使用したAmazon S3。",
            "2": "高度なセキュリティ機能を備えた管理されたWindowsファイルシステムを提供するAmazon FSx for Windows File Server。",
            "3": "データセキュリティを確保するための暗号化とバックアップ機能を備えたAmazon Elastic File System (Amazon EFS)。",
            "4": "データを保護するためのスナップショットとボリューム暗号化を備えたAmazon Elastic Block Store (EBS)。"
        },
        "Correct Answer": "データ保護のためにObject Lockを有効にし、サーバー側の暗号化を使用したAmazon S3。",
        "Explanation": "Amazon S3は、大量のデータを安全に保存できるスケーラブルなオブジェクトストレージを提供します。Object Lockを有効にすることで、規制要件の遵守を確保するためのデータ保持ポリシーを設定できます。さらに、サーバー側の暗号化は静止データを保護し、S3はコスト効果の高いストレージオプションのためのライフサイクル管理機能を提供します。",
        "Other Options": [
            "Amazon Elastic File System (Amazon EFS)は主にファイルストレージ用に設計されており、大規模なオブジェクトストレージ、特にアクセス頻度が低いデータにはコスト効果が低い可能性があります。",
            "Amazon FSx for Windows File ServerはWindowsアプリケーション向けに特化しており、オブジェクトストレージニーズやAPIアクセス要件に対してAmazon S3と比較して最適ではない可能性があります。",
            "Amazon Elastic Block Store (EBS)は通常、EC2インスタンスに接続されたブロックストレージに使用され、スナップショットや暗号化を提供しますが、大規模なオブジェクトストレージシナリオに適したスケーラビリティやライフサイクル管理機能は提供しません。"
        ]
    },
    {
        "Question Number": "56",
        "Situation": "グローバルな小売組織は、コスト、セキュリティ、およびコンプライアンスをより良く管理するためにAWSアカウントを統合したいと考えています。組織は複数の部門を持ち、それぞれ独自のAWSアカウントを持っており、成長に応じてスケールできる新しいアカウント構造を検討していますが、各部門が自分のワークロードに対して必要な自律性を維持できることを確保したいと考えています。ソリューションアーキテクトは、組織の要件を最もよく満たすアカウント構造を推奨する必要があります。",
        "Question": "コスト管理、セキュリティ、およびコンプライアンスを達成しながら部門の自律性を許可するために、ソリューションアーキテクトは次のどのアカウント構造を推奨すべきですか？",
        "Options": {
            "1": "各部門のために別々のAWSアカウントを作成し、請求とコンプライアンスを監視するための中央管理アカウントを設立するハイブリッドアプローチを使用します。",
            "2": "各部門のために複数のAWS Organizationsを展開し、完全な自律性を許可しますが、請求とコンプライアンスの中央管理が複雑になります。",
            "3": "組織全体のために単一のAWSアカウントを作成し、IAMロールを使用して部門のリソースへのアクセスを管理し、各部門が自分のワークロードを制御できるようにします。",
            "4": "1つのAWS Organizationを作成し、複数の組織単位（OU）を持ち、各部門に独自のOUを割り当ててリソースを独立して管理しながら中央請求を維持します。"
        },
        "Correct Answer": "1つのAWS Organizationを作成し、複数の組織単位（OU）を持ち、各部門に独自のOUを割り当ててリソースを独立して管理しながら中央請求を維持します。",
        "Explanation": "このオプションは、組織がAWS Organizationsを利用して複数のOUを持つ階層構造を作成することを可能にします。各部門は自分のリソースとポリシーを管理しながら、中央請求と管理の利点を享受でき、コスト管理、セキュリティ、およびコンプライアンスのニーズに合致します。",
        "Other Options": [
            "このオプションは、組織のコストとセキュリティを効果的に管理する能力を制限します。IAMロールはアクセス制御を提供できますが、単一のアカウントはAWS Organizationsが提供する柔軟性と組織機能を欠いています。",
            "このオプションは管理に不必要な複雑さを生み出します。複数のAWS Organizationsは、中央請求、コンプライアンスの追跡、およびリソース共有において課題を引き起こし、効率的な管理を求める組織には理想的ではありません。",
            "このオプションは各部門に対して一定の分離を提供しますが、請求とコンプライアンスの管理が断片化する可能性があります。AWS Organizationsを通じた中央集権的アプローチは、組織の目標に対してより効果的です。"
        ]
    },
    {
        "Question Number": "57",
        "Situation": "ある会社は、複数のAWSリージョンにわたってマルチティアのWebアプリケーションを展開しており、データベース層にはAmazon RDSを利用しています。このアプリケーションはビジネス運営にとって重要であり、会社は地域的な障害が発生した場合に最小限のダウンタイムを確保するための災害復旧計画を策定しています。この計画を検証するために、会社は本番環境に影響を与えずに災害復旧テストを実施したいと考えています。",
        "Question": "本番環境へのリスクを最小限に抑えながら災害復旧テストを実施するために、ソリューションアーキテクトはどのアプローチを推奨すべきですか？",
        "Options": {
            "1": "異なるリージョンにAmazon RDSのリードレプリカを展開し、それをスタンドアロンデータベースに昇格させて災害復旧テストに使用します。",
            "2": "本番と同じリージョンに、異なるアベイラビリティゾーンにAmazon RDSデータベースを設定し、この新しいインスタンスを使用して災害復旧テストを実施します。",
            "3": "AWS CloudFormationを使用して、別のAWSアカウントに本番インフラストラクチャを複製し、そこで災害復旧テストを実施して本番リソースに影響を与えないようにします。",
            "4": "本番RDSデータベースのスナップショットを作成し、同じリージョン内のテスト環境に復元し、そのスナップショットを使用して災害復旧テストを実施します。"
        },
        "Correct Answer": "AWS CloudFormationを使用して、別のAWSアカウントに本番インフラストラクチャを複製し、そこで災害復旧テストを実施して本番リソースに影響を与えないようにします。",
        "Explanation": "AWS CloudFormationを使用して本番インフラストラクチャを別のAWSアカウントに複製することで、本番環境に影響を与えるリスクなしに災害復旧テストを実施できる安全な環境を提供します。これにより、テストを孤立して実施しながら、災害復旧計画を効果的に検証できます。",
        "Other Options": [
            "本番RDSデータベースのスナップショットを作成し、同じリージョン内に復元することは、テスト中に本番環境に潜在的なパフォーマンスへの影響やデータ整合性の問題を引き起こすリスクがあります。",
            "異なるリージョンにAmazon RDSのリードレプリカを展開し、それをスタンドアロンデータベースに昇格させることは、レプリケーション遅延に依存するため、データ損失や不整合を引き起こす可能性があり、本番環境の災害復旧計画の真のテストとはなりません。",
            "同じリージョン内の異なるアベイラビリティゾーンにAmazon RDSデータベースを設定することは、テストを本番環境から完全に隔離することができず、テストが地域全体のリソースに影響を与える場合に意図しない結果を招く可能性があります。"
        ]
    },
    {
        "Question Number": "58",
        "Situation": "メディア会社がオンプレミスのビデオストレージをAWSに移行しようとしています。会社は、大きなビデオファイルを保存し、高い可用性と耐久性を提供できるソリューションを必要としています。さらに、ソリューションは頻繁にアクセスされるビデオに即時アクセスを提供し、あまりアクセスされないコンテンツをコスト効率よく保存できる必要があります。会社は、さまざまなAWSストレージオプションを検討しています。",
        "Question": "次のAWSストレージソリューションのうち、会社の高い可用性、耐久性、頻繁にアクセスされるビデオへの即時アクセス、あまりアクセスされないコンテンツのコスト効率の良いストレージの要件を最も満たすものはどれですか？",
        "Options": {
            "1": "高性能なビデオファイルアクセスのためのプロビジョニングIOPSを使用したAmazon EBS。",
            "2": "頻繁にアクセスされるビデオとあまりアクセスされないビデオのためのインテリジェントティアリングストレージクラスを使用したAmazon S3。",
            "3": "すべてのビデオファイルの長期アーカイブ用のAmazon S3 Glacier。",
            "4": "複数のインスタンス間でビデオファイルを共有するためのAmazon FSx for Windows File Server。"
        },
        "Correct Answer": "頻繁にアクセスされるビデオとあまりアクセスされないビデオのためのインテリジェントティアリングストレージクラスを使用したAmazon S3。",
        "Explanation": "Amazon S3のインテリジェントティアリングは、アクセスパターンが変化した際にデータを自動的に2つのアクセスティア間で移動させることでコストを最適化するように設計されています。このソリューションは、大きなビデオファイルに対して高い可用性と耐久性を提供し、頻繁にアクセスされるビデオを即座に取得できるため、メディア会社の要件に最適です。",
        "Other Options": [
            "Amazon EBSは主にEC2インスタンスに接続されたブロックストレージに使用され、大きなビデオファイルに対する耐久性と可用性はS3ほどではありません。また、あまりアクセスされないコンテンツに必要な自動コスト最適化機能も欠けています。",
            "Amazon S3 Glacierは長期保存用に設計されており、ビデオファイルへの即時アクセスには適していません。取得時間は数分から数時間かかる可能性があり、頻繁に使用されるビデオへの迅速なアクセスという会社の要件を満たしていません。",
            "Amazon FSx for Windows File Serverは、ファイル共有に適した完全管理型のWindowsファイルシステムサービスですが、大規模なビデオストレージに対するスケーラビリティ、耐久性、コスト効率はAmazon S3には及びません。"
        ]
    },
    {
        "Question Number": "59",
        "Situation": "メディア会社がビデオストリーミングアプリケーションをAWSに移行しています。アプリケーションは、複数の地理的ロケーションにいるユーザーに対して、最小限のレイテンシで高品質のビデオ配信をサポートする必要があります。現在のアーキテクチャは、ビデオファイルの処理にAmazon EC2インスタンスを使用し、ビデオファイルの保存にAmazon S3バケットを使用しています。管理者は、オンプレミスのストレージからAWSにビデオファイルを効率的に転送するためのさまざまなメカニズムを検討しています。",
        "Question": "ビデオファイルのために最も効率的な転送メカニズムを提供するオプションの組み合わせはどれですか？（2つ選択してください）",
        "Options": {
            "1": "AWS SDKを使用してマルチパートアップロード戦略を実装し、ビデオファイルのアップロードを高速化する。",
            "2": "AWS Storage Gatewayを使用して、シームレスなデータ転送のためのハイブリッドクラウドストレージソリューションを作成する。",
            "3": "AWS Transfer Familyを使用して、SFTPプロトコルでインターネット経由でビデオファイルを転送する。",
            "4": "AWSとオンプレミス間に専用ネットワーク接続を確立するためにAWS Direct Connectを利用する。",
            "5": "AWS Snowballを活用して、大量のビデオファイルを安全にAWSに転送する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWSとオンプレミス間に専用ネットワーク接続を確立するためにAWS Direct Connectを利用する。",
            "AWS Snowballを活用して、大量のビデオファイルを安全にAWSに転送する。"
        ],
        "Explanation": "AWS Direct Connectを使用すると、大容量のビデオファイルを転送するのに理想的な高帯域幅、低レイテンシの接続が提供され、効率的で信頼性の高いデータ転送が確保されます。AWS Snowballは、大規模なデータ移行のために特別に設計されており、帯域幅の制約に依存せずに、大量のデータを安全かつ効率的にAWSに直接転送できます。",
        "Other Options": [
            "AWS Storage Gatewayは、継続的なデータ同期に適しており、大量のビデオの初期転送にはあまり効率的ではありません。",
            "AWS Transfer Familyは小さなファイル転送には効果的ですが、大きなビデオファイルにはインターネットの帯域幅制限やレイテンシのために最適ではない可能性があります。",
            "マルチパートアップロード戦略はHTTP経由のアップロード速度を向上させるのに役立ちますが、大量のデータにはAWS SnowballまたはDirect Connectの方が効率的です。"
        ]
    },
    {
        "Question Number": "60",
        "Situation": "金融サービス組織が自社のクラウドアーキテクチャを見直し、自動化の恩恵を受けられる領域を特定しています。アーキテクチャには、Amazon EC2、Amazon RDS、AWS Lambdaなどの複数のAWSサービスが含まれています。チームは、運用効率を向上させ、手動介入を減らすことに焦点を当てています。",
        "Question": "組織がAWSアーキテクチャ全体の運用効率を向上させるために優先すべき自動化の機会はどれですか？",
        "Options": {
            "1": "AWS Management Consoleを使用して各サービスのパフォーマンスメトリクスを手動で監視する。",
            "2": "Amazon CloudWatch Eventsを実装して、サービス間のルーチンタスクのためにAWS Lambda関数をトリガーする。",
            "3": "自動通知なしでAWS Systems Manager Run Commandを使用して定期的なEC2インスタンスのメンテナンスをスケジュールする。",
            "4": "各サービスのインフラ変更を手動でデプロイするためにAWS CloudFormationを利用する。"
        },
        "Correct Answer": "Amazon CloudWatch Eventsを実装して、サービス間のルーチンタスクのためにAWS Lambda関数をトリガーする。",
        "Explanation": "Amazon CloudWatch Eventsを実装してAWS Lambda関数をトリガーすることで、ルーチンタスクの自動化が可能になり、手動介入を減らし、アーキテクチャ全体でのイベントに対するリアルタイムの応答を可能にすることで運用効率が向上します。",
        "Other Options": [
            "パフォーマンスメトリクスを手動で監視することは反応的なアプローチであり、自動化を活用していないため、効率の改善が制限されます。",
            "自動通知なしで定期的なメンテナンスをスケジュールすると、問題の対処が遅れる可能性があり、自動化が提供するプロアクティブな監視と応答機能が欠けています。",
            "AWS CloudFormationを手動で利用することは、インフラストラクチャをコードとして扱う目的を無効にし、デプロイメントと管理プロセスの自動化を目的としています。"
        ]
    },
    {
        "Question Number": "61",
        "Situation": "大手メディア会社は、オンプレミスのデータセンターからAWSに大量のアーカイブデータを移行する必要があります。データ転送は安全で、コスト効率が良く、ペタバイトのデータを扱うことができ、会社の既存のネットワークパフォーマンスに大きな影響を与えない必要があります。ソリューションアーキテクトは、これらの基準を満たし、移行プロセスに必要な時間を最小限に抑えるために最も適切なデータ移行ツールを選択しなければなりません。",
        "Question": "オンプレミスのデータセンターからAWSに大量のアーカイブデータを安全かつ効率的に移行するために、次のAWSサービスのうちどれが最も適切ですか？",
        "Options": {
            "1": "AWS Transfer Familyは、FTP、SFTP、FTPSプロトコルを使用してAWSとの間でファイルを簡単に転送できるため、大規模なデータ移行に適しています。",
            "2": "AWS Snowballは、大量のデータを物理的に安全で頑丈なデバイスを使用して転送するために特別に設計されているため、ペタバイト規模の移行に最適です。",
            "3": "AWS DataSyncは、インターネット経由で自動化された安全なデータ転送を提供し、組み込みの暗号化があり、大規模なデータ移行に最適化されています。",
            "4": "S3 Transfer Accelerationは、Amazon CloudFrontのグローバルに分散したエッジロケーションを使用してAmazon S3へのコンテンツアップロードを加速するため、大規模なデータセットに効果的です。"
        },
        "Correct Answer": "AWS Snowballは、大量のデータを物理的に安全で頑丈なデバイスを使用して転送するために特別に設計されているため、ペタバイト規模の移行に最適です。",
        "Explanation": "AWS Snowballは、物理デバイスを使用してペタバイトのデータを安全に転送できるため、大量のアーカイブデータを移行するための最良の選択肢です。この方法は、会社のインターネット帯域幅を過負荷にすることを避け、移行プロセス中の迅速かつ安全なデータ処理を確保します。",
        "Other Options": [
            "AWS DataSyncはインターネット経由での自動データ転送に優れていますが、Snowballのような物理デバイスと比較すると、ペタバイトのデータ転送において最もコスト効率が良いとは限りません。",
            "AWS Transfer Familyはファイル転送プロトコル用に設計されていますが、特にペタバイトのアーカイブデータを扱う際の大規模なデータ移行には最適化されていません。",
            "S3 Transfer AccelerationはS3へのアップロードを加速できますが、インターネットに依存しているため、大量のデータを転送する際のボトルネックになる可能性があり、このシナリオにはあまり適していません。"
        ]
    },
    {
        "Question Number": "62",
        "Situation": "金融サービス会社は、アプリケーション層にAmazon EC2インスタンス、データベース層にAmazon RDS、ユーザーがアップロードしたドキュメントの保存にAmazon S3を含むマルチティアアプリケーションをAWS上に展開しています。ソリューションアーキテクトは、アプリケーションが高トラフィックを経験するピーク使用時に、十分に信頼性がない可能性のある領域を特定するために既存のアーキテクチャを評価する任務を負っています。会社はデータベースやアプリケーションサーバーに冗長性やフェイルオーバーの実装を行っていません。",
        "Question": "ピークトラフィック時にアーキテクチャの信頼性を向上させるために、ソリューションアーキテクトはどのようなアクションを推奨すべきですか？",
        "Options": {
            "1": "トラフィックのスパイクに対応するために、より大きなインスタンスタイプのEC2インスタンスにアプリケーションを展開します。",
            "2": "EC2インスタンスにAuto Scalingを実装し、Amazon RDS Multi-AZデプロイメントを使用してデータベースの高可用性を確保します。",
            "3": "データストレージにAmazon DynamoDBに切り替え、冗長性とスケーリングの必要性を排除します。",
            "4": "パフォーマンス向上のためにプロビジョニングされたIOPSを使用する単一のEC2インスタンスにアプリケーションを移行します。"
        },
        "Correct Answer": "EC2インスタンスにAuto Scalingを実装し、Amazon RDS Multi-AZデプロイメントを使用してデータベースの高可用性を確保します。",
        "Explanation": "EC2インスタンスにAuto Scalingを実装することで、アプリケーションはトラフィックの需要に基づいてインスタンスの数を自動的に調整でき、Amazon RDS Multi-AZデプロイメントはデータベースの高可用性とフェイルオーバーサポートを提供し、ピーク負荷や障害時でもアプリケーションが稼働し続けることを保証します。",
        "Other Options": [
            "Amazon DynamoDBに切り替えることでパフォーマンスが向上する可能性がありますが、既存のアーキテクチャの信頼性の懸念に直接対処するものではなく、データモデリングに追加の複雑さをもたらす可能性があります。",
            "アプリケーションを単一のEC2インスタンスに移行すると、単一障害点が生じ、ピークトラフィック時の冗長性やスケーリングの能力が提供されず、信頼性にとって重要です。",
            "より大きなEC2インスタンスにアプリケーションを展開することでパフォーマンスが向上する可能性がありますが、冗長性やフェイルオーバーの必要性に対処せず、アプリケーションを障害に対して脆弱にします。"
        ]
    },
    {
        "Question Number": "63",
        "Situation": "データ分析会社は、高スループットと低遅延を必要とする大規模なデータセットを処理しています。彼らは複数のAmazon EC2インスタンスを活用した分散アプリケーションアーキテクチャを使用しており、頻繁にアクセスされるデータを扱うワークロードに対して迅速なパフォーマンスを提供できる共有ファイルシステムが必要です。会社はコストを最適化しつつ、ファイルシステムが既存のS3データレイクとシームレスに統合できることを求めています。",
        "Question": "Amazon S3と効率的に統合しながら、高パフォーマンスの共有ファイルシステムに対する会社の要件を最もよく満たすソリューションはどれですか？",
        "Options": {
            "1": "Amazon FSx for Lustreを利用して、Amazon S3からデータをロードして処理する高パフォーマンスの共有ファイルシステムを作成し、頻繁にアクセスされるデータへの低遅延アクセスを確保します。",
            "2": "ライフサイクルポリシーを設定したAmazon S3バケットを作成し、頻繁にアクセスされるデータを自動的にAmazon Glacierに移行してストレージコストを削減します。",
            "3": "Amazon FSx for Windows File Serverファイルシステムを展開して、Windowsベースのアプリケーションとデータへの共有アクセスを提供し、Active Directoryと統合して認証を行います。",
            "4": "Amazon Elastic File System (EFS)を実装して、EC2インスタンスのためのスケーラブルなファイルストレージを提供し、変動するワークロードに対応するために自動スケーリングを可能にします。"
        },
        "Correct Answer": "Amazon FSx for Lustreを利用して、Amazon S3からデータをロードして処理する高パフォーマンスの共有ファイルシステムを作成し、頻繁にアクセスされるデータへの低遅延アクセスを確保します。",
        "Explanation": "Amazon FSx for Lustreは高パフォーマンスのワークロードを処理するように設計されており、Amazon S3と直接統合できるため、データに迅速かつ効率的にアクセスできます。これにより、会社のパフォーマンスとコスト最適化の要件に理想的なソリューションとなります。",
        "Other Options": [
            "Amazon FSx for Windows File Serverを展開することは、高パフォーマンスのワークロードには最適ではなく、Windowsベースのアプリケーション向けに設計されているため、分析会社に必要なスループットとレイテンシを提供できない可能性があります。",
            "Amazon Elastic File System (EFS)を実装することでスケーラビリティが提供されますが、大規模なデータセットを扱う際にFSx for Lustreと比較してデータ分析ワークロードの高パフォーマンスニーズに合致しない可能性があります。",
            "データをAmazon Glacierに移行するためのライフサイクルポリシーを設定したAmazon S3バケットを作成することは適切ではなく、Glacierはあまりアクセスされないデータ向けに設計されており、会社の迅速な共有アクセスのニーズに対して遅延を増加させることになります。"
        ]
    },
    {
        "Question Number": "64",
        "Situation": "金融サービス会社は、Amazon S3に保存されている重要なデータの信頼できるバックアップソリューションを必要としています。このデータは自動的にバックアップされる必要があり、コスト効率が良く、障害が発生した場合のデータ損失を避けるために、複数のアベイラビリティゾーンにわたるビジネスの継続性を確保しなければなりません。",
        "Question": "次のアーキテクチャのうち、会社の自動化されたコスト効率の良いバックアップソリューションの要件を最もよく満たすものはどれですか？",
        "Options": {
            "1": "AWS Lambda関数をスケジュール設定し、S3 APIを使用して、プライマリS3バケットから別のリージョンのバケットにオブジェクトをコピーします。",
            "2": "Amazon S3クロスリージョンレプリケーションを別のリージョンのバケットに実装し、ライフサイクルポリシーを使用して古いバージョンをAmazon S3 Glacierに移行します。",
            "3": "Amazon S3オブジェクトロックをバージョン管理を有効にして利用し、異なるアベイラビリティゾーンにわたって同じバケット内のオブジェクトの複数のコピーを保持します。",
            "4": "AWS Backupを使用して、バージョン管理を有効にした状態で、同じリージョン内の別のバケットにS3データを自動的にバックアップするバックアッププランを作成します。"
        },
        "Correct Answer": "Amazon S3クロスリージョンレプリケーションを別のリージョンのバケットに実装し、ライフサイクルポリシーを使用して古いバージョンをAmazon S3 Glacierに移行します。",
        "Explanation": "このオプションは、データが自動的に別のリージョンにバックアップされ、耐久性と可用性が向上するだけでなく、ライフサイクルポリシーを利用してコストを管理し、データを低コストのストレージクラスに移行することを保証します。",
        "Other Options": [
            "AWS Backupは良好な機能を提供しますが、同じリージョン内の別のバケットへのバックアップは、複数のアベイラビリティゾーンまたはリージョンにわたるビジネスの継続性の要件を満たしていません。",
            "データをコピーするためにスケジュールされたAWS Lambda関数を使用すると、複雑さや潜在的な障害点が生じる可能性があり、クロスリージョンレプリケーションのような組み込み機能と比較して、バックアップソリューションとしての信頼性が低くなります。",
            "Amazon S3オブジェクトロックをバージョン管理とともに使用することは、データ保持と偶発的な削除からの保護に有益ですが、ビジネスの継続性に不可欠なクロスリージョンバックアップソリューションを提供しません。"
        ]
    },
    {
        "Question Number": "65",
        "Situation": "金融機関は、Amazon S3を使用して敏感な顧客データを保存しています。規制遵守要件により、このデータが特定の保持期間中に削除または変更されないことを保証する必要があります。機関は、このデータの整合性を保証しつつ、必要に応じて効率的にアクセスおよび取得できるソリューションを実装したいと考えています。データ保持と保護を管理するためのさまざまなオプションを検討しています。",
        "Question": "金融機関は、敏感なデータの偶発的な削除や変更を防ぎながら、データ保持ポリシーに準拠するためにどのソリューションを実装すべきですか？",
        "Options": {
            "1": "バージョン管理されたバケットでコンプライアンスモードのS3オブジェクトロックを有効にし、指定された保持期間中にオブジェクトの削除や変更を防ぎます。",
            "2": "Amazon S3転送加速を利用してデータ転送を迅速化し、アクセスを改善しながら、IAMポリシーを使用してバケットへのアクセスを制御します。",
            "3": "AWS Backupを実装してS3バケットの内容の定期的なバックアップを作成し、削除された場合にオブジェクトの以前のバージョンを復元できるようにします。",
            "4": "Amazon CloudTrailを設定してS3バケットへのアクセスを監視し、削除アクションに対してアラートを発行し、管理者が是正措置を講じることを可能にします。"
        },
        "Correct Answer": "バージョン管理されたバケットでコンプライアンスモードのS3オブジェクトロックを有効にし、指定された保持期間中にオブジェクトの削除や変更を防ぎます。",
        "Explanation": "コンプライアンスモードのS3オブジェクトロックを有効にすることで、指定された保持期間中にオブジェクトが削除または上書きされないことが保証され、データ保護と整合性に関する規制要件を満たします。",
        "Other Options": [
            "AWS Backupを実装してもオブジェクトの削除や変更を防ぐことはできません。単に以前のバージョンの復元を可能にするだけで、保持期間中の変更を防ぐ要件を満たしません。",
            "Amazon S3転送加速を利用すると転送速度が向上しますが、削除や変更に対する保護は提供されず、コンプライアンス要件を満たしません。",
            "Amazon CloudTrailを設定すると、S3バケットで行われたアクションを監視できますが、削除や変更を防ぐことはできず、データ保持保護のニーズを満たしません。"
        ]
    },
    {
        "Question Number": "66",
        "Situation": "ある会社は、AWS CloudFormationを使用してインフラストラクチャをコードとして管理しています。会社は複数のリソースで構成されるスタックを持ち、スタックの更新中に特定のリソースのみが更新されることを保証するためにスタックポリシーを実装したいと考えています。また、会社は一貫性を保つために、複数のアカウントとリージョンにわたって同じスタックを展開する必要があります。",
        "Question": "次のアプローチのうち、会社がスタックの更新を強制し、複数のアカウントとリージョンにわたってCloudFormationスタックを展開できるようにするものはどれですか？",
        "Options": {
            "1": "デフォルトですべてのリソースの更新を拒否するスタックポリシーを作成し、更新の柔軟性を持たせるために異なるAWSアカウントに異なるスタックポリシーを割り当てます。",
            "2": "すべてのリソースの更新を許可するスタックポリシーを実装し、制限なしで複数のリージョンにわたる展開を管理するためにAWS CloudFormation StackSetsを利用します。",
            "3": "AWS CloudFormation StackSetsを使用して、すべてのリソースを含む単一のスタックを作成し、デフォルトで更新を防ぎます。このシナリオでは、別のスタックポリシーを実装することはできません。",
            "4": "特定のリソースのみの更新を明示的に許可するスタックポリシーをJSON形式で定義します。AWS CloudFormation StackSetsを使用して、すべてのターゲットアカウントとリージョンにスタックポリシーとテンプレートを展開します。"
        },
        "Correct Answer": "特定のリソースのみの更新を明示的に許可するスタックポリシーをJSON形式で定義します。AWS CloudFormation StackSetsを使用して、すべてのターゲットアカウントとリージョンにスタックポリシーとテンプレートを展開します。",
        "Explanation": "このオプションは、特定のリソースへの更新を許可するスタックポリシーを定義し、StackSetsを使用してマルチアカウントおよびマルチリージョン展開を行うプロセスを正しく説明しています。これは、インフラストラクチャをコードとして管理するためのAWSのベストプラクティスに従っています。",
        "Other Options": [
            "このオプションは誤りです。AWS CloudFormationは異なるアカウントに異なるスタックポリシーを許可しません。単一のスタックポリシーがスタックを更新しようとするすべてのユーザーに適用されます。",
            "このオプションは誤解を招くもので、更新を防ぐポリシーを持つ単一のスタックを作成することを示唆しています。すべてのリソースの更新を拒否するスタックポリシーは、特定のリソースへの更新を許可する要件を満たしません。",
            "このオプションは誤りです。すべてのリソースの更新を許可するスタックポリシーを実装することは、スタックの更新中に特定のリソースを保護する要件に矛盾します。"
        ]
    },
    {
        "Question Number": "67",
        "Situation": "ある金融サービス会社が、AWS環境全体のすべてのセキュリティイベントのために集中ログソリューションを実装しようとしています。会社は、規制要件の遵守を確保しつつ、インシデント対応時間を改善したいと考えています。ソリューションアーキテクトは、さまざまなAWSサービスやアプリケーションからのログを含む戦略を策定し、ログが安全に保存され、監査のために簡単にアクセスできるようにする必要があります。",
        "Question": "どのアーキテクチャが会社のために集中セキュリティイベント通知と監査を最もサポートしますか？",
        "Options": {
            "1": "AWS Configを設定してリソースの構成と変更を監視し、AWS Security Hubと統合してコンプライアンス違反に基づいてアラートを送信します。ログは長期保存のためにAmazon S3に保存します。",
            "2": "Amazon CloudWatch Logsを利用してAWSサービスからのログを集約し、特定のセキュリティイベントの通知を送信するためにAmazon SNSを設定します。ログは保持管理のためにライフサイクルポリシーを使用してAmazon S3に保存します。",
            "3": "さまざまなAWSサービスからのログをインデックスするためにAmazon Elasticsearch Serviceクラスターを展開し、カスタムソリューションを使用してログをクラスターにプッシュします。Elasticsearchクエリに基づいてAmazon SNSを介してアラートを設定します。",
            "4": "AWS CloudTrailを実装してAPIコールをキャプチャし、リアルタイム処理のためにAmazon Kinesisにログをストリーミングします。ログストレージにはAmazon S3を使用し、特定のログパターンに基づいてアラートをトリガーするためにAWS Lambdaを設定します。"
        },
        "Correct Answer": "Amazon CloudWatch Logsを利用してAWSサービスからのログを集約し、特定のセキュリティイベントの通知を送信するためにAmazon SNSを設定します。ログは保持管理のためにライフサイクルポリシーを使用してAmazon S3に保存します。",
        "Explanation": "Amazon CloudWatch Logsを使用することで、さまざまなAWSサービスからのログを集約し、セキュリティイベントの集中ビューを提供します。これをAmazon SNSと組み合わせることで、特定のイベントに対するタイムリーな通知が可能になり、インシデント対応が強化されます。ログをAmazon S3にライフサイクルポリシーを使用して保存することで、データ保持要件の遵守を確保しつつ、ストレージコストを最適化します。",
        "Other Options": [
            "AWS CloudTrailを実装することは主にAPIコールをキャプチャしますが、サービス全体のすべてのセキュリティイベントに対する包括的なログソリューションを提供しません。Kinesisはリアルタイム処理を可能にしますが、すべてのユースケースに必要ではなく、集中ログに対して明確な利点なしに複雑さを追加します。",
            "Amazon Elasticsearch Serviceクラスターを展開するには追加の管理オーバーヘッドが必要であり、セキュリティイベントの通知メカニズムを本質的に提供しません。ログをプッシュするためのカスタムソリューションは複雑さと潜在的な障害点を追加し、タイムリーなイベント対応を妨げる可能性があります。",
            "AWS Configを設定することはリソースの構成を監視することにより集中ログをセキュリティイベントのために提供することに焦点を当てています。コンプライアンスアラートを提供できますが、AWSサービス全体のセキュリティイベントの幅をカバーしていないため、包括的な監査戦略には適していません。"
        ]
    },
    {
        "Question Number": "68",
        "Situation": "ある会社が、異なるサービス間で信頼性のある通信を必要とするAWS上でのマイクロサービスアーキテクチャを開発しています。サービスは、受信サービスが一時的に利用できない場合でも、メッセージが失われないように、デカップルされた方法でメッセージを送受信する必要があります。また、アーキテクチャは、イベントのリアルタイム処理を必要とするワークロードを含むさまざまなタイプのワークロードをサポートする必要があります。",
        "Question": "マイクロサービス間で信頼性のあるメッセージングシステムを実装するために、次のAWSサービスの中で最も適切な選択はどれですか？",
        "Options": {
            "1": "Amazon Simple Queue Service (Amazon SQS)を使用してメッセージ処理のためのキューを作成します。",
            "2": "Amazon Kinesis Data Streamsを使用してリアルタイムデータストリームを処理および分析します。",
            "3": "AWS Step Functionsを使用してサービス間のワークフローを直接オーケストレーションします。",
            "4": "Amazon Simple Notification Service (Amazon SNS)を使用してすべてのサブスクライバーにメッセージを送信します。"
        },
        "Correct Answer": "Amazon Simple Queue Service (Amazon SQS)を使用してメッセージ処理のためのキューを作成します。",
        "Explanation": "Amazon SQSは、マイクロサービス間のデカップルされた通信を可能にする信頼性が高く、スケーラブルで完全に管理されたメッセージキューイングサービスを提供します。メッセージが失われず、非同期で処理できるため、マイクロサービスアーキテクチャに最適です。",
        "Other Options": [
            "Amazon SNSはpub/subメッセージング用に設計されており、サービス間での信頼性のあるメッセージ処理を保証するよりも、複数のサブスクライバーにメッセージをブロードキャストするのに適しています。",
            "AWS Step Functionsは、複雑なワークフローをオーケストレーションし、アプリケーションの状態を管理するために主に使用され、メッセージングサービスとして機能するものではありません。",
            "Amazon Kinesis Data Streamsはリアルタイムデータストリーミングと処理に焦点を当てており、マイクロサービス間の信頼性のあるメッセージングの主な要件ではありません。"
        ]
    },
    {
        "Question Number": "69",
        "Situation": "あるグローバルな金融サービス会社が、複数のオンプレミスデータセンターを持ち、AWSとのシステム統合を図りながら、安全で効率的なデータ転送を確保しようとしています。彼らは、リアルタイム処理のために安全な接続と低遅延を必要とする機密データを持っています。会社は、ハイブリッドアーキテクチャを最適化するために、オンプレミスネットワークをAWSに接続するオプションを評価しています。",
        "Question": "次のオプションの中で、会社のオンプレミスデータセンターをAWSと統合するための最も効率的で安全な接続を提供し、リアルタイム処理のための遅延を最小限に抑えるのはどれですか？",
        "Options": {
            "1": "AWS Direct Connectを設定して、オンプレミスデータセンターからAWSへの専用ファイバー接続を確立し、冗長性のためにVPNバックアップを組み合わせます。すべてのデータ転送にDirect Connectを使用して、遅延を最小限に抑え、帯域幅を最大化します。",
            "2": "AWS Transit Gatewayを実装して、複数のVPCとオンプレミスネットワークを接続します。バックアップとしてVPN接続を使用したAWS Direct Connectを利用します。この設定は管理を簡素化し、安全で効率的な接続を確保します。",
            "3": "AWS VPN CloudHubを使用して、複数のリモートサイトをAWS VPCに接続します。このソリューションは安全な接続を提供しますが、インターネットベースのVPN接続の性質により、追加の遅延を引き起こす可能性があります。",
            "4": "AWS Site-to-Site VPNを使用してVPN接続を確立し、オンプレミスデータセンターをAWSに接続します。高帯域幅要件のためにAWS Direct Connectを利用して専用接続を作成し、セキュリティのためにVPNを介してトラフィックをルーティングします。"
        },
        "Correct Answer": "AWS Direct Connectを設定して、オンプレミスデータセンターからAWSへの専用ファイバー接続を確立し、冗長性のためにVPNバックアップを組み合わせます。すべてのデータ転送にDirect Connectを使用して、遅延を最小限に抑え、帯域幅を最大化します。",
        "Explanation": "AWS Direct Connectを使用することで、リアルタイムデータ処理に理想的な信頼性が高く、高速な接続を提供します。冗長性のためにVPNと組み合わせることで、Direct Connectリンクが失敗した場合でも安全な接続が確保されます。",
        "Other Options": [
            "AWS Site-to-Site VPNを使用してVPN接続を確立することは、Direct Connectと併用すると不必要な複雑さを引き起こします。VPNはトラフィックをDirect Connectリンクを介してルーティングするため、低遅延の利点が一部失われます。",
            "AWS Transit Gatewayを実装することで管理が簡素化されますが、トラフィックのルーティングにオーバーヘッドと遅延が追加される可能性があります。これは、単純な接続よりも複雑なネットワークアーキテクチャにより有益です。",
            "AWS VPN CloudHubを使用してリモートサイトを接続することは可能ですが、インターネット接続に依存するため、遅延が高くなる可能性があります。このオプションは、低遅延接続を必要とする会社の要件には適していません。"
        ]
    },
    {
        "Question Number": "70",
        "Situation": "ある企業がコストとパフォーマンスを最適化するためにクラウドポートフォリオを評価しています。現在のアーキテクチャには、さまざまなアプリケーションを実行している複数のEC2インスタンスが含まれていますが、企業はリソースを効率的に利用しているかどうか不明です。ソリューションアーキテクトは、潜在的な改善点を特定するためにポートフォリオ評価を実施する任務を負っています。",
        "Question": "EC2インスタンスの現在のリソース利用状況を評価するために、ソリューションアーキテクトが最初に取るべき行動はどれですか？",
        "Options": {
            "1": "すべてのEC2インスタンスにオートスケーリンググループを実装して効率を向上させる。",
            "2": "AWS CloudWatchを展開して、EC2インスタンス全体のCPUおよびメモリ利用状況を監視する。",
            "3": "AWS Cost Explorerを有効にして、過去6か月間の支出パターンを分析する。",
            "4": "AWS CloudTrailを使用して、EC2インスタンスへのAPIコールをレビューし、パフォーマンスメトリクスを取得する。"
        },
        "Correct Answer": "AWS CloudWatchを展開して、EC2インスタンス全体のCPUおよびメモリ利用状況を監視する。",
        "Explanation": "AWS CloudWatchを展開してCPUおよびメモリ利用状況を監視することで、リソースの使用状況に関する即時の洞察を得ることができます。このデータは、過小利用または過剰プロビジョニングされたインスタンスを特定するために不可欠であり、リソース最適化に関する情報に基づいた意思決定を可能にします。",
        "Other Options": [
            "オートスケーリンググループの実装はリソース配分を最適化するための戦略ですが、現在の利用状況に関する即時の洞察を提供しないため、リソース使用状況を評価した後の二次的なステップとなります。",
            "AWS CloudTrailの使用は監査およびセキュリティ目的には有用ですが、リソース利用に関連するパフォーマンスメトリクスを直接提供するものではありません。ポートフォリオ評価において最初のステップとしては最適ではありません。",
            "AWS Cost Explorerを有効にすることで支出を追跡できますが、リアルタイムのリソース利用データは提供されません。コストを分析する前に、リソースが現在どのように利用されているかを理解することが重要です。"
        ]
    },
    {
        "Question Number": "71",
        "Situation": "ある金融サービス会社が、現在のデプロイメントプロセスを評価して改善点を特定しようとしています。同社のアプリケーションはAmazon EC2インスタンスにデプロイされていますが、チームはスケーリングと運用効率に関して課題に直面しています。彼らは、リソースの利用と管理を改善するために、より現代的なアーキテクチャへの移行を検討しています。目標は、パフォーマンスを向上させつつ運用コストを削減することです。",
        "Question": "スケーリングと運用効率の改善に関する会社の要件を考慮して、会社が目標を達成するために採用すべきデプロイメント戦略はどれですか？",
        "Options": {
            "1": "アプリケーションをAmazon EC2のオンデマンドインスタンスとリザーブドインスタンスの混合でデプロイし、スケーリングは予測されるワークロードに基づいて手動で行う。",
            "2": "アプリケーションをAmazon ECSにAWS Fargateを使用して移行し、EC2インスタンスを手動で管理する必要を排除し、需要に基づいて自動的にスケーリングを確保する。",
            "3": "Amazon EC2インスタンスの使用を続けるが、インスタンスの使用を最適化するための包括的な監視ソリューションを実装し、観察されたパフォーマンスメトリクスに基づいて手動でスケーリングを調整する。",
            "4": "アプリケーションをAWS Lambdaで実行するようにリファクタリングし、イベントや使用パターンに基づいて自動的にスケーリングするサーバーレスアーキテクチャを実現する。"
        },
        "Correct Answer": "アプリケーションをAmazon ECSにAWS Fargateを使用して移行し、EC2インスタンスを手動で管理する必要を排除し、需要に基づいて自動的にスケーリングを確保する。",
        "Explanation": "Amazon ECSにAWS Fargateを使用して移行することで、会社は基盤となるEC2インスタンスを管理することなくアプリケーションのデプロイに集中できます。Fargateは自動スケーリング機能を提供し、リソースの使用を最適化し、運用オーバーヘッドを削減します。これは、効率とコスト削減に関する会社の目標に合致しています。",
        "Other Options": [
            "Amazon EC2インスタンスを使用し続けると、スケーリングやリソースの手動管理に関する継続的な課題が生じる可能性があり、会社の運用効率の改善ニーズに対処できません。",
            "オンデマンドインスタンスとリザーブドインスタンスの混合をデプロイすることは、管理を簡素化せず、自動スケーリングを提供しないため、運用コストが高くなり、リソース利用が非効率的になる可能性があります。",
            "アプリケーションをAWS Lambdaで実行するようにリファクタリングすることは、すべてのワークロードに適しているわけではなく、特にイベント駆動型でない場合や長時間実行するプロセスが必要な場合には適さない可能性があります。このアプローチは複雑さを引き起こし、現在のアーキテクチャと一致しない可能性があります。"
        ]
    },
    {
        "Question Number": "72",
        "Situation": "ある金融サービス会社が、オンプレミスのアプリケーションをAWSに移行する計画を立てています。アプリケーションは、ウェブサーバー、アプリケーションサーバー、およびデータベースの混合で構成されています。会社は、移行中のダウンタイムを最小限に抑え、アプリケーションのパフォーマンスを維持したいと考えています。彼らは、プロセスを円滑にするためにさまざまなAWS移行ツールを検討しています。",
        "Question": "オンプレミスのアプリケーションの依存関係を評価し、移行戦略を計画するために最適なAWSツールはどれですか？",
        "Options": {
            "1": "AWS Database Migration Service",
            "2": "AWS Server Migration Service",
            "3": "AWS Application Migration Service",
            "4": "AWS Application Discovery Service"
        },
        "Correct Answer": "AWS Application Discovery Service",
        "Explanation": "AWS Application Discovery Serviceは、組織がオンプレミスのアプリケーションを発見し、依存関係やパフォーマンスメトリクスを理解するのを支援するために特別に設計されています。この情報は、ダウンタイムを最小限に抑えつつAWSへの効果的な移行戦略を計画するために重要です。",
        "Other Options": [
            "AWS Application Migration Serviceは、アプリケーションの自動移行に主に焦点を当てており、移行戦略の評価と計画には対応していません。",
            "AWS Database Migration Serviceはデータベースの移行に特化しており、複数の種類のサーバー間のアプリケーション依存関係の評価には対応していません。",
            "AWS Server Migration Serviceは、仮想サーバーをAWSに自動的に移行するために使用されますが、アプリケーション依存関係の包括的な分析を提供しません。"
        ]
    },
    {
        "Question Number": "73",
        "Situation": "ある企業が、クラウドサービスの使用パターンの変動により、予期しないAWSの請求額の増加に直面しています。ソリューションアーキテクトは、予想される使用パターンに基づいて請求アラームを設定するコスト管理戦略を設計する必要があります。この戦略は、企業がコストを積極的に管理し、予算の閾値を超える前にアラートを受け取るのに役立つべきです。",
        "Question": "予想される使用パターンに基づいて請求アラームを設計する最も効果的な方法はどれですか？",
        "Options": {
            "1": "AWS CloudTrailを設定して、請求に関連するすべてのAPIコールをログに記録し、ログデータに基づいてアラートを設定して使用の急増を監視します。",
            "2": "AWS Budgetsを作成してカスタムコストと使用の閾値を設定し、Amazon CloudWatchを使用して予算の閾値を超えたときにアラームをトリガーします。",
            "3": "AWS Cost Explorerを実装して過去の使用を分析し、平均使用パターンに基づいてアラートを定義し、SNSを使用して通知します。",
            "4": "AWS Trusted Advisorを利用して月次コストレポートを生成し、閾値に達したときにアラートをトリガーするためにレポートを手動で監視します。"
        },
        "Correct Answer": "AWS Budgetsを作成してカスタムコストと使用の閾値を設定し、Amazon CloudWatchを使用して予算の閾値を超えたときにアラームをトリガーします。",
        "Explanation": "AWS Budgetsを作成することで、企業は予想されるパターンに合わせた特定のコストと使用の閾値を定義できます。Amazon CloudWatchと組み合わせることで、閾値を超えたときに即座にアラートを受け取ることができ、積極的なコスト管理が可能になります。",
        "Other Options": [
            "AWS Cost Explorerを実装することは使用を分析するのに役立ちますが、リアルタイムのアラート機能は提供しません。これは、積極的なコスト管理よりも過去の分析に役立ちます。",
            "AWS CloudTrailを設定することはAPIコールのログ記録に重点を置いており、請求の閾値管理には直接関係しません。これは主にガバナンス、コンプライアンス、および運用監査に使用されます。",
            "AWS Trusted Advisorを利用してコストレポートを生成することは洞察を提供しますが、積極的な管理に必要なリアルタイムのアラート機能が欠けています。手動での監視は、タイムリーなコスト管理には効率的ではありません。"
        ]
    },
    {
        "Question Number": "74",
        "Situation": "ある金融サービス会社がAWSを使用して新しいアプリケーションを展開しています。このアプリケーションは、問題が発生した場合に迅速に展開をロールバックできることを保証する必要があり、最小限のダウンタイムのためにブルーグリーン展開もサポートする必要があります。",
        "Question": "迅速なロールバックとブルーグリーン展開の要件を最も満たす戦略の組み合わせはどれですか？（2つ選択）",
        "Options": {
            "1": "アプリケーションのバージョン管理を伴うAWS Elastic Beanstalkを実装します。",
            "2": "Amazon ECSを使用してロールアップデートとヘルスチェックで展開します。",
            "3": "インフラストラクチャのプロビジョニングにAWS CloudFormationを使用し、スタックの更新を行います。",
            "4": "ブルーグリーン展開のためにデプロイメントグループを使用してAWS CodeDeployを利用します。",
            "5": "バージョン管理されたエンドポイントのためにAWS LambdaとAPI Gatewayを活用します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "ブルーグリーン展開のためにデプロイメントグループを使用してAWS CodeDeployを利用します。",
            "アプリケーションのバージョン管理を伴うAWS Elastic Beanstalkを実装します。"
        ],
        "Explanation": "AWS CodeDeployを利用することで、ブルーグリーン展開を構成でき、迅速なロールバックが可能になります。さらに、アプリケーションのバージョン管理を伴うAWS Elastic Beanstalkを実装することで、必要に応じてアプリケーションの以前のバージョンに迅速に戻すことができます。",
        "Other Options": [
            "AWS CloudFormationを使用することは、コードとしてのインフラストラクチャの管理に役立ちますが、アプリケーションの展開に対するロールバックメカニズムには特に対応していません。",
            "Amazon ECSを使用してロールアップデートで展開することはダウンタイムを最小限に抑えるのに効果的ですが、ブルーグリーン展開が提供する迅速なロールバック機能を提供しない可能性があります。",
            "AWS LambdaとAPI Gatewayを活用することはマイクロサービスに適していますが、ブルーグリーン展開や迅速なロールバック戦略を本質的にサポートしていません。"
        ]
    },
    {
        "Question Number": "75",
        "Situation": "ある金融サービス会社が、単一のAmazon RDSインスタンスに敏感な顧客データを保存しています。このデータベースは、コンプライアンスおよび災害復旧の目的で定期的なバックアップが必要です。しかし、同社は人的エラーによるデータ損失のいくつかの事例を経験しており、データの整合性と可用性を確保しながら、自動化され効率的なバックアップソリューションを設計する必要があります。",
        "Question": "Amazon RDSインスタンスの堅牢なバックアッププロセスを実装するための最も効果的なソリューションはどれですか？",
        "Options": {
            "1": "AWS Backupを使用してRDSインスタンスの毎日のバックアップを作成し、バックアップコピーを30日間保持するように設定し、規制要件に準拠します。",
            "2": "RDSインスタンスのスナップショットを毎日手動で作成し、バージョン管理を有効にしたS3バケットに保存して、必要に応じて以前のバージョンを復元します。",
            "3": "EC2インスタンスでcronジョブを実装して、毎週データベースをS3バケットにエクスポートし、60日後に古いバックアップを削除します。",
            "4": "RDSインスタンスで自動バックアップを有効にし、保持期間を35日間に設定し、高可用性とデータ冗長性を確保するためにマルチAZ展開を構成します。"
        },
        "Correct Answer": "RDSインスタンスで自動バックアップを有効にし、保持期間を35日間に設定し、高可用性とデータ冗長性を確保するためにマルチAZ展開を構成します。",
        "Explanation": "RDSインスタンスで自動バックアップを有効にすることで、時点復元が可能になり、手動介入なしで定期的にバックアップが作成されます。35日間の保持期間を設定することで、企業はコンプライアンス要件を満たすことができ、マルチAZ展開によりデータの可用性と冗長性が向上します。",
        "Other Options": [
            "手動でスナップショットを作成することはバックアップソリューションを提供できますが、人的エラーのリスクと自動化の欠如を引き起こし、継続的なデータ保護には信頼性が低くなります。",
            "AWS Backupを使用することは良いオプションですが、RDSインスタンス上で自動バックアップを直接有効にすることと比較すると、最も効率的な方法ではありません。",
            "EC2インスタンスでcronジョブを実装することは、バックアッププロセスに運用上の負担と複雑さを追加し、毎週データベースをエクスポートすることはデータ損失時の復旧時間目標を満たさない可能性があります。"
        ]
    }
]