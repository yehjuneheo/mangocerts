[
    {
        "Question Number": "1",
        "Situation": "メディア会社が、複数のEC2インスタンスでファイルへの共有アクセスを必要とするアプリケーションを開発しています。このアプリケーションは、頻繁に変更されるマルチメディアファイルを処理し、POSIXファイルシステムのセマンティクスでアクセス可能である必要があります。会社はこの目的のためにAmazon EFSの使用を検討しており、地域的な障害が発生した場合のデータの可用性と耐久性を確保したいと考えています。",
        "Question": "会社は、複数のAWSリージョンにわたってAmazon EFSファイルシステムの高可用性と迅速な回復を確保するために、どの構成を実装すべきですか？",
        "Options": {
            "1": "Amazon EFSファイルシステムを作成し、別のAWSリージョンにある別のAmazon EFSファイルシステムへのレプリケーションを有効にします。",
            "2": "EC2インスタンスを設定して、プライマリEFSファイルシステムと別のリージョンにあるセカンダリEFSファイルシステム間のファイル転送を管理します。",
            "3": "ファイルストレージにAmazon S3を使用し、古いマルチメディアファイルをアーカイブするためのS3ライフサイクルポリシーを設定します。",
            "4": "Amazon EFSファイルシステムを単一のアベイラビリティゾーンに展開し、AWS Backupを使用して定期的なバックアップを作成します。"
        },
        "Correct Answer": "Amazon EFSファイルシステムを作成し、別のAWSリージョンにある別のAmazon EFSファイルシステムへのレプリケーションを有効にします。",
        "Explanation": "Amazon EFSファイルシステムのレプリケーションを有効にすることで、異なるリージョン間でプライマリファイルシステムとセカンダリファイルシステムのデータを自動的かつ継続的に同期させることができます。これにより高可用性が提供され、会社が必要とする回復ポイントおよび回復時間の目標を満たします。",
        "Other Options": [
            "Amazon EFSファイルシステムを単一のアベイラビリティゾーンに展開することは、地域的な障害が発生した場合に必要な耐久性と可用性を提供しません。なぜなら、1つのゾーンに制限されるからです。",
            "Amazon S3を使用することは、マルチメディア処理アプリケーションに必要なPOSIX準拠のファイルシステムセマンティクスを要求するアプリケーションには適していません。",
            "EC2インスタンスを設定してファイル転送を管理することは不必要な複雑さを加え、EFSが提供する自動化された継続的なレプリケーションを提供しません。"
        ]
    },
    {
        "Question Number": "2",
        "Situation": "メディア会社が、AWSリソースを利用して動画ストリーミングプラットフォームを運営しています。これには、動画アップロードを処理するための複数のEC2インスタンスと、受信トラフィックを分散するためのElastic Load Balancer (ELB)が含まれます。ユーザーからは、ピーク使用時間中に断続的なバッファリングや遅い読み込み時間が報告されています。ソリューションアーキテクトは、コストを最適化しながらアプリケーションのパフォーマンスを向上させる戦略を考案する必要があります。",
        "Question": "ピーク使用時間中に動画ストリーミングプラットフォームのパフォーマンスを最も改善するための戦略はどれですか？",
        "Options": {
            "1": "EC2フリートのインスタンスタイプを大きなサイズに増やし、より多くのユーザーリクエストを同時に処理するために追加のElastic IPアドレスを割り当てます。",
            "2": "動画処理タスクをAWS Lambdaのようなマネージドサービスに移行し、ユーザーから直接アクセスできるようにS3を使用して動画ファイルを保存します。",
            "3": "CPU使用率メトリクスに基づいてEC2インスタンスのオートスケーリングを実装し、CloudFrontディストリビューションを設定してユーザーに近い場所で動画コンテンツをキャッシュします。",
            "4": "すべての動画処理タスクを処理するために単一の大きなEC2インスタンスを展開し、そのインスタンスにプロビジョニングされたIOPSを持つEBSボリュームをアタッチします。"
        },
        "Correct Answer": "CPU使用率メトリクスに基づいてEC2インスタンスのオートスケーリングを実装し、CloudFrontディストリビューションを設定してユーザーに近い場所で動画コンテンツをキャッシュします。",
        "Explanation": "オートスケーリングを実装することで、アプリケーションは実際の需要に基づいてEC2インスタンスの数を動的に調整でき、トラフィックスパイクを効果的に管理できます。さらに、CloudFrontをコンテンツ配信ネットワーク（CDN）として使用することで、ユーザーに近い場所で動画コンテンツをキャッシュし、読み込み時間を大幅に改善し、バッファリングの問題を軽減します。",
        "Other Options": [
            "インスタンスタイプを増やすことはより多くのリソースを提供するかもしれませんが、ピーク時間中に必要なスケーラビリティに対処せず、最適なパフォーマンスを保証しないままコストが増加する可能性があります。",
            "単一の大きなEC2インスタンスを展開すると、単一障害点が生じ、ピーク使用中に効果的にスケールしません。このオプションは、負荷分散や冗長性の利点も活用していません。",
            "AWS Lambdaへの移行は、長い実行時間を必要とする動画処理タスクには適していない可能性があります。なぜなら、Lambdaにはタイムアウト制限があるからです。さらに、このオプションはユーザーリクエストに関連する即時のパフォーマンス問題にも対処していません。"
        ]
    },
    {
        "Question Number": "3",
        "Situation": "ある会社が、動的アプリケーションインフラストラクチャの一部として大規模なAmazon EC2インスタンスのフリートを管理しています。このインフラストラクチャは、セキュリティポリシーおよび運用のベストプラクティスに準拠しながら効率的に維持する必要があります。会社は、パッチ適用、監視、インベントリ管理などの運用タスクを自動化するために構成管理ソリューションの実装を検討しています。",
        "Question": "このシナリオにおいて、会社の構成管理要件を最もよく満たすAWSサービスはどれですか？",
        "Options": {
            "1": "AWS CloudFormationを実装してインフラストラクチャをコードとして管理し、EC2インスタンスの展開を自動化します。",
            "2": "AWS Systems Managerを使用してEC2インスタンス全体の運用タスクを自動化し、セキュリティポリシーの遵守を確保します。",
            "3": "Amazon CloudWatchを活用してアプリケーションのパフォーマンスを監視し、メトリクスに基づいてアラートを生成します。",
            "4": "AWS Configを利用してリソースの構成を追跡し、会社のポリシーへの準拠を確保します。"
        },
        "Correct Answer": "AWS Systems Managerを使用してEC2インスタンス全体の運用タスクを自動化し、セキュリティポリシーの遵守を確保します。",
        "Explanation": "AWS Systems Managerは、構成管理のための包括的なツールセットを提供し、運用タスクの自動化、パッチ管理、コンプライアンス監視を可能にします。大規模なインスタンスのフリートを効率的に管理するために特に設計されています。",
        "Other Options": [
            "AWS CloudFormationは、AWSリソースをコードとしてプロビジョニングおよび管理することに重点を置いており、継続的な運用タスクの自動化にはあまり適していません。",
            "AWS Configは主にリソースの構成とコンプライアンスの追跡に使用されますが、パッチ適用や監視などの運用タスクを自動化することはできません。",
            "Amazon CloudWatchは主にメトリクスやログを追跡する監視サービスですが、運用タスクを自動化し、コンプライアンスを確保するために必要な構成管理機能を提供しません。"
        ]
    },
    {
        "Question Number": "4",
        "Situation": "ある金融サービス会社がAWSでのクラウド支出を分析しています。短期プロジェクトと長期運用の混合があります。会社はコストを最適化しつつ、変化するビジネスニーズに適応する柔軟性を確保したいと考えています。特に、安定したワークロードのコストを最小限に抑えることに関心があり、さまざまな価格モデルを検討しています。",
        "Question": "ソリューションアーキテクトは、短期プロジェクトの柔軟性を維持しながら、会社のコストを最適化するためにどの価格モデルを推奨すべきですか？",
        "Options": {
            "1": "すべてのAmazon EC2インスタンスに対してリザーブドインスタンスを購入し、1年または3年の期間で最低の時間単価を保証します。",
            "2": "異なるインスタンスファミリーやリージョンにわたる柔軟性を提供し、オンデマンド価格に対して大幅な節約を実現するセービングプランを利用します。",
            "3": "最大の柔軟性を維持するために、オンデマンドインスタンスのみを使用して長期的なコミットメントを避けます。",
            "4": "すべてのワークロードに対してスポットインスタンスを活用し、コミットメントなしで可能な限り低価格を実現します。"
        },
        "Correct Answer": "異なるインスタンスファミリーやリージョンにわたる柔軟性を提供し、オンデマンド価格に対して大幅な節約を実現するセービングプランを利用します。",
        "Explanation": "セービングプランは、1年または3年の期間で特定の使用量にコミットすることでコストを最適化できる柔軟な価格モデルを提供します。このモデルは、さまざまなインスタンスタイプやリージョンをサポートしており、安定したワークロードと変動するワークロードの両方に最適です。",
        "Other Options": [
            "リザーブドインスタンスを購入すると、価格は低くなりますが、柔軟性が失われるため、短期プロジェクトと長期プロジェクトの両方を持つ会社には適していません。",
            "オンデマンドインスタンスのみを使用すると最大の柔軟性が得られますが、コストを効果的に最適化できず、セービングプランと比較して高額な費用がかかります。",
            "スポットインスタンスを活用すると最低価格が得られますが、中断のリスクがあるため、信頼性が求められる安定したワークロードには適していません。"
        ]
    },
    {
        "Question Number": "5",
        "Situation": "ある金融サービス会社が、高可用性と頻繁に使用されるデータへの迅速なアクセスを必要とするオンプレミスアプリケーションのために新しいデータストレージソリューションを実装する計画を立てています。会社はAWS Storage Gatewayの使用を検討しており、キャッシュボリュームとストレージボリュームのどちらを選択するかを決める必要があります。全データセットへの低遅延アクセスを確保しつつ、バックアップのためにクラウドストレージを利用したいと考えています。",
        "Question": "全データセットへの低遅延アクセスの要件を最もよく満たし、同時にバックアップのためにクラウドストレージを活用するために、会社はどの構成を選択すべきですか？",
        "Options": {
            "1": "データがAmazon S3から直接アクセスされるハイブリッド構成でボリュームゲートウェイを展開します。",
            "2": "キャッシュボリュームとストレージボリュームの組み合わせを使用して、頻繁にアクセスされるデータをローカルに保存し、Amazon S3にバックアップを維持します。",
            "3": "ボリュームゲートウェイをキャッシュボリュームを使用するように構成し、データはAmazon S3に保存され、頻繁にアクセスされるデータはローカルに保持します。",
            "4": "ボリュームゲートウェイをストレージボリュームを使用するように設定し、すべてのデータを最初にローカルに保存し、非同期でAmazon S3にバックアップします。"
        },
        "Correct Answer": "ボリュームゲートウェイをストレージボリュームを使用するように設定し、すべてのデータを最初にローカルに保存し、非同期でAmazon S3にバックアップします。",
        "Explanation": "ストレージボリュームは、すべてのデータをローカルに保存することで全データセットへの低遅延アクセスを提供し、高速なパフォーマンスを必要とするアプリケーションにとって重要です。さらに、データは非同期でAmazon S3にバックアップされ、クラウドバックアップの要件を満たします。",
        "Other Options": [
            "キャッシュボリュームは頻繁にアクセスされるデータのみをローカルに保持するため、全データセットへの低遅延アクセスの要件を満たしません。",
            "キャッシュボリュームとストレージボリュームの組み合わせを使用する必要はなく、ストレージボリューム単独で要件を効果的に満たすため、アーキテクチャが複雑になる可能性があります。",
            "ローカルストレージなしでハイブリッド構成でボリュームゲートウェイを展開すると、低遅延アクセスが提供されず、即時データ可用性を必要とするアプリケーションには適していません。"
        ]
    },
    {
        "Question Number": "6",
        "Situation": "ある金融サービス会社が、複数のAWSアカウントとリージョンにわたる構成管理の自動化を目指しており、コンプライアンスを確保し、手動エラーを減らしたいと考えています。既存のAWSサービスと統合が良好で、LinuxおよびWindows環境の両方をサポートするソリューションを求めています。また、バージョン管理と監査機能も提供する必要があります。",
        "Question": "構成管理の自動化を可能にするために、ソリューションアーキテクトはどのAWSサービスを推奨すべきですか？",
        "Options": {
            "1": "クロスアカウント管理のためのAWS CloudFormationとStackSets",
            "2": "コンプライアンスチェックのためのAWS ConfigとAWS Systems Manager",
            "3": "構成管理のためのAWS OpsWorksとChef",
            "4": "AWS Systems ManagerとState ManagerおよびAutomation機能"
        },
        "Correct Answer": "AWS Systems ManagerとState ManagerおよびAutomation機能",
        "Explanation": "AWS Systems Managerは、構成管理のための包括的なツールセットを提供し、State Managerは望ましい状態を強制し、Automationはインスタンス間でスクリプトを実行します。このサービスはLinuxおよびWindows環境の両方をサポートし、バージョン管理と監査機能を提供するため、会社のニーズに最適です。",
        "Other Options": [
            "AWS CloudFormationは主にインフラストラクチャのプロビジョニングと管理に使用され、継続的な構成管理と自動化には特に適していません。",
            "AWS Configはリソースのコンプライアンスと監視に焦点を当てており、構成管理の自動化には直接関与しません。Systems Managerと連携することはできますが、自動化の側面を直接扱いません。",
            "AWS OpsWorksはChefを使用した構成管理サービスですが、Systems Managerと比較して他のAWSサービスとの統合が劣るため、この特定の要件には最適ではありません。"
        ]
    },
    {
        "Question Number": "7",
        "Situation": "金融サービス会社が、複数のAmazon EC2インスタンスが共有データに同時にアクセスする必要がある新しい高可用性アプリケーションを展開しています。このアプリケーションは高いI/Oワークロードを処理するように設計されており、ストレージにはAmazon EBSを使用します。アーキテクトは、アプリケーションの稼働時間と可用性を向上させるために、EBSボリュームが複数のEC2インスタンス間で共有できることを確認する必要があります。",
        "Question": "アプリケーションの要件を満たすために、ソリューションアーキテクトが実装すべき構成はどれですか？（2つ選択）",
        "Options": {
            "1": "レイテンシの問題を最小限に抑えるために、各EC2インスタンスに単一のプロビジョンドIOPS SSDボリュームをアタッチします。",
            "2": "Amazon EBS Multi-Attachを使用して、同じアベイラビリティゾーン内の複数のEC2インスタンスに単一のプロビジョンドIOPS SSDボリュームを接続します。",
            "3": "Amazon EBS Multi-Attachを使用して、単一のEC2インスタンスに複数のスループット最適化HDDボリュームを接続します。",
            "4": "各EC2インスタンスに複数のAmazon EBS標準ボリュームを展開し、手動でインスタンス間でデータをレプリケートするように設定します。",
            "5": "Amazon EFSを実装して、複数のEC2インスタンスが同時にアクセスできる共有ファイルシステムを提供します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon EBS Multi-Attachを使用して、同じアベイラビリティゾーン内の複数のEC2インスタンスに単一のプロビジョンドIOPS SSDボリュームを接続します。",
            "Amazon EFSを実装して、複数のEC2インスタンスが同時にアクセスできる共有ファイルシステムを提供します。"
        ],
        "Explanation": "Amazon EBS Multi-Attachを使用すると、単一のプロビジョンドIOPS SSDボリュームを複数のEC2インスタンスにアタッチでき、高可用性とパフォーマンスを提供します。さらに、Amazon EFSは、複数のインスタンスがアクセスできるスケーラブルなファイルストレージソリューションを提供し、高可用性アプリケーションにも適しています。",
        "Other Options": [
            "複数のEBS標準ボリュームを展開し、手動でデータをレプリケートすることは非効率的であり、同時アクセスのために必要な高可用性やシンプルさを提供しません。",
            "単一のEC2インスタンスに複数のスループット最適化HDDボリュームをアタッチするEBS Multi-Attachの使用は、複数のインスタンス間でボリュームを共有する要件を満たしません。",
            "各EC2インスタンスに単一のプロビジョンドIOPS SSDボリュームをアタッチすることは、共有アクセスを許可せず、インスタンス間の稼働時間や可用性を向上させません。"
        ]
    },
    {
        "Question Number": "8",
        "Situation": "金融サービス会社が、オンプレミスのアプリケーションをAWSに移行する計画を立てています。会社は既存のアプリケーションポートフォリオを評価し、異なるAWSサービスにわたる移行進捗を追跡したいと考えています。移行状況を可視化し、移行プロセス中に最適なAWSサービスに関する推奨を受けるための集中管理ツールが必要です。",
        "Question": "移行評価と追跡に適したツールはどれですか？（2つ選択）",
        "Options": {
            "1": "AWS Cost Explorer",
            "2": "AWS CloudTrail",
            "3": "AWS Migration Hub",
            "4": "AWS Config",
            "5": "AWS Application Discovery Service"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Migration Hub",
            "AWS Application Discovery Service"
        ],
        "Explanation": "AWS Migration Hubは、AWSおよびオンプレミス環境におけるアプリケーション移行の進捗を追跡するための中央の場所を提供します。ユーザーは移行状況を可視化し、リソースの最適化に関する洞察を得ることができます。AWS Application Discovery Serviceは、アプリケーションの依存関係やリソースの利用状況を特定するのに役立ち、移行中の既存ポートフォリオを評価するために不可欠です。",
        "Other Options": [
            "AWS CloudTrailは、主にAPIコールやAWSアカウントの変更を追跡するために使用され、移行評価や追跡には特化していません。",
            "AWS Cost Explorerは、AWSのコストを分析し管理することに焦点を当てており、移行プロセスやアプリケーションポートフォリオの評価を支援するものではありません。",
            "AWS Configは、主にAWSにおけるリソース構成管理とコンプライアンス監視に使用され、移行特有の評価や追跡機能を提供しません。"
        ]
    },
    {
        "Question Number": "9",
        "Situation": "金融サービス会社が、リアルタイムでトランザクションを処理する重要なアプリケーションを運営しています。このアプリケーションはAWS上にホストされており、ユーザーに対して高可用性を維持するように設計されています。しかし、同社は自然災害やその他の重大なイベントによる潜在的な障害について懸念しています。ダウンタイムとデータ損失を最小限に抑え、規制要件を遵守するための災害復旧戦略を実装したいと考えています。同社は異なる災害復旧戦略のオプションを持っており、最適なアプローチについてのガイダンスを求めています。",
        "Question": "同社が重要なアプリケーションのダウンタイムとデータ損失を最小限に抑えるために実装すべき災害復旧戦略はどれですか？",
        "Options": {
            "1": "パイロットライト戦略を利用し、障害が発生した場合に迅速にスケールアップできる最小限のアプリケーションバージョンを別のリージョンに維持します。",
            "2": "アクティブ-アクティブ構成のマルチサイト戦略を採用し、アプリケーションが複数のAWSリージョンで同時に実行されるようにして高可用性を確保します。",
            "3": "ウォームスタンバイ戦略を実装し、別のAWSリージョンでスケールダウンしたアプリケーションバージョンを実行し、障害が発生した場合に引き継げるようにします。",
            "4": "AWS Elastic Disaster Recoveryを使用して、アプリケーションを継続的にレプリケートし、災害時に新しい環境に迅速に復元します。"
        },
        "Correct Answer": "AWS Elastic Disaster Recoveryを使用して、アプリケーションを継続的にレプリケートし、災害時に新しい環境に迅速に復元します。",
        "Explanation": "AWS Elastic Disaster Recoveryは、アプリケーションを継続的にレプリケートする効率的で自動化された方法を提供し、最小限のダウンタイムとデータ損失で新しい環境に迅速に復元できることを保証します。このアプローチは、高可用性とコンプライアンスに対する同社の要件に完全に一致します。",
        "Other Options": [
            "ウォームスタンバイ戦略を実装することは、スケールダウンしたアプリケーションバージョンを維持することを含みます。これにより復旧時間が短縮される可能性がありますが、継続的なレプリケーションと比較してダウンタイムとデータ損失を最小限に抑える要件を完全には満たさないかもしれません。",
            "アクティブ-アクティブ構成のマルチサイト戦略は複雑でコストがかかる可能性があり、複数のリージョンでフルスケールのインスタンスを実行する必要があります。高可用性を提供しますが、特にコストを最小限に抑えたい会社にとっては最も効率的なソリューションではないかもしれません。",
            "パイロットライト戦略を利用することは、スケールアップできる最小限のアプリケーションバージョンを維持することを含みます。この戦略は、復旧時間が長くなる可能性があり、重要な状況でのダウンタイムを最小限に抑えるという同社のニーズに合致しないかもしれません。"
        ]
    },
    {
        "Question Number": "10",
        "Situation": "ある金融サービス会社が急成長しており、ウェブアプリケーションが変動するトラフィック負荷に対応できるようにし、コストを最小限に抑える必要があります。アプリケーションはAmazon EC2インスタンス上で実行されており、高い可用性とパフォーマンスを維持しなければなりません。ソリューションアーキテクトは、トラフィックパターンに基づいて動的にスケーリングできるアーキテクチャを設計し、複数のアベイラビリティゾーンにわたってリソースを最適に活用する必要があります。",
        "Question": "会社の要件を達成するために、ソリューションアーキテクトが実施すべきアクションはどれですか？（2つ選択してください）",
        "Options": {
            "1": "すべてのEC2インスタンスが同じアベイラビリティゾーンに配置されるように、プレースメントグループを利用して低遅延を確保します。",
            "2": "ピーク時に十分なキャパシティが確保されるように、コストを削減するためにAmazon EC2スポットインスタンスを使用します。",
            "3": "パフォーマンスとコストを最適化するために、Auto Scalingグループ内で複数のEC2インスタンスタイプにアプリケーションを展開します。",
            "4": "平均CPU使用率に基づくターゲットトラッキングスケーリングポリシーを使用して、Amazon EC2 Auto Scalingを実装します。",
            "5": "ユーザーのセッション情報を維持するために、スティッキーセッションを持つAmazon Elastic Load Balancer（ELB）を構成します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "平均CPU使用率に基づくターゲットトラッキングスケーリングポリシーを使用して、Amazon EC2 Auto Scalingを実装します。",
            "ピーク時に十分なキャパシティが確保されるように、コストを削減するためにAmazon EC2スポットインスタンスを使用します。"
        ],
        "Explanation": "Amazon EC2 Auto Scalingをターゲットトラッキングスケーリングポリシーで実装することで、アプリケーションは現在の負荷に基づいて動的にキャパシティを調整し、高い可用性とパフォーマンスを確保します。EC2スポットインスタンスを使用することで、AWSクラウドの余剰キャパシティを活用し、パフォーマンスを犠牲にすることなくコストを最適化することができます。",
        "Other Options": [
            "スティッキーセッションを持つELBを使用すると、トラフィックの不均一な分配を引き起こし、特に変動する負荷の下ではスケーラブルなアーキテクチャには理想的ではありません。これにより、一部のインスタンスが過負荷になり、他のインスタンスが未使用のままになる可能性があります。",
            "複数のインスタンスタイプに展開することはリソース利用の最適化に良いプラクティスですが、ターゲットトラッキングを使用したAuto Scalingほど効果的にスケーリング要件に対処するわけではありません。",
            "プレースメントグループを利用することで、インスタンス間のネットワークパフォーマンスを向上させることができますが、動的スケーリングやコスト最適化を本質的に提供するものではなく、変動する負荷を管理するためには重要です。"
        ]
    },
    {
        "Question Number": "11",
        "Situation": "あなたの組織は、異なるチームやプロジェクトを促進するために複数のAWSアカウントを管理しています。しかし、これらのアカウント間でのガバナンス、コスト管理、セキュリティに関する懸念があります。リーダーシップは、すべてのアカウントに対してコンプライアンス、中央集権的な請求、効果的なアクセス管理を確保するガバナンスモデルを実装する方法を探しています。（2つ選択してください）",
        "Question": "AWSで堅牢なマルチアカウントガバナンスモデルを確立するために役立つアクションはどれですか？",
        "Options": {
            "1": "各アカウントの請求を手動で管理し、費用の可視性を維持します。",
            "2": "アカウント間でのフェデレーテッドアクセス管理のために外部アイデンティティプロバイダーを使用します。",
            "3": "AWS Organizationsを実装してアカウントを中央管理し、サービスコントロールポリシーを適用します。",
            "4": "すべてのアカウントでAWS CloudTrailを有効にし、APIアクティビティの中央集権的なログを取得します。",
            "5": "各チームのために別々のAWSアカウントを作成し、すべてのAWSサービスへの無制限のアクセスを許可します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Organizationsを実装してアカウントを中央管理し、サービスコントロールポリシーを適用します。",
            "すべてのアカウントでAWS CloudTrailを有効にし、APIアクティビティの中央集権的なログを取得します。"
        ],
        "Explanation": "AWS Organizationsを実装することで、複数のアカウントを中央管理し、すべてのアカウントにガバナンスを強制するためのサービスコントロールポリシーを適用できます。AWS CloudTrailを有効にすることで、APIアクティビティの中央集権的なログを取得でき、コンプライアンスと監査にとって重要です。",
        "Other Options": [
            "各チームのために別々のAWSアカウントを作成し、無制限のアクセスを許可することは、重大なセキュリティリスクを引き起こし、ガバナンスモデルを強制するものではありません。",
            "外部アイデンティティプロバイダーを使用してフェデレーテッドアクセス管理を行うことは有益ですが、単独のガバナンスモデルではなく、AWS Organizationsが提供するより広範な制御が欠けています。",
            "各アカウントの請求を手動で管理することは非効率的であり、AWS Organizationsが提供できるコストの中央集権的なビューを提供しません。"
        ]
    },
    {
        "Question Number": "12",
        "Situation": "医療アプリケーションは患者データを処理し、分析および報告のためにさまざまなサードパーティサービスと通信します。現在、すべてのサービスが密結合しているため、レイテンシの問題が発生し、変更の実装が困難になっています。ソリューションアーキテクトは、パフォーマンスと保守性を向上させるためにアプリケーションコンポーネントをデカップルする機会を特定する必要があります。",
        "Question": "パフォーマンスと保守性を向上させながら、アプリケーションコンポーネントを最も効果的にデカップルするソリューションはどれですか？",
        "Options": {
            "1": "アプリケーションをAmazon ECSに移行し、各サービスがHTTP呼び出しを使用して直接通信することで密結合を維持します。",
            "2": "アプリケーションを完全にAWS Lambda上で実行するようにリファクタリングし、リアルタイムデータ処理のためにすべてのサードパーティサービスに対して同期呼び出しを利用します。",
            "3": "Amazon SQSを実装してアプリケーションとサードパーティサービス間のリクエストをキューイングし、メッセージを独立して処理できるようにします。",
            "4": "Amazon API Gatewayを使用して各コンポーネントのRESTful APIを作成し、サービス間の独立したスケーリングと通信を可能にします。"
        },
        "Correct Answer": "Amazon API Gatewayを使用して各コンポーネントのRESTful APIを作成し、サービス間の独立したスケーリングと通信を可能にします。",
        "Explanation": "Amazon API Gatewayを使用してRESTful APIを作成することで、各コンポーネントが独立して通信し、必要に応じてスケールすることができます。このアプローチはサービスを効果的にデカップルし、アプリケーション全体に影響を与えることなく、更新や保守を容易にします。",
        "Other Options": [
            "Amazon SQSを実装することはデカップリングの良いプラクティスですが、API Gatewayが提供する独立したスケーリングとAPI管理の能力を十分に活用できない可能性があります。",
            "アプリケーションを完全にAWS Lambda上で実行するようにリファクタリングし、同期呼び出しを使用することはレイテンシのリスクと密結合を引き起こし、コンポーネントのデカップリングの目標に反します。",
            "アプリケーションをAmazon ECSに移行し、サービス間でHTTP呼び出しを使用することは密結合を維持し、独立したスケーリングや保守性の向上の必要性に対処しません。"
        ]
    },
    {
        "Question Number": "13",
        "Situation": "ある企業は、Secure Shell File Transfer Protocol (SFTP) を使用して既存のファイル転送ワークロードを AWS に移行する必要があります。彼らは、ユーザーが既存の SFTP クライアントを変更せずに引き続き使用できることを確認したいと考えています。さらに、企業はサービス管理のアイデンティティと自社のアイデンティティプロバイダーの組み合わせを使用してユーザーを認証したいと考えています。転送されたファイルは、Amazon S3 バケットに保存されなければなりません。ソリューションアーキテクトは、運用の負担を最小限に抑えながら、これらの要件を満たすソリューションを実装する任務を負っています。",
        "Question": "ソリューションアーキテクトは、企業の要件を満たすためにどのソリューションを実装すべきですか？",
        "Options": {
            "1": "SFTP サーバーアプリケーションを実行する EC2 インスタンスをデプロイし、認証に IAM ロールを使用するように構成します。各アップロード後にファイルを Amazon S3 バケットに転送するスクリプトを設定します。",
            "2": "AWS Transfer Family SFTP サーバーを作成し、認証にサービス管理のアイデンティティを使用するように構成します。ドメインをサーバーエンドポイントにマッピングし、ストレージ用に適切な Amazon S3 バケットを選択します。",
            "3": "ユーザー認証のためにカスタムアイデンティティプロバイダーを使用した AWS Transfer Family SFTP サーバーを実装します。サーバーを構成して、ファイルを直接 Amazon EFS ファイルシステムに転送して保存します。",
            "4": "SFTP リクエストを処理する Lambda 関数を設定し、AWS SDK を使用してユーザーを認証します。転送されたファイルを Amazon RDS データベースに保存します。"
        },
        "Correct Answer": "AWS Transfer Family SFTP サーバーを作成し、認証にサービス管理のアイデンティティを使用するように構成します。ドメインをサーバーエンドポイントにマッピングし、ストレージ用に適切な Amazon S3 バケットを選択します。",
        "Explanation": "AWS Transfer Family を使用することで、管理の負担を最小限に抑えながら SFTP ワークロードをシームレスに統合できます。認証のためのサービス管理のアイデンティティをサポートし、ファイルストレージのために Amazon S3 と直接統合されており、企業のすべての要件を満たしています。",
        "Other Options": [
            "EC2 インスタンスを SFTP 用にデプロイすると、追加の管理の複雑さが生じ、AWS Transfer Family の組み込み機能を活用できません。",
            "AWS Transfer Family でカスタムアイデンティティプロバイダーを使用する必要はなく、サービス管理のアイデンティティで企業のニーズを満たすことができ、EFS ファイルシステムへのファイル転送は S3 の使用要件に合致しません。",
            "SFTP 処理のために Lambda 関数を実装するのは過度に複雑で、高頻度のファイル転送には適していません。さらに、RDS は構造化データ用に設計されているため、ファイルストレージには適していません。"
        ]
    },
    {
        "Question Number": "14",
        "Situation": "ある医療機関は、AWS に保存されている患者データにアクセスするために異なるレベルのアクセスを必要とする従業員のユーザーアクセスと権限を安全に管理する必要があります。この組織は、アクセス制御が中央で管理され、既存のオンプレミスの Microsoft Active Directory と簡単に統合できることを確認したいと考えています。ソリューションアーキテクトは、フェデレーテッド認証と細かいアクセス制御の両方を可能にするソリューションを実装しなければなりません。(2つ選択)",
        "Question": "要件を満たすためにソリューションアーキテクトはどのサービスを実装すべきですか？",
        "Options": {
            "1": "オンプレミスの Active Directory を AWS リソースに接続するために AWS Directory Service を実装します。",
            "2": "複数の AWS アカウントやアプリケーションへのシームレスなアクセスのために AWS Single Sign-On を活用します。",
            "3": "アプリケーションのアクセスキーを安全に保存および管理するために AWS Secrets Manager を設定します。",
            "4": "AWS アカウント全体でユーザーアクセスと権限を管理するために AWS IAM Identity Center を使用します。",
            "5": "ユーザーアイデンティティを管理し、デバイス間でユーザーデータを同期するために Amazon Cognito を利用します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS アカウント全体でユーザーアクセスと権限を管理するために AWS IAM Identity Center を使用します。",
            "オンプレミスの Active Directory を AWS リソースに接続するために AWS Directory Service を実装します。"
        ],
        "Explanation": "AWS IAM Identity Center はユーザーアクセス管理を簡素化し、複数の AWS アカウントにわたるユーザーの権限を中央で管理する方法を提供します。AWS Directory Service はオンプレミスの Active Directory との統合を可能にし、フェデレーテッド認証と AWS リソースへのアクセスが必要なユーザーのためのより良いアクセス制御を実現します。",
        "Other Options": [
            "Amazon Cognito は主にウェブおよびモバイルアプリケーションのユーザーアイデンティティを管理するために使用され、このシナリオでは AWS リソースへのフェデレーテッドアクセスが必要であるため、主な関心事ではありません。",
            "AWS Secrets Manager は API キーやパスワードなどのシークレットを管理するために設計されていますが、ユーザーアクセス管理や権限制御を提供しません。",
            "AWS Single Sign-On は複数の AWS アカウントへのアクセスを簡素化しますが、既存のオンプレミスの Active Directory との統合には直接対応しておらず、このシナリオでは重要です。"
        ]
    },
    {
        "Question Number": "15",
        "Situation": "IT チームは、AWS CodeDeploy を使用してアプリケーションを Amazon EC2 インスタンスのフリートに自動デプロイすることを検討しています。彼らは、デプロイプロセスが制御されており、必要に応じて以前のバージョンに簡単にロールバックできることを確認したいと考えています。",
        "Question": "IT チームは、すべてのインスタンスが更新されるまで、20% のインスタンスに新しいバージョンを 5 分ごとに徐々に展開するためにどのデプロイ構成を使用すべきですか？",
        "Options": {
            "1": "CodeDeployDefault.ECSCanary10Percent5Minutes",
            "2": "CodeDeployDefault.OneAtATime",
            "3": "CodeDeployDefault.AllAtOnce",
            "4": "CodeDeployDefault.HalfAtATime"
        },
        "Correct Answer": "CodeDeployDefault.ECSCanary10Percent5Minutes",
        "Explanation": "ECSCanary10Percent5Minutes 構成では、カナリア方式でデプロイが進行し、10% のインスタンスが 5 分ごとに更新されます。この構成により、すべてのインスタンスに展開する前にアプリケーションの健康状態を監視しながら、段階的なデプロイが可能になります。",
        "Other Options": [
            "HalfAtATime は、半分のインスタンスを一度に更新するため、20% の段階的な展開の要件を満たしません。",
            "AllAtOnce は、新しいバージョンをすべてのインスタンスに同時にデプロイするため、制御された展開と監視を許可しません。",
            "OneAtATime は、一度に 1 つのインスタンスを更新するため、20% のインスタンスに迅速に展開する要件には効率的ではありません。"
        ]
    },
    {
        "Question Number": "16",
        "Situation": "ある企業が仮想プライベートクラウド（VPC）内にEC2インスタンスを展開しており、パブリックIPアドレスを持つインスタンスがパブリックDNSホスト名を解決できるようにする必要があります。VPCの設定には、この機能を有効にするための特定の設定が必要です。",
        "Question": "VPC内のEC2インスタンスがパブリックDNSホスト名を解決できるようにするために、どの2つの設定を構成する必要がありますか？（2つ選択）",
        "Options": {
            "1": "enableDnsSupportをtrueに設定する。",
            "2": "enableDnsHostnamesをfalseに設定する。",
            "3": "enableDnsSupportをfalseに設定する。",
            "4": "プライベートIPアドレスに対してenableDnsSupportをtrueに設定する。",
            "5": "enableDnsHostnamesをtrueに設定する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "enableDnsSupportをtrueに設定する。",
            "enableDnsHostnamesをtrueに設定する。"
        ],
        "Explanation": "VPC内のEC2インスタンスがパブリックDNSホスト名を解決するためには、enableDnsSupportとenableDnsHostnamesの両方の属性をtrueに設定する必要があります。enableDnsSupportはインスタンスがAmazon提供のDNSサーバーを使用できるようにし、enableDnsHostnamesはパブリックIPアドレスを持つインスタンスが対応するパブリックDNS名を受け取ることを保証します。",
        "Other Options": [
            "enableDnsHostnamesをfalseに設定すると、インスタンスがパブリックDNSホスト名を受け取れなくなり、解決に必要です。",
            "enableDnsSupportをfalseに設定すると、Amazon提供のDNSサーバーが無効になり、パブリックホスト名を含むDNS解決ができなくなります。",
            "プライベートIPアドレスに対してenableDnsSupportをtrueに設定しても、パブリックDNSホスト名の解決要件には対応しません。"
        ]
    },
    {
        "Question Number": "17",
        "Situation": "ある医療機関が患者データをAWSに移行しています。この情報の機密性を考慮し、組織はHIPAA規制に準拠し、データを最低6年間保持する必要があります。組織は、規制要件に従ってこのデータを保存、管理、保護するためのオプションを評価しています。",
        "Question": "組織は、機密患者データの管理を簡素化しながら、データ保持および機密性要件に準拠するためにどのAWSサービスまたは機能を利用すべきですか？",
        "Options": {
            "1": "Amazon RDSを自動バックアップとスナップショットを使用して実装し、患者データを必要な期間保持します。",
            "2": "AWS Backupを利用して、患者データの保持期間を強制するなど、すべてのAWSリソースのバックアップポリシーを管理します。",
            "3": "Amazon S3をObject Lockと共に使用して、保持ポリシーを強制し、必要な期間患者データの削除を防ぎます。",
            "4": "Amazon DynamoDBに患者データを保存し、Time to Live（TTL）を有効にして6年後に自動的にレコードを削除します。"
        },
        "Correct Answer": "Amazon S3をObject Lockと共に使用して、保持ポリシーを強制し、必要な期間患者データの削除を防ぎます。",
        "Explanation": "Amazon S3のObject Lockは、指定された期間オブジェクトの削除を防ぐことでデータ保持要件を満たすように特別に設計されており、HIPAA規制に準拠するのに適しています。これにより、医療機関は患者データが法定の保持期間が終了する前に削除されないことを保証できます。",
        "Other Options": [
            "Amazon RDSを自動バックアップとスナップショットで実装することはデータベース管理の良い実践ですが、S3のObject Lockと同じレベルの保持強制を提供しないため、コンプライアンスリスクを引き起こす可能性があります。",
            "Amazon DynamoDBに患者データをTTLを有効にして保存すると、自動削除が行われ、最低6年間機密データを保持するという要件に矛盾します。",
            "AWS Backupを利用することはAWSサービス全体のバックアップ管理に役立ちますが、S3のObject Lockのように保持ポリシーを同じ方法で強制することは本質的に行いません。"
        ]
    },
    {
        "Question Number": "18",
        "Situation": "ある金融サービス会社が月次のAWS支出を分析し、コスト最適化の領域を特定する必要があります。同社はEC2、S3、RDSなどのさまざまなAWSサービスを使用しており、複雑な請求構造を持っています。彼らはAWSコストと使用状況レポート（CUR）を詳細に分析し、使用パターンを理解し、異常を特定し、異なる部門間でコストを正確に配分したいと考えています。チームは、これらの目的を達成するためにCURを効果的に利用する方法がわかりません。",
        "Question": "会社がAWSコストと使用状況レポートを詳細に調査するための最良のアプローチはどれですか？",
        "Options": {
            "1": "AWS Cost Explorerを利用して使用傾向を視覚化し、サービス、リンクされたアカウント、タグでフィルタリングして特定のコストドライバーや異常を特定します。",
            "2": "毎日コストと使用状況レポートを処理するスケジュールされたLambda関数を設定し、各部門のCSVファイルを生成してコストの追跡を容易にします。",
            "3": "コストと使用状況レポートをS3バケットにダウンロードし、Amazon Athenaを使用してデータを分析し、異なる部門間でのコスト配分やアドホッククエリを行います。",
            "4": "AWS Budgetsを使用して特定のサービス使用閾値に基づいてアラートを作成し、コストが重要になる前にチームが変化に反応できるようにします。"
        },
        "Correct Answer": "コストと使用状況レポートをS3バケットにダウンロードし、Amazon Athenaを使用してデータを分析し、異なる部門間でのコスト配分やアドホッククエリを行います。",
        "Explanation": "コストと使用状況レポートをS3バケットにダウンロードし、Amazon Athenaを使用することで、データに対して詳細な分析やアドホッククエリを実行でき、コストや使用パターンをより詳細に理解できます。この方法により、会社は特定の関心領域を効率的に調査し、部門間でコストを正確に配分できます。",
        "Other Options": [
            "AWS Cost Explorerは傾向を視覚化し、高レベルの使用パターンを理解するのに役立ちますが、Cost and Usage Reportsの詳細な分析にはAthenaのクエリ機能が不足しています。",
            "スケジュールされたLambda関数を設定してCSVファイルを生成することは有用ですが、Athenaで生データをクエリするのと同じレベルの詳細や柔軟性を提供しない可能性があります。",
            "AWS Budgetsは閾値に対する支出を監視するのに効果的ですが、会社がコスト配分や使用パターンを詳細に調査するために必要な洞察を提供しません。"
        ]
    },
    {
        "Question Number": "19",
        "Situation": "金融サービス会社がAWSのVPCにウェブアプリケーションを展開しています。このアプリケーションは、規制基準に準拠するために、入出力トラフィックに対して厳格な制御を必要とします。ソリューションアーキテクトは、正当なトラフィックがブロックされないようにしながら、許可されたトラフィックフローを定義するためのセキュリティ対策を実装する必要があります。アーキテクトは、これらのフローを管理するために、セキュリティグループとネットワークACLの両方を効果的に活用しなければなりません。（2つ選択してください）",
        "Question": "要件を満たすためにソリューションアーキテクトが取るべき行動はどれですか？",
        "Options": {
            "1": "確立された接続を除くすべての受信トラフィックを拒否するネットワークACLを構成します。",
            "2": "特定のCIDRブロックからの受信トラフィックを許可するネットワークACLルールを実装します。",
            "3": "任意の宛先へのすべての送信トラフィックを許可するセキュリティグループを設定します。",
            "4": "特定のIPアドレスからのHTTPおよびHTTPSトラフィックを許可するセキュリティグループを作成します。",
            "5": "すべてのトラフィックを監視し、パターンを分析するためにネットワークACLでフローログを有効にします。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "特定のIPアドレスからのHTTPおよびHTTPSトラフィックを許可するセキュリティグループを作成します。",
            "特定のCIDRブロックからの受信トラフィックを許可するネットワークACLルールを実装します。"
        ],
        "Explanation": "正しい回答は、信頼できるIPアドレスからの特定のHTTPおよびHTTPSトラフィックを許可するためにセキュリティグループを使用し、正当なリクエストのみが処理されることを保証することを含みます。さらに、特定のCIDRブロックからの受信トラフィックを許可するネットワークACLルールを実装することで、セキュリティコンプライアンスを維持しながら、より広範なトラフィックフローを制御することができます。",
        "Other Options": [
            "確立された接続を除くすべての受信トラフィックを拒否するネットワークACLを構成することは、制限が厳しすぎて、確立された接続の一部でない正当なトラフィックをブロックする可能性があります。",
            "すべてのトラフィックを監視し、パターンを分析するためにネットワークACLでフローログを有効にすることは、トラフィックフローを直接制御するものではなく、セキュリティ対策というよりは監視ソリューションです。",
            "任意の宛先へのすべての送信トラフィックを許可するセキュリティグループを設定することは、セキュリティの観点から良いプラクティスではなく、アプリケーションを不必要なリスクにさらす可能性があります。"
        ]
    },
    {
        "Question Number": "20",
        "Situation": "金融サービス会社がアプリケーションをAWSに移行しており、クラウドインフラストラクチャ全体でのユーザーアクションとサービスインタラクションの包括的なトレーサビリティを確保する必要があります。セキュリティとコンプライアンスの目的で活動を追跡および分析できるソリューションを実装したいと考えています。同社は、Amazon S3、Amazon RDS、AWS Lambdaなどの複数のAWSサービスを使用しており、すべての関連イベントをキャプチャする集中化されたログメカニズムが必要です。",
        "Question": "AWS環境におけるユーザーとサービスの包括的なトレーサビリティを達成するための最良のアプローチはどれですか？",
        "Options": {
            "1": "すべてのアカウントとリージョンでAWS CloudTrailを有効にして、すべてのAWSサービスのAPIコールとユーザーアクティビティをキャプチャし、Amazon CloudWatch Logsを構成してログを監視および分析します。",
            "2": "Amazon CloudWatch Eventsを展開してAWSサービスからのイベントをキャプチャし、AWS Lambdaを使用してこれらのイベントを処理しますが、APIコールの追跡のためにAWS CloudTrailを有効にしません。",
            "3": "Amazon GuardDutyを実装して悪意のある活動と不正行為を継続的に監視し、AWS環境でのセキュリティイベントのログ記録にそれだけに依存します。",
            "4": "AWS Configを使用してAWSリソースの構成変更を追跡し、特定の変更に対してSNS通知を設定しますが、ユーザーアクションのための集中化されたログソリューションはありません。"
        },
        "Correct Answer": "すべてのアカウントとリージョンでAWS CloudTrailを有効にして、すべてのAWSサービスのAPIコールとユーザーアクティビティをキャプチャし、Amazon CloudWatch Logsを構成してログを監視および分析します。",
        "Explanation": "AWS CloudTrailを有効にすることで、ユーザーとサービスによって行われたすべてのAPIコールの包括的なビューが提供され、トレーサビリティに不可欠です。Amazon CloudWatch Logsと組み合わせることで、リアルタイムでのログの監視と分析が可能になり、コンプライアンスとセキュリティを確保します。",
        "Other Options": [
            "Amazon GuardDutyを単独で実装することは、すべてのユーザーアクションとサービスインタラクションの包括的なトレーサビリティを提供しません。なぜなら、主に脅威検出に焦点を当てており、ユーザーアクティビティの詳細なログ記録を見逃す可能性があるからです。",
            "AWS Configを使用することは、構成変更の追跡に限定され、ユーザーアクションやAPIコールをキャプチャしないため、包括的なトレーサビリティとコンプライアンスの目的には重要です。",
            "AWS CloudTrailを有効にせずにAmazon CloudWatch Eventsを展開することは、APIコールとユーザーアクティビティの追跡能力を制限し、AWS環境全体でのアクションの包括的なトレーサビリティには不十分です。"
        ]
    },
    {
        "Question Number": "21",
        "Situation": "メディア会社がAmazon S3を使用して動画コンテンツを保存しており、世界中のユーザーがアクセスしています。彼らは、URLをそのままにしておきながら、認可されたユーザーのみが動画にアクセスできるようにしたいと考えています。さらに、個々のURLを生成することなく、複数の動画への安全なアクセスを提供する必要があります。ソリューションアーキテクトは、これらの要件を満たすソリューションを設計しなければなりません。",
        "Question": "メディア会社の動画コンテンツに対してURL署名を実装するための最良のアプローチはどれですか？",
        "Options": {
            "1": "動画への公開アクセスを許可するS3バケットポリシーを設定しますが、IPアドレスに基づいてアクセスを制限します。",
            "2": "各動画リクエストに対してユニークなURLを生成するカスタム認証システムを作成し、認証されたユーザーのみがアクセスできるようにします。",
            "3": "CloudFrontを構成して署名付きURLと署名付きクッキーを使用し、ユーザーが単一の署名付きクッキーで複数の動画にアクセスできるようにし、アクセスを制御します。",
            "4": "AWS Lambdaを使用して各動画の事前署名付きURLを生成し、ユーザーに送信して、限られた有効期限を持たせます。"
        },
        "Correct Answer": "CloudFrontを構成して署名付きURLと署名付きクッキーを使用し、ユーザーが単一の署名付きクッキーで複数の動画にアクセスできるようにし、アクセスを制御します。",
        "Explanation": "CloudFrontの署名付きURLと署名付きクッキーを使用することで、メディア会社はURLを変更することなく複数の動画ファイルへのアクセスを効率的に制御でき、よりユーザーフレンドリーな体験を提供しつつ、セキュリティを確保します。",
        "Other Options": [
            "AWS Lambdaを使用して各動画の事前署名付きURLを生成することは、生成されるURLの数が過剰になり、複数の動画を視聴する必要があるユーザーのアクセスを複雑にする可能性があります。",
            "IPアドレスに基づいて公開アクセスのためのS3バケットポリシーを設定することは、IP範囲が厳密に制御されていない場合、コンテンツを不正なユーザーにさらす可能性があります。",
            "カスタム認証システムを作成することは不必要な複雑さと管理の負担を追加し、CloudFrontの既存の機能を使用するよりも効率が悪くなります。"
        ]
    },
    {
        "Question Number": "22",
        "Situation": "小売会社が全国の店舗にあるポイントオブセール（POS）システムからリアルタイムの販売データを収集しています。彼らはこのデータを分析して顧客の購買行動やトレンドに関する洞察を得たいと考えています。これを実現するために、信頼性の高いストリーミングデータをデータレイクにロードするサービスの利用を検討しています。",
        "Question": "ソリューションアーキテクトは、最小限の管理オーバーヘッドでAmazon S3にストリーミングデータをキャプチャしてロードするために、どのAWSサービスを推奨すべきですか？",
        "Options": {
            "1": "Amazon Kinesis Data Firehose",
            "2": "Amazon SQS",
            "3": "AWS Lambda",
            "4": "Amazon Kinesis Data Streams"
        },
        "Correct Answer": "Amazon Kinesis Data Firehose",
        "Explanation": "Amazon Kinesis Data Firehoseは、継続的な管理を必要とせずにAmazon S3のようなサービスにストリーミングデータをロードするために特別に設計されており、このユースケースに最適です。データの変換とデータレイクへの直接ロードを処理し、リアルタイム分析機能を提供します。",
        "Other Options": [
            "Amazon Kinesis Data Streamsはリアルタイム処理機能を提供するために設計されているため、より多くの管理と設定が必要であり、Kinesisクライアントを使用してデータを読み取り処理する必要があります。",
            "AWS Lambdaはデータを処理するために使用できるサーバーレスコンピューティングサービスですが、ストリーミングデータをデータレイクにロードするために特別に設計されていないため、このシナリオにはあまり適していません。",
            "Amazon SQSは、デカップリングされたマイクロサービスが通信するためのメッセージキューイングサービスですが、ストリーミングデータをデータレイクや他の分析サービスに直接ロードする機能を提供しません。"
        ]
    },
    {
        "Question Number": "23",
        "Situation": "金融サービス会社がAWS上にホストされたマイクロサービスアーキテクチャのためにCI/CDパイプラインを実装しています。彼らはダウンタイムを最小限に抑え、障害が発生した場合に迅速にロールバックできるデプロイメント戦略を必要としています。アプリケーションは自動テストと既存の監視ツールとの統合をサポートしなければなりません。会社はデプロイ中のシームレスなユーザー体験を確保することに特に懸念を持っています。",
        "Question": "ダウンタイムを最小限に抑え、迅速なロールバックを可能にするために、ソリューションアーキテクトはどのデプロイメント戦略を推奨すべきですか？",
        "Options": {
            "1": "AWS CodeDeployを使用したローリングデプロイメント戦略を採用します。古いバージョンの一部を稼働させながら、インスタンスをバッチで更新します。これにより徐々に移行できますが、ロールバックプロセスが複雑になる可能性があります。",
            "2": "AWS Elastic Beanstalkを使用したブルー/グリーンデプロイメント戦略を実装します。現在のバージョン用と新しいバージョン用の2つの同一環境を作成します。テストが成功したら新しい環境にトラフィックをルーティングし、問題が発生した場合は簡単に戻すことができます。",
            "3": "AWS CodeDeployを使用した一括デプロイメント戦略を利用します。新しいバージョンをすべてのインスタンスに同時にデプロイし、問題を監視します。必要に応じてロールバックしますが、デプロイ中にダウンタイムが発生する可能性があります。",
            "4": "AWS Lambdaを使用したカナリアデプロイメント戦略を採用します。最初に新しいバージョンを少数のユーザーにデプロイし、反応を監視してから全ユーザーに展開します。"
        },
        "Correct Answer": "AWS Elastic Beanstalkを使用したブルー/グリーンデプロイメント戦略を実装します。現在のバージョン用と新しいバージョン用の2つの同一環境を作成します。テストが成功したら新しい環境にトラフィックをルーティングし、問題が発生した場合は簡単に戻すことができます。",
        "Explanation": "ブルー/グリーンデプロイメント戦略は、アプリケーションバージョン間のシームレスな切り替えを可能にし、ダウンタイムを最小限に抑え、デプロイ後に問題が発生した場合の簡単なロールバックメカニズムを提供します。このアプローチにより、更新中もユーザー体験が中断されることはありません。",
        "Other Options": [
            "一括デプロイメント戦略は、すべてのインスタンスが同時に更新されるため、重大なダウンタイムを引き起こす可能性があります。ロールバックは可能ですが、ユーザーの中断の可能性があるため、このアプローチは会社のニーズにはあまり適していません。",
            "ローリングデプロイメント戦略はインスタンスをバッチで更新するため、ダウンタイムを減らすのに役立ちます。しかし、古いバージョンのユーザーと新しいバージョンのユーザーが混在するため、ロールバックプロセスが複雑になり、一貫性のない動作を引き起こす可能性があります。",
            "カナリアデプロイメント戦略は、新しいバージョンを最初に少数のユーザーでテストするのに有益です。しかし、ブルー/グリーンほど効果的な完全なロールバックオプションを提供せず、Lambda関数の追加設定と監視が必要になる場合があります。"
        ]
    },
    {
        "Question Number": "24",
        "Situation": "ある会社が信頼性の高いメッセージキューイングサービスを必要とするマイクロサービスアプリケーションを開発しています。彼らはこの目的のためにAmazon SQSの使用を検討しています。彼らが考慮しなければならない重要な制約の一つは、SQSを通じて送信できるメッセージの最大サイズです。",
        "Question": "Amazon SQSを通じて送信できるメッセージの最大サイズは何ですか？",
        "Options": {
            "1": "128,000バイト",
            "2": "512,000バイト",
            "3": "262,144バイト",
            "4": "256,000バイト"
        },
        "Correct Answer": "262,144バイト",
        "Explanation": "Amazon SQSの最大メッセージサイズは262,144バイト（256 KB）です。この制限は、SQSキューに送信できる各個別メッセージのサイズに適用され、メッセージが軽量であり、伝送が効率的であることを保証します。",
        "Other Options": [
            "128,000バイトは不正解です。これは262,144バイトの実際の最大メッセージサイズ制限を大きく下回っています。",
            "256,000バイトは不正解です。これは262,144バイトの最大メッセージサイズ制限を下回っています。",
            "512,000バイトは不正解です。これは262,144バイトの最大メッセージサイズ制限を超えており、SQSにとって無効なオプションです。"
        ]
    },
    {
        "Question Number": "25",
        "Situation": "ある企業がデータ分析のために Amazon Redshift を使用しており、災害復旧戦略を強化したいと考えています。彼らはデータを別の AWS リージョンに自動的にバックアップする必要があります。Redshift クラスターは KMS で暗号化されており、コンプライアンス要件を遵守しながらスナップショットをリージョン間でコピーできることを確認したいと考えています。",
        "Question": "KMS で暗号化された Amazon Redshift クラスターのリージョン間スナップショットを有効にする正しいプロセスは何ですか？",
        "Options": {
            "1": "自動スナップショットを有効にし、クラスター設定で宛先リージョンを指定します。",
            "2": "スナップショットコピーを有効にする前に、宛先リージョンで KMS カスタマーマスターキーを使用するための権限を Redshift に付与します。",
            "3": "AWS Management Console を使用して手動でスナップショットを宛先リージョンにコピーします。",
            "4": "KMS 暗号化の代わりにバックアップに S3 を使用するようにクラスター設定を変更します。"
        },
        "Correct Answer": "スナップショットコピーを有効にする前に、宛先リージョンで KMS カスタマーマスターキーを使用するための権限を Redshift に付与します。",
        "Explanation": "KMS で暗号化された Amazon Redshift クラスターのリージョン間スナップショットを有効にするには、宛先リージョンで Amazon Redshift が KMS カスタマーマスターキー (CMK) を使用できるようにする権限を作成する必要があります。このステップは、クラスターが他のリージョンでスナップショットに必要な暗号化キーにアクセスできることを保証するために重要です。",
        "Other Options": [
            "自動スナップショットを有効にして宛先リージョンを指定するだけでは不十分で、暗号化のための KMS 権限を処理する必要があります。",
            "スナップショットを手動でコピーすることは、継続的なバックアップのための実行可能または自動化された解決策ではありません。リージョン間スナップショット機能は自動化されるように設計されています。",
            "バックアップに S3 を使用するようにクラスター設定を変更することは、Redshift スナップショットのコピーには適用されず、リージョン間の自動スナップショットの要件を満たしません。"
        ]
    },
    {
        "Question Number": "26",
        "Situation": "グローバル企業が AWS Organizations を使用してさまざまなビジネスユニットを管理するためのマルチアカウント戦略を実装したいと考えています。企業はまた、ガバナンスとコンプライアンスのために AWS Control Tower を活用する計画です。ソリューションアーキテクトは、すべてのアカウントに対して中央管理、請求、およびコンプライアンスを可能にしつつ、各ビジネスユニットが自分のリソースに対して自律性を持つことを許可するソリューションを設計する必要があります。",
        "Question": "要件を最もよく満たすために、ソリューションアーキテクトはどのようなソリューションを実装すべきですか？",
        "Options": {
            "1": "AWS Organization 内に各ビジネスユニット用の複数の OU を作成し、OU レベルで SCP を適用してコンプライアンスと中央管理を管理します。",
            "2": "すべてのアカウントをルート OU に配置した単一の AWS Organization を設定し、各アカウントに対してサービスコントロールポリシー (SCP) を有効にしてコンプライアンスを強制します。",
            "3": "AWS Control Tower を実装してガバナンスフレームワークを作成し、すべてのアカウントを単一の OU に配置し、アカウントレベルで厳格な SCP を適用します。",
            "4": "AWS Control Tower を利用して事前構成されたアカウントを持つランディングゾーンを設定し、すべてのビジネスユニットに対してコンプライアンスを強制するためにルート OU で SCP を実装します。"
        },
        "Correct Answer": "AWS Organization 内に各ビジネスユニット用の複数の OU を作成し、OU レベルで SCP を適用してコンプライアンスと中央管理を管理します。",
        "Explanation": "複数の OU を作成することで、異なるビジネスユニットに対応するアカウントのより良い組織と管理が可能になり、OU レベルで SCP を適用することで、各ユニットのニーズに合わせたコンプライアンスを強制する柔軟な方法が提供されます。",
        "Other Options": [
            "すべてのアカウントをルート OU に設定し、各ビジネスユニット用の特定の OU がない場合、管理の複雑さが増し、個別のユニットに対する特定のポリシーがないため、コンプライアンスの強制が効果的でなくなる可能性があります。",
            "AWS Control Tower を利用してランディングゾーンを設定することは有益ですが、ルート OU でのみ SCP を適用すると、異なるビジネスユニット間でのコンプライアンス管理の粒度が制限される可能性があります。",
            "すべてのアカウントを単一の OU に配置し、アカウントレベルで厳格な SCP を適用すると、各ビジネスユニットの自律性が損なわれ、ガバナンスが複雑になる可能性があり、各ユニットのニーズに合わせた特定のポリシーを許可しません。"
        ]
    },
    {
        "Question Number": "27",
        "Situation": "金融サービス会社が、機密の顧客データを処理する新しいアプリケーションを AWS に展開しています。会社は、アプリケーションが厳格なセキュリティコンプライアンス要件を満たしつつ、リソースへの不正アクセスのリスクを最小限に抑える必要があります。",
        "Question": "業界の規制に準拠しながら、AWS 環境のセキュリティを強化するために、会社はどの戦略を実装すべきですか？",
        "Options": {
            "1": "AWS CloudTrail を有効にしてすべての API コールをログに記録し、AWS Config を設定してすべてのリソースのセキュリティポリシーに対するコンプライアンスを監視します。",
            "2": "機密データを保存するための Amazon S3 バケットを作成し、アプリケーションによるシームレスな取得を許可するために公開アクセスを有効にします。",
            "3": "未使用の IAM ロールとアクセスキーを削除するために定期的に実行される AWS Lambda 関数を実装して、攻撃面を減らします。",
            "4": "プライベートサブネット内のリソースへの SSH アクセスを許可し、他のすべての受信トラフィックを無効にするパスワードホストをパブリックサブネット内に設定します。"
        },
        "Correct Answer": "AWS CloudTrail を有効にしてすべての API コールをログに記録し、AWS Config を設定してすべてのリソースのセキュリティポリシーに対するコンプライアンスを監視します。",
        "Explanation": "AWS CloudTrail を有効にすると、AWS アカウント内で行われたすべての API コールをログに記録でき、コンプライアンス目的のための包括的な監査証跡を提供します。さらに、AWS Config はリソースの変更を追跡し、定義されたセキュリティポリシーに対するコンプライアンスを評価するのに役立ち、セキュリティを強化し、規制要件を満たすための効果的な戦略となります。",
        "Other Options": [
            "バスティオンホストを設定することで SSH アクセスのセキュリティを向上させることはできますが、機密アプリケーションにとって重要な全体的なコンプライアンス監視やログ記録には対処していません。",
            "未使用の IAM ロールとアクセスキーを削除するために Lambda 関数を実装することは攻撃面を減らすことができますが、機密データ処理に必要な包括的な監査とコンプライアンス監視を提供しません。",
            "公開アクセスを持つ S3 バケットを作成することは、機密データを露出させることでセキュリティを直接損なうため、AWS 環境におけるセキュリティとコンプライアンスを強化するという目標に反します。"
        ]
    },
    {
        "Question Number": "28",
        "Situation": "金融サービス会社は、オンプレミスのアプリケーションをAWSに移行する計画を立てています。彼らは特に、移行プロセス中のデータのセキュリティについて懸念しています。この会社は、AWS Database Migration Service (DMS)とAWS Application Migration Service (AWS MGN)の組み合わせを使用して移行を処理しています。彼らは、機密データが移行中および静止中に安全であることを確保したいと考えています。",
        "Question": "移行プロセス中にデータのセキュリティを強化するために、会社が実施すべき方法はどれですか？（2つ選択してください）",
        "Options": {
            "1": "移行インスタンスをパブリックサブネットで起動し、移行中のアクセスを容易にします。",
            "2": "AWS CloudTrailを有効にして、コンプライアンスおよび監査目的のために移行サービスによって行われたAPIコールを追跡します。",
            "3": "AWS Key Management Service (KMS)を使用して、ターゲットAWS環境内の静止データの暗号化キーを管理します。",
            "4": "S3バケットポリシーを構成して、移行ツールが一時データを保存するための無制限のアクセスを許可します。",
            "5": "DMSおよびAWS MGNの移行中に機密データを保護するために、TLSを使用して転送中の暗号化を実装します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "DMSおよびAWS MGNの移行中に機密データを保護するために、TLSを使用して転送中の暗号化を実装します。",
            "AWS Key Management Service (KMS)を使用して、ターゲットAWS環境内の静止データの暗号化キーを管理します。"
        ],
        "Explanation": "TLSを使用して転送中の暗号化を実装することで、オンプレミス環境とAWS間で移動するデータが傍受から保護されます。さらに、AWS KMSを使用して静止データの暗号化キーを管理することで、AWSに保存された機密データが安全であり、データ保護のベストプラクティスに準拠していることが保証されます。",
        "Other Options": [
            "移行インスタンスをパブリックサブネットで起動すると、インターネットにさらされ、移行中に機密データへの不正アクセスのリスクが高まります。適切なセキュリティ対策を講じたプライベートサブネットを使用することが推奨されます。",
            "AWS CloudTrailを有効にすることは活動を追跡するための良いプラクティスですが、移行中のデータのセキュリティを直接強化するものではありません。データ自体を保護するのではなく、ログ記録に焦点を当てています。",
            "S3バケットポリシーで無制限のアクセスを許可すると、不正アクセスやデータ漏洩につながる可能性があります。移行中にデータにアクセスできる人を制限するために、最小特権アクセスを実装することが重要です。"
        ]
    },
    {
        "Question Number": "29",
        "Situation": "金融サービス会社は、Amazon S3に保存されている機密データを保護するために、顧客提供のキーを使用したサーバーサイド暗号化（SSE-C）を実装しています。アプリケーションは、暗号化されたオブジェクトをアップロードおよび取得するためにREST APIコールを行い、データの整合性とセキュリティを維持するために、各リクエストに正しいHTTPヘッダーが含まれていることを確認することが重要です。開発チームは、プレサインドURLを使用する際のSSE-C暗号化に必要なヘッダーを理解する必要があります。",
        "Question": "Amazon S3で顧客提供のキーを使用したサーバーサイド暗号化（SSE-C）にプレサインドURLを使用する際に含める必要があるHTTPリクエストヘッダーはどれですか？",
        "Options": {
            "1": "x-amz-server-side-encryption-customer-algorithm, x-amz-server-side-encryption-customer-key, x-amz-server-side-encryption-customer-key-MD5",
            "2": "x-amz-server-side-encryption-customer-key, x-amz-server-side-encryption-customer-key-MD5",
            "3": "x-amz-server-side-encryption-customer-algorithm, x-amz-server-side-encryption-customer-key",
            "4": "x-amz-server-side-encryption-customer-algorithm"
        },
        "Correct Answer": "x-amz-server-side-encryption-customer-algorithm",
        "Explanation": "Amazon S3でSSE-CのためにプレサインドURLを使用する際に必要なHTTPヘッダーは、暗号化アルゴリズムを指定するための'x-amz-server-side-encryption-customer-algorithm'のみです。他のヘッダーは、プレサインドURLを使用する際には必要ありません。顧客キーとそのMD5ハッシュは初期リクエストには含まれません。",
        "Other Options": [
            "このオプションは、プレサインドURLに必要ない不要なヘッダーを含んでいるため不正解です。アルゴリズムヘッダーのみが必須です。",
            "このオプションは、プレサインドURLを使用する際に暗号化アルゴリズムを指定するための必要なヘッダーが欠けているため不正解です。",
            "このオプションは、プレサインドURLを使用する際にSSE-Cのための必要なアルゴリズムヘッダーを含んでいないため不正解です。"
        ]
    },
    {
        "Question Number": "30",
        "Situation": "金融サービス会社は、ウェブ層、アプリケーション層、およびデータベース層を含むマルチティアアプリケーションをAWSに展開しています。会社は、規制要件の遵守、問題のトラブルシューティング、およびパフォーマンスの最適化を確保するために、包括的なログ記録および監視戦略が必要です。アプリケーションは、ウェブおよびアプリケーション層にAmazon EC2インスタンスを、データベースにAmazon RDSを利用します。会社は、運用オーバーヘッドを最小限に抑えながら、セキュリティとアクセス制御を最大化するソリューションを実装することを目指しています。",
        "Question": "会社が要件を満たすために採用すべきログ記録および監視戦略はどれですか？",
        "Options": {
            "1": "EC2インスタンスにオープンソースのログ記録ソリューションを展開し、ログを収集して集中管理します。基本的な監視にはAmazon CloudWatchを使用し、コンプライアンス目的のためにログデータの定期的なバックアップをS3に設定するためのcronジョブを設定します。",
            "2": "アプリケーションおよびインフラストラクチャの監視にはAmazon CloudWatchを実装し、すべてのAPIコールをログ記録するためにAWS CloudTrailを使用します。潜在的な問題を運用チームに通知するためにカスタムメトリクスとアラームを設定します。セキュリティ監視と脅威検出のためにAmazon GuardDutyを統合します。",
            "3": "Amazon CloudWatch Logsを利用して、EC2インスタンスとRDSからのアプリケーションログを集約します。AWS Lambdaを設定してログを処理し、重要なイベントに対してAmazon SNSを介してアラートを送信します。AWS Systems Managerを使用して運用タスクを管理および自動化します。",
            "4": "アプリケーション全体のリクエストをトレースするためにAWS X-Rayを利用し、システムパフォーマンスの監視にはAmazon CloudWatchを組み合わせます。AWS Configを使用して構成変更を追跡し、APIコールのログ記録にはAWS CloudTrailを使用して、包括的な監査証跡を確保します。"
        },
        "Correct Answer": "アプリケーションおよびインフラストラクチャの監視にはAmazon CloudWatchを実装し、すべてのAPIコールをログ記録するためにAWS CloudTrailを使用します。潜在的な問題を運用チームに通知するためにカスタムメトリクスとアラームを設定します。セキュリティ監視と脅威検出のためにAmazon GuardDutyを統合します。",
        "Explanation": "このオプションは、規制遵守を満たし、トラブルシューティングを可能にし、パフォーマンスを最適化する包括的なログ記録および監視戦略を提供します。Amazon CloudWatchはリアルタイムの監視とアラートを可能にし、AWS CloudTrailはAPIコールの完全な監査証跡を確保し、Amazon GuardDutyは重要なセキュリティ監視のレイヤーを追加します。",
        "Other Options": [
            "AWS X-Rayをトレースに使用し、Amazon CloudWatchを監視に使用することは有益ですが、Amazon GuardDutyが提供する包括的なセキュリティ監視と脅威検出機能、ならびにAWS CloudTrailが提供する焦点を絞ったAPIログ記録が欠けています。",
            "Amazon CloudWatch Logsでログを集約し、AWS Lambdaを介して処理することは一部の監視機能を提供しますが、規制遵守に不可欠な広範なAPIログ記録およびセキュリティ機能を提供しません。",
            "オープンソースのログ記録ソリューションを展開すると、運用オーバーヘッドが増加し、メンテナンスの課題が生じる可能性があり、AWSの監視およびログ記録の管理サービスを最大限に活用できません。これらはセキュリティ、コンプライアンス、使いやすさを確保するために設計されています。"
        ]
    },
    {
        "Question Number": "31",
        "Situation": "ある金融サービス会社が、AWS上でホストされている重要なアプリケーションの災害復旧戦略を評価しています。災害発生時に最小限のダウンタイムとデータ損失を確保したいと考えています。同社は、アプリケーションのために4時間の復旧時間目標（RTO）と1時間の復旧ポイント目標（RPO）を定義しています。これらの目標を達成するために、さまざまなバックアップおよびレプリケーション戦略を検討しています。",
        "Question": "次のうち、同社がRTOおよびRPOの要件を満たすために最も適した戦略はどれですか？",
        "Options": {
            "1": "バージョン管理を有効にしたAmazon S3をストレージとして利用し、Amazon RDSのマルチAZデプロイメントを設定する。",
            "2": "すべてのデータに対してクロスリージョンレプリケーションを実装し、アプリケーションデプロイメントにAWS Elastic Beanstalkを使用する。",
            "3": "AWS Backupを使用してすべてのリソースのデイリーバックアップを作成し、単一のアベイラビリティゾーン内のAmazon EC2インスタンスにアプリケーションをデプロイする。",
            "4": "Amazon RDSの毎時スナップショットをスケジュールし、AWS Lambdaを使用してデータベースのフェイルオーバーをセカンダリリージョンに自動化する。"
        },
        "Correct Answer": "バージョン管理を有効にしたAmazon S3をストレージとして利用し、Amazon RDSのマルチAZデプロイメントを設定する。",
        "Explanation": "バージョン管理を有効にしたAmazon S3を利用することで、データ損失を最小限に抑え、1時間のRPOを満たすための信頼性の高いデータストレージを提供します。一方、Amazon RDSのマルチAZデプロイメントは高可用性と迅速なフェイルオーバー機能を確保し、4時間のRTOに合致します。",
        "Other Options": [
            "クロスリージョンレプリケーションを実装すると、レイテンシとコストが増加する可能性があり、耐久性を提供できますが、マルチAZデプロイメントほどRTOおよびRPOの要件に効果的に対処できない可能性があります。",
            "毎時スナップショットをスケジュールすることは、1時間のRPOを満たすには頻度が不十分であり、フェイルオーバーの自動化は有益ですが、RTOを満たすために必要な迅速な回復時間を保証するものではありません。",
            "デイリーバックアップを作成することは1時間のRPOを満たさず、その時間内に行われたデータ変更をキャプチャできません。また、単一のアベイラビリティゾーン内にアプリケーションをデプロイすることは、RTOを満たすために必要なレジリエンシーを提供しません。"
        ]
    },
    {
        "Question Number": "32",
        "Situation": "ある会社が、大規模なオンプレミスデータベースをAWSに移行する計画を立てています。このデータベースは約10TBのサイズで、移行中のダウンタイムを最小限に抑える必要があります。チームは、データの整合性とセキュリティを確保しながら、この移行を促進するためのさまざまなAWSサービスを検討しています。",
        "Question": "ダウンタイムを最小限に抑えてデータベースを移行するために、チームはどのAWSサービスと戦略を使用すべきですか？",
        "Options": {
            "1": "AWS DataSyncとAWS Schema Conversion Tool (SCT)",
            "2": "AWS SnowballとAWS Database Migration Service (DMS)",
            "3": "AWS Transfer FamilyとAmazon RDS Migration Readiness Review",
            "4": "AWS Direct Connectと手動データエクスポートおよびインポート"
        },
        "Correct Answer": "AWS SnowballとAWS Database Migration Service (DMS)",
        "Explanation": "AWS Snowballは、大量のデータをAWSに効率的に転送することを可能にします。AWS Database Migration Service (DMS)を併用することで、データ転送中に継続的なレプリケーションを行い、ダウンタイムを最小限に抑え、移行プロセス全体でデータの整合性を維持できます。",
        "Other Options": [
            "AWS DataSyncは主にファイル転送に使用され、データベースには適していません。また、AWS Schema Conversion Tool (SCT)はスキーマ変換に役立ちますが、最小限のダウンタイムでの大規模移行の要件には対応していません。",
            "AWS Direct Connectは専用のネットワーク接続を確立するのに役立ちますが、大規模なデータベースの移行を直接促進するものではありません。手動データエクスポートおよびインポートは、かなりのダウンタイムを引き起こす可能性があり、この状況には理想的ではありません。",
            "AWS Transfer Familyは、SFTPやFTPなどのプロトコルを使用してファイルを転送するために設計されており、データベース移行には適用されません。さらに、Amazon RDS Migration Readiness Reviewは準備段階であり、移行戦略ではありません。"
        ]
    },
    {
        "Question Number": "33",
        "Situation": "あるテクノロジー企業が、ウェブアプリケーションを使用して認証するユーザーにAWSリソースへの一時的なアクセスを提供するシステムを実装しています。このアプリケーションは、永続的なAWS IAMユーザーを作成することなく、特定のAWSサービスへの限られた時間のアクセスをユーザーに提供する必要があります。アーキテクチャは、ソリューションがスケーラブルであり、単一障害点を導入しないことを保証する必要があります。ユーザーアクセスを管理するための適切なアプローチを選択する任務を担っています。",
        "Question": "単一障害点のリスクを最小限に抑えながら、AWSリソースへの一時的なアクセスを提供するために、どのアプローチを実装すべきですか？",
        "Options": {
            "1": "AWS Security Token Service (STS)を使用して、認証時にユーザーに提供できる一時的な資格情報を生成し、資格情報に制限された権限を付与する。",
            "2": "従来のトークン検証モデル（TVM）を実装してユーザーアクセスを管理し、サービス固有の権限と資格情報の配信をユーザーに許可する。",
            "3": "Amazon Cognitoを使用してユーザー認証を管理し、AWS STSを通じて一時的な資格情報を発行し、単一障害点のないスケーラブルで安全なソリューションを提供する。",
            "4": "ユーザー認証とアクセスを管理するために、トークン検証モデル（TVM）のカスタムコードを実行するEC2インスタンスをデプロイし、資格情報が安全に配信されることを保証する。"
        },
        "Correct Answer": "Amazon Cognitoを使用してユーザー認証を管理し、AWS STSを通じて一時的な資格情報を発行し、単一障害点のないスケーラブルで安全なソリューションを提供する。",
        "Explanation": "Amazon Cognitoはユーザー認証のための堅牢なソリューションを提供し、AWS STSとシームレスに統合して一時的な資格情報を発行します。このアプローチは、カスタムTVM実装に関連する単一障害点を回避し、ユーザーアクセスの管理においてスケーラビリティとセキュリティを提供します。",
        "Other Options": [
            "AWS STS単独では一時的な資格情報を提供しますが、ユーザー認証を直接管理するものではありません。このアプローチは、ユーザープール管理や強化されたセキュリティなど、Amazon Cognitoが提供する追加機能を欠いています。",
            "従来のトークン検証モデル（TVM）を実装すると、特にEC2上でホストされる場合、単一障害点を導入する可能性があります。さらに、TVMはAmazon Cognitoのような現代的なソリューションと比較して時代遅れと見なされています。",
            "カスタムTVMのためにEC2インスタンスをデプロイすると、複雑さと運用上のオーバーヘッドが増加し、失敗のリスクが高まります。この方法は、ユーザーアクセスの管理においてAmazon Cognitoと同じレベルのスケーラビリティとセキュリティを提供しません。"
        ]
    },
    {
        "Question Number": "34",
        "Situation": "小売会社が、高可用性とトラフィックに基づいて自動的にスケールする能力を必要とする新しいeコマースアプリケーションを立ち上げる計画をしています。このアプリケーションは、特にプロモーションやホリデーセールの際に予測できないトラフィックパターンを経験します。会社は、デプロイメント戦略がダウンタイムを最小限に抑え、シームレスなユーザー体験を提供することを確実にしたいと考えています。",
        "Question": "会社がeコマースアプリケーションの高可用性とスケーラビリティを確保するために実施すべきデプロイメント戦略はどれですか？",
        "Options": {
            "1": "大きなEBSボリュームを持つ単一のEC2インスタンスにアプリケーションをデプロイし、スケーリングの通知を送信するCloudWatchアラームを設定します。",
            "2": "ロードバランサーの背後に複数のEC2インスタンスを持つElastic Beanstalk環境を利用し、CPU使用率メトリクスに基づいてオートスケーリングを設定します。",
            "3": "すべての受信リクエストを処理するためにAWS Lambda関数を使用し、EC2インスタンスを管理せずに自動的にスケールします。",
            "4": "複数のコンテナインスタンスを持つAmazon ECSクラスターを実装し、Fargateを使用してアプリケーションのスケーリングとデプロイメントを管理します。"
        },
        "Correct Answer": "ロードバランサーの背後に複数のEC2インスタンスを持つElastic Beanstalk環境を利用し、CPU使用率メトリクスに基づいてオートスケーリングを設定します。",
        "Explanation": "複数のEC2インスタンスを持つElastic Beanstalkを使用することで、アプリケーションはさまざまなトラフィック負荷に対応できます。ロードバランサーは受信トラフィックを分散し、オートスケーリングはCPU使用率に基づいてインスタンスの数を調整し、高可用性と効率的なリソース使用を実現します。",
        "Other Options": [
            "単一のEC2インスタンスにアプリケーションをデプロイすることは高可用性を提供せず、単一障害点を導入します。CloudWatchアラームはスケーリングの必要性を通知できますが、そもそも複数のインスタンスがなければ自動的にスケールすることはできません。",
            "AWS Lambdaを使用することで自動スケーリングが可能になり、サーバー管理を排除できますが、持続的な接続やステートフルセッションを必要とするワークロードには適さない場合があります。",
            "Fargateを使用したAmazon ECSはコンテナ管理の有効なオプションですが、Elastic Beanstalkのよりシンプルなデプロイメントモデルで効果的に管理できる新しいアプリケーションには不必要な複雑さをもたらす可能性があります。"
        ]
    },
    {
        "Question Number": "35",
        "Situation": "会社は、スケーラビリティとメンテナンス性を向上させるためにマイクロサービスアーキテクチャを開発しています。このアーキテクチャでは、サービスが独立しており、密接に結合されることなく別々に進化できる必要があります。開発チームは、マイクロサービス間の緩やかな依存関係を実装するためにさまざまなAWSサービスを検討しています。",
        "Question": "ソリューションアーキテクトがマイクロサービス間の緩やかな依存関係を可能にするために推奨すべき最も適切なソリューションは何ですか？",
        "Options": {
            "1": "各マイクロサービスのために直接API Gatewayエンドポイントを持つAWS Lambda関数をデプロイし、密接に統合されており、互いに直接呼び出せるようにします。",
            "2": "Amazon SNSを利用して、1つのマイクロサービスからイベントを公開し、他のマイクロサービスが購読できるようにし、デカップルされたイベント駆動アーキテクチャを実現します。",
            "3": "サービス間の非同期通信のためにAmazon SQSを実装し、直接の依存関係なしにメッセージを独立して処理できるようにします。",
            "4": "AWS AppSyncを使用して、すべてのマイクロサービスを接続するGraphQL APIを確立し、同期通信と共有データアクセスを確保します。"
        },
        "Correct Answer": "Amazon SNSを利用して、1つのマイクロサービスからイベントを公開し、他のマイクロサービスが購読できるようにし、デカップルされたイベント駆動アーキテクチャを実現します。",
        "Explanation": "Amazon SNSを利用することで、マイクロサービスが公開されたイベントを通じて通信できるようになり、緩やかな依存関係を実装するための強力なメカニズムを提供します。このアプローチにより、サービスは独立して運用でき、密接に統合されることなくスケールできるため、イベント駆動アーキテクチャを促進します。",
        "Other Options": [
            "非同期通信のためにAmazon SQSを実装することは有益ですが、主にメッセージキューイングに焦点を当てており、緩やかな依存関係により適したイベント駆動モデルではありません。",
            "AWS AppSyncを使用すると、同期通信を促進するGraphQL APIが確立され、サービス間の密接な結合を生む可能性があり、独立性を維持するという目標に反します。",
            "直接API Gatewayエンドポイントを持つAWS Lambda関数をデプロイすると、サービスが互いに直接呼び出すことになり、独立して進化することが難しくなるため、密接な結合を引き起こします。"
        ]
    },
    {
        "Question Number": "36",
        "Situation": "会社は、オンプレミスのアプリケーションをAWSに移行する計画を立てています。彼らは、互いに密接に結合されたレガシーアプリケーションと、いくつかの新しいクラウドネイティブアプリケーションを混在させています。これらのアプリケーションはビジネス運営にとって重要であり、会社は移行プロセス中のダウンタイムを最小限に抑えたいと考えています。ソリューションアーキテクトは、これらのワークロードに最適な移行アプローチを決定する必要があります。",
        "Question": "ソリューションアーキテクトがアプリケーションをAWSに移行する際にダウンタイムを最小限に抑えるために推奨すべき移行戦略はどれですか？",
        "Options": {
            "1": "レガシーアプリケーションを廃止し、データをAmazon RDSに移行し、ビジネス機能をクラウドネイティブアプリケーションに置き換えます。",
            "2": "AWS Application Migration Serviceを使用してレガシーアプリケーションをAWSにリフトアンドシフトし、移行プロセス中も運用を維持します。",
            "3": "レガシーアプリケーションをAmazon EC2インスタンスに再ホストしながら、新しいアプリケーションをAmazon ECSを使用してコンテナ化するために徐々にリファクタリングします。",
            "4": "すべてのアプリケーションをマイクロサービスにリファクタリングし、AWS Lambda関数としてデプロイしてサーバーレスアーキテクチャの利点を活用します。"
        },
        "Correct Answer": "AWS Application Migration Serviceを使用してレガシーアプリケーションをAWSにリフトアンドシフトし、移行プロセス中も運用を維持します。",
        "Explanation": "AWS Application Migration Serviceを使用したリフトアンドシフトアプローチにより、会社はダウンタイムを最小限に抑えながらレガシーアプリケーションを迅速に移行できます。この方法により、アプリケーションは大きな変更なしにAWSで実行でき、移行中のビジネスの継続性が確保されます。",
        "Other Options": [
            "レガシーアプリケーションを再ホストしながら新しいアプリケーションを徐々にリファクタリングすることは、密接に結合されたレガシーシステムが段階的な移行に適応しにくいため、ダウンタイムのリスクと複雑さを引き起こす可能性があります。",
            "すべてのアプリケーションをマイクロサービスにリファクタリングし、AWS Lambda関数としてデプロイすることは野心的なアプローチであり、広範な再アーキテクチャが必要になる可能性があり、移行中にダウンタイムが発生する可能性があります。",
            "レガシーアプリケーションを廃止し、データをAmazon RDSに移行し、ビジネス機能をクラウドネイティブアプリケーションに置き換えることは、重要なレガシーシステムからの移行が行われるため、重大なダウンタイムとビジネスの混乱を引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "37",
        "Situation": "スタートアップがAWS上で動作するマイクロサービスアプリケーションを開発しています。このアプリケーションは、特定のビジネス機能を担当する複数のサービスを持ちます。スタートアップは、コンテナをデプロイするためのさまざまなオプションを検討しており、高いスケーラビリティ、自動負荷分散、最小限の運用オーバーヘッドを提供するソリューションを選択することを確実にしたいと考えています。",
        "Question": "スタートアップがコスト効率的かつ効率的にマイクロサービスアプリケーションをデプロイするための要件を最も満たすオプションはどれですか？",
        "Options": {
            "1": "AWS Fargateを使用してAmazon ECS上にマイクロサービスをデプロイします。このサーバーレスオプションにより、スタートアップは基盤となるインフラストラクチャを管理することなくコンテナを実行できます。サービスオートスケーリングを構成し、ECSの組み込み負荷分散機能を使用してトラフィックを分散させます。",
            "2": "EC2起動タイプを使用してAmazon ECS上にマイクロサービスをデプロイします。変動する負荷に対応するためにオートスケーリングを構成し、トラフィック分散のためにElastic Load Balancerを使用します。基盤となるEC2インスタンスを管理し、適切に維持されていることを確認します。",
            "3": "Amazon EKS上にマイクロサービスをデプロイします。Kubernetesを利用してサービスのデプロイとスケーリングを管理します。動的スケーリングのためにクラスターオートスケーラーを構成し、負荷分散のためにKubernetesサービスを使用します。このオプションはKubernetes環境の管理を必要とします。",
            "4": "AWS Lambda上にマイクロサービスをデプロイします。各マイクロサービスを需要に基づいて自動的にスケールできるサーバーレス関数に分解します。API Gatewayを使用して負荷分散とトラフィック管理を行い、コンテナオーケストレーションの必要性を排除します。"
        },
        "Correct Answer": "AWS Fargateを使用してAmazon ECS上にマイクロサービスをデプロイします。このサーバーレスオプションにより、スタートアップは基盤となるインフラストラクチャを管理することなくコンテナを実行できます。サービスオートスケーリングを構成し、ECSの組み込み負荷分散機能を使用してトラフィックを分散させます。",
        "Explanation": "AWS Fargateを使用してAmazon ECS上にマイクロサービスをデプロイすることで、スタートアップはサーバーレス環境でコンテナを実行でき、基盤となるEC2インスタンスを管理する必要がなくなります。このオプションは自動スケーリングと組み込みの負荷分散を提供し、運用オーバーヘッドとコストを最小限に抑えつつ、彼らのニーズに最適です。",
        "Other Options": [
            "Amazon ECS上にEC2起動タイプでマイクロサービスをデプロイすることは、スタートアップが基盤となるEC2インスタンスを管理する必要があり、運用オーバーヘッドと複雑さが増します。スケールは可能ですが、Fargateが提供する管理の容易さには及びません。",
            "Amazon EKS上にマイクロサービスをデプロイすることは、Kubernetes環境の管理を必要とし、コンテナオーケストレーションの経験がないスタートアップには複雑です。スケーラビリティを提供しますが、Fargateと同じレベルの運用の簡素さは提供しません。",
            "AWS Lambda上にマイクロサービスをデプロイすることは、アプリケーションを個々の関数に分解する必要があり、関数管理の複雑さが増し、スタートアップが好むコンテナ化アプローチとは異なり、潜在的なコールドスタートの問題を引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "38",
        "Situation": "大手eコマース企業は、さまざまなクラウドサービスの使用増加により、AWSコストの予期しない急増を経験しています。この状況を管理するために、企業は包括的な支出と使用状況の認識戦略を実施する必要があります。ソリューションアーキテクトは、企業がAWSの支出を効果的に監視、分析、制御できるソリューションを提案する任務を負っています。",
        "Question": "AWSにおける支出と使用状況の認識コントロールを開発するための最良の戦略を提供するオプションはどれですか？",
        "Options": {
            "1": "AWS Budgetsを実装してカスタムコストと使用状況の予算を設定します。AWS CloudTrailを使用してサービスの使用状況をログに記録し、異常な支出パターンを特定するために定期的にログをレビューします。",
            "2": "AWS Trusted Advisorを利用してコスト最適化とサービス使用状況に関する洞察を得ます。これをAWS請求書の手動追跡と組み合わせて、包括的なビューを得ます。",
            "3": "AWS Organizationsを活用して複数のアカウント間で請求を統合します。事前定義されたレポートを使用してAWS Cost Explorerを実装し、チーム間の支出に関する洞察を得ます。",
            "4": "Amazon CloudWatchをデプロイしてサービスの使用状況を監視し、特定の閾値に対してアラームを設定します。AWS Cost Explorerを使用して支出の傾向を分析し、レポートを作成します。"
        },
        "Correct Answer": "AWS Budgetsを実装してカスタムコストと使用状況の予算を設定します。AWS CloudTrailを使用してサービスの使用状況をログに記録し、異常な支出パターンを特定するために定期的にログをレビューします。",
        "Explanation": "このオプションは、サービスの使用状況の詳細なログ記録と積極的な予算管理を効果的に組み合わせており、企業が財務制限を設定し、不規則な支出を調査することを可能にします。これは支出の認識を維持するために重要です。",
        "Other Options": [
            "Amazon CloudWatchをデプロイすることは使用状況を監視するのに役立ちますが、予算管理の必要性に直接対処せず、反応的な対策を招く可能性があります。",
            "AWS Trusted Advisorを利用することでコスト最適化に関する有用な洞察を得ることができますが、請求書の手動追跡のみに依存することは非効率的で、コスト問題の認識が遅れる可能性があります。",
            "AWS Organizationsを活用することで請求の統合を支援できますが、予算戦略や詳細な使用状況の監視を組み込まない限り、支出の認識に必要なコントロールを提供しない可能性があります。"
        ]
    },
    {
        "Question Number": "39",
        "Situation": "金融サービス会社が単一のアベイラビリティゾーンでAmazon EC2インスタンス上に重要なアプリケーションを運用しています。このアプリケーションは、基盤となるインフラストラクチャの利用不可により、時折ダウンタイムを経験しています。ソリューションアーキテクトは、アプリケーションのパフォーマンスに影響を与えずにフェイルオーバーを処理できる高可用性アーキテクチャを設計する任務を負っています。",
        "Question": "このアーキテクチャの単一障害点を最も効果的に修正するソリューションはどれですか？",
        "Options": {
            "1": "異なるアベイラビリティゾーンに複数のEC2インスタンスにアプリケーションをデプロイし、Elastic Load Balancerを使用してトラフィックを分散させます。",
            "2": "失敗した場合に異なるアベイラビリティゾーンにアプリケーションを自動的に再作成するCloudFormationスタックを設定します。",
            "3": "異なるアベイラビリティゾーンにAmazon RDSのリードレプリカを作成してデータベース層のフェイルオーバーを処理します。",
            "4": "Amazon Route 53を実装し、フェイルオーバールーティングポリシーを使用して、別のリージョンのセカンダリアプリケーションインスタンスにトラフィックを誘導します。"
        },
        "Correct Answer": "異なるアベイラビリティゾーンに複数のEC2インスタンスにアプリケーションをデプロイし、Elastic Load Balancerを使用してトラフィックを分散させます。",
        "Explanation": "異なるアベイラビリティゾーンに複数のEC2インスタンスにアプリケーションをデプロイし、Elastic Load Balancerを使用することで、1つのアベイラビリティゾーンが利用不可になった場合でも、トラフィックを他のアベイラビリティゾーンのインスタンスに誘導できるため、高可用性を提供し、ダウンタイムを最小限に抑えます。",
        "Other Options": [
            "異なるアベイラビリティゾーンにAmazon RDSのリードレプリカを作成することはデータベース層のみを対象としており、プライマリアプリケーションインスタンスが利用不可になった場合、アプリケーション全体の高可用性を提供しません。",
            "Amazon Route 53を実装し、フェイルオーバールーティングポリシーを使用することでセカンダリインスタンスにトラフィックを誘導することは可能ですが、このアプローチは負荷分散を積極的に管理せず、アプリケーションのリアルタイムフェイルオーバーを提供しないため、アプリケーションのダウンタイムを引き起こす可能性があります。",
            "CloudFormationスタックを設定してアプリケーションを異なるアベイラビリティゾーンに再作成することは複雑さを導入し、即時のフェイルオーバー機能を提供しない可能性があるため、再作成プロセス中にアプリケーションが脆弱な状態になる可能性があります。"
        ]
    },
    {
        "Question Number": "40",
        "Situation": "金融サービス会社がAWS上に新しいマルチティアアプリケーションを設計しています。このアプリケーションは機密性の高い顧客データを扱い、厳格な信頼性要件を満たす必要があります。アーキテクチャは、Amazon EC2ベースのウェブレイヤー、ロードバランサー、およびバックエンドのAmazon RDSデータベースで構成されています。会社は、複数のアベイラビリティゾーンにわたってアプリケーションの高可用性とフォールトトレランスを確保したいと考えています。また、潜在的なデータ損失に対処し、アプリケーションが障害から迅速に回復できるようにする方法も検討しています。会社が実装すべき戦略はどれですか？",
        "Question": "次のうち、信頼性要件を満たすのに役立つ戦略はどれですか？（2つ選択）",
        "Options": {
            "1": "Elastic Load Balancerを使用して、複数のアベイラビリティゾーンにあるAmazon EC2インスタンスにウェブレイヤーをデプロイします。",
            "2": "バックエンドデータベースにAmazon RDS Multi-AZデプロイメントを使用して、フェイルオーバーサポートを確保します。",
            "3": "コストと複雑さを削減するために、ウェブレイヤーに単一のEC2インスタンスを実装します。",
            "4": "RDSデータベースのバックアップにS3を利用して、迅速なデータ回復を可能にします。",
            "5": "ウェブレイヤーのトラフィックスパイクに対応し、可用性を確保するためにAuto Scalingグループを設定します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Elastic Load Balancerを使用して、複数のアベイラビリティゾーンにあるAmazon EC2インスタンスにウェブレイヤーをデプロイします。",
            "バックエンドデータベースにAmazon RDS Multi-AZデプロイメントを使用して、フェイルオーバーサポートを確保します。"
        ],
        "Explanation": "最初の正しい答えは、ウェブレイヤーが複数のアベイラビリティゾーンに分散され、冗長性と高可用性を提供することを保証します。2番目の正しい答えは、RDSデータベースが別のアベイラビリティゾーンのスタンバイインスタンスに自動的にフェイルオーバーできることを保証し、最小限のダウンタイムとデータ損失を確保します。",
        "Other Options": [
            "このオプションは冗長性が欠けており、単一障害点を作成するため、信頼性要件を満たしません。",
            "バックアップは重要ですが、即時のフェイルオーバー機能を提供せず、高可用性要件を満たすためには不可欠です。",
            "このオプションはトラフィック管理に役立ちますが、ウェブレイヤーのアベイラビリティゾーン全体での高可用性の必要性には対処していません。"
        ]
    },
    {
        "Question Number": "41",
        "Situation": "ある会社がオンプレミスのデータをAWSに移行しており、移行プロセス中のデータ転送コストを最適化したいと考えています。彼らは、大量のデータをAmazon S3に転送するためのさまざまなオプションを検討しており、データ転送料金に関連するコストを懸念しています。",
        "Question": "大量のデータをAmazon S3に移行する際に、データ転送コストを最小限に抑えるための最適な戦略はどれですか？",
        "Options": {
            "1": "Amazon Direct Connectを利用して、S3への継続的なデータ転送を行います。",
            "2": "AWS CLIを使用してインターネット経由でデータを直接S3にアップロードします。",
            "3": "最初にデータをAmazon EC2に転送し、その後S3にコピーします。",
            "4": "AWS Snowballを使用して、データを物理的にAWSに転送します。"
        },
        "Correct Answer": "AWS Snowballを使用して、データを物理的にAWSに転送します。",
        "Explanation": "AWS Snowballを使用することで、大規模なデータセットをAWSに物理的に転送でき、インターネット経由で大量のデータを転送する際のデータ転送コストを最小限に抑えることができます。Snowballは、大規模な移行に特にコスト効果が高く、高額な帯域幅料金を回避します。",
        "Other Options": [
            "AWS CLIを使用してインターネット経由でデータを直接S3にアップロードすると、大量のデータに対してかなりのデータ転送コストが発生する可能性があります。これは公共のインターネット帯域幅に依存しています。",
            "最初にデータをAmazon EC2に転送し、その後S3にコピーすることは、データ転送コストを削減するという主要な懸念に対処しておらず、EC2インスタンスからのデータ転送に追加料金が発生する可能性があります。",
            "Amazon Direct Connectを利用することで、一貫した大規模データ転送のための継続的なデータ転送コストを削減できますが、設定にはコストと時間がかかるため、初期の一括移行には理想的ではありません。"
        ]
    },
    {
        "Question Number": "42",
        "Situation": "金融サービス会社が高頻度取引アプリケーションのためのキャッシングレイヤーを設計しています。彼らは、大規模なデータセットを効率的に処理し、変動する需要に基づいて迅速にスケーリングできるキャッシングソリューションを必要としています。チームはまた、暗号化やデータ永続性などの複雑さのないシンプルなアーキテクチャを好みます。これらの要件を考慮して、ソリューションアーキテクトは適切なキャッシングソリューションを選択する必要があります。",
        "Question": "ソリューションアーキテクトは、会社の要件を満たすためにどのキャッシングソリューションを選択すべきですか？",
        "Options": {
            "1": "Memcachedを選択します。これはシンプルなアーキテクチャを提供し、大規模なノードのためのマルチコア使用をサポートします。",
            "2": "データを永続化でき、暗号化を提供するディスクベースのキャッシングソリューションを選択します。",
            "3": "必要ない場合でも、Redisの高度なデータ構造と永続性機能を使用します。",
            "4": "Amazon ElastiCacheをRedisで実装し、高可用性のために設定します。"
        },
        "Correct Answer": "Memcachedを選択します。これはシンプルなアーキテクチャを提供し、大規模なノードのためのマルチコア使用をサポートします。",
        "Explanation": "Memcachedは、このシナリオに最適な選択肢です。シンプルなキャッシングモデルを提供し、暗号化を必要とせず、複数のコアを効果的に利用し、大規模なノードを処理する際の最適なパフォーマンスを実現します。さらに、需要に応じてスケールアウトおよびスケールインをサポートします。",
        "Other Options": [
            "Redisは強力ですが、会社のシンプルさの要件と高度な機能の必要性がないことを考えると、不要な複雑さをもたらします。",
            "高可用性でRedisを実装すると、不要な複雑さと潜在的なコストが追加されます。会社は永続性や高度な設定を必要としないシンプルなソリューションを求めています。",
            "ディスクベースのキャッシングソリューションは、シンプルさと迅速なスケーリングの要件に反するため、適していません。会社はデータの永続性を必要としないと明言しています。"
        ]
    },
    {
        "Question Number": "43",
        "Situation": "金融サービス会社は、機密性の高い顧客データを処理しており、データ保護に関する厳格な規制要件を遵守する必要があります。彼らは、静止データと転送中のデータの両方に対して暗号化を実装する必要があります。会社は、データのライフサイクル全体にわたって機密性と整合性を確保する効果的なソリューションを探しています。",
        "Question": "会社が静止データと転送中のデータの要件を満たすために実装すべき暗号化ソリューションはどれですか？",
        "Options": {
            "1": "AWS Secrets Managerを実装して機密情報を暗号化し、AWS Direct Connectを使用してオンプレミスとAWS間の安全なデータ転送を行います。",
            "2": "AWS Key Management Service (KMS)を使用してAmazon S3オブジェクトの暗号化キーを作成および管理し、インターネット経由で転送されるデータにSSL/TLSを有効にします。",
            "3": "カスタムキー管理ソリューションを使用してAmazon S3のサーバーサイド暗号化を構成し、安全なデータ転送のためにVPNを設定します。",
            "4": "暗号化ストレージを持つAmazon RDSを利用し、アプリケーションとデータベース間で転送されるデータにIAM認証を使用して暗号化された接続を有効にします。"
        },
        "Correct Answer": "AWS Key Management Service (KMS)を使用してAmazon S3オブジェクトの暗号化キーを作成および管理し、インターネット経由で転送されるデータにSSL/TLSを有効にします。",
        "Explanation": "AWS Key Management Service (KMS)を使用することで、会社は暗号化キーを効果的に管理し、Amazon S3内の静止データが暗号化されていることを保証できます。さらに、SSL/TLSを有効にすることで、転送中のデータが暗号化され、データ保護に関する規制要件を満たすことができます。",
        "Other Options": [
            "暗号化ストレージを持つAmazon RDSを使用することで静止データの暗号化は提供されますが、IAM認証は転送中のデータを直接暗号化するわけではなく、アクセスを認可するだけであるため、このオプションは会社のニーズには不完全です。",
            "AWS Secrets Managerは機密情報の管理を目的としており、静止データや転送中のデータを包括的に暗号化するためのものではありません。AWS Direct Connectは安全ですが、単独では暗号化を提供せず、要件を完全には満たしません。",
            "Amazon S3のサーバーサイド暗号化は静止データを保護できますが、カスタムキー管理ソリューションを使用すると複雑さや潜在的なコンプライアンスの問題が生じる可能性があります。VPNは転送中のデータを保護できますが、インターネット経由のデータ転送の暗号化を保証するものではありません。"
        ]
    },
    {
        "Question Number": "44",
        "Situation": "金融サービス会社は、AWS Application Migration Service (AWS MGN)を使用して、オンプレミスのデータセンターからAWSにアプリケーションを移行する計画を立てています。会社には、移行中に最小限のダウンタイムを必要とする複数のレガシーアプリケーションがあります。彼らは、移行プロセスを自動化し、手動移行に一般的に関連するエラーのリスクを減らすアプローチを求めています。",
        "Question": "このシナリオでAWS Application Migration Service (AWS MGN)を最も効果的に活用する戦略はどれですか？アプリケーションをクラウドに最適化しながら、スムーズなリフトアンドシフト移行を確保するためには？",
        "Options": {
            "1": "会社は、AWS MGNを使用する前にアプリケーションをクラウドネイティブにリファクタリングするべきです。これにより、AWS環境での移行がよりシームレスになり、最適化が向上します。",
            "2": "会社は、AWS MGNのエージェントレススナップショットアプローチを使用して各サーバーの一時的なスナップショットを作成し、その後手動でアプリケーションをAWSに転送して、迅速なリフトアンドシフト移行を実現するべきです。",
            "3": "会社は、各ソースサーバーにAWS MGNエージェントをインストールしてデータを継続的にレプリケートし、カットオーバー中のダウンタイムを最小限に抑えつつ、アプリケーションが元の状態で移行されることを保証するべきです。",
            "4": "会社は、オンプレミスのサーバーとAWS環境を長期間同時に稼働させるAWS MGNのハイブリッド移行アプローチを利用し、最終的なカットオーバー前にアプリケーションが同期されることを確保するべきです。"
        },
        "Correct Answer": "会社は、各ソースサーバーにAWS MGNエージェントをインストールしてデータを継続的にレプリケートし、カットオーバー中のダウンタイムを最小限に抑えつつ、アプリケーションが元の状態で移行されることを保証するべきです。",
        "Explanation": "各ソースサーバーにAWS MGNエージェントを使用することで、データの継続的なレプリケーションが可能になり、ダウンタイムが減少し、手動移行プロセスに関連するリスクが最小限に抑えられます。これにより、アプリケーションを元の状態で移行でき、移行中のビジネスの継続性が維持されます。",
        "Other Options": [
            "エージェントレススナップショットアプローチを使用すると、一時的なスナップショットが作成されるだけで、進行中の変更をキャプチャできず、移行プロセス中にデータ損失や不整合が生じる可能性があります。",
            "AWS MGNを使用する前にアプリケーションをリファクタリングすることは、リフトアンドシフト移行には必要ありません。AWS MGNは、アプリケーション自体に変更を必要とせずに移行を促進するために特別に設計されています。",
            "ハイブリッド移行アプローチを利用すると、移行プロセスが複雑になり、2つの環境を同時に稼働させる期間が長くなり、リフトアンドシフト移行中のダウンタイムを最小限に抑えるには理想的ではありません。"
        ]
    },
    {
        "Question Number": "45",
        "Situation": "組織は、複数のアベイラビリティゾーンにわたってEC2インスタンスで実行されているさまざまなアプリケーションからAmazon S3バケットへの断続的な接続問題を経験しています。アプリケーションは仮想プライベートクラウド（VPC）にデプロイされており、VPCエンドポイントを使用してS3バケットに直接アクセスしています。組織は接続問題の根本原因を特定したいと考えています。",
        "Question": "AWSツールを使用してS3バケットへの接続問題をトラブルシューティングするために、どのアプローチが役立ちますか？",
        "Options": {
            "1": "AWS Trusted Advisorを利用してS3バケットの設定を分析し、誤って構成された設定を特定します。",
            "2": "AWS Configルールを実行して、EC2インスタンスがS3アクセスのベストプラクティスに準拠していることを確認します。",
            "3": "Amazon CloudWatch Logsを使用して、S3アクセスに関連するタイムアウトや接続エラーメッセージがアプリケーションログに記録されているか確認します。",
            "4": "EC2インスタンスをホストするサブネットのVPCフローログを有効にして、S3バケットへのトラフィックの流れを監視します。"
        },
        "Correct Answer": "EC2インスタンスをホストするサブネットのVPCフローログを有効にして、S3バケットへのトラフィックの流れを監視します。",
        "Explanation": "VPCフローログを有効にすることで、EC2インスタンスへのIPトラフィックに関する情報をキャプチャできます。このデータは、接続問題がネットワークの誤設定、セキュリティグループのルール、またはS3バケットへのトラフィックフローに影響を与える他の要因によるものであるかを特定するのに役立ちます。",
        "Other Options": [
            "Amazon CloudWatch Logsを使用してアプリケーションログを確認することでいくつかの洞察を得ることができますが、S3アクセスに直接影響を与えるネットワーク関連の問題を可視化することはできません。",
            "AWS Trusted Advisorは主にベストプラクティスの推奨を提供し、S3バケットのような特定のリソースとの接続問題を直接診断することはできません。",
            "AWS Configルールを実行することで準拠を確保できますが、接続問題のトラブルシューティングに役立つリアルタイムのトラフィック分析やログを提供するものではありません。"
        ]
    },
    {
        "Question Number": "46",
        "Situation": "金融サービス会社は、重要なデータが定期的にバックアップされ、災害発生時に迅速に復元できることを確保する必要があります。現在、彼らはストレージにAmazon S3を利用していますが、回復時間目標（RTO）と回復ポイント目標（RPO）を満たすための最適なバックアップ戦略については不明です。",
        "Question": "データを保護し、迅速に復元できる最も効率的で信頼性の高いバックアップ戦略はどれですか？",
        "Options": {
            "1": "長期的なバックアップデータのストレージにAmazon Glacierを利用し、必要に応じてオンデマンドで復元する",
            "2": "毎晩S3からオンプレミスサーバーにデータをコピーする手動バックアッププロセスを作成する",
            "3": "AWS Backupを実装して、Amazon S3のバックアップスケジュールと保持ポリシーを自動化する",
            "4": "S3バケットのクロスリージョンレプリケーションを設定して、データの可用性と冗長性を確保する"
        },
        "Correct Answer": "AWS Backupを実装して、Amazon S3のバックアップスケジュールと保持ポリシーを自動化する",
        "Explanation": "AWS Backupは、AWSサービス全体のバックアップを中央管理するために設計されており、自動化されたバックアップスケジュールと保持ポリシーを可能にします。これにより、バックアップがRTOおよびRPOの要件を効果的に満たし、手動プロセスに伴う運用オーバーヘッドとコストを最小限に抑えることができます。",
        "Other Options": [
            "手動バックアッププロセスは人的エラーのリスクを引き起こし、労働集約的であり、タイムリーなバックアップを保証できない可能性があり、RTOおよびRPOの要件を違反する可能性があります。",
            "Amazon Glacierの使用は長期的なストレージには適していますが、迅速な復元には最適化されておらず、重要なデータの回復において受け入れられない遅延を引き起こす可能性があります。",
            "クロスリージョンレプリケーションはデータの可用性と耐久性に効果的ですが、RTOおよびRPOの目標を満たすために必要なバックアップスケジュールや保持ポリシーには特に対処していません。"
        ]
    },
    {
        "Question Number": "47",
        "Situation": "グローバルなeコマース会社は、厳しい稼働時間要件を満たしながら、変動するユーザー需要に対応できる高可用性のウェブアプリケーションを設計しています。このアプリケーションはAWS上にホストされており、地域的およびアベイラビリティゾーンの障害に対して耐障害性を持つ必要があります。会社は、トラフィックパターンに基づいてリソースを自動的にスケールさせることができるアーキテクチャを必要としています。",
        "Question": "高可用性とスケーラビリティを実現するために、会社が実装すべき設計戦略の組み合わせはどれですか？（2つ選択）",
        "Options": {
            "1": "単一のアベイラビリティゾーン内のインスタンス間でトラフィックを分散するために、ヘルスチェック付きのElastic Load Balancingを使用する。",
            "2": "AWS Global Acceleratorを活用して、アプリケーションの可用性とパフォーマンスをグローバルに向上させる。",
            "3": "静的コンテンツをキャッシュするために、Amazon CloudFrontをコンテンツ配信ネットワーク（CDN）として実装する。",
            "4": "複数のアベイラビリティゾーンにわたる複数のEC2インスタンスを持つAuto Scalingグループを利用する。",
            "5": "複数のAWSリージョンにアプリケーションを展開し、DNSフェイルオーバーのためにAmazon Route 53を使用する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "複数のアベイラビリティゾーンにわたる複数のEC2インスタンスを持つAuto Scalingグループを利用する。",
            "複数のAWSリージョンにアプリケーションを展開し、DNSフェイルオーバーのためにAmazon Route 53を使用する。"
        ],
        "Explanation": "複数のアベイラビリティゾーンにわたるAuto Scalingグループを利用することで、需要に応じてアプリケーションが自動的にスケールし、高可用性を維持できます。Route 53を使用して複数のAWSリージョンに展開することで、地域的な障害に対する追加の耐障害性が提供され、堅牢なアーキテクチャに貢献します。",
        "Other Options": [
            "Amazon CloudFrontを実装することはパフォーマンスに有益ですが、アプリケーションのバックエンドサービスの高可用性とスケーラビリティの要件に直接対処するものではありません。",
            "単一のアベイラビリティゾーン内でElastic Load Balancingを使用することは、必要な冗長性を提供せず、そのゾーンが障害を起こすとアプリケーションが利用できなくなります。",
            "AWS Global Acceleratorはパフォーマンスと可用性を向上させることができますが、複数のリージョンやゾーンに追加のサービスを展開しない限り、高可用性のアーキテクチャを本質的に提供するものではありません。"
        ]
    },
    {
        "Question Number": "48",
        "Situation": "会社は、セキュリティを強化し、リソースへのアクセスを制御するためにAWS環境を設計しています。この環境は、異なるアプリケーションをホストする複数のVPCで構成されています。会社は、特定の接続を許可しながらワークロードを分離するために、ネットワークセグメンテーションを効果的に実装したいと考えています。",
        "Question": "VPC間の制御された通信を可能にしながら、最も優れたネットワークセグメンテーションを提供するアプローチはどれですか？",
        "Options": {
            "1": "すべてのアプリケーションを単一のVPCに展開し、アプリケーションのニーズに基づいてトラフィックをセグメント化するためにNetwork ACLを利用する。",
            "2": "複数のVPCを接続しながら、トラフィックフローの分離と制御を維持するためにAWS Transit Gatewayを実装する。",
            "3": "各アプリケーションのために別々のVPCを作成し、特定のトラフィックを許可するためにVPCピアリング接続を確立する。",
            "4": "すべてのアプリケーションに対して複数のサブネットを持つ単一のVPCを使用し、トラフィックを制御するためにセキュリティグループを構成する。"
        },
        "Correct Answer": "複数のVPCを接続しながら、トラフィックフローの分離と制御を維持するためにAWS Transit Gatewayを実装する。",
        "Explanation": "AWS Transit Gatewayを使用することで、複数のVPC間の中央集中的な接続が可能になり、各VPCの分離を維持しながら制御された通信を実現します。このアプローチは管理を簡素化し、直接のVPCピアリングと比較してより良いスケーラビリティを提供します。",
        "Other Options": [
            "複数のサブネットを持つ単一のVPCを使用すると、アプリケーション間の分離が欠如し、意図しないアクセスのリスクが高まり、セキュリティ管理が複雑になります。",
            "VPCピアリングを使用して別々のVPCを作成することは良いアプローチですが、VPCの数が増えるにつれて複雑な構成を引き起こす可能性があり、Transit Gatewayほど効率的にスケールしません。",
            "Network ACLを使用してすべてのアプリケーションを単一のVPCに展開すると、十分な分離が提供されず、トラフィック制御が過度に複雑になるため、管理上の課題が生じる可能性があります。"
        ]
    },
    {
        "Question Number": "49",
        "Situation": "多国籍企業がAWS Direct Connectを利用して、オンプレミスのデータセンターからAWS VPCへの専用ネットワーク接続を確立しています。彼らは、複数のリージョンで稼働するアプリケーションに対して高いスループットと低いレイテンシを必要としています。この企業は、EC2やS3などのさまざまなAWSサービスに接続することを意図しており、データの転送中に暗号化されることを保証するためのセキュリティ要件もあります。彼らのアーキテクチャのニーズを考慮し、Direct Connect接続と仮想インターフェースの設定オプションを評価しています。",
        "Question": "高いスループット、低いレイテンシ、およびAWSサービスへの安全な接続という企業の要件を最も満たす構成はどれですか？",
        "Options": {
            "1": "1つのパブリックリージョンにDirect Connectゲートウェイを設立します。S3やEC2などのサービスにアクセスするために、トラフィックを暗号化しないVPNを作成せずに複数のパブリック仮想インターフェースを設定します。",
            "2": "複数のVPCに接続するために、プライベート仮想インターフェースを持つ単一のDirect Connect接続を設定します。ルーティングにはAWS Transit Gatewayを使用し、追加の暗号化を実装せずにAWS Shieldに依存します。",
            "3": "同じ場所に2つのDirect Connect接続を展開し、それぞれにパブリック仮想インターフェースを持たせます。これらの接続をS3やEC2などのAWSサービスにアクセスするためだけに使用し、追加のセキュリティ対策を講じません。",
            "4": "異なる場所に2つのDirect Connect接続を作成します。プライベート仮想インターフェースを使用してDirect Connectゲートウェイに接続し、トラフィックをVPCにルーティングします。S3やEC2への安全なアクセスのために、パブリック仮想インターフェース上にVPN接続を実装します。"
        },
        "Correct Answer": "異なる場所に2つのDirect Connect接続を作成します。プライベート仮想インターフェースを使用してDirect Connectゲートウェイに接続し、トラフィックをVPCにルーティングします。S3やEC2への安全なアクセスのために、パブリック仮想インターフェース上にVPN接続を実装します。",
        "Explanation": "このオプションは、2つのDirect Connect接続を利用して高可用性と低レイテンシを実現し、Direct Connectゲートウェイを介して複数のVPCに接続し、パブリックインターフェース上のVPN接続を通じてデータの転送中に暗号化されることを保証します。",
        "Other Options": [
            "このオプションは単一のDirect Connect接続のみを提供し、高可用性を保証せず、単一障害点につながる可能性があります。プライベート仮想インターフェースを使用することは適切ですが、暗号化なしでAWS Transit Gatewayに依存することはセキュリティ要件を満たしません。",
            "このオプションは、VPNなしでパブリック仮想インターフェースを使用するため、暗号化の要件を満たしません。また、1つのリージョンに1つのDirect Connectゲートウェイに制限されているため、堅牢なアーキテクチャに必要な高可用性を提供しません。",
            "同じ場所に2つのDirect Connect接続を使用することは、異なる地理的エリアにおける冗長性を提供せず、高可用性にとって重要です。さらに、暗号化なしでパブリック仮想インターフェースのみに依存することはデータセキュリティを損ないます。"
        ]
    },
    {
        "Question Number": "50",
        "Situation": "小売企業が新しいeコマースプラットフォームを立ち上げる計画を立てており、セールイベント中に高いトラフィックが予想され、顧客とのインタラクションに対して異なるアクセスパターンが必要です。このプラットフォームは、商品閲覧のための読み取り重視の操作と、注文処理のための書き込み重視の操作の両方をサポートする必要があります。スケーラビリティ、コスト効率、およびパフォーマンスを考慮して、適切なアーキテクチャを設計する必要があります。",
        "Question": "eコマースプラットフォームの多様なアクセスパターンと高いスケーラビリティ要件を最もサポートするアーキテクチャ設計はどれですか？",
        "Options": {
            "1": "EC2インスタンス上に従来のSQLデータベースを設定し、ピーク時にリソースを手動でスケールアップします。",
            "2": "すべてのデータベース操作にAmazon RDSを利用し、高い読み取りトラフィックを処理するためにリードレプリカを展開します。",
            "3": "Amazon Auroraをマルチマスター構成で使用し、複数のインスタンス間で読み取りおよび書き込み操作を均等にサポートします。",
            "4": "変動するワークロードを処理するためにオンデマンドキャパシティモードのAmazon DynamoDBを実装し、静的アセット用に別のAmazon S3バケットを使用します。"
        },
        "Correct Answer": "変動するワークロードを処理するためにオンデマンドキャパシティモードのAmazon DynamoDBを実装し、静的アセット用に別のAmazon S3バケットを使用します。",
        "Explanation": "オンデマンドキャパシティモードのAmazon DynamoDBは、トラフィックに基づいてスループットを自動的に調整し、eコマースプラットフォームに典型的な変動するワークロードに最適です。さらに、静的アセット用にAmazon S3を使用することで、画像やファイルの配信をオフロードし、パフォーマンスを向上させ、データベースへの負荷を軽減します。",
        "Other Options": [
            "Amazon RDSのリードレプリカは読み取り重視の操作を処理できますが、突然のトラフィックの急増時に効果的にスケールしない可能性があります。また、書き込み操作をスケールするためには手動の介入が必要で、パフォーマンスのボトルネックを引き起こす可能性があります。",
            "マルチマスター構成のAmazon Auroraは高可用性を提供しますが、特に新しいeコマースプラットフォームにとっては管理が複雑でコストがかかる可能性があります。このオプションは、多様なアクセスパターンの要件を考慮すると必要ないかもしれません。",
            "EC2インスタンス上に従来のSQLデータベースを使用することは、現代のクラウドネイティブアーキテクチャが提供するスケーラビリティや自動管理を欠いています。スケールするためには大きな手動の努力が必要で、高トラフィックを効率的に処理できない可能性があります。"
        ]
    },
    {
        "Question Number": "51",
        "Situation": "ある企業がAWS Lambda関数を使用してサーバーレスアプリケーションを展開しており、プライベートVPC内のリソースにアクセスする必要があります。トラフィックが急増する中、アプリケーションはEC2ThrottledExceptionという呼び出しエラーが増加しています。ソリューションアーキテクトは、Lambda関数が制限に達することなく効果的にスケールできるようにする必要があります。",
        "Question": "呼び出しエラーを解決しながらLambda関数のスケーラビリティを維持するために、ソリューションアーキテクトは何をすべきですか？",
        "Options": {
            "1": "Lambda関数をVPCの外に移動してスケーラビリティを向上させます。",
            "2": "Lambda関数を収容するために、より大きなVPCを作成します。",
            "3": "利用可能なENIの数を増やし、サブネット内に十分なIPアドレスを確保します。",
            "4": "複数のLambda関数を使用して、異なるVPCに負荷を分散させます。"
        },
        "Correct Answer": "利用可能なENIの数を増やし、サブネット内に十分なIPアドレスを確保します。",
        "Explanation": "利用可能なElastic Network Interface（ENI）の数を増やし、サブネット内に十分なIPアドレスがあることを確認することで、Lambda関数はVPC内で効果的にスケールでき、スロットリングに関連する呼び出しエラーを減少させることができます。",
        "Other Options": [
            "Lambda関数をVPCの外に移動すると、アプリケーションの運用に不可欠なプライベートVPCリソースへのアクセス能力が損なわれます。",
            "異なるVPCに複数のLambda関数を使用すると、アーキテクチャが複雑になり、ENIの制限を解決することなく追加のレイテンシや管理オーバーヘッドが発生する可能性があります。",
            "より大きなVPCを作成しても、既存のサブネット内のENIやIPアドレスの不足という問題に直接対処するわけではなく、実行可能な解決策ではない可能性があります。"
        ]
    },
    {
        "Question Number": "52",
        "Situation": "ある企業が、支出パターンを可視化しながらAWSのコストを最適化しようとしています。財務チームは、潜在的な過剰支出を特定し、今後の予算を遵守することを任されています。彼らは、追加料金を発生させることなく、使用状況とコストを効果的に監視できるAWSツールを使用したいと考えています。",
        "Question": "財務チームに支出パターンの最良の概要を提供し、過剰支出を特定し、将来の使用のための予算を設定するのに最適なAWSツールの組み合わせはどれですか？",
        "Options": {
            "1": "AWS Cost Explorerを利用して使用状況とコストのトレンドを可視化し、AWS Budgetsを設定して予算の閾値を監視し、アラートを受け取ります。",
            "2": "AWS Budgetsを専ら支出限度の追跡に利用し、AWS CloudTrailログを使用して使用状況を分析します。",
            "3": "AWS Trusted Advisorを実装してコスト最適化の推奨事項を確認し、AWS Pricing Calculatorを使用して将来のプロジェクトのコストを見積もります。",
            "4": "AWS Trusted Advisorを展開し、AWS Configと統合してコスト管理に関連するコンプライアンスを継続的に監視します。"
        },
        "Correct Answer": "AWS Cost Explorerを利用して使用状況とコストのトレンドを可視化し、AWS Budgetsを設定して予算の閾値を監視し、アラートを受け取ります。",
        "Explanation": "このAWS Cost ExplorerとAWS Budgetsの組み合わせは、コストの監視と管理のための包括的なソリューションを提供します。Cost Explorerは支出パターンの視覚的分析を可能にし、Budgetsは事前に定義された限度に対して支出を積極的に追跡できるため、財務チームは早期に過剰支出を特定できます。",
        "Other Options": [
            "AWS Trusted Advisorはコスト最適化のための有用な推奨事項を提供しますが、AWS Cost Explorerと同じレベルの詳細な履歴分析を提供しません。AWS Pricing Calculatorはコストの見積もりに役立ちますが、継続的なコストの監視には効果的ではありません。",
            "AWS Budgetsのみを使用すると、支出トレンドの可視性が得られません。AWS CloudTrailログはAPIコールを追跡しますが、コストや使用状況の高レベルのビューを提供せず、予算遵守や過剰支出の特定には効果的ではありません。",
            "AWS Trusted Advisorは洞察を提供しますが、コスト管理のコンプライアンスのための継続的な監視を提供しません。AWS Configはリソースの構成コンプライアンスに焦点を当てており、コスト管理にはあまり効果的ではないため、この組み合わせは財務チームの目的には不十分です。"
        ]
    },
    {
        "Question Number": "53",
        "Situation": "ある金融サービス会社が、AWS Lambda、Kinesis Data Streams、およびAmazon DynamoDBを使用してリアルタイムのトランザクション処理システムを構築しています。このシステムは、毎秒高いトランザクション量を処理することが期待されており、効率的なデータ処理と最小限のレイテンシが求められています。開発者は、Lambda関数のバッチ処理の挙動を最適化し、レコードを迅速に処理しながらスループットを最大化したいと考えています。特に、KinesisイベントソースマッピングのMaximumBatchingWindowInSecondsおよびBatchSizeパラメータの設定について懸念しています。",
        "Question": "このシナリオにおいて、KinesisデータストリームのLambda処理のバッチ処理の挙動を最適化するための最適な設定はどれですか？",
        "Options": {
            "1": "MaximumBatchingWindowInSecondsを0秒、BatchSizeを1000レコードに設定して、最小限のレイテンシと最大のスループットを確保します。",
            "2": "MaximumBatchingWindowInSecondsを500ミリ秒、BatchSizeを500レコードに設定して、レイテンシとスループットのバランスを取ります。",
            "3": "MaximumBatchingWindowInSecondsを300秒、BatchSizeを300レコードに設定して、バッチウィンドウを最大化します。",
            "4": "MaximumBatchingWindowInSecondsを100ミリ秒、BatchSizeを10レコードに設定して、処理時間を短縮します。"
        },
        "Correct Answer": "MaximumBatchingWindowInSecondsを0秒、BatchSizeを1000レコードに設定して、最小限のレイテンシと最大のスループットを確保します。",
        "Explanation": "MaximumBatchingWindowInSecondsを0秒に設定することで、Lambdaはレコードが到着次第すぐに処理できるようになり、リアルタイムのトランザクション処理には重要です。BatchSizeを1000レコードに設定することで、関数は各呼び出しでより多くのレコードを処理できるため、スループットが最大化されます。この設定は、トランザクション処理のような高ボリュームのシナリオに最適です。",
        "Other Options": [
            "MaximumBatchingWindowInSecondsを500ミリ秒、BatchSizeを500レコードに設定すると、関数が処理を開始する前に半秒待機するため、不要なレイテンシが発生する可能性があります。",
            "MaximumBatchingWindowInSecondsを300秒に設定するのは、リアルタイム処理には過剰であり、レコード処理を大幅に遅延させます。BatchSizeを300レコードに設定すると、高ボリュームのシナリオでKinesisストリームのスループット能力を十分に活用できない可能性があります。",
            "MaximumBatchingWindowInSecondsを100ミリ秒、BatchSizeを10レコードに設定すると、Kinesisの利用可能なスループットを活用できません。この設定はリソースの過少利用とレイテンシの増加を引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "54",
        "Situation": "あるモバイルアプリケーションが、AWSにデプロイされたさまざまなマイクロサービスからデータを取得する際にレイテンシの問題を抱えています。このアプリケーションは、APIリクエストとレスポンスを管理するためにAWS API Gatewayを利用しています。現在、API Gatewayの設定ではバックエンド処理にLambda関数を使用していますが、ユーザーからは応答時間が遅いとの報告があります。このアーキテクチャは、さまざまなネットワーク条件を持つグローバルなユーザーベースを処理するように設計されており、開発チームはセキュリティを損なうことなく、またコストを大幅に増加させることなくパフォーマンスを最適化したいと考えています。",
        "Question": "このモバイルアプリケーションのAPI Gateway設定のパフォーマンスを改善する最も効果的な方法は何ですか？",
        "Options": {
            "1": "API Gatewayの前に専用のElastic Load Balancer (ELB)を展開して、マイクロサービス間で受信リクエストをより均等に分配し、応答時間を改善します。",
            "2": "API Gatewayの組み込みキャッシング機能を使用して、モバイルアプリケーションの頻繁にアクセスされるデータを保存し、Lambdaへの呼び出しを最小限に抑え、全体的なレイテンシを削減します。",
            "3": "API Gatewayの前にCloudFrontを実装してレスポンスをキャッシュし、グローバルユーザーのレイテンシを削減し、動的コンテンツにはカスタムキャッシュ制御ヘッダーを使用します。",
            "4": "API Gatewayのタイムアウト設定を増加させ、リクエストの処理時間を長くし、処理に時間がかかってもすべてのレスポンスが返されるようにします。"
        },
        "Correct Answer": "API Gatewayの前にCloudFrontを実装してレスポンスをキャッシュし、グローバルユーザーのレイテンシを削減し、動的コンテンツにはカスタムキャッシュ制御ヘッダーを使用します。",
        "Explanation": "API Gatewayの前にCloudFrontを実装することで、レスポンスをキャッシュでき、異なる地域のユーザーに対してレイテンシを大幅に削減できます。これは、グローバルなユーザーベースにとって特に有益であり、エッジロケーションを活用してコンテンツを迅速に配信し、バックエンドサービスに繰り返しアクセスする必要がなくなるため、パフォーマンスを効果的に最適化します。",
        "Other Options": [
            "API Gatewayのタイムアウト設定を増加させても、レイテンシの根本原因に対処することはできず、ユーザーの待機時間が長くなるだけで、より早いレスポンスを保証するものではありません。",
            "API Gatewayの前に専用のElastic Load Balancer (ELB)を展開する必要はなく、API Gatewayはすでにリクエストを効率的に処理するように設計されているため、追加の複雑さとコストを引き起こす可能性があります。",
            "API Gatewayの組み込みキャッシング機能を使用することは有益ですが、特に動的コンテンツに対しては、グローバルユーザーベースに対してCloudFrontを活用する方が効果的である可能性があります。"
        ]
    },
    {
        "Question Number": "55",
        "Situation": "ある金融サービス会社が、AWS Direct Connectを使用して、異なるリージョンにある複数のAWS VPCにオンプレミスのデータセンターを接続しようとしています。彼らは、異なるアカウントのさまざまなVPCにトラフィックをルーティングする柔軟性を維持しながら、プライベート接続を可能にするソリューションを必要としています。アーキテクトは、ソリューションがDirect ConnectおよびVPC接続のAWSベストプラクティスに準拠していることを確認しなければなりません。",
        "Question": "次の構成のうち、ソリューションアーキテクトが会社の要件を満たすために実装すべきものはどれですか？",
        "Options": {
            "1": "Direct Connect接続とDirect Connectゲートウェイを作成します。ゲートウェイを異なるアカウントとリージョンのVPCの仮想プライベートゲートウェイに接続します。各VPCに対してDirect Connectゲートウェイへのプライベート仮想インターフェースを作成します。",
            "2": "AWSサービスにアクセスするためのパブリック仮想インターフェースを使用してDirect Connect接続を作成します。VPC間でVPCピアリングを構成して通信を可能にします。",
            "3": "AWS Transit Gatewayを使用して中央集権的なルーティングハブを作成します。オンプレミスのデータセンターをDirect Connect接続でTransit Gatewayに接続し、異なるアカウントの複数のVPCに対してVPCアタッチメントを設定します。",
            "4": "Direct Connectゲートウェイを使用せずに、各VPCのために直接プライベート仮想インターフェースを作成するDirect Connect接続を確立し、直接ルーティングを可能にします。"
        },
        "Correct Answer": "Direct Connect接続とDirect Connectゲートウェイを作成します。ゲートウェイを異なるアカウントとリージョンのVPCの仮想プライベートゲートウェイに接続します。各VPCに対してDirect Connectゲートウェイへのプライベート仮想インターフェースを作成します。",
        "Explanation": "Direct Connectゲートウェイを使用することで、異なるアカウントとリージョンにわたる複数のVPCへのプライベート接続が可能になり、Direct Connectのベストプラクティスに準拠します。各VPCに特化したプライベート仮想インターフェースを作成でき、セキュアで効率的なルーティングを確保します。",
        "Other Options": [
            "このオプションは、異なるアカウントとリージョンのVPCへのプライベート接続には適さないパブリック仮想インターフェースの使用を誤って提案しています。Direct Connectゲートウェイは、プライベート仮想インターフェース専用に設計されています。",
            "Transit Gatewayを使用することでルーティングが簡素化されますが、このオプションは異なるアカウントの複数のVPCに接続するためのプライベート仮想インターフェースの要件に直接対応していません。プライベート接続には依然としてDirect Connectゲートウェイが必要です。",
            "このオプションは、Direct Connectゲートウェイの使用を回避しているため不正解です。Direct Connectゲートウェイは、特に異なるアカウントにある複数のVPCへのプライベート仮想インターフェースを作成するために必要です。"
        ]
    },
    {
        "Question Number": "56",
        "Situation": "ある会社が、セキュリティとコンプライアンスを確保するために定期的な更新とパッチが必要なマルチティアアプリケーションをAWS上に展開しています。このアプリケーションは、Auto Scalingグループによって管理されるAmazon EC2インスタンスのフリート上で実行されています。会社は、ダウンタイムを最小限に抑え、更新中にアプリケーションが利用可能であることを確保しながら、インスタンスのパッチを自動化するための堅牢なプロセスを探しています。",
        "Question": "効果的なパッチと更新プロセスを設計するために、ソリューションアーキテクトが実装すべきオプションはどれですか？（2つ選択）",
        "Options": {
            "1": "AWS Elastic Beanstalkを活用してアプリケーション環境を管理し、デプロイメントプロセスの一部としてパッチを適用します。",
            "2": "AWS OpsWorks Stacksを使用して、EC2インスタンスのパッチと更新を特に扱うカスタムChefレシピを定義します。",
            "3": "AWS Systems Manager Patch Managerを利用して、指定されたメンテナンスウィンドウ中にEC2インスタンスのパッチを自動化します。",
            "4": "Amazon CloudWatchアラームを作成し、すべてのEC2インスタンスで同時にパッチ処理を実行するLambda関数をトリガーします。",
            "5": "Auto Scalingライフサイクルフックを実装して、パッチ処理中にインスタンスの終了プロセスを一時停止し、インスタンスが失われないようにします。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Systems Manager Patch Managerを利用して、指定されたメンテナンスウィンドウ中にEC2インスタンスのパッチを自動化します。",
            "AWS Elastic Beanstalkを活用してアプリケーション環境を管理し、デプロイメントプロセスの一部としてパッチを適用します。"
        ],
        "Explanation": "AWS Systems Manager Patch Managerを使用することで、定義されたメンテナンスウィンドウに基づいてパッチ処理を自動化でき、インスタンスが制御された方法でパッチされることを確保します。さらに、AWS Elastic Beanstalkはアプリケーションの更新管理をサポートしており、パッチをデプロイメントプロセスにシームレスに統合できるため、ダウンタイムを最小限に抑えることができます。",
        "Other Options": [
            "すべてのEC2インスタンスで同時にパッチ処理を実行するLambda関数をトリガーするAmazon CloudWatchアラームを作成すると、潜在的なダウンタイムやサービスの中断を引き起こす可能性があります。このアプローチはパッチ処理の制御を欠き、更新中の高可用性を確保できないかもしれません。",
            "Auto Scalingライフサイクルフックを実装してインスタンスの終了プロセスを一時停止することは、パッチ処理を直接促進するものではありません。単にインスタンスの終了を遅らせるだけで、パッチ処理自体を自動化するわけではありません。",
            "AWS OpsWorks Stacksを使用してパッチ用のカスタムChefレシピを定義することは実行可能なオプションですが、複雑さをもたらし、Chefレシピの継続的なメンテナンスが必要です。Patch Managerを使用するのに比べて、最も効率的または簡単なアプローチではないかもしれません。"
        ]
    },
    {
        "Question Number": "57",
        "Situation": "あるeコマースプラットフォームが、スケーラビリティと低遅延性能のためにAmazon DynamoDBを使用してユーザーセッションデータを保存する計画を立てています。ソリューションアーキテクトは、セールイベント中のトラフィックの急増に対応できるアーキテクチャを確保する任務を負っています。アーキテクトは、これらの要件を満たすためにDynamoDBテーブルの適切な読み取りおよび書き込みキャパシティ構成を選択する必要があります。",
        "Question": "ピークトラフィック中の最適なパフォーマンスを確保し、通常の運用中のコストを最小限に抑えるために、ソリューションアーキテクトが実装すべき構成はどれですか？",
        "Options": {
            "1": "トラフィックパターンに基づいて調整するために自動スケーリングを有効にしたプロビジョニングキャパシティ。",
            "2": "トラフィックに基づいて手動介入なしで自動的にスケールアップおよびスケールダウンするオンデマンドキャパシティモード。",
            "3": "DynamoDBの前にキャッシングレイヤーを使用してすべての読み取りリクエストを処理し、低い書き込みキャパシティをプロビジョニングします。",
            "4": "ピーク負荷に対応するために常に高い読み取りおよび書き込みキャパシティを設定したプロビジョニングキャパシティ。"
        },
        "Correct Answer": "オンデマンドキャパシティモードで、トラフィックに基づいて手動介入なしで自動的にスケールアップおよびスケールダウンします。",
        "Explanation": "オンデマンドキャパシティモードは、予測不可能なワークロードに対応するために設計されており、実際のトラフィックに基づいて自動的にスケールアップおよびスケールダウンします。これにより、トラフィックの急増に対応しつつ、通常の運用中のコストを削減できます。",
        "Other Options": [
            "自動スケーリングを有効にしたプロビジョニングキャパシティは機能する可能性がありますが、スパイクに迅速に対応するためには慎重な構成と監視が必要で、正しく設定されていない場合はスロットリングを引き起こす可能性があります。",
            "固定の高い読み取りおよび書き込みキャパシティを持つプロビジョニングキャパシティは、トラフィックが少ない期間中に不必要なコストを発生させます。リソースは実際の使用に関係なく予約されます。",
            "キャッシングレイヤーを使用するとDynamoDBの読み取り負荷を軽減できますが、書き込みキャパシティの問題には対処できません。トラフィックの急増を処理するための完全なソリューションを提供せず、アーキテクチャを複雑にする可能性があります。"
        ]
    },
    {
        "Question Number": "58",
        "Situation": "医療機関がAWS上で複数のアプリケーションを運用しており、敏感な患者データを処理しています。彼らはデータが規制に準拠していることを確認し、セキュリティインシデントが迅速に修正されるようにする必要があります。組織は、いくつかのIAMロールに過剰な権限があることを特定し、サービスの中断を引き起こさずにこの問題を修正するためのソリューションを実装したいと考えています。",
        "Question": "ソリューションアーキテクトは、アプリケーションへの影響を最小限に抑えながら過剰なIAM権限に対処するために、どの修正手法を実装すべきですか？",
        "Options": {
            "1": "AWS CloudTrailを実装してすべてのIAMアクションをログに記録し、権限変更を行う前にログを確認して中断が発生しないようにします。",
            "2": "IAM権限のレビューを6か月ごとにスケジュールし、即時の変更を行わずに過剰な権限を特定して削減します。",
            "3": "最小権限の新しいIAMロールを作成し、アプリケーションをこれらのロールに徐々に移行しながら、アクセスの問題を監視します。",
            "4": "既存のIAMロールからすべての過剰な権限を即座に削除し、どのロールも必要以上の権限を持たないようにします。"
        },
        "Correct Answer": "最小権限の新しいIAMロールを作成し、アプリケーションをこれらのロールに徐々に移行しながら、アクセスの問題を監視します。",
        "Explanation": "最小権限の新しいIAMロールを作成することで、組織はサービスの継続性を維持しながら過剰な権限のリスクを減少させることができます。徐々に移行することで、アクセスの問題をアプリケーションに影響を与えることなく検出し、解決することができます。",
        "Other Options": [
            "過剰な権限を即座に削除すると、ロールが重要なアクセスを失った場合にアプリケーションの障害が発生する可能性があります。このアプローチでは、変更を行う前にテストや監視を行うことができません。",
            "AWS CloudTrailはログ記録と監査に役立ちますが、権限をレビューするためにログのみに依存すると、修正プロセスが遅れ、過剰な権限のリスクを積極的に減少させることができません。",
            "6か月ごとのレビューをスケジュールすることは、セキュリティリスクの迅速な修正を提供しません。過剰な権限の問題に対処するためには、即時の行動が必要です。"
        ]
    },
    {
        "Question Number": "59",
        "Situation": "メディア会社は、大きなビデオファイルを保存する必要があります。これらのファイルはリリースの最初の数週間に頻繁にアクセスされますが、初期の関心が薄れるとアクセスが大幅に減少します。会社はこれらのビデオファイルを最低3年間保持する計画で、ストレージコストを最小限に抑えることを目指しています。",
        "Question": "以下のどのS3ストレージクラスが、アクセスと保持の要件を満たしながら、これらのビデオファイルを保存するための最もコスト効果の高いソリューションを提供しますか？",
        "Options": {
            "1": "Amazon S3 Intelligent-Tieringを使用して、使用パターンに基づいてファイルを自動的にアクセスティア間で移動させる。",
            "2": "保持期間中はAmazon S3 Standardを使用する。これは、頻繁にアクセスされるデータに対して最良のパフォーマンスを提供します。",
            "3": "最初の数ヶ月はAmazon S3 One Zone-IAを使用し、その後Amazon S3 Standard-IAに移行する。",
            "4": "最初の30日間はAmazon S3 Standardを使用し、その後長期保存のためにAmazon S3 Glacierに移行する。"
        },
        "Correct Answer": "Amazon S3 Intelligent-Tieringを使用して、使用パターンに基づいてファイルを自動的にアクセスティア間で移動させる。",
        "Explanation": "Amazon S3 Intelligent-Tieringは、このシナリオに最適です。なぜなら、ビデオファイルのアクセス頻度に基づいてストレージクラスを自動的に調整し、コストを最適化しつつ、必要なときにすぐに利用できるようにするからです。このクラスは、指定された保持期間中のビデオファイルの変動するアクセスパターンに適しています。",
        "Other Options": [
            "最初の30日間はAmazon S3 Standardを使用し、その後Amazon S3 Glacierに移行するのは最適ではありません。なぜなら、Glacierは長期保存にはコスト効果がありますが、頻繁なアクセスには設計されておらず、ビデオがまだ需要があるときに高い取得コストや遅延を引き起こす可能性があるからです。",
            "最初の数ヶ月はAmazon S3 One Zone-IAを使用し、その後Amazon S3 Standard-IAに移行するのは不正解です。なぜなら、One Zone-IAは他のクラスよりも耐久性が低く、そのゾーンで可用性が失われた場合、ビデオファイルが回復不可能になる可能性があり、重要なメディアストレージには不適切だからです。",
            "保持期間中はAmazon S3 Standardを使用するのはコスト効果が低いです。なぜなら、初期の数週間後のアクセスが少ない期間に必要なコスト最適化を提供せず、全体的なストレージコストが高くなるからです。"
        ]
    },
    {
        "Question Number": "60",
        "Situation": "スタートアップは、データ処理とストレージのための堅牢なバックエンドを必要とする新しいアプリケーションを構築するために、AWSのマネージドサービスを活用しようとしています。チームは運用の負担を最小限に抑え、インフラ管理ではなくアプリケーション開発に集中したいと考えています。彼らはニーズを満たすためにさまざまなAWSのマネージドサービスを検討しています。",
        "Question": "スタートアップがアプリケーションの要件を効率的に満たすために利用すべきAWSのマネージドサービスの組み合わせはどれですか？（2つ選択してください）",
        "Options": {
            "1": "コンテナオーケストレーションのためにAmazon ECSを展開し、リレーショナルデータベースサービスのためにAmazon RDSを利用する。",
            "2": "すべてのアプリケーションホスティングにAmazon EC2を利用し、ストレージニーズにAmazon EBSを使用する。",
            "3": "アプリケーション管理のためにAWS Elastic Beanstalkを活用し、コンテンツ配信のためにAmazon CloudFrontを利用する。",
            "4": "サーバーレスコンピューティングのためにAWS Lambdaを実装し、NoSQLデータベースストレージのためにAmazon DynamoDBを利用する。",
            "5": "データベース管理のためにAmazon RDSを使用し、オブジェクトストレージのためにAmazon S3を利用する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "データベース管理のためにAmazon RDSを使用し、オブジェクトストレージのためにAmazon S3を利用する。",
            "サーバーレスコンピューティングのためにAWS Lambdaを実装し、NoSQLデータベースストレージのためにAmazon DynamoDBを利用する。"
        ],
        "Explanation": "Amazon RDSを使用することで、スタートアップは完全に管理されたリレーショナルデータベースサービスの利点を享受でき、バックアップやパッチ管理などの管理作業を軽減できます。Amazon S3は、非構造化データのためのスケーラブルなオブジェクトストレージを提供します。AWS Lambdaはサーバーレスコンピューティングを促進し、チームがサーバーをプロビジョニングすることなくコードを実行できるようにし、DynamoDBは需要に応じて自動的にスケールする完全に管理されたNoSQLデータベースを提供し、現代のアプリケーションに最適です。",
        "Other Options": [
            "すべてのアプリケーションホスティングにAmazon EC2を利用すると、スタートアップは基盤となるサーバーを管理する必要があるため、運用の負担が大きくなり、インフラ管理を最小限に抑えるという目標に反します。",
            "AWS Elastic Beanstalkを活用することはアプリケーション管理にとって良い選択ですが、Amazon CloudFrontと組み合わせることは、データストレージやバックエンド処理のニーズに効果的に対処していません。",
            "コンテナオーケストレーションのためにAmazon ECSを展開することは有効な選択ですが、Amazon RDSだけに依存することは、AWS LambdaとDynamoDBが提供できるサーバーレスアーキテクチャの利点を十分に活用していません。"
        ]
    },
    {
        "Question Number": "61",
        "Situation": "金融サービス会社がアプリケーションアーキテクチャをAWSに移行しています。彼らは、大量のトランザクションデータを安全に、かつ高い耐久性で保存する必要があります。さらに、データが災害復旧の目的で異なるリージョンに複製されることを確保する必要があります。これらの要件を満たすために、さまざまなAWSストレージサービスを検討しています。",
        "Question": "トランザクションデータの安全で高耐久性のストレージを確保し、リージョン間の複製を行うために、ソリューションアーキテクトはどの戦略を推奨すべきですか？",
        "Options": {
            "1": "バージョニングを有効にしたAmazon S3を使用し、リージョン間複製（CRR）を設定して、オブジェクトを別のリージョンの別のS3バケットに自動的に複製します。",
            "2": "データ永続性を有効にしたAmazon ElastiCacheを実装し、障害時にキャッシュデータが利用可能であることを確保するために、リージョン間の複製グループを設定します。",
            "3": "高可用性と自動フェイルオーバーを提供するために、Multi-AZデプロイメントを使用したAmazon RDSを活用し、災害復旧のために別のリージョンでリードレプリカを有効にします。",
            "4": "ファイルストレージ用にAmazon EFSを使用し、災害復旧のためにファイルシステムが別のリージョンに複製されることを確保するためにリージョン間複製を有効にします。"
        },
        "Correct Answer": "バージョニングを有効にしたAmazon S3を使用し、リージョン間複製（CRR）を設定して、オブジェクトを別のリージョンの別のS3バケットに自動的に複製します。",
        "Explanation": "Amazon S3は99.999999999%の耐久性を持つ高耐久性ストレージソリューションを提供します。バージョニングを有効にすることで、オブジェクトの複数のバージョンを保持でき、リージョン間複製（CRR）はオブジェクトを別のリージョンに自動的に複製し、地域の障害が発生した場合でもデータが安全で利用可能であることを保証します。",
        "Other Options": [
            "Multi-AZデプロイメントを使用したAmazon RDSは高可用性とフェイルオーバー機能を提供しますが、災害復旧のためのリージョン間複製を本質的にサポートしていません。このオプションは、リージョン間の複製要件を満たしません。",
            "Amazon ElastiCacheは主にキャッシングに使用され、トランザクションデータの長期的な耐久性ストレージには設計されていません。複製をサポートしていますが、トランザクションデータに必要な同じレベルの耐久性を保証しません。",
            "Amazon EFSはネイティブにリージョン間複製をサポートしていません。ファイルストレージには良い選択ですが、災害復旧のためにファイルが別のリージョンに複製されることを保証する要件を満たすことはできません。"
        ]
    },
    {
        "Question Number": "62",
        "Situation": "金融サービス会社が高性能コンピューティング（HPC）アプリケーションをAWSに移行しようとしています。これらのアプリケーションは、複数のEC2インスタンス間で最適なパフォーマンスを達成するために、低遅延で高スループットのネットワーキング機能を必要とします。会社は、インスタンス間の通信のパフォーマンスを向上させるためにElastic Fabric Adapter（EFA）を使用することを検討しています。彼らは、移行戦略がEFAの機能を最大限に活用することを確保したいと考えています。",
        "Question": "会社はAWS上でHPCアプリケーションにEFAを効果的に活用するために何をすべきですか？",
        "Options": {
            "1": "EFAをサポートするEC2インスタンスタイプを選択し、インスタンス起動時にEFAを有効にし、アプリケーションを強化されたネットワーキング機能を使用するように構成します。",
            "2": "Amazon ECSを使用して、EFAを有効にせずにHPCアプリケーションのコンテナ化されたバージョンを実行し、標準のEC2ネットワーキングのみに依存します。",
            "3": "ネットワークパフォーマンスに最適化されていないEC2インスタンスを起動し、デフォルトのElastic Network Adapter（ENA）を使用するように構成します。",
            "4": "EFAを有効にしたEC2インスタンスをデプロイしますが、アプリケーションが互換性の問題を避けるために強化されたネットワーキング機能を利用できないように制限します。"
        },
        "Correct Answer": "EFAをサポートするEC2インスタンスタイプを選択し、インスタンス起動時にEFAを有効にし、アプリケーションを強化されたネットワーキング機能を使用するように構成します。",
        "Explanation": "EFAをサポートするEC2インスタンスタイプを選択し、インスタンス起動時にEFAを有効にすることで、会社はEFAが提供する低遅延で高スループットのネットワーキング機能の恩恵を受けることができ、これはHPCアプリケーションのパフォーマンスにとって不可欠です。",
        "Other Options": [
            "ネットワークパフォーマンスに最適化されていないEC2インスタンスを起動し、デフォルトのElastic Network Adapter（ENA）を使用することは、EFAの機能を活用せず、HPCアプリケーションのパフォーマンスが最適でなくなります。",
            "EFAを有効にしたEC2インスタンスをデプロイしますが、アプリケーションが強化されたネットワーキング機能を利用できないように制限することは、EFAの利点を無効にし、アプリケーションが低遅延で高スループットのネットワーキングを活用できなくなります。",
            "EFAを有効にせずにHPCアプリケーションのコンテナ化されたバージョンを実行するためにAmazon ECSを使用することは、ネットワークパフォーマンスを最大化せず、標準のEC2ネットワーキングはEFAが提供する強化を欠いています。"
        ]
    },
    {
        "Question Number": "63",
        "Situation": "金融サービス会社が既存のオンプレミスアプリケーションをAWSに移行する計画を立てています。このアプリケーションは.NETフレームワークで構築されており、Microsoft SQL Serverデータベースを利用しており、月の間に大きな負荷の変動があります。会社は、手動での介入をほとんど必要とせずに、さまざまなワークロードを処理できるスケーラブルなアーキテクチャを必要としています。さらに、アプリケーションは高可用性と災害復旧機能を維持する必要があります。チームは、可能な限りマネージドサービスを活用し、移行中のダウンタイムを最小限に抑えるオプションを検討しています。",
        "Question": "AWSへの移行中に会社の要件を最もよくサポートするアーキテクチャデザインはどれですか？",
        "Options": {
            "1": "Auto Scalingグループによって管理されるAmazon EC2インスタンスに.NETアプリケーションを移行します。Amazon RDSをSQL Serverで使用しますが、Multi-AZデプロイメントなしで構成します。トラフィックを分散するためにElastic Load Balancerを作成し、負荷の変化に応じてEC2インスタンスを手動で調整します。",
            "2": "AWS Elastic Beanstalkを採用して.NETアプリケーションを管理し、トラフィックを分散するためにApplication Load Balancerを構成します。データベースニーズにはAmazon RDSをSQL Serverで使用し、高可用性と自動フェイルオーバーのためにMulti-AZを設定します。変動するワークロードを処理するためにAWS Auto Scalingを実装します。",
            "3": "AWS Fargateを利用して.NETアプリケーションをコンテナ化されたサービスとして実行し、SQLデータベースニーズにはAmazon Auroraを使用します。トラフィック管理のためにNetwork Load Balancerを実装し、観察された負荷パターンに基づいて手動でスケーリングします。",
            "4": "EC2起動タイプでAmazon ECSに.NETアプリケーションをデプロイしてコンテナを管理します。Amazon RDSをSQL Serverで使用し、高可用性のためにMulti-AZを構成します。トラフィックをルーティングするためにApplication Load Balancerを実装し、CloudWatchを活用して監視とスケーリングを行います。"
        },
        "Correct Answer": "AWS Elastic Beanstalkを採用して.NETアプリケーションを管理し、トラフィックを分散するためにApplication Load Balancerを構成します。データベースニーズにはAmazon RDSをSQL Serverで使用し、高可用性と自動フェイルオーバーのためにMulti-AZを設定します。変動するワークロードを処理するためにAWS Auto Scalingを実装します。",
        "Explanation": "このオプションは、AWS Elastic Beanstalkを通じて完全に管理されたサービスを提供し、.NETアプリケーションのデプロイ、管理、スケーリングを簡素化します。また、Multi-AZを使用したAmazon RDSを含み、高可用性を確保し、障害が発生した場合のデータ整合性と迅速な回復を保証し、AWS Auto Scalingは変動するワークロードに対して適応性を確保します。",
        "Other Options": [
            "このオプションは、Amazon RDSのMulti-AZ構成が欠けており、高可用性と災害復旧にとって重要です。さらに、EC2インスタンスの手動調整に依存することは、負荷の変化に対する最小限の手動介入の要件を満たしません。",
            "AWS Fargateで.NETアプリケーションを実行することは、特にアプリケーションがコンテナ化のために設計されていない場合、既存のアーキテクチャを効率的に活用できない可能性があります。さらに、Amazon Auroraは直接的なSQL Serverの代替ではないため、移行プロセスが複雑になる可能性があります。",
            "EC2起動タイプでAmazon ECSを使用することは、基盤となるEC2インスタンスの管理にオーバーヘッドを追加し、会社が望むマネージドサービスアプローチに反します。RDSのMulti-AZは含まれていますが、コンテナオーケストレーションの複雑さはシームレスな移行の要件を満たさない可能性があります。"
        ]
    },
    {
        "Question Number": "64",
        "Situation": "金融サービス会社がアプリケーションをAWSに移行し、社内の専門知識を広範に必要とせずに機械学習やデータ分析などの先進技術を活用できるようにしたいと考えています。目標は、デプロイメントを自動化し、技術を開発チームがアクセスできるようにしながら、規制遵守を守ることです。",
        "Question": "次のうち、会社が複雑な機械学習および分析タスクをAWSに委任し、開発チームのためにコンプライアンスとアクセス可能性を確保するのに最も適したソリューションはどれですか？",
        "Options": {
            "1": "Amazon Elastic MapReduce (EMR)を分析に使用し、開発チームに基盤となるインフラストラクチャを手動で管理させてコンプライアンスを確保する。",
            "2": "データ準備とETLタスクのためにAWS Glueを実装するが、開発者に機械学習モデルのトレーニングとデプロイメントを独立して行わせる。",
            "3": "AWS Lambdaをサーバーレス関数として採用し、機械学習推論を実行するが、開発者にEC2インスタンス上で自分の機械学習モデルを維持させる。",
            "4": "Amazon SageMakerを利用して機械学習モデルの構築、トレーニング、デプロイを行い、AWS CloudFormationを使用してインフラストラクチャをコードとして管理する。"
        },
        "Correct Answer": "Amazon SageMakerを利用して機械学習モデルの構築、トレーニング、デプロイを行い、AWS CloudFormationを使用してインフラストラクチャをコードとして管理する。",
        "Explanation": "このオプションは、機械学習の複雑さを抽象化しながら、会社がコンプライアンスを維持できる包括的なソリューションを提供します。Amazon SageMakerは、モデルの開発とデプロイを効率化し、AWS CloudFormationはインフラストラクチャを効率的かつ一貫して管理できるようにします。",
        "Other Options": [
            "Amazon EMRはデータ分析の強力なツールですが、開発チームに基盤となるインフラストラクチャを手動で管理させることは、複雑なタスクを委任するという目標に矛盾し、不必要な運用負担を追加します。",
            "AWS GlueはETLタスクに優れた選択肢ですが、開発者に機械学習モデルのトレーニングとデプロイを独立して行わせることは、専門知識のサイロを生み出し、コンプライアンスの取り組みを複雑にします。",
            "AWS Lambdaは推論に使用できますが、開発者がEC2インスタンス上で自分の機械学習モデルを管理することは複雑さを引き起こし、先進技術へのアクセスを減少させます。"
        ]
    },
    {
        "Question Number": "65",
        "Situation": "多国籍企業が、世界中のユーザーにサービスを提供するウェブアプリケーションのパフォーマンスを最適化しようとしています。アプリケーションはus-east-1リージョンにホストされており、同社はヨーロッパやアジアにいるユーザーのレイテンシーを懸念しています。ソリューションアーキテクトは、世界中のユーザーに低レイテンシーと高可用性を確保するソリューションを実装する必要があります。",
        "Question": "次のうち、会社のグローバルパフォーマンス最適化の要件に最も適したソリューションはどれですか？",
        "Options": {
            "1": "Amazon CloudFrontをコンテンツ配信ネットワーク（CDN）として実装し、ユーザーに近いエッジロケーションで静的コンテンツをキャッシュし、動的コンテンツ配信も可能にする。",
            "2": "AWS Global Acceleratorを使用してユーザートラフィックを最寄りのアプリケーションエンドポイントにルーティングし、パフォーマンスを最適化し、インテリジェントルーティングを通じて可用性を向上させる。",
            "3": "AWS Lambda@Edgeを利用してAWSエッジロケーションでカスタムコードを実行し、ユーザーに近い場所でリアルタイムデータ処理と応答生成を可能にする。",
            "4": "ウェブアプリケーションを複数のAWSリージョンにデプロイし、Amazon Route 53を使用してジオルーティングを行い、ユーザーを最寄りのリージョンに誘導し、最小限のレイテンシーを確保する。"
        },
        "Correct Answer": "AWS Global Acceleratorを使用してユーザートラフィックを最寄りのアプリケーションエンドポイントにルーティングし、パフォーマンスを最適化し、インテリジェントルーティングを通じて可用性を向上させる。",
        "Explanation": "AWS Global Acceleratorは、ユーザーの位置とエンドポイントの健康状態に基づいてユーザートラフィックを最適なエンドポイントに誘導することでアプリケーションのパフォーマンスを向上させます。可用性を高め、レイテンシーを減少させるため、グローバルパフォーマンス最適化に適した選択肢です。",
        "Other Options": [
            "Amazon CloudFrontを実装することは静的コンテンツをキャッシュし、レイテンシーを減少させる良いアプローチですが、動的コンテンツのルーティングを特に最適化するわけではなく、複数のアプリケーションエンドポイント全体で高可用性を確保することもできません。",
            "Amazon Route 53を使用してジオルーティングを行う複数のAWSリージョンにウェブアプリケーションをデプロイすることは有益ですが、複数のデプロイメントを管理する際の複雑さを引き起こす可能性があり、AWS Global Acceleratorと同じレベルのインテリジェントルーティングを提供しません。",
            "AWS Lambda@Edgeを使用すると、エッジロケーションでカスタムロジックを実行することで特定のユースケースのパフォーマンスを向上させることができますが、AWS Global Acceleratorのようにユーザートラフィックを最寄りのアプリケーションエンドポイントに最適にルーティングすることは本質的に行いません。"
        ]
    },
    {
        "Question Number": "66",
        "Situation": "スタートアップ企業が新しいオンラインビデオストリーミングサービスを立ち上げています。このサービスは、平均5,000人の同時ユーザーと、人気のあるイベント中に50,000人の同時ユーザーに達するピーク時の変動するユーザーベースを持つと予想されています。会社は必要なリソースにのみ支払いを行い、高品質なストリーミング体験を維持しながらコスト効果の高いインフラストラクチャを実装したいと考えています。彼らはビデオコンテンツとストリーミング機能のためのさまざまなストレージソリューションを検討しています。",
        "Question": "次のうち、ユーザーの需要に動的に調整しながらストリーミングビデオコンテンツを提供するための最もコスト効果の高いアーキテクチャデザインはどれですか？",
        "Options": {
            "1": "Amazon S3を使用してビデオファイルを保存し、AWS Elemental Media Servicesを実装してビデオストリームを処理およびスケーリングし、ピーク時に最適な配信を確保する。",
            "2": "Amazon Elastic Transcoderを利用してビデオファイルを変換し、Amazon S3に保存した後、AWS Lambda関数を使用してCDNを使用せずにS3から直接リクエストを提供する。",
            "3": "ビデオファイルを直接Amazon EFSに保存し、Amazon EC2インスタンスのフリートにマウントします。これらのインスタンスを使用してキャッシュレイヤーなしでユーザーにコンテンツをストリーミングします。",
            "4": "Amazon S3を使用してビデオファイルを保存し、Amazon CloudFrontをコンテンツ配信に組み合わせます。リクエストを処理するためにAmazon EC2インスタンスのオートスケーリンググループを実装し、受信トラフィックを処理するためのロードバランサーを前面に配置します。"
        },
        "Correct Answer": "Amazon S3を使用してビデオファイルを保存し、AWS Elemental Media Servicesを実装してビデオストリームを処理およびスケーリングし、ピーク時に最適な配信を確保する。",
        "Explanation": "このオプションは、コスト効果の高いストレージのためにAmazon S3を活用し、効率的な処理とスケーリングのためにAWS Elemental Media Servicesを使用しており、ピーク使用時に高品質な配信を確保します。このアーキテクチャは需要に基づいて動的に調整されるため、ビデオストリーミングにとってコスト効果の高いソリューションです。",
        "Other Options": [
            "このオプションはEC2インスタンスとロードバランサーに依存しており、特に低使用時に複数のEC2インスタンスを常時稼働させる必要があるため、コストが高くなる可能性があります。",
            "ビデオストレージにAmazon EFSを使用することは、潜在的なレイテンシーの問題があるため、ストリーミングには理想的ではなく、S3よりも高価になる可能性があります。このオプションには、パフォーマンスを向上させ、コストを削減できるキャッシュレイヤーが含まれていません。",
            "Amazon Elastic Transcoderはビデオフォーマットの変換に役立ちますが、CDNを使用せずにS3から直接リクエストを提供すると、特にピーク時にレイテンシーとコストが増加する可能性があります。CDNはパフォーマンスを向上させ、S3バケットへの負荷を軽減できます。"
        ]
    },
    {
        "Question Number": "67",
        "Situation": "大規模なeコマース企業がプロモーションイベントの影響でトラフィックの急増を経験しています。彼らは、オンラインサービスを妨害する可能性のある分散型サービス拒否（DDoS）攻撃について懸念しています。企業は、アプリケーションのパフォーマンスに最小限の影響を与えながら、さまざまなDDoS攻撃に対して堅牢な保護を提供するソリューションを実装したいと考えています。また、リソースに影響を与える可能性のある疑わしい活動について通知を受ける必要があります。",
        "Question": "次のうち、企業のDDoS保護と通知の要件を最も満たすソリューションはどれですか？",
        "Options": {
            "1": "包括的なDDoS保護のためにAWS Shield Advancedを実装し、AWS WAFを利用してトラフィックをフィルタリングするルールを作成します。詳細な攻撃分析のためにログを有効にし、Amazon SNSを通じて通知を設定します。",
            "2": "基本的なDDoS保護のためにAWS Shield Standardを使用し、DNSルーティングのためにRoute 53を実装します。トラフィックパターンを追跡し、チームに警告を出すカスタム監視ソリューションを作成します。",
            "3": "強化されたDDoS保護のためにAWS Shield Advancedを有効にし、CloudFrontを設定してコンテンツをキャッシュします。活動監視と通知のためにAmazon CloudWatchアラームを設定します。",
            "4": "自動DDoS保護のためにAWS Shield Standardを有効にし、トラフィック分散のためにElastic Load Balancingを統合します。監視とインシデント対応のためにAWS CloudTrailに依存します。"
        },
        "Correct Answer": "包括的なDDoS保護のためにAWS Shield Advancedを実装し、AWS WAFを利用してトラフィックをフィルタリングするルールを作成します。詳細な攻撃分析のためにログを有効にし、Amazon SNSを通じて通知を設定します。",
        "Explanation": "AWS Shield Advancedは高度なDDoS攻撃に対する強化された保護を提供し、AWS WAFと組み合わせることで悪意のあるトラフィックをフィルタリングするカスタムルールを作成できます。さらに、ログを有効にすることで攻撃パターンに関する洞察が得られ、Amazon SNSを使用することでチームへのリアルタイム通知が可能になり、企業の要件を効果的に満たします。",
        "Other Options": [
            "AWS Shield Advancedを有効にするのは良い選択ですが、CloudFrontを単独で設定するだけでは必要な包括的なDDoS保護を提供せず、ログと通知がないため、重要な監視機能が欠けています。",
            "AWS Shield Standardは基本的な保護を提供しますが、企業が必要とする詳細な通知や高度な検出機能を提供しません。カスタム監視ソリューションはAWSの組み込みサービスほど効果的ではないかもしれません。",
            "AWS Shield Standardは自動保護を提供しますが、AWS Shield AdvancedとAWS WAFの高度な機能がないため、潜在的な脅威についてチームに警告するための必要なカスタマイズとログ機能が不足しています。"
        ]
    },
    {
        "Question Number": "68",
        "Situation": "グローバルなオンラインゲーム会社は、マルチプレイヤーゲームインフラストラクチャの高可用性と短い復旧時間を確保したいと考えています。現在、単一のAWSリージョンで運用していますが、災害復旧戦略を強化したいと考えています。企業は、セカンダリーリージョンのリソースを利用して、99.99%の可用性を達成し、迅速な復旧時間を実現するソリューションを必要としています。",
        "Question": "次のうち、企業が4 9sの可用性を達成し、非常に短い復旧時間を確保するために実装できるアーキテクチャはどれですか？",
        "Options": {
            "1": "1つのリージョンにAuto Scalingグループを実装し、プライマリリージョンが失敗したときにのみセカンダリーリージョンで別のAuto Scalingグループを起動するフェイルオーバーメカニズムを構成します。",
            "2": "ゲームデータストレージのために1つのリージョンでAmazon S3を利用し、クロスリージョンレプリケーションを使用してデータをセカンダリーリージョンに複製し、ゲームサーバーはプライマリリージョンでのみアクティブに保ちます。",
            "3": "プライマリリージョンにMulti-AZデプロイメントのAmazon RDSインスタンスを設定し、別のリージョンにリードレプリカを配置してデータの可用性と迅速なフェイルオーバーを確保します。",
            "4": "ゲームサーバーを単一のAWSリージョンに展開し、Amazon Route 53を使用してヘルスチェックを行い、プライマリリージョンが失敗したときにトラフィックをスタンバイリージョンにリダイレクトします。"
        },
        "Correct Answer": "ゲームデータストレージのために1つのリージョンでAmazon S3を利用し、クロスリージョンレプリケーションを使用してデータをセカンダリーリージョンに複製し、ゲームサーバーはプライマリリージョンでのみアクティブに保ちます。",
        "Explanation": "Amazon S3をゲームデータストレージに利用し、クロスリージョンレプリケーションを有効にすることで、企業はデータが常にセカンダリーリージョンで利用可能であることを確保できます。これにより、プライマリリージョンでの障害が発生した場合に迅速な復旧が可能になり、リソースを効率的に単一のアクティブリージョンで利用できます。",
        "Other Options": [
            "単一のAWSリージョンにゲームサーバーを展開し、Route 53のヘルスチェックを使用することは、必要な復旧時間やセカンダリーリージョンでのデータ可用性を保証しません。ゲームサーバーはフェイルオーバーが発生するまで稼働しないためです。",
            "1つのリージョンにAuto Scalingグループを実装し、別のリージョンへのフェイルオーバーメカニズムを構成することは、セカンダリーグループが障害によってトリガーされるまで非アクティブであるため、望ましい4 9sの可用性を提供しません。",
            "Multi-AZデプロイメントのAmazon RDSインスタンスを設定することは高可用性を確保しますが、リードレプリカは書き込みに積極的に使用されないため、セカンダリーリージョンのリソースを使用して迅速な復旧を実現することはできません。"
        ]
    },
    {
        "Question Number": "69",
        "Situation": "金融サービス会社は、AWSの支出を最適化し、複数の部門でのコストの可視性を向上させたいと考えています。企業は、コストを効果的に配分し、これらのタグに基づいてレポートを生成できるタグ付け戦略を実装したいと考えています。AWSリソースのタグ付けに関するさまざまなオプションを検討しています。",
        "Question": "コスト配分とレポート作成をタグ付けを通じて効果的に行うために、ソリューションアーキテクトはどのアプローチを推奨すべきですか？",
        "Options": {
            "1": "リソースの作成日を基にタグを付けるスクリプトを作成し、環境のためのデフォルトタグを自動的に適用します。このスクリプトを定期的に実行するためにAWS Lambdaを使用します。",
            "2": "コストレポートを生成する前に、毎月手動でリソースにタグを付けます。この手動プロセスで作成されたタグに基づいてコストを可視化するためにAmazon QuickSightを使用します。",
            "3": "AWS Configを使用してリソースのタグ付けコンプライアンスを強制し、リソースのタイプに基づいて自動的にタグを付けます。これらの自動的に割り当てられたタグを使用してコスト配分レポートを生成します。",
            "4": "すべてのAWSアカウントにわたって一貫したタグ付けポリシーを実施し、各リソースに部門、プロジェクト、環境のための重要な識別子でタグを付けます。これらのタグに基づいてコストを分析するためにAWS Cost Explorerを利用します。"
        },
        "Correct Answer": "すべてのAWSアカウントにわたって一貫したタグ付けポリシーを実施し、各リソースに部門、プロジェクト、環境のための重要な識別子でタグを付けます。これらのタグに基づいてコストを分析するためにAWS Cost Explorerを利用します。",
        "Explanation": "一貫したタグ付けポリシーは、部門、プロジェクト、環境にわたるコストの適切な分類を可能にします。AWS Cost Explorerを使用することで、これらのタグに基づいたコスト分析が可能になり、支出に関する明確な洞察を提供し、予算の最適化に役立ちます。",
        "Other Options": [
            "AWS Configを使用してコンプライアンスを強制することは、積極的なタグ付け戦略の必要性に完全には対処できないかもしれません。自動的に割り当てられたタグは、コスト配分のための特定のビジネスニーズと一致しない可能性があります。",
            "リソースに手動でタグを付けることは、一貫性やエラーを引き起こす可能性があり、正確なコストレポートのためにタグに依存することが難しくなります。さらに、このアプローチは継続的な管理に対してスケーラブルでも効率的でもありません。",
            "リソースの作成日に基づいてタグを付けることは、コスト配分に対する意味のある文脈を提供しません。デフォルトタグはリソースの目的を正確に表さない可能性があり、不完全または誤解を招くコスト分析につながることがあります。"
        ]
    },
    {
        "Question Number": "70",
        "Situation": "多国籍企業がさまざまな地域で運営されており、オンプレミスのデータセンターとAWS環境との間に安全で信頼性の高い接続を確立する必要があります。会社はデータ転送のために低遅延と高帯域幅を必要とし、接続が障害発生時にも回復力を持つことを保証する必要があります。さらに、会社はこの接続に対して公共インターネットへの依存を避ける必要があります。",
        "Question": "オンプレミスのデータセンターとAWSとの間に専用の高帯域幅、低遅延の接続を確立し、主接続の障害時に冗長性オプションを提供するAWSサービスはどれですか？",
        "Options": {
            "1": "AWS Direct ConnectとVPNバックアップ。",
            "2": "異なる場所に冗長接続を持つAWS Direct Connect。",
            "3": "冗長性のために複数のVPNトンネルを持つAWS Site-to-Site VPN。",
            "4": "フェイルオーバーのために複数のVPN接続に接続されたAWS Transit Gateway。"
        },
        "Correct Answer": "異なる場所に冗長接続を持つAWS Direct Connect。",
        "Explanation": "AWS Direct Connectは、インターネットベースのソリューションと比較して、低遅延かつ高帯域幅を提供する専用のネットワーク接続を提供します。異なる場所に冗長接続を確立することで、会社は高可用性と接続障害に対する回復力を確保し、これは彼らの運営にとって重要です。",
        "Other Options": [
            "AWS Site-to-Site VPNは安全な接続のための実行可能なオプションですが、公共インターネットに依存しているため、遅延や帯域幅の制限を引き起こす可能性があります。複数のVPNトンネルは冗長性を提供できますが、Direct Connectの専用性には及びません。",
            "AWS Transit Gatewayは複数のVPN接続を接続できますが、それでも公共インターネットに依存しています。この設定は、会社が運営に必要とする低遅延と高帯域幅を提供しない可能性があります。",
            "VPNバックアップを持つAWS Direct Connectはセキュリティを強化できますが、主接続の障害時にはVPN接続が公共インターネットに依存するため、遅延の問題が発生し、専用接続の要件を満たさない可能性があります。"
        ]
    },
    {
        "Question Number": "71",
        "Situation": "金融サービス会社がAWS上にホストされたマルチリージョンアーキテクチャで重大な障害を経験しました。オペレーションチームは、根本原因を特定し、回復手順が効果的に実施されることを確保する任務を負っています。彼らは、緊急対応プロセスを検証し、災害復旧計画を改善するために障害シナリオをシミュレーションしたいと考えています。（2つ選択してください。）",
        "Question": "このシミュレーション中に回復アクションの理解を実行するために、ソリューションアーキテクトはどの活動を実施すべきですか？",
        "Options": {
            "1": "日常業務のためのランブックを作成し、チームを導くためにシミュレーションされた障害の処理手順を含める。",
            "2": "シミュレーションを実施する前に、重要なデータを保護するためにAWS Backupを使用して自動バックアッププロセスを設定する。",
            "3": "テスト環境で最新のバックアップからアプリケーションを完全に復元し、回復プロセスを検証する。",
            "4": "主要な利害関係者とテーブルトップ演習を実施し、インシデント対応計画と回復手順をレビューする。",
            "5": "シミュレーション中に本番環境で行われた変更を自動的にロールバックできるAWS Lambda関数を展開する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "主要な利害関係者とテーブルトップ演習を実施し、インシデント対応計画と回復手順をレビューする。",
            "テスト環境で最新のバックアップからアプリケーションを完全に復元し、回復プロセスを検証する。"
        ],
        "Explanation": "テーブルトップ演習を実施することで、チームは実際の障害のリスクなしにインシデント対応計画を議論し、洗練させることができます。バックアップからの完全な復元を実施することで、実際の回復プロセスが検証され、実際の障害時にアプリケーションが効果的に復元できることが保証されます。",
        "Other Options": [
            "自動バックアッププロセスを設定することは重要ですが、シミュレーション中に回復アクションやインシデント対応計画を直接テストするものではありません。",
            "AWS Lambda関数を展開して変更をロールバックすることは、変更管理には役立ちますが、障害シナリオでの回復プロセスを効果的にシミュレーションするものではありません。",
            "日常業務のためのランブックを作成することはチームを導くために価値がありますが、回復アクションをテストするための実践的な演習の必要性を置き換えるものではありません。"
        ]
    },
    {
        "Question Number": "72",
        "Situation": "金融サービス会社は、インフラ全体で機密データの暗号化キーとSSL/TLS証明書を管理するための安全なソリューションを必要としています。会社は、すべての暗号化キーが中央で管理され、定期的にローテーションされ、データセキュリティコンプライアンスのためにアプリケーションと統合されることを保証したいと考えています。ソリューションアーキテクトは、キー管理と証明書展開のベストプラクティスを実装する必要があります。",
        "Question": "このシナリオで暗号化キーと証明書を管理するために最も適切なソリューションはどれですか？",
        "Options": {
            "1": "オンプレミスのキー管理ソリューションを展開し、AWS上でホストされているアプリケーションのSSL/TLS証明書を手動で管理する。",
            "2": "キー管理にはAWS Key Management Service (AWS KMS)を使用し、アプリケーションのSSL/TLS証明書をプロビジョニングおよび管理するためにAWS Certificate Manager (ACM)を使用する。",
            "3": "キー管理にはAWS Secrets Managerを利用し、SSL/TLS証明書を自動的に展開するためにAWS CloudFormationを使用する。",
            "4": "AWS Lambda関数を実装して暗号化キーをローテーションし、アプリケーションコード内でSSL/TLS証明書を直接管理する。"
        },
        "Correct Answer": "キー管理にはAWS Key Management Service (AWS KMS)を使用し、アプリケーションのSSL/TLS証明書をプロビジョニングおよび管理するためにAWS Certificate Manager (ACM)を使用する。",
        "Explanation": "AWS Key Management Service (AWS KMS)は、暗号化キーを作成および管理するための中央集権的な方法を提供し、自動キーローテーションや他のAWSサービスとの統合を含みます。AWS Certificate Manager (ACM)は、SSL/TLS証明書の管理を簡素化し、自動更新を含むため、会社のセキュリティ要件に完全に合致します。",
        "Other Options": [
            "このオプションは不必要な複雑さとリスクをもたらします。オンプレミスのキー管理ソリューションを管理することはAWSの組み込みセキュリティ機能を活用せず、証明書の手動管理は潜在的な見落としやセキュリティ脆弱性を引き起こす可能性があります。",
            "AWS Secrets ManagerはAPIキーやデータベース認証情報などのシークレットを管理するために設計されていますが、暗号化キー管理には最適化されていません。さらに、SSL/TLS証明書にCloudFormationを使用することは、AWS Certificate Managerと同じレベルの自動化やメンテナンスを提供しません。",
            "AWS Lambdaはさまざまな自動化タスクに使用できますが、キーローテーションや証明書管理には適したソリューションではありません。このアプローチは不必要なオーバーヘッドと複雑さを追加し、AWS KMSとACMが提供する中央集権的な管理機能が欠けています。"
        ]
    },
    {
        "Question Number": "73",
        "Situation": "ある金融サービス会社が、プライベートVPCにホストされたデータベースにアクセスする必要があるAWS Lambda関数を開発しています。この関数は、ピーク取引期間中の高負荷に応じてスケールすることが期待されています。しかし、チームは頻繁にEC2ThrottledExceptionエラーに直面しており、Lambda関数が適切にスケールできていないことを示しています。",
        "Question": "ソリューションアーキテクトは、Lambda関数のパフォーマンスを最適化し、VPC環境内で効果的にスケールすることを保証するために何を推奨すべきですか？",
        "Options": {
            "1": "Lambda関数の同時実行設定を調整し、VPCサブネット内に十分な利用可能なIPアドレスとENIがあることを確認します。",
            "2": "VPC設定を変更して、より多くのエラスティックネットワークインターフェースを許可することで、VPC内の利用可能なENIの数を増やします。",
            "3": "Lambda関数をVPCの外にデプロイして、VPCの設定による制限なしに自由にスケールできるようにします。",
            "4": "VPC内でLambda関数を使用する代わりに、リクエストを処理するための専用EC2インスタンスを設定します。"
        },
        "Correct Answer": "Lambda関数の同時実行設定を調整し、VPCサブネット内に十分な利用可能なIPアドレスとENIがあることを確認します。",
        "Explanation": "Lambda関数の同時実行設定を調整することで、同時により多くのリクエストを処理できるようになります。VPCサブネット内に十分な利用可能なIPアドレスとENIがあることを確認することで、スロットリングや呼び出しエラーを防ぎ、需要が増加するにつれて関数が適切にスケールできるようになります。",
        "Other Options": [
            "利用可能なENIの数を増やすだけでは、Lambda関数の同時実行およびスケーリングの制限に関連する根本的な問題を解決できない可能性があります。ENIと同時実行設定の両方を管理することが重要です。",
            "Lambda関数をVPCの外にデプロイすると、VPC関連の設定が不要になりスケーラビリティが向上しますが、プライベートVPC内にホストされたデータベースへのアクセスができなくなるため、要件を満たしません。",
            "専用EC2インスタンスを設定することは、サーバーレスモデルに反するサーバーインフラストラクチャの管理が必要になります。このアプローチは、VPC内のLambda関数のスケーラビリティの問題を解決しません。"
        ]
    },
    {
        "Question Number": "74",
        "Situation": "ある小売会社が、在庫管理、顧客注文、リアルタイム分析を処理する新しいアプリケーションを開発しています。このアプリケーションは、さまざまな負荷に自動的に調整できる高いスケーラビリティを持つアーキテクチャを必要とし、データストレージ、コンピュート、分析などの特定のタスクに特化したサービスを利用する必要があります。ソリューションアーキテクトは、最適なパフォーマンスとコスト効率を確保しながら、これらの要件に最も適したAWSサービスを選択する必要があります。",
        "Question": "ソリューションアーキテクトは、アプリケーションが各タスクに適切なAWSサービスを使用することを確保するために、どのアプローチを取るべきですか？",
        "Options": {
            "1": "サーバーレスコンピューティングにはAWS Lambdaを、構造化データにはAmazon RDSを、分析にはAmazon Redshiftを利用します。",
            "2": "ファイルストレージにはAmazon EFSを、基本的なコンピューティングニーズにはAmazon Lightsailを、ビジネスインテリジェンスにはAmazon QuickSightを選択します。",
            "3": "すべてのコンピュート要件にはAmazon EC2インスタンスを利用し、データストレージにはAmazon S3を使用します。",
            "4": "コンテナ管理にはAmazon ECSを実装し、NoSQLデータストレージにはAmazon DynamoDBを、データ変換にはAWS Glueを使用します。"
        },
        "Correct Answer": "サーバーレスコンピューティングにはAWS Lambdaを、構造化データにはAmazon RDSを、分析にはAmazon Redshiftを利用します。",
        "Explanation": "このアプローチは、アプリケーションの要件に合った特化したサービスを効果的に活用します。AWS Lambdaはサーバーレスコンピューティングを可能にし、さまざまな負荷に対して非常にスケーラブルでコスト効率が良いです。Amazon RDSは構造化データ管理に最適であり、Amazon Redshiftはリアルタイム分析に最適化されているため、この組み合わせが最も適しています。",
        "Other Options": [
            "すべてのコンピュート要件にAmazon EC2インスタンスを使用すると、過剰プロビジョニングやコストの増加を招く可能性があり、需要に応じて自動的にスケールできるサーバーレスオプションを活用できません。",
            "Amazon ECSとAWS Glueを実装することは特定のユースケースには適しているかもしれませんが、特に構造化データ管理やリアルタイム分析に関して、正しい答えほどすべての要件に最適に対応していません。",
            "Amazon EFSとAmazon Lightsailを選択すると、堅牢な在庫管理および分析アプリケーションに必要なスケーラビリティと特定の最適化を提供せず、正しい答えと比較して適切ではありません。"
        ]
    },
    {
        "Question Number": "75",
        "Situation": "あるグローバルなeコマースプラットフォームは、顧客がどの地域にいてもシームレスな体験を提供するために、複数の地理的地域でリアルタイムデータの同期を必要としています。アーキテクチャには、オンライン製品カタログと一貫性を保たなければならないトランザクショナルデータベースが含まれています。ソリューションアーキテクトは、AWSリージョン間で低遅延かつ高可用性のレプリケーションをサポートするようにデータベースを構成する必要があります。",
        "Question": "ソリューションアーキテクトは、高可用性と低遅延を確保しながら効果的なデータレプリケーションを実現するために、どのオプションを実装すべきですか？",
        "Options": {
            "1": "各リージョンにおいてMulti-AZデプロイメントを使用したAmazon RDSを実装し、AWS Data Pipelineを使用してリージョン間で手動でデータをレプリケートします。",
            "2": "クロスリージョンリードレプリカを持つAmazon RDSをデプロイし、災害復旧のために自動バックアップを有効にします。",
            "3": "Amazon DynamoDBのグローバルテーブルを使用して、プラットフォーム全体でマルチリージョンの完全にレプリケートされたデータを提供します。",
            "4": "低遅延アクセスと自動フェイルオーバー機能のために、クロスリージョンレプリカを持つAmazon Auroraを設定します。"
        },
        "Correct Answer": "Amazon DynamoDBのグローバルテーブルを使用して、プラットフォーム全体でマルチリージョンの完全にレプリケートされたデータを提供します。",
        "Explanation": "Amazon DynamoDBのグローバルテーブルは、複数のリージョンにわたって完全にレプリケートされたデータを提供し、異なる地理的場所にいるユーザーに低遅延アクセスを提供します。このアーキテクチャは、リアルタイムデータの同期と高可用性の要件を手動介入なしで満たします。",
        "Other Options": [
            "クロスリージョンリードレプリカを持つAmazon RDSをデプロイすると、いくつかのレプリケーション機能を提供しますが、DynamoDBのグローバルテーブルと同じ低遅延アクセスや自動フェイルオーバー機能を実現できません。",
            "Multi-AZデプロイメントを持つAmazon RDSを実装すると、リージョン内での高可用性を提供しますが、クロスリージョンレプリケーションには対応しておらず、手動でのデータ同期が必要になり、複雑さと遅延が増加する可能性があります。",
            "クロスリージョンレプリカを持つAmazon Auroraを設定することは高可用性のための有効なソリューションですが、特に動的データを持つeコマースプラットフォームにおいて、DynamoDBのグローバルテーブルと同じ使いやすさやリアルタイム同期を提供できない可能性があります。"
        ]
    }
]