[
    {
        "Question Number": "1",
        "Situation": "ある企業がアプリケーションのデプロイメントに不変のインフラストラクチャを採用しています。彼らは、すべてのインフラストラクチャの変更がリソースをその場で変更するのではなく、置き換えることによって行われることを確実にし、一貫性を高め、ロールバックを容易にすることを目指しています。",
        "Question": "不変のインフラストラクチャの原則とその利点を最もよく説明しているのはどれですか？（2つ選択してください。）",
        "Options": {
            "1": "不変のインフラストラクチャは、サーバーやリソースが常にその場で変更されることを保証し、リソースの置き換えが必要なくなります。",
            "2": "不変のインフラストラクチャは、変更が必要なときにサーバーやインフラストラクチャのコンポーネントを完全に置き換えることを含み、実行中のインスタンスに変更が適用されないことを保証し、ロールバックを容易にします。",
            "3": "不変のインフラストラクチャは、すべての更新が既存のリソースに自動的に統合されるため、バージョン管理の必要性を排除します。",
            "4": "不変のインフラストラクチャは、サーバーの手動設定に依存し、デプロイメントプロセス中に自動化が使用されないことを保証します。",
            "5": "不変のインフラストラクチャは、すべてのデプロイメントが同一であることを保証し、設定のずれを減少させることによって一貫性を高めます。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "不変のインフラストラクチャは、変更が必要なときにサーバーやインフラストラクチャのコンポーネントを完全に置き換えることを含み、実行中のインスタンスに変更が適用されないことを保証し、ロールバックを容易にします。",
            "不変のインフラストラクチャは、すべてのデプロイメントが同一であることを保証し、設定のずれを減少させることによって一貫性を高めます。"
        ],
        "Explanation": "不変のインフラストラクチャは、変更が必要なときにサーバーやインフラストラクチャのコンポーネントを完全に置き換える原則です。これにより、実行中のインスタンスに変更が適用されず、ロールバックが容易になります。また、すべてのデプロイメントが同一であることを保証することで、一貫性が高まり、設定のずれが減少します。このアプローチは、インフラストラクチャの不整合やエラーのリスクを大幅に減少させ、より信頼性が高く管理しやすくします。",
        "Other Options": [
            "不変のインフラストラクチャは、サーバーやリソースをその場で変更することを含みません。代わりに、変更が必要なときにそれらを完全に置き換えることを含みます。",
            "不変のインフラストラクチャは、バージョン管理の必要性を排除しません。実際、バージョン管理は、インフラストラクチャのコンポーネントのさまざまなバージョンを追跡するために重要です。",
            "不変のインフラストラクチャは、サーバーの手動設定に依存しません。代わりに、すべてのデプロイメントが同一であることを保証し、変更が必要なときにサーバーやインフラストラクチャのコンポーネントを置き換えるために自動化を含むことがよくあります。"
        ]
    },
    {
        "Question Number": "2",
        "Situation": "ある小売企業が、Amazon EC2インスタンス上でアプリケーションロードバランサーの背後にあるeコマースウェブサイトを運営しています。この企業は、変動するトラフィックパターンを経験しており、コストを最小限に抑えながら、アプリケーションが自動的にスケールしてさまざまな負荷に対応できるようにしたいと考えています。",
        "Question": "これらの要件を満たすために、ソリューションアーキテクトはどのような構成を実装すべきですか？（2つ選択してください。）",
        "Options": {
            "1": "固定数のEC2インスタンスを持つオートスケーリンググループを構成し、コスト削減のためにリザーブドインスタンスを使用します。",
            "2": "変動するトラフィックを処理するために、オートスケーリンググループでスポットインスタンスを使用します。",
            "3": "CPU使用率に基づくターゲットトラッキングスケーリングポリシーを持つオートスケーリンググループを設定します。",
            "4": "手動スケーリングポリシーでAWS Elastic Beanstalkにアプリケーションをデプロイします。",
            "5": "Amazon CloudWatchを使用して予測スケーリングを実装し、トラフィックを予測して容量をプロアクティブに調整します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "変動するトラフィックを処理するために、オートスケーリンググループでスポットインスタンスを使用します。",
            "CPU使用率に基づくターゲットトラッキングスケーリングポリシーを持つオートスケーリンググループを設定します。"
        ],
        "Explanation": "オートスケーリンググループでのスポットインスタンスは、変動するトラフィックを処理するためのコスト効果の高い選択肢です。これにより、AWSクラウド内の未使用のEC2キャパシティを活用できます。スポットインスタンスは、オンデマンド価格と比較して最大90％の割引で利用可能です。CPU使用率に基づくターゲットトラッキングスケーリングポリシーを持つオートスケーリンググループは、需要に応じてアプリケーションが自動的にスケールすることを可能にします。需要が増加すると、新しいインスタンスが自動的に追加され、需要が減少すると、インスタンスが自動的に削除されます。これにより、必要な分だけを使用（および支払う）ことが保証されます。",
        "Other Options": [
            "固定数のEC2インスタンスを持つオートスケーリンググループを構成し、リザーブドインスタンスを使用することは、需要に基づく自動スケーリングを許可しないため、変動するトラフィックを処理するための最良の選択肢ではありません。リザーブドインスタンスは、オンデマンドインスタンスに対してコスト削減を提供しますが、変動するトラフィックパターンに必要な柔軟性を提供しません。",
            "手動スケーリングポリシーでAWS Elastic Beanstalkにアプリケーションをデプロイすることは、自動スケーリングを許可しないため、最良の選択肢ではありません。手動スケーリングは、インスタンスを追加または削除するために手動の介入を必要とし、変動するトラフィックパターンを処理するには理想的ではありません。",
            "Amazon CloudWatchを使用して予測スケーリングを実装し、トラフィックを予測して容量をプロアクティブに調整することは、一部のユースケースには良い選択肢かもしれませんが、この特定のシナリオにとって最もコスト効果の高いソリューションではありません。予測スケーリングは、将来のトラフィックパターンを予測し、それに応じて容量を調整するために機械学習アルゴリズムを使用しますが、他の選択肢よりも高価になる可能性があります。"
        ]
    },
    {
        "Question Number": "3",
        "Situation": "ある企業が、変動するトラフィックを経験しているウェブアプリケーションを運営しています。彼らは、ピーク時に高いトラフィックを処理できるようにしながら、リソースを過剰にプロビジョニングしないようにする必要があります。",
        "Question": "トラフィックの変動性とコスト効率を最もよく管理するために、企業はどのスケーリング戦略を使用すべきですか？",
        "Options": {
            "1": "トラフィックを分散させるために、ロードバランサーの背後にさらに多くのEC2インスタンスを追加することで水平スケーリングを使用し、需要の変化に応じてリソースがスケールすることを保証します。",
            "2": "EC2インスタンスのサイズを増やしてトラフィックを処理するために垂直スケーリングを使用しますが、これはトラフィックの急増時にそれほど柔軟性を提供しない可能性があります。",
            "3": "水平スケーリングと垂直スケーリングの組み合わせを使用し、水平スケーリングは小さなトラフィックの変化に使用し、垂直スケーリングは極端な急増を処理するために使用します。",
            "4": "手動スケーリングを使用し、トラフィックパターンの予測に基づいてEC2インスタンスのサイズと数を調整します。"
        },
        "Correct Answer": "トラフィックを分散させるために、ロードバランサーの背後にさらに多くのEC2インスタンスを追加することで水平スケーリングを使用し、需要の変化に応じてリソースがスケールすることを保証します。",
        "Explanation": "水平スケーリングは、変動するトラフィックを管理するための最も効果的な戦略です。これにより、アプリケーションはリアルタイムの需要に基づいてインスタンスを追加または削除できます。このアプローチにより、ピーク時には追加のEC2インスタンスがプロビジョニングされ、オフピーク時にはインスタンスを削減してコストを節約できます。この動的なスケーリング機能は、必要なときにのみリソースが利用されるため、柔軟性とコスト効率を提供します。",
        "Other Options": [
            "垂直スケーリングは、既存のEC2インスタンスのサイズを増やしてより多くのトラフィックを処理することを含みます。これは効果的である可能性がありますが、柔軟性に制限があり、スケーリング操作中にダウンタイムを引き起こす可能性があります。さらに、インスタンスには最大サイズ制限があり、極端なトラフィックの急増時には不十分な場合があります。",
            "水平スケーリングと垂直スケーリングの組み合わせは利点を提供する可能性がありますが、スケーリング戦略を複雑にし、水平スケーリング単独を使用するよりも効率的ではない可能性があります。水平スケーリングは、リソースの割り当てに対してより細かい制御を可能にするため、変動するトラフィックを処理するために一般的に好まれます。",
            "手動スケーリングはトラフィックパターンの予測に依存しており、これは不正確である可能性があります。このアプローチは、突然のトラフィックの変化に対応するための機敏さを提供せず、予期しない急増時にパフォーマンスの問題を引き起こし、低トラフィック時に不必要なコストを招く可能性があります。"
        ]
    },
    {
        "Question Number": "4",
        "Situation": "医療機関は、Amazon RDS for PostgreSQLに保存されているすべてのデータが静止時に暗号化され、暗号化キーが安全に管理されることを確保する必要があります。この組織は、データ保護に関する厳格な規制要件に準拠しなければなりません。",
        "Question": "これらの要件を満たすソリューションはどれですか？",
        "Options": {
            "1": "Amazon RDSの暗号化を使用して静止時の暗号化を有効にし、AWS Key Management Service (KMS)でキーを管理します。",
            "2": "Amazon S3を使用してデータベースバックアップを保存し、S3の暗号化を有効にします。",
            "3": "データの転送中にSSL/TLSを実装し、RDSのデフォルトの暗号化に依存します。",
            "4": "RDSデータベースに保存する前にアプリケーション内でデータを暗号化します。"
        },
        "Correct Answer": "Amazon RDSの暗号化を使用して静止時の暗号化を有効にし、AWS Key Management Service (KMS)でキーを管理します。",
        "Explanation": "このオプションは、Amazon RDS for PostgreSQLにおける静止時のデータ暗号化の要件に直接対応しています。Amazon RDSは、データベースに保存されているすべてのデータが暗号化されることを保証するために有効にできる組み込みの暗号化機能を提供します。さらに、AWS Key Management Service (KMS)を使用することで、暗号化キーの安全な管理が可能になり、データ保護に関する規制要件の遵守にとって重要です。このソリューションは、暗号化と安全なキー管理の両方をシームレスに確保します。",
        "Other Options": [
            "Amazon S3を使用してデータベースバックアップを保存し、S3の暗号化を有効にすることは、RDSデータベース自体の静止時のデータ暗号化の要件を満たしていません。S3の暗号化はバックアップには有用ですが、RDSに保存されているライブデータの暗号化には対応していません。",
            "データの転送中にSSL/TLSを実装することは、クライアントとデータベース間でデータを保護するために重要ですが、静止時のデータの暗号化を提供しません。さらに、RDSのデフォルトの暗号化に依存することは、カスタムキー管理やコンプライアンスチェックを許可しないため、特定の規制要件を満たさない可能性があります。",
            "RDSデータベースに保存する前にアプリケーション内でデータを暗号化することは有効なアプローチですが、追加の開発作業が必要であり、データアクセスや管理が複雑になる可能性があります。さらに、RDSの組み込みの暗号化機能を利用せず、データ保護規制の遵守を簡素化するために設計されています。"
        ]
    },
    {
        "Question Number": "5",
        "Situation": "ある企業がオンプレミスのアプリケーションをAWSに移行しています。このアプリケーションは、ウェブサーバー、アプリケーションサーバー、およびデータベースサーバーで構成されています。企業は、データベースサーバーがインターネットから直接アクセスできず、アプリケーションサーバーからのみアクセスできることを確保したいと考えています。",
        "Question": "これらの要件を満たすネットワーク構成はどれですか？（2つ選択してください。）",
        "Options": {
            "1": "ウェブサーバーとアプリケーションサーバーをパブリックサブネットに配置し、データベースサーバーをプライベートサブネットに配置します。セキュリティグループを構成して、アプリケーションサーバーからデータベースサーバーへのトラフィックのみを許可します。",
            "2": "すべてのサーバーをパブリックサブネットに配置し、ネットワークACLを使用してデータベースサーバーへのアクセスを制限します。",
            "3": "ウェブサーバーをパブリックサブネットに配置し、アプリケーションサーバーとデータベースサーバーを別々のプライベートサブネットに配置します。セキュリティグループを使用して、ウェブサーバーからアプリケーションサーバーへのトラフィックとアプリケーションサーバーからデータベースサーバーへのトラフィックのみを許可します。",
            "4": "ウェブサーバーとデータベースサーバーをパブリックサブネットに配置し、アプリケーションサーバーをプライベートサブネットに配置します。セキュリティグループを使用して、ウェブサーバーからアプリケーションサーバーへのトラフィックのみを許可します。",
            "5": "AWS Transit Gatewayを使用してサブネット間のルーティングを管理し、ルートテーブルを通じてデータベースサーバーへのアクセスを制限します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "ウェブサーバーとアプリケーションサーバーをパブリックサブネットに配置し、データベースサーバーをプライベートサブネットに配置します。セキュリティグループを構成して、アプリケーションサーバーからデータベースサーバーへのトラフィックのみを許可します。",
            "ウェブサーバーをパブリックサブネットに配置し、アプリケーションサーバーとデータベースサーバーを別々のプライベートサブネットに配置します。セキュリティグループを使用して、ウェブサーバーからアプリケーションサーバーへのトラフィックとアプリケーションサーバーからデータベースサーバーへのトラフィックのみを許可します。"
        ],
        "Explanation": "正しい回答は、ウェブサーバーとアプリケーションサーバーをパブリックサブネットに配置し、データベースサーバーをプライベートサブネットに配置するオプションです。この構成により、データベースサーバーがインターネットから直接アクセスできないことが保証されます。次に、セキュリティグループを使用してトラフィックを制御し、アプリケーションサーバーのみがデータベースサーバーにアクセスできるようにします。2つ目の正しいオプションでは、アプリケーションサーバーとデータベースサーバーが別々のプライベートサブネットに配置されており、追加のセキュリティと隔離の層が追加されます。",
        "Other Options": [
            "すべてのサーバーをパブリックサブネットに配置し、ネットワークACLを使用してデータベースサーバーへのアクセスを制限することは良いプラクティスではありません。これにより、すべてのサーバーがインターネットにさらされ、セキュリティ侵害のリスクが増加します。",
            "ウェブサーバーとデータベースサーバーをパブリックサブネットに配置し、アプリケーションサーバーをプライベートサブネットに配置することは、データベースサーバーがインターネットからアクセスできないという要件を満たしていません。",
            "AWS Transit Gatewayを使用してサブネット間のルーティングを管理し、ルートテーブルを通じてデータベースサーバーへのアクセスを制限することは、最も効率的または安全な方法ではありません。管理が複雑になる可能性があり、セキュリティグループを使用したプライベートおよびパブリックサブネットの使用と同じレベルのセキュリティを提供しません。"
        ]
    },
    {
        "Question Number": "6",
        "Situation": "小売企業は、Amazon EC2インスタンス上にホストされたeコマースウェブサイトを運営しています。このウェブサイトは、特にピークショッピングシーズン中にトラフィックパターンが変動し、企業はアプリケーションが自動的にスケールして、低トラフィック期間中に不必要なコストをかけずに変動する負荷に対応できるようにしたいと考えています。チームは、自動スケーリングをサポートしながらインフラコストを最小限に抑えるための最適なセットアップを探しています。",
        "Question": "これらの要件を満たすためにソリューションアーキテクトが実装すべき構成はどれですか？",
        "Options": {
            "1": "固定数のEC2インスタンスを持つAuto Scalingグループを構成し、長期的なコスト削減のためにリザーブドインスタンスで容量を予約します。",
            "2": "Auto Scalingグループ内でスポットインスタンスを使用して変動するトラフィックに対応し、ピーク負荷時にインスタンスをスケールアップし、コストを削減します。",
            "3": "CPU使用率に基づいて動的に容量を調整するターゲットトラッキングスケーリングポリシーを持つAuto Scalingグループを設定します。",
            "4": "AWS Elastic Beanstalkにアプリケーションをデプロイし、トラフィックパターンの変化に応じてインスタンスを追加または削除するための手動スケーリングポリシーを使用します。"
        },
        "Correct Answer": "CPU使用率に基づいて動的に容量を調整するターゲットトラッキングスケーリングポリシーを持つAuto Scalingグループを設定します。",
        "Explanation": "ターゲットトラッキングスケーリングポリシーを持つAuto Scalingグループを設定することで、アプリケーションはリアルタイムの需要に基づいてEC2インスタンスの数を自動的に調整できます。特にこの場合はCPU使用率に基づいています。この構成により、アプリケーションはピークトラフィック時に負荷の増加に対応するためにスケールアップし、低トラフィック時にはコストを最小限に抑えるためにスケールダウンできます。ターゲットトラッキングスケーリングポリシーは、実装と管理が簡単で、パフォーマンスとコスト効率のバランスを提供します。",
        "Other Options": [
            "固定数のEC2インスタンスを持つAuto Scalingグループを構成することは、トラフィックパターンに基づく動的スケーリングを許可しません。リザーブドインスタンスは長期的な使用に対するコスト削減を提供できますが、このアプローチは低トラフィック期間中にスケールダウンしないため、変動するトラフィックのニーズに効果的に対応できません。",
            "Auto Scalingグループ内でスポットインスタンスを使用することはコストを削減できますが、スポットインスタンスはAWSによって短時間で終了される可能性があり、ピーク負荷時にアプリケーションの不安定性を引き起こす可能性があります。このオプションは、高トラフィックのショッピングシーズン中に一貫した可用性を必要とする小売企業には理想的ではありません。",
            "AWS Elastic Beanstalkにアプリケーションをデプロイし、手動スケーリングポリシーを使用することは、変動するトラフィックパターンに必要な自動スケーリングを提供しません。手動スケーリングは、インスタンスの数を調整するために人間の介入を必要とし、ピーク時に遅延やパフォーマンスの問題を引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "7",
        "Situation": "メディア会社は、異なるAWSアカウントに複数のVPCを持ち、パブリックインターネットを経由せずにVPC間でコスト効率の良いプライベート通信を可能にしたいと考えています。また、この設定に関連するデータ転送コストを削減したいと考えています。",
        "Question": "どのネットワーク構成が最もコスト効率の良い解決策となりますか？",
        "Options": {
            "1": "各VPC間でVPCピアリングを使用する",
            "2": "AWS Transit Gatewayを使用して集中管理されたVPC通信を行う",
            "3": "NATゲートウェイを介してトラフィックをルーティングし、安全なアクセスを確保する",
            "4": "各VPCにVPN接続を確立する"
        },
        "Correct Answer": "AWS Transit Gatewayを使用して集中管理されたVPC通信を行う",
        "Explanation": "AWS Transit Gatewayは、複数のVPCの管理を簡素化するように設計されており、それらの間でコスト効率の良いプライベート通信を可能にします。すべてのVPCが中央ゲートウェイに接続できるハブアンドスポークモデルを提供し、複数のVPCピアリング接続の管理に伴う複雑さとコストを削減します。さらに、Transit Gatewayはトラフィックを単一のポイントを通じて集約するため、データ転送コストを削減するのにも役立ちます。これにより、複数のピアリング接続が必要となる場合の高いデータ転送料金を回避できます。",
        "Other Options": [
            "各VPC間でVPCピアリングを使用すると、VPCの数が増えるにつれて複雑でコストがかかる可能性があります。各VPCには別々のピアリング接続が必要となり、接続の組み合わせが爆発的に増加し、管理のオーバーヘッドが高くなる可能性があります。また、VPCピアリングの性質上、データ転送コストが高くなる可能性もあります。",
            "NATゲートウェイを介してトラフィックをルーティングすることは、VPC間通信には適していません。NATゲートウェイは主にプライベートサブネットからのアウトバウンドインターネットアクセスに使用されるため、このオプションではVPC間の直接通信を促進せず、NATゲートウェイを介したデータ転送に追加コストが発生します。",
            "各VPCにVPN接続を確立することは、特に複数のVPCを扱う場合には非効率的でコストがかかります。各VPN接続にはコストがかかり、ネットワークアーキテクチャに複雑さを加えます。さらに、VPN接続は通常、他のオプションに比べてスループットが低く、レイテンシを引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "8",
        "Situation": "ある会社が、SQLインジェクションやクロスサイトスクリプティングなどの一般的なウェブベースの攻撃から保護される必要があるウェブアプリケーションを展開しています。",
        "Question": "この保護を提供するために使用すべきAWSサービスはどれですか？",
        "Options": {
            "1": "AWS Shield",
            "2": "AWS WAF (Web Application Firewall)",
            "3": "Amazon Macie",
            "4": "Amazon GuardDuty"
        },
        "Correct Answer": "AWS WAF (Web Application Firewall)",
        "Explanation": "AWS WAF (Web Application Firewall)は、SQLインジェクションやクロスサイトスクリプティング（XSS）などの一般的なウェブベースの攻撃からウェブアプリケーションを保護するために特別に設計されています。ユーザーはカスタマイズ可能な条件に基づいてHTTPリクエストをフィルタリングおよび監視するルールを作成でき、悪意のあるトラフィックがアプリケーションに到達する前に効果的にブロックします。これにより、記載されたシナリオに最も適した選択肢となります。",
        "Other Options": [
            "AWS Shieldは、分散型サービス拒否攻撃からアプリケーションを保護するためのマネージドDDoS保護サービスです。重要なセキュリティ機能を提供しますが、SQLインジェクションやクロスサイトスクリプティングの脆弱性に特化していません。",
            "Amazon Macieは、機械学習を使用してAWSに保存された機密データを発見、分類、保護するデータセキュリティおよびプライバシーサービスです。ウェブアプリケーションをウェブベースの攻撃から保護するためには設計されていません。",
            "Amazon GuardDutyは、悪意のある活動や不正行為を継続的に監視し、AWSアカウントやワークロードを保護するための脅威検出サービスです。全体的なセキュリティを強化しますが、SQLインジェクションやクロスサイトスクリプティング攻撃に対する保護を特に提供するものではありません。"
        ]
    },
    {
        "Question Number": "9",
        "Situation": "ある会社がAWS上にマルチティアのウェブアプリケーションを展開しています。このアプリケーションは、Amazon EC2インスタンス上のフロントエンド層と、Amazon RDS上のバックエンドデータベースで構成されています。会社は、データベースがインターネットから直接アクセスできないこと、そしてフロントエンド層のみがデータベースと通信できることを要求しています。",
        "Question": "ソリューションアーキテクトはどのネットワーク構成を実装すべきですか？",
        "Options": {
            "1": "フロントエンド層とデータベース層の両方をパブリックサブネットに配置し、セキュリティグループを使用してアクセスを制限する。",
            "2": "フロントエンド層をパブリックサブネットに、データベース層をプライベートサブネットに配置する。セキュリティグループを設定して、フロントエンドインスタンスのみがデータベースと通信できるようにする。",
            "3": "両方の層をプライベートサブネットに配置し、インターネットアクセスのためにNATゲートウェイを使用する。",
            "4": "インターネットゲートウェイとルートテーブルを使用して、フロントエンド層とデータベース層間のアクセスを制御する。"
        },
        "Correct Answer": "フロントエンド層をパブリックサブネットに、データベース層をプライベートサブネットに配置する。セキュリティグループを設定して、フロントエンドインスタンスのみがデータベースと通信できるようにする。",
        "Explanation": "この構成により、データベースはプライベートサブネットに存在するため、インターネットから直接アクセスできないことが保証されます。パブリックサブネットにあるフロントエンド層は、フロントエンドインスタンスからのトラフィックのみを許可するセキュリティグループを介してデータベースと通信できます。この設定は、AWSにおけるセキュリティとアーキテクチャのベストプラクティスに従い、データベースが外部からのアクセスから保護されつつ、必要なアプリケーション層にはアクセス可能であることを確保します。",
        "Other Options": [
            "フロントエンド層とデータベース層の両方をパブリックサブネットに配置すると、データベースがインターネットにさらされ、データベースがインターネットから直接アクセスできないという要件に違反します。",
            "両方の層をプライベートサブネットに配置するとセキュリティが向上しますが、フロントエンド層がデータベースと通信することはできません。追加の設定（NATゲートウェイなど）が必要となりますが、このシナリオではフロントエンドがパブリックである必要があるため、これは不要です。",
            "インターネットゲートウェイとルートテーブルを使用してアクセスを制御すると、データベースがインターネットにさらされ、データベースをインターネットからアクセスできないようにするという要件に矛盾します。"
        ]
    },
    {
        "Question Number": "10",
        "Situation": "あるeコマースプラットフォームがデータベースをAWSに移行したいと考えていますが、コードの変更を最小限に抑えたいと考えています。既存のオンプレミスデータベースはPostgreSQLで、高可用性と読み取りスケーリングをサポートするマネージドソリューションが必要です。",
        "Question": "AWSのどのデータベースエンジンがこれらの要件を最も満たしますか？",
        "Options": {
            "1": "Amazon DynamoDB",
            "2": "Amazon Aurora with PostgreSQL compatibility",
            "3": "Amazon RDS for MySQL",
            "4": "Amazon DocumentDB"
        },
        "Correct Answer": "Amazon Aurora with PostgreSQL compatibility",
        "Explanation": "Amazon Aurora with PostgreSQL compatibilityは、オンプレミスのPostgreSQLデータベースからの移行に最適な選択肢です。PostgreSQLとの互換性があるように設計されているため、移行中にコードの変更が最小限で済みます。また、AuroraはマルチAZデプロイメントを通じて高可用性を提供し、リードレプリカによる読み取りスケーリング機能を備えているため、信頼性の高いパフォーマンスとスケーラビリティが求められるeコマースプラットフォームに適しています。",
        "Other Options": [
            "Amazon DynamoDBはNoSQLデータベースサービスであり、SQLクエリや既存のアプリケーションが依存している可能性のあるPostgreSQLの機能をサポートしていません。DynamoDBへの移行には、重大なコード変更とアプリケーションの完全な再アーキテクチャが必要です。",
            "Amazon RDS for MySQLはマネージドリレーショナルデータベースサービスですが、MySQLに基づいており、PostgreSQLではありません。RDS for MySQLへの移行には、アプリケーションをMySQLの構文と機能に適応させるために大幅なコード変更が必要であり、コード変更を最小限に抑えるには理想的ではありません。",
            "Amazon DocumentDBはMongoDBと互換性のあるマネージドドキュメントデータベースサービスです。DynamoDBと同様に、PostgreSQLとは互換性がなく、データモデルとアプリケーションコードの完全な見直しが必要になるため、この移行シナリオには適していません。"
        ]
    },
    {
        "Question Number": "11",
        "Situation": "ある企業が高可用性のデータベースソリューションとしてAmazon Auroraを使用する計画を立てています。ストレージのプロビジョニングを管理せずに、迅速な読み取りパフォーマンスと向上した可用性を確保したいと考えています。",
        "Question": "Amazon Auroraのどの機能がこの要件に適しており、そのアーキテクチャは標準のRDSとどのように異なりますか？（2つ選択してください）",
        "Options": {
            "1": "Auroraは、複数のアベイラビリティゾーン（AZ）にわたる共有クラスターボリュームを使用し、SSDベースのストレージを提供することで、高いIOPSと低遅延を実現します。書き込み操作用のクラスタエンドポイントと、レプリカ間で読み取りトラフィックを分散するためのリーダーエンドポイントを含んでおり、読み取りパフォーマンスを向上させます。",
            "2": "Auroraは各インスタンスにローカルストレージを必要としないため、ストレージは別途プロビジョニングおよび管理される必要があり、データ分配の制御が向上します。",
            "3": "Auroraは、単一のAZ内で垂直に自動スケーリングし、複数のインスタンスやレプリカを必要とせず、高可用性を確保します。",
            "4": "Auroraは手動ストレージ管理に依存しており、プライマリインスタンスが読み取りおよび書き込みトラフィックの両方を処理する必要があるため、低I/O要件の小規模データベースにのみ適しています。",
            "5": "Auroraのアーキテクチャはコンピュートとストレージを分離しており、それぞれを独立してスケーリングでき、複数のAZにデータを複製することで組み込みの耐障害性を提供します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Auroraは、複数のアベイラビリティゾーン（AZ）にわたる共有クラスターボリュームを使用し、SSDベースのストレージを提供することで、高いIOPSと低遅延を実現します。書き込み操作用のクラスタエンドポイントと、レプリカ間で読み取りトラフィックを分散するためのリーダーエンドポイントを含んでおり、読み取りパフォーマンスを向上させます。",
            "Auroraのアーキテクチャはコンピュートとストレージを分離しており、それぞれを独立してスケーリングでき、複数のAZにデータを複製することで組み込みの耐障害性を提供します。"
        ],
        "Explanation": "Amazon Auroraは高可用性と耐久性を考慮して設計されています。複数のアベイラビリティゾーンにまたがる共有クラスターボリュームを使用し、各AZにはデータベースのコピーがあります。このアーキテクチャにより、高いIOPSと低遅延が実現され、読み取りパフォーマンスが向上します。また、Auroraはコンピュートとストレージを分離しており、それぞれを独立してスケーリングできます。この分離により、複数のAZにデータを複製することで組み込みの耐障害性も提供されます。",
        "Other Options": [
            "Auroraは各インスタンスにローカルストレージを必要としません。代わりに、複数のAZにまたがる共有ストレージボリュームを使用します。したがって、ストレージを別途プロビジョニングおよび管理する必要はありません。",
            "Auroraは単一のAZ内で自動的に垂直スケーリングしません。代わりに、複数のAZにまたがる分散アーキテクチャを使用します。このアーキテクチャにより、高可用性と耐障害性が実現されます。",
            "Auroraは手動ストレージ管理に依存しません。代わりに、ストレージを自動的に管理し、必要に応じてスケーリングします。プライマリインスタンスは、Auroraが書き込み操作用のクラスタエンドポイントと読み取り操作用のリーダーエンドポイントを提供するため、読み取りおよび書き込みトラフィックの両方を処理する必要はありません。"
        ]
    },
    {
        "Question Number": "12",
        "Situation": "あるソーシャルメディアアプリケーションがユーザーポストを保存し、高ボリュームの読み取り操作と頻繁な書き込み更新のためにデータベースを最適化する必要があります。また、ユーザーエンゲージメントに関するリアルタイム分析も必要です。",
        "Question": "ソリューションアーキテクトは、混合アクセスパターンを効率的に処理するためにどのデータベースソリューションを推奨すべきですか？",
        "Options": {
            "1": "Amazon RDS for PostgreSQL with Read Replicas and Amazon Redshift for analytics.",
            "2": "Amazon DynamoDB with provisioned capacity and DynamoDB Streams integrated with AWS Lambda for real-time processing.",
            "3": "Amazon Aurora Serverless with multi-master configuration to handle read and write operations.",
            "4": "Amazon S3 with Amazon Athena for querying and Amazon Kinesis for real-time analytics."
        },
        "Correct Answer": "Amazon DynamoDB with provisioned capacity and DynamoDB Streams integrated with AWS Lambda for real-time processing.",
        "Explanation": "Amazon DynamoDBは、読み取りおよび書き込み操作の両方に対して高いパフォーマンスを提供する完全に管理されたNoSQLデータベースサービスであり、混合アクセスパターンを持つアプリケーションに最適です。プロビジョニングされたキャパシティにより、アプリケーションのニーズに基づいてスケーリングが可能であり、高ボリュームの読み取り操作を効率的に処理できます。さらに、DynamoDB Streamsを使用してデータベース内のアイテムの変更をキャプチャし、これをトリガーとしてAWS Lambda関数を実行することで、ユーザーエンゲージメントに関するリアルタイム処理と分析を行うことができます。この組み合わせにより、効率的なデータストレージとリアルタイム分析が可能になり、アプリケーションの要件を効果的に満たします。",
        "Other Options": [
            "Amazon RDS for PostgreSQL with Read Replicas and Amazon Redshift for analyticsは最適な選択肢ではありません。RDSはリードレプリカを使用して読み取り操作を処理できますが、高ボリュームの書き込み操作に対してDynamoDBほど効率的にスケールしない可能性があります。さらに、Redshiftを分析に使用すると、バッチ処理向けに最適化されているため、リアルタイム分析に遅延が生じます。",
            "Amazon Aurora Serverless with multi-master configurationは読み取りおよび書き込み操作を処理できますが、高ボリュームのアクセスパターンに対するスケーラビリティとパフォーマンスはDynamoDBほどではないかもしれません。Auroraはリレーショナルデータにより適しており、DynamoDBのLambdaとの統合に比べてリアルタイム分析にはあまり効率的ではない可能性があります。",
            "Amazon S3 with Amazon Athena for querying and Amazon Kinesis for real-time analyticsは適していません。S3は主にストレージサービスであり、高頻度の書き込み操作を効率的にサポートしていません。Kinesisはリアルタイムデータストリームを処理できますが、この組み合わせはDynamoDBが提供するような混合アクセスパターンに対する堅牢なソリューションを提供しません。"
        ]
    },
    {
        "Question Number": "13",
        "Situation": "複数の部門を持つ大企業が、各ビジネスユニットのために別々のAWSアカウントを使用しており、ネットワーク関連のコストを監視および管理したいと考えています。彼らは、VPC、NATゲートウェイ、データ転送コストなどのネットワーク費用を特定し、適切な部門に割り当てる方法を必要としています。これにより、組織全体で正確なコスト分配と責任を確保します。",
        "Question": "どのAWSコスト管理機能が彼らの目標達成に最も役立ちますか？",
        "Options": {
            "1": "ネットワークリソースのコスト配分タグを有効にし、部門ごとにタグを割り当ててネットワーク関連のコストを正確に配分する",
            "2": "各部門のために別々の仮想プライベートクラウド（VPC）を設定し、各VPCのコストを個別に監視する",
            "3": "AWS Trusted Advisorを使用して、ネットワーク使用状況を定期的に監視し、コスト削減のための推奨事項を取得する",
            "4": "各部門のために異なるアベイラビリティゾーンを設定し、ゾーンごとのデータ転送コストを追跡する"
        },
        "Correct Answer": "ネットワークリソースのコスト配分タグを有効にし、部門ごとにタグを割り当ててネットワーク関連のコストを正確に配分する",
        "Explanation": "ネットワークリソースのコスト配分タグを有効にすることで、企業は特定の部門に関連するコストを分類し、追跡することができます。VPC、NATゲートウェイ、データ転送などのリソースにタグを割り当てることで、各部門が負担した費用を反映した詳細なコストレポートを生成できます。この方法は、ネットワーク関連のコストを配分する明確で整理された方法を提供し、ビジネスユニット全体での責任と透明性を確保します。",
        "Other Options": [
            "各部門のために別々の仮想プライベートクラウド（VPC）を設定することはリソースを隔離するのに役立つかもしれませんが、コストを追跡し配分するためのメカニズムを本質的に提供するものではありません。タグ付けやコスト管理戦略がなければ、部門間でコストを正確に分配するのは難しいでしょう。",
            "AWS Trusted Advisorを使用することで、リソース使用の最適化やコスト削減のための洞察や推奨事項を得ることができますが、特定の部門にコストを直接配分するわけではありません。これは、詳細なコスト追跡や配分よりも、ベストプラクティスやコスト最適化に重点を置いています。",
            "各部門のために異なるアベイラビリティゾーンを設定することは、データ転送コストを追跡することと直接的には関連しません。アベイラビリティゾーンは、冗長性と可用性に関するものであり、コスト配分とは異なります。データ転送コストは、通常、使用されるリソースとその構成に基づいて発生し、ゾーン自体によるものではありません。"
        ]
    },
    {
        "Question Number": "14",
        "Situation": "スタートアップが、さまざまなIoTデバイスからのライブメトリクスを表示するリアルタイムダッシュボードを開発しています。このダッシュボードは、迅速なデータ取り込みと最新のメトリクスへの低遅延アクセスを必要とし、タイムリーな更新を確保します。ソリューションは、デバイスの数がスケールするにつれて、さまざまなデータボリュームを処理できる必要があります。",
        "Question": "これらのサイズと速度の要件を満たすために、ソリューションアーキテクトはどのAWSサービスを使用すべきですか？（2つ選択）",
        "Options": {
            "1": "Amazon S3とAmazon Athena",
            "2": "Amazon Kinesis Data Streams",
            "3": "AWS BatchとAmazon EC2スポットインスタンス",
            "4": "Amazon RDSとリードレプリカ",
            "5": "Amazon DynamoDBとDynamoDB Streams"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon Kinesis Data Streams",
            "Amazon DynamoDBとDynamoDB Streams"
        ],
        "Explanation": "Amazon Kinesis Data Streamsは、リアルタイムデータストリーミングのために設計されています。数十万のソースから毎秒ギガバイトのデータを継続的にキャプチャできるため、ダッシュボードに必要な迅速なデータ取り込みと低遅延アクセスを処理するのに適しています。Amazon DynamoDBとDynamoDB Streamsも適しており、データへの低遅延アクセスを提供し、高トラフィック負荷を処理できるため、デバイスの数がスケールする際に役立ちます。DynamoDB Streamsは、任意のDynamoDBテーブル内のアイテムレベルの変更の時間順序付きシーケンスをキャプチャし、このデータを24時間保存します。",
        "Other Options": [
            "Amazon S3とAmazon Athenaの組み合わせは、大規模データセットの保存とクエリに適しており、リアルタイムデータ取り込みや低遅延アクセスには適していません。",
            "AWS BatchとAmazon EC2スポットインスタンスは、バッチ処理ジョブに適しており、リアルタイムデータ取り込みや低遅延アクセスには適していません。",
            "Amazon RDSとリードレプリカは、リードトラフィックを分散させるのに役立ちますが、リアルタイムデータ取り込みや、数千のデバイスからのさまざまなデータボリュームを処理するためには設計されていません。"
        ]
    },
    {
        "Question Number": "15",
        "Situation": "ソーシャルメディアアプリケーションは、高いボリュームの読み取りリクエストを持ち、ユーザーが頻繁にプロフィール情報やニュースフィードを取得しています。アプリケーションは現在、各読み取りリクエストのためにAmazon Auroraデータベースを直接クエリしているため、レイテンシの問題に直面しています。開発チームは、読み取りパフォーマンスを向上させ、データベースの負荷をコスト効率よく削減したいと考えており、アプリケーションの軽微な変更にはオープンです。",
        "Question": "ソリューションアーキテクトはどのソリューションを推奨すべきですか？",
        "Options": {
            "1": "Amazon ElastiCacheをRedisで実装し、頻繁にアクセスされるデータをキャッシュしてデータベースクエリを減らす",
            "2": "Amazon Auroraデータベースでリードレプリカを有効にして読み取り負荷を分散する",
            "3": "Amazon RDS Proxyを使用してデータベース接続をプールし、共有してパフォーマンスを向上させる",
            "4": "頻繁にアクセスされるデータをAmazon S3に保存し、アプリケーションから直接アクセスする"
        },
        "Correct Answer": "Amazon ElastiCacheをRedisで実装し、頻繁にアクセスされるデータをキャッシュしてデータベースクエリを減らす",
        "Explanation": "Amazon ElastiCacheをRedisで実装することは、読み取りパフォーマンスを向上させ、Amazon Auroraデータベースへの負荷を減らすための最も効果的なソリューションです。ユーザープロフィールやニュースフィードなどの頻繁にアクセスされるデータをキャッシュすることで、アプリケーションは各リクエストのためにデータベースをクエリするのではなく、キャッシュから直接読み取りリクエストを処理できます。これにより、レイテンシとデータベースの負荷が大幅に削減され、コスト削減とユーザーエクスペリエンスの向上が実現します。ElastiCacheは、高速データ取得のために設計されており、高い読み取りリクエストボリュームを持つアプリケーションに最適です。",
        "Other Options": [
            "Amazon Auroraデータベースでリードレプリカを有効にすることは、読み取り負荷を分散させるのに役立ちますが、キャッシングほど効果的にレイテンシの問題を解決するわけではありません。リードレプリカはコストがかかる場合があり、高ボリュームの読み取りリクエストに必要な即時のパフォーマンス向上を提供しないかもしれません。",
            "Amazon RDS Proxyを使用してデータベース接続をプールし、共有することで、接続の確立にかかるオーバーヘッドを減らしてパフォーマンスを向上させることができますが、データベースに送信される読み取りクエリの数を直接減らすわけではありません。このオプションは接続管理には役立ちますが、高い読み取りリクエストボリュームによって引き起こされる根本的なレイテンシの問題を解決するものではありません。",
            "頻繁にアクセスされるデータをAmazon S3に保存し、アプリケーションから直接アクセスすることは、リアルタイムデータ取得には理想的ではありません。S3はオブジェクトストレージ用に設計されており、追加のレイテンシを引き起こす可能性があります。このアプローチは、静的コンテンツには適していますが、頻繁に更新が必要な動的データには効果的ではありません。"
        ]
    },
    {
        "Question Number": "16",
        "Situation": "金融機関は、AWS上で高いIOPS、低遅延、ネイティブWindowsファイルシステム機能をサポートし、機密性の高いクライアントデータを保存・処理するための完全管理型ファイルストレージソリューションを必要としています。このシステムは、SMBを介して安全なアクセスを提供し、ユーザー認証のために会社のオンプレミスActive Directoryと統合する必要があります。",
        "Question": "これらの要件を最もよく満たすAWSサービスの構成はどれですか？（2つ選択してください。）",
        "Options": {
            "1": "高速度アクセスのためのTransfer Accelerationを使用したAmazon S3",
            "2": "Multi-AZデプロイメントのAmazon FSx for Windows File Server",
            "3": "静止時および転送時の暗号化を備えたAmazon EFS",
            "4": "キャッシュボリュームを使用したAWS Storage Gateway",
            "5": "Active Directory統合を備えたAmazon FSx for NetApp ONTAP"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Multi-AZデプロイメントのAmazon FSx for Windows File Server",
            "キャッシュボリュームを使用したAWS Storage Gateway"
        ],
        "Explanation": "Multi-AZデプロイメントのAmazon FSx for Windows File Serverは、高いIOPS、低遅延、ネイティブWindowsファイルシステム機能をサポートする完全管理型のMicrosoft Windowsファイルシステムです。また、SMBを介して安全なアクセスを提供し、ユーザー認証のためにオンプレミスのActive Directoryと統合されているため、すべての要件を満たしています。キャッシュボリュームを使用したAWS Storage Gatewayは、オンプレミスアプリケーションからAWS内のデータへの低遅延アクセスを提供するために、頻繁にアクセスされるデータをローカルに保存しながら、すべてのデータをAmazon S3に保持します。また、ユーザー認証のためにオンプレミスのActive Directoryとの統合もサポートしています。",
        "Other Options": [
            "高速度アクセスのためのTransfer Accelerationを使用したAmazon S3は、ネイティブWindowsファイルシステム機能やSMBプロトコルをサポートしていません。また、ユーザー認証のためにオンプレミスのActive Directoryと統合することもできません。",
            "静止時および転送時の暗号化を備えたAmazon EFSは、完全管理型ファイルシステムですが、高いIOPSや低遅延を目的としておらず、ネイティブWindowsファイルシステム機能やSMBプロトコルをサポートしていません。",
            "Active Directory統合を備えたAmazon FSx for NetApp ONTAPは、SMBプロトコルをサポートし、オンプレミスのActive Directoryと統合されている完全管理型ファイルシステムサービスですが、ネイティブWindowsファイルシステム機能をサポートしていません。"
        ]
    },
    {
        "Question Number": "17",
        "Situation": "ある会社は、EC2インスタンス上でアプリケーションロードバランサー（ALB）の背後にあるWebアプリケーションを運営しています。このアプリケーションは、URLパスに基づいてトラフィックをルーティングする必要があり、特定のサービスが特定のタイプのリクエストを処理します。また、トラフィックが高い期間中に特定のインスタンスが過負荷にならないように、インスタンス間でトラフィックが均等に分配されることを確保したいと考えています。",
        "Question": "効率的な負荷分散を実現するために、会社はどの構成を適用すべきですか？",
        "Options": {
            "1": "ALBをパスベースのルーティングで構成し、URLパスに基づいて異なるターゲットグループにトラフィックを指向し、各グループ内のEC2インスタンス間でトラフィックが均等にバランスされるようにします。",
            "2": "ALBを構成してすべてのトラフィックを単一のEC2インスタンスにルーティングし、シンプルさを追求しますが、ピーク時にインスタンスサイズを増加させるためにAuto Scalingを使用します。",
            "3": "パスベースのルーティングをサポートし、複数のアプリケーションエンドポイントに基づいてトラフィックを分配するために、ALBの代わりにClassic Load Balancer（CLB）を使用します。",
            "4": "異なるアプリケーションドメインごとに複数のALBを設定し、トラフィックパターンに基づいて手動で各ALBにトラフィックを指向します。"
        },
        "Correct Answer": "ALBをパスベースのルーティングで構成し、URLパスに基づいて異なるターゲットグループにトラフィックを指向し、各グループ内のEC2インスタンス間でトラフィックが均等にバランスされるようにします。",
        "Explanation": "ALBをパスベースのルーティングで構成することで、会社は受信リクエストのURLパスに基づいてトラフィックを異なるターゲットグループに指向できます。これにより、特定のサービスが特定のタイプのリクエストを処理できるようになり、アプリケーションのアーキテクチャにとって重要です。さらに、ALBは各ターゲットグループ内のEC2インスタンス間でトラフィックを自動的にバランスさせるため、ピーク時に特定のインスタンスが過負荷になることを防ぎます。この設定は、トラフィックを効率的に管理し、アプリケーションのパフォーマンスを維持するために最適です。",
        "Other Options": [
            "ALBを構成してすべてのトラフィックを単一のEC2インスタンスにルーティングすることは、負荷分散の目的に反するため、実行可能な解決策ではありません。これにより、特にピーク時にその単一のインスタンスに過負荷がかかる可能性があり、複数のインスタンスを持つ利点を活用できません。",
            "ALBの代わりにClassic Load Balancer（CLB）を使用することは誤りです。CLBはパスベースのルーティングをサポートしていません。ALBは、URLパスに基づいてトラフィックを指向するために必要な高度なルーティング機能を特に設計されています。",
            "異なるアプリケーションドメイン用に複数のALBを設定し、手動で各ALBにトラフィックを指向することは、アーキテクチャに不必要な複雑さを加えます。複数のサービスのトラフィックを管理するために、パスベースのルーティングを使用した単一のALBを使用する方が効率的であり、構成を簡素化し、運用負担を軽減します。"
        ]
    },
    {
        "Question Number": "18",
        "Situation": "ある組織はAWS Organizationsを使用しており、フル管理者アクセスを持つユーザーであっても特定のアクションを防ぐために、複数のアカウントにわたる権限境界を実装したいと考えています。また、管理オーバーヘッドを低く保ちたいと考えています。",
        "Question": "これらの要件を最もよく満たすService Control Policy（SCP）アーキテクチャの種類はどれであり、組織内のIAMユーザーの権限にどのような影響を与えますか？",
        "Options": {
            "1": "特定のサービスのみを明示的に許可するAllow Listアーキテクチャを使用し、他のすべてのアクションを制限してセキュリティと制御を強化します。",
            "2": "特定のアクションを拒否し、他のすべてのアクションをデフォルトで許可するDeny Listアーキテクチャを使用し、管理オーバーヘッドを最小限に抑えます。",
            "3": "すべてのアクションを明示的に拒否し、必要な各サービスの権限を手動で追加するDeny Listアーキテクチャを使用します。",
            "4": "ルートユーザーのアクションのみを許可するAllow Listアーキテクチャを使用し、組織内のすべてのIAMユーザーの権限をブロックします。"
        },
        "Correct Answer": "特定のアクションを拒否し、他のすべてのアクションをデフォルトで許可するDeny Listアーキテクチャを使用し、管理オーバーヘッドを最小限に抑えます。",
        "Explanation": "Deny Listアーキテクチャは、このシナリオにおいて効果的です。なぜなら、組織が拒否すべきアクションのみを指定でき、他のすべてのアクションはデフォルトで許可されるからです。このアプローチは、組織が許可されたアクションの広範なリストを管理する必要がないため、管理オーバーヘッドを最小限に抑えます。代わりに、リスクをもたらす特定のアクションを特定して拒否することに集中できるため、IAMユーザーが不必要な制限なしにタスクを実行できる柔軟性を維持できます。",
        "Other Options": [
            "Allow Listアーキテクチャを使用すると、組織は特定のサービスのみを明示的に定義して許可する必要があり、新しいサービスが導入されたり、既存のサービスが変更されたりするたびに許可されたサービスのリストを継続的に更新する必要があるため、管理オーバーヘッドが増加します。",
            "すべてのアクションを明示的に拒否するDeny Listアーキテクチャは、過度に制限的で実用的ではありません。なぜなら、組織が必要な各サービスの権限を手動で追加する必要があるため、管理オーバーヘッドが大幅に増加し、生産性が妨げられる可能性があるからです。ユーザーは明示的に許可されない限り、必要なアクションを実行できなくなります。",
            "ルートユーザーのアクションのみを許可するAllow Listアーキテクチャを使用すると、組織内のすべてのIAMユーザーの権限が実質的にブロックされ、管理者アクセスを持つユーザーが職務を遂行できるという要件に反します。これは、権限境界を実装しつつ、IAMユーザーに必要なアクションを実行できるようにするという組織の目標を満たすものではありません。"
        ]
    },
    {
        "Question Number": "19",
        "Situation": "ある企業がAWS Key Management Service (KMS)を使用して機密データを保護しています。この企業は、このデータを暗号化するために使用されるキーがAWS内で安全に管理され、保存され、AWS環境を離れないことを確実にしたいと考えています。",
        "Question": "AWS KMSのどの特性が暗号化キーを安全に保ち、AWSインフラ内に留めることを保証し、どのタイプの暗号化をサポートしていますか？",
        "Options": {
            "1": "KMSキーは専用のKMSリージョン内に隔離され、対称暗号化のみをサポートします。",
            "2": "KMSキーはAWS KMSを離れず、対称暗号化と非対称暗号化の両方をサポートします。",
            "3": "KMSキーはAWSから外部使用のためにエクスポートでき、非対称暗号化のみをサポートします。",
            "4": "KMSキーは複数のAWSアカウント間で共有され、対称暗号化のみをサポートします。"
        },
        "Correct Answer": "KMSキーはAWS KMSを離れず、対称暗号化と非対称暗号化の両方をサポートします。",
        "Explanation": "AWS Key Management Service (KMS)は、AWS環境内で暗号化キーを安全に管理するために設計されています。その主な特性の一つは、暗号化キーがAWSインフラの外に露出することがないため、安全性が保たれることです。さらに、AWS KMSは対称暗号化（同じキーを使用して暗号化と復号化を行う）と非対称暗号化（キーのペアを使用する）をサポートしています。この柔軟性により、ユーザーはセキュリティ要件に基づいて適切な暗号化方法を選択できます。",
        "Other Options": [
            "KMSキーは専用のKMSリージョン内に隔離され、対称暗号化のみをサポートします。この選択肢は不正確です。なぜなら、KMSキーは確かにリージョン固有ですが、対称暗号化と非対称暗号化の両方をサポートしているからです。",
            "KMSキーはAWSから外部使用のためにエクスポートでき、非対称暗号化のみをサポートします。この選択肢は不正確です。なぜなら、KMSキーは外部使用のためにエクスポートできず、AWS内に留まるように設計されているからです。さらに、KMSは対称暗号化と非対称暗号化の両方をサポートしています。",
            "KMSキーは複数のAWSアカウント間で共有され、対称暗号化のみをサポートします。この選択肢は不正確です。なぜなら、KMSキーはリソースポリシーを通じてアカウント間で共有できるものの、対称暗号化と非対称暗号化の両方をサポートしているからです。"
        ]
    },
    {
        "Question Number": "20",
        "Situation": "ある企業が複数のアベイラビリティゾーン（AZ）にわたってアプリケーションロードバランサー（ALB）を展開し、受信トラフィックを分散するためにクロスゾーンロードバランシングを有効にしました。",
        "Question": "クロスゾーンロードバランシングはどのように負荷分散を改善し、1つのAZでのトラフィックの急増に対処するためにどのような利点を提供しますか？",
        "Options": {
            "1": "クロスゾーンロードバランシングにより、各ロードバランサーノードは自分のAZ内のターゲットにのみトラフィックをルーティングでき、AZの障害時に隔離と回復力を提供します。",
            "2": "クロスゾーンロードバランシングにより、各ロードバランサーノードはすべてのAZ内のターゲットに均等にトラフィックをルーティングでき、よりバランスの取れた負荷分散を確保し、1つのAZ内のターゲットが過負荷になるリスクを減らします。",
            "3": "クロスゾーンロードバランシングは、リクエストごとに1つのターゲットにのみトラフィックをルーティングし、レイテンシを減少させ、各AZのユーザーのパフォーマンスを向上させます。",
            "4": "クロスゾーンロードバランシングは単一AZのセットアップでのみ効果的であり、複数のAZが関与する場合には影響を与えません。"
        },
        "Correct Answer": "クロスゾーンロードバランシングにより、各ロードバランサーノードはすべてのAZ内のターゲットに均等にトラフィックをルーティングでき、よりバランスの取れた負荷分散を確保し、1つのAZ内のターゲットが過負荷になるリスクを減らします。",
        "Explanation": "クロスゾーンロードバランシングにより、アプリケーションロードバランサーは異なるアベイラビリティゾーンにあるすべての登録ターゲットに受信トラフィックを均等に分散できます。これは、1つのAZでトラフィックが急増した場合、ロードバランサーが他のAZのターゲットにトラフィックを指向できることを意味し、単一のAZがボトルネックになるのを防ぎます。この機能は、特にトラフィックの急増時にアプリケーションの全体的な回復力とパフォーマンスを向上させます。",
        "Other Options": [
            "クロスゾーンロードバランシングにより、各ロードバランサーノードは自分のAZ内のターゲットにのみトラフィックをルーティングでき、AZの障害時に隔離と回復力を提供します。これは不正確です。なぜなら、クロスゾーンロードバランシングは特に複数のAZにわたってトラフィックをルーティングできるため、単一のAZ内でのみルーティングすることとは逆だからです。",
            "この選択肢は不正確です。なぜなら、クロスゾーンロードバランシングの機能を誤って表現しているからです。負荷をバランスさせることを目的としていますが、すべてのAZにトラフィックを分散させることによって行われるものであり、単一のAZ内のターゲット間での均等な分配を保証するものではありません。",
            "この選択肢は不正確です。なぜなら、クロスゾーンロードバランシングはリクエストごとに1つのターゲットにトラフィックを制限しません。代わりに、複数のターゲットにトラフィックを分散させ、効果的に負荷を管理し、パフォーマンスを向上させるのです。"
        ]
    },
    {
        "Question Number": "21",
        "Situation": "あるソーシャルメディアプラットフォームが、ユーザー生成コンテンツをリアルタイムで監視・分析し、不適切な投稿に迅速に対応することを望んでいます。このプラットフォームは、数百万のユーザーからの継続的なデータストリームを同時に処理するためのスケーラブルなソリューションが必要です。",
        "Question": "このシナリオでストリーミングデータ処理のためにソリューションアーキテクトが推奨すべきAWSサービスはどれですか？（2つ選択してください。）",
        "Options": {
            "1": "Amazon Simple Queue Service (SQS)",
            "2": "Amazon Kinesis Data Streams",
            "3": "Amazon Managed Streaming for Apache Kafka (MSK)",
            "4": "AWS Lambda with scheduled triggers",
            "5": "Amazon EventBridge"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon Kinesis Data Streams",
            "Amazon Managed Streaming for Apache Kafka (MSK)"
        ],
        "Explanation": "Amazon Kinesis Data Streamsは、リアルタイムのストリーミングデータを収集、処理、分析するために設計されており、タイムリーな洞察を得て新しい情報に迅速に反応できます。あらゆる量のストリーミングデータを処理でき、非常に低いレイテンシで数十万のソースからデータを処理できます。Amazon Managed Streaming for Apache Kafka (MSK)は、Apache Kafkaを使用してストリーミングデータを処理するアプリケーションを簡単に構築・実行できるフルマネージドサービスです。高ボリュームのリアルタイムデータ処理タスクに非常に適しています。",
        "Other Options": [
            "Amazon Simple Queue Service (SQS)は、マイクロサービス、分散システム、サーバーレスアプリケーションをデカップリングし、スケールさせるためのフルマネージドメッセージキューイングサービスです。しかし、リアルタイムのストリーミングデータ処理には設計されていません。",
            "AWS Lambda with scheduled triggersは、サーバーをプロビジョニングまたは管理することなくコードを実行できるコンピュートサービスです。Lambdaはリアルタイムのファイル変更を処理できますが、「スケジュールされたトリガー」オプションはこのシナリオのリアルタイム要件には適合しません。",
            "Amazon EventBridgeは、独自のアプリケーション、統合されたSaaSアプリケーション、およびAWSサービスからのデータを使用してアプリケーションを簡単に接続できるサーバーレスイベントバスです。リアルタイムのストリーミングデータ処理専用に設計されているわけではありません。"
        ]
    },
    {
        "Question Number": "22",
        "Situation": "ある企業が、AWS Key Management Service (KMS)を使用して、4 KBを超える大きなファイルを暗号化する必要があります。暗号化プロセスには、即時使用のための平文バージョンと、暗号化データと一緒に保存するための安全なバージョンの両方が含まれなければなりません。",
        "Question": "この要件を満たすために企業が使用すべきKMSの機能は何ですか？また、4 KBを超えるデータの暗号化をどのように処理しますか？",
        "Options": {
            "1": "KMSキーを直接使用してデータを暗号化します。KMSは追加の手順なしで任意のサイズのファイルをサポートしています。",
            "2": "KMSでデータ暗号化キー（DEK）を生成し、平文DEKを使用してデータを暗号化し、暗号文DEKを暗号化データと一緒に保存します。",
            "3": "カスタマー管理のKMSキーをカスタムポリシーで使用して、大きなファイルの暗号化を許可し、平文と暗号文の両方のコピーを維持します。",
            "4": "データを4 KBのチャンクに分割し、各チャンクを個別に暗号化し、復号後に再構成することで、KMSで直接データを暗号化します。"
        },
        "Correct Answer": "KMSでデータ暗号化キー（DEK）を生成し、平文DEKを使用してデータを暗号化し、暗号文DEKを暗号化データと一緒に保存します。",
        "Explanation": "AWS Key Management Service (KMS)には、直接暗号化操作に対して4 KBの制限があります。大きなファイルを暗号化するための推奨アプローチは、KMSを使用してデータ暗号化キー（DEK）を生成することです。DEKはデータを暗号化するために使用され、4 KBを超えるファイルの暗号化を可能にします。平文DEKは即時復号に使用でき、暗号文DEK（KMSキーで暗号化されたもの）は、暗号化データと一緒に安全に保存されます。この方法は、大きなファイルに対して効率的でスケーラブルな暗号化プロセスを保証します。",
        "Other Options": [
            "KMSキーを直接使用してデータを暗号化するのは誤りです。KMSには暗号化操作に対して4 KBのサイズ制限があるためです。このサイズを超えるファイルは、DEKを使用するなど、異なる方法で処理する必要があります。",
            "DEKを生成することは正しいですが、このオプションはDEKを暗号化データと一緒に暗号文として保存する必要があることを明示していません。これは、セキュリティを維持し、後で復号を可能にするために重要です。",
            "カスタマー管理のKMSキーをカスタムポリシーで使用することは、KMS暗号化のサイズ制限に直接対処していません。大きなファイルを暗号化する方法は、キー管理ポリシーに関係なく、DEKの使用を必要とします。"
        ]
    },
    {
        "Question Number": "23",
        "Situation": "ある企業が、AWS環境がセキュリティのベストプラクティスとコンプライアンス基準に準拠していることを確認する必要があります。企業は、潜在的なセキュリティ脆弱性を検出し、コンプライアンスを確保するために、AWSリソースの継続的な監視を望んでいます。",
        "Question": "ソリューションアーキテクトはどのAWSサービスを推奨すべきですか？（2つ選択してください。）",
        "Options": {
            "1": "AWS Config",
            "2": "Amazon GuardDuty",
            "3": "AWS Security Hub",
            "4": "AWS CloudTrail",
            "5": "AWS Shield Advanced"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Security Hub",
            "Amazon GuardDuty"
        ],
        "Explanation": "AWS Security Hubは、AWSアカウント全体の高優先度のセキュリティアラートとコンプライアンス状況の包括的なビューを提供します。複数のAWSサービス（Amazon GuardDuty、Amazon Inspector、Amazon Macieなど）やAWSパートナーソリューションからのセキュリティアラートや発見を集約、整理、優先順位付けします。Amazon GuardDutyは、悪意のある活動や不正行為を継続的に監視し、AWSアカウントやワークロードを保護するための脅威検出サービスです。AWS CloudTrailのイベントログ、Amazon VPCフローログ、DNSログなど、複数のAWSデータソースにわたる数十億のイベントを分析します。",
        "Other Options": [
            "AWS Configは、AWSリソースの構成を評価、監査、評価するためのサービスです。潜在的なセキュリティ脆弱性の継続的な監視を提供しません。",
            "AWS CloudTrailは、AWSアカウントのガバナンス、コンプライアンス、運用監査、リスク監査を可能にするサービスですが、潜在的なセキュリティ脆弱性の継続的な監視を提供しません。",
            "AWS Shield AdvancedはDDoS保護とコスト保護を提供しますが、潜在的なセキュリティ脆弱性の継続的な監視を提供しません。"
        ]
    },
    {
        "Question Number": "24",
        "Situation": "ある多国籍eコマース企業が、複数の地域の顧客に対して低遅延の読み取りアクセスを提供する高可用性のデータベースソリューションを必要としています。地域の障害に対する耐障害性を確保するために、企業はまた、プライマリデータベースへのパフォーマンスへの影響を最小限に抑えたクロスリージョンのディザスタリカバリ設定を必要としています。さらに、最速のデータ更新のために、セカンダリリージョンへのほぼリアルタイムのレプリケーションが必要です。",
        "Question": "これらの要件を最もよく満たすAWSデータベースソリューションはどれですか？",
        "Options": {
            "1": "Amazon RDSをMulti-AZでデプロイして、単一のAWSリージョン内で高可用性を向上させる",
            "2": "Aurora Global Databaseを使用して、クロスリージョンの読み取りレプリカを有効にし、低遅延の読み取りアクセスとプライマリデータベースへの影響を最小限に抑えたほぼリアルタイムのレプリケーションを提供する",
            "3": "Amazon DynamoDB Global Tablesを構成して、マルチリージョンのレプリケーションとNoSQLワークロードの低遅延アクセスを実現する",
            "4": "Amazon Redshiftをクロスリージョンのスナップショットで設定して、各リージョンにバックアップを作成し、ディザスタリカバリを行う"
        },
        "Correct Answer": "Aurora Global Databaseを使用して、クロスリージョンの読み取りレプリカを有効にし、低遅延の読み取りアクセスとプライマリデータベースへの影響を最小限に抑えたほぼリアルタイムのレプリケーションを提供する",
        "Explanation": "Aurora Global Databaseは、低遅延の読み取りと複数のリージョンにわたる高可用性を必要とするグローバルなアプリケーション向けに特別に設計されています。データをセカンダリリージョンにほぼリアルタイムでレプリケーションすることができ、これにより、これらのリージョンの顧客が迅速かつ効率的にデータにアクセスできるようになります。さらに、地域の障害に対する耐障害性を提供し、データベースはプライマリデータベースへのパフォーマンスへの影響を最小限に抑えてセカンダリリージョンにフェイルオーバーできます。これにより、高可用性、低遅延アクセス、クロスリージョンのディザスタリカバリに対する企業の要件に最適な選択肢となります。",
        "Other Options": [
            "Amazon RDSをMulti-AZでデプロイすることは、単一のAWSリージョン内で高可用性を向上させますが、クロスリージョンのレプリケーションやディザスタリカバリ機能を提供しません。したがって、地域の障害に対する耐障害性の要件を満たしていません。",
            "Aurora Global Databaseを使用することは正しい選択肢であるため、このオプションは代替案としては適用されません。これは、述べられた要件に対して最適なソリューションです。",
            "Amazon DynamoDB Global Tablesを構成することでマルチリージョンのレプリケーションと低遅延アクセスが提供されますが、主にNoSQLワークロードに適しています。このシナリオではNoSQLデータベースの必要性は明示されておらず、Aurora Global Databaseは指定された要件に対してリレーショナルデータベースニーズにより適したオプションです。"
        ]
    },
    {
        "Question Number": "25",
        "Situation": "ある企業がAWSで重要なウェブアプリケーションを運用しており、待機環境での使用を管理するためにサービスのクォータを設定する必要があります。彼らは、サービスの制限を超えずに需要に応じてワークロードをスケールできるようにしたいと考えており、サービスの中断を避けるためにスロットリングを適用したいと考えています。",
        "Question": "待機環境のサービスクォータとスロットリングを管理するために、企業はどのステップを取るべきですか？",
        "Options": {
            "1": "AWS Service Quotasを使用してサービス使用の制限を設定し、これらのクォータに基づいてリソースを自動的にスケールするようにAWS Lambdaを設定し、サービスの安定性を維持するためにスロットリングを適用します。",
            "2": "Auto Scalingグループを設定してワークロードに応じてEC2インスタンスをスケールし、ピークトラフィックを処理するためにAWS Management Consoleでサービスクォータを手動で調整します。",
            "3": "Amazon API Gatewayを使用してAPIリクエストに対するスロットリング制限を設定し、CloudWatchを設定して待機環境全体の使用状況を監視し、制限を超えないようにします。",
            "4": "Amazon SQSを使用して過剰なリクエストをキューに入れ、スロットリングを防ぐために処理を遅延させ、AWS Lambdaを自動スケーリング用に設定します。"
        },
        "Correct Answer": "Amazon API Gatewayを使用してAPIリクエストに対するスロットリング制限を設定し、CloudWatchを設定して待機環境全体の使用状況を監視し、制限を超えないようにします。",
        "Explanation": "Amazon API Gatewayを使用してスロットリング制限を設定することは、ウェブアプリケーションが処理できるリクエストの数を管理する効果的な方法であり、過剰な負荷によるサービスの中断を防ぎます。API Gatewayは、リクエストをスロットリングし、クォータを設定できる使用プランを定義することを可能にし、アプリケーションが変動する負荷の下でも安定していることを保証します。さらに、監視のためにCloudWatchを統合することで、企業はリアルタイムで使用メトリクスを追跡でき、サービス制限の積極的な管理が可能になり、定義された閾値を超えないようにします。",
        "Other Options": [
            "AWS Service Quotasを使用してサービス使用の制限を設定し、AWS Lambdaを自動スケーリング用に設定することは、APIリクエストのスロットリングに直接対処するものではありません。サービス制限の管理には役立ちますが、API Gatewayが提供する特定のスロットリング機能が欠けており、負荷の下でのサービスの安定性を維持するためには重要です。",
            "Auto Scalingグループを設定してEC2インスタンスをスケールすることは、ワークロードの増加に対処するための良いプラクティスですが、サービスクォータを管理したりスロットリングを適用したりするものではありません。サービスクォータを手動で調整することは、リアルタイムで行わないと遅延や潜在的なサービスの中断を引き起こす可能性があり、需要の変化に迅速に対応する必要がある待機環境には理想的ではありません。",
            "Amazon SQSを使用して過剰なリクエストをキューに入れることは、負荷を管理するための有効なアプローチですが、APIリクエストに対するスロットリングを直接適用するものではありません。SQSはバックエンドサービスを圧倒するのを防ぐのに役立ちますが、API Gatewayほどリクエストレートを制御するレベルを提供せず、リクエスト処理に遅延をもたらす可能性があります。"
        ]
    },
    {
        "Question Number": "26",
        "Situation": "ヘルスケア企業であるHealthSecureは、クラウドリソースの構成を継続的に監視し文書化することを求める厳格なコンプライアンス規制の対象です。HealthSecureは、AWS環境全体の変更を追跡し監査するためにAWS Configを選択し、HIPAAなどの基準に準拠することを確保しています。彼らは、特定のコンプライアンスルールに対してリソースを評価し、非準拠のリソースを自動的に修正できるソリューションを必要としています。しかし、HealthSecureはAWS Configの制限、特に構成変更を積極的に防ぐことができるのか、それとも監視とアラート機能のみを提供するのかを理解したいとも考えています。",
        "Question": "AWS ConfigはAWSアカウントにおけるコンプライアンス管理とリソース構成の追跡をどのようにサポートし、その運用に関連する制限は何ですか？",
        "Options": {
            "1": "AWS Configは、リソース全体の構成変更を追跡し、リアルタイムでコンプライアンスを強制することで不正な変更を防ぎます。",
            "2": "AWS Configは、サポートされているリソース全体の構成変更を監視および記録し、コンプライアンス基準の監査を可能にし、AWS Lambdaとの統合を通じて非準拠のリソースを自動的に修正できます。ただし、変更が発生するのを積極的に防ぐことはできません。",
            "3": "AWS Configは特定の間隔で構成スナップショットのみを提供し、リアルタイム監視がサポートされていないため、コンプライアンス管理の効果が制限されます。",
            "4": "AWS Configは単一のリージョンでのみ機能し、複数のアカウント間でデータを集約できないため、リソースが静的なままである孤立した環境にのみ適しています。"
        },
        "Correct Answer": "AWS Configは、サポートされているリソース全体の構成変更を監視および記録し、コンプライアンス基準の監査を可能にし、AWS Lambdaとの統合を通じて非準拠のリソースを自動的に修正できます。ただし、変更が発生するのを積極的に防ぐことはできません。",
        "Explanation": "AWS Configは、AWSリソースの構成を継続的に監視し、時間の経過とともに変更を追跡するように設計されています。ユーザーは、リソースをコンプライアンスルールに対して評価でき、非準拠の構成が検出された場合にAWS Lambdaを介して修正アクションをトリガーできます。ただし、AWS Configには構成変更を積極的に防ぐ能力はなく、発生した変更を監視しアラートを出すだけであることに注意することが重要です。これはコンプライアンス管理に強力なツールですが、予防的なものではありません。",
        "Other Options": [
            "AWS Configはリアルタイムで不正な変更を防ぐことはできず、変更が発生した後にのみ監視しアラートを出します。",
            "AWS Configはほぼリアルタイムの監視を提供し、特定の間隔での構成スナップショットに制限されず、構成変更を継続的に記録します。",
            "AWS ConfigはAWS Organizationsと共に使用することで、複数のリージョンやアカウントで動作でき、組織全体のリソース構成をより包括的に把握できます。"
        ]
    },
    {
        "Question Number": "27",
        "Situation": "ある科学研究機関が、外部ユーザーによって頻繁にアクセスされる大規模なデータセットをAmazon S3に保存しています。コストを最小限に抑えるために、外部ユーザーがデータアクセスのコストを負担することを望んでいます。",
        "Question": "この要件を満たすために、どのS3構成を使用すべきですか？",
        "Options": {
            "1": "S3 Transfer Accelerationを有効にする",
            "2": "Requester Paysを有効にしたS3バケットを設定する",
            "3": "ストレージクラスにS3 Intelligent-Tieringを使用する",
            "4": "コスト共有のためにCross-Region Replicationを有効にする"
        },
        "Correct Answer": "Requester Paysを有効にしたS3バケットを設定する",
        "Explanation": "S3バケットでRequester Paysを有効にすると、データにアクセスする外部ユーザーがそのリクエストに関連するコストを負担することになります。つまり、ユーザーがデータにアクセスすると、データ転送とリクエストに対して料金が発生し、実質的にコスト負担が組織からデータにアクセスするユーザーに移ります。この構成は、外部の関係者とデータを共有するシナリオに特に設計されており、コストを最小限に抑えるという組織の要件に最も適したオプションです。",
        "Other Options": [
            "S3 Transfer Accelerationを有効にすると、S3とのファイル転送が高速化されますが、データアクセスの支払い者は変わりません。Transfer Accelerationを使用するためのコストは、リクエスト者ではなくバケットの所有者が負担します。",
            "S3 Intelligent-Tieringは、アクセスパターンの変化に基づいてデータを2つのアクセスティア間で自動的に移動するストレージクラスですが、データアクセスのコスト配分には対処していません。組織はデータ取得に関連するコストを引き続き負担することになります。",
            "Cross-Region Replicationを有効にすると、冗長性と可用性のために異なるAWSリージョン間でデータを自動的に複製します。この機能はデータアクセスのコスト共有には関係せず、外部ユーザーがアクセスコストを負担する要件に対処せずに、組織に追加のコストをもたらします。"
        ]
    },
    {
        "Question Number": "28",
        "Situation": "金融サービス会社は、ピーク時に高いIOPSとストレージ容量を必要とする可変ワークロードを持つトランザクションデータベースを管理しています。会社は、ピーク時のパフォーマンスを確保しながらコストを最適化することを目指しています。",
        "Question": "これらの要件を満たすために、ソリューションアーキテクトはどのAmazon RDSストレージ構成を推奨すべきですか？",
        "Options": {
            "1": "自動スケーリングを有効にした汎用SSD（gp3）ストレージをプロビジョニングする。",
            "2": "自動バックアップとスナップショット機能を備えたマグネティックストレージを使用する。",
            "3": "ピーク時に必要な最大IOPSに設定されたプロビジョンドIOPS SSD（io1）ストレージをプロビジョニングする。",
            "4": "組み込みのストレージスケーリングと高性能機能を持つAmazon Auroraを実装する。"
        },
        "Correct Answer": "組み込みのストレージスケーリングと高性能機能を持つAmazon Auroraを実装する。",
        "Explanation": "Amazon Auroraは高いパフォーマンスと可用性を考慮して設計されており、可変ワークロードを持つアプリケーションに最適な選択肢です。必要に応じてストレージを最大128TBまで自動的にスケールアップし、高いIOPSとストレージ容量を必要とするピーク時に有益です。Auroraは高いスループットと低いレイテンシを提供し、重い負荷の下でもパフォーマンスを維持し、コストを最適化しながらパフォーマンス要件を満たします。",
        "Other Options": [
            "自動スケーリングを有効にした汎用SSD（gp3）ストレージは一般的なワークロードには良い選択肢ですが、特に一貫した高IOPSを必要とするトランザクションデータベースにおいて、ピーク時にAmazon Auroraと同じレベルのパフォーマンスとスケーラビリティを提供しない可能性があります。",
            "自動バックアップとスナップショット機能を備えたマグネティックストレージは高パフォーマンス要件には適していません。マグネティックストレージは遅く、トランザクションワークロードに必要なIOPSを提供しないため、ピークパフォーマンスニーズには不十分です。",
            "ピーク時に必要な最大IOPSに設定されたプロビジョンドIOPS SSD（io1）ストレージをプロビジョニングすることは効果的ですが、コストがかかる可能性があり、特にワークロードが可変で予測不可能な場合、Amazon Auroraと同じレベルの自動スケーリングとパフォーマンス最適化を提供しないかもしれません。"
        ]
    },
    {
        "Question Number": "29",
        "Situation": "研究機関は、オンプレミスのNFSストレージからAmazon S3に80TBの科学データを移行する必要があります。データは頻繁に更新され、組織はオンプレミスで行われた変更がAWSにインクリメンタルに同期されることを確保したいと考えています。また、作業時間中にネットワーク帯域幅が飽和することを懸念しています。",
        "Question": "この移行のために、ソリューションアーキテクトはどのAWS DataSyncの機能を利点として強調すべきですか？（2つ選択）",
        "Options": {
            "1": "データ整合性を確保するための転送中のデータ検証",
            "2": "災害復旧のためのマルチリージョンレプリケーション",
            "3": "ピーク時のネットワーク使用を制御するための帯域幅制限",
            "4": "ゼロレイテンシでのリアルタイム同期のサポート",
            "5": "信頼性のある転送のためのトランジットエラーからの自動回復"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "データ整合性を確保するための転送中のデータ検証",
            "ピーク時のネットワーク使用を制御するための帯域幅制限"
        ],
        "Explanation": "転送中のデータ検証は、AWS DataSyncの重要な機能であり、データの整合性を確保します。ソースロケーションから読み取ったデータが、宛先に書き込まれたデータと一致することを確認し、転送中にデータが破損しないようにします。これは、科学データの整合性を確保する必要がある研究機関にとって重要です。帯域幅制限機能により、組織はピーク時のネットワーク使用を制御できます。これは、作業時間中にネットワーク帯域幅が飽和することを懸念しているため重要です。AWS DataSyncでは、DataSyncが使用する帯域幅に制限を設定でき、ネットワークが飽和するのを防ぎます。",
        "Other Options": [
            "災害復旧のためのマルチリージョンレプリケーションはAWS DataSyncの機能ではありません。これはAmazon S3の機能であり、DataSyncではありません。DataSyncはAWSストレージサービスへのデータの転送に使用され、マルチリージョンレプリケーションを提供しません。",
            "ゼロレイテンシでのリアルタイム同期のサポートはAWS DataSyncの機能ではありません。DataSyncはスケジュールされたまたはオンデマンドのデータ転送タスクをサポートしていますが、ゼロレイテンシでのリアルタイム同期を提供しません。",
            "信頼性のある転送のためのトランジットエラーからの自動回復はAWS DataSyncの特定の機能ではありません。DataSyncには堅牢なエラーハンドリングがありますが、特に「トランジットエラーからの自動回復」機能を提供するわけではありません。"
        ]
    },
    {
        "Question Number": "30",
        "Situation": "ある会社は、ウェブサーバーによって生成された大量のログファイルを処理するデータ分析アプリケーションを開発しています。このアプリケーションは、頻繁にアクセスされるログデータへの低レイテンシアクセスを必要とし、複数のインスタンスからの同時読み取りおよび書き込み操作をサポートしなければなりません。さらに、ストレージソリューションは、手動介入なしで増加するデータボリュームに対応するために自動的にスケールする必要があります。",
        "Question": "これらの要件を満たすために、ソリューションアーキテクトはどのAWSストレージサービスを推奨すべきですか？",
        "Options": {
            "1": "Amazon S3 Standard",
            "2": "Amazon Elastic File System (Amazon EFS)",
            "3": "Amazon Elastic Block Store (Amazon EBS) プロビジョンドIOPS",
            "4": "Amazon FSx for Windows File Server"
        },
        "Correct Answer": "Amazon Elastic File System (Amazon EFS)",
        "Explanation": "Amazon Elastic File System (EFS)は低レイテンシアクセスのために設計されており、複数のインスタンスからの同時読み取りおよび書き込み操作をサポートできます。これは、データへの頻繁なアクセスを必要とするアプリケーションに最適です。EFSは、データが追加または削除されると自動的にスケールし、手動介入なしで増加するデータボリュームに対応するストレージソリューションの要件に完全に一致します。さらに、EFSは複数のEC2インスタンスからアクセスできる管理されたファイルシステムを提供し、ログデータの高い可用性と耐久性を確保します。",
        "Other Options": [
            "Amazon S3 Standardは耐久性とスケーラビリティに最適化されたオブジェクトストレージサービスですが、ファイルシステムのような低レイテンシアクセスや同時読み書き操作には設計されていません。これは、大量の非構造化データを保存するのに適しており、頻繁なアクセスと低レイテンシを必要とするアプリケーションには不向きです。",
            "Amazon Elastic Block Store (Amazon EBS) プロビジョンドIOPSはEC2インスタンス向けに高パフォーマンスを提供するブロックストレージサービスですが、通常は1つのEC2インスタンスにのみ接続されるため、複数のインスタンスからの同時アクセスには設計されていません。これにより、同時読み取りおよび書き込み操作の要件にはあまり適していません。",
            "Amazon FSx for Windows File Serverは共有ファイルストレージを提供する管理されたWindowsファイルシステムです。同時アクセスをサポートしていますが、EFSのように自動的にスケールするとは限らず、より複雑である可能性があります。また、記述されたアプリケーションには必要ないかもしれませんが、Windows環境に特化しています。"
        ]
    },
    {
        "Question Number": "31",
        "Situation": "ある企業がウェブアプリケーションを展開しており、複数のアベイラビリティゾーン（AZ）で高可用性を提供しながら動的にスケールできることを確保したいと考えています。彼らは、トラフィックを効率的に分散するためにアプリケーションロードバランサー（ALB）を使用したいと考えています。",
        "Question": "次の構成のうち、企業がこの目標を達成するために最も適しているものはどれですか？",
        "Options": {
            "1": "ALBを使用してURLパスに基づいてトラフィックを分散し、異なるターゲットグループにリクエストを転送して、複数のEC2インスタンスにトラフィックが均等に分散されるようにします。",
            "2": "クラシックロードバランサー（CLB）を使用して、URLパスルーティングなしでIPアドレスのみに基づいてトラフィックを分散します。",
            "3": "ALBを使用しますが、すべてのトラフィックを単一のEC2インスタンスにルーティングして、複雑さを減らしパフォーマンスを向上させます。",
            "4": "静的コンテンツのみにALBを使用し、動的コンテンツのトラフィックを単一のEC2インスタンスに向けて効率的な負荷分散を維持します。"
        },
        "Correct Answer": "ALBを使用してURLパスに基づいてトラフィックを分散し、異なるターゲットグループにリクエストを転送して、複数のEC2インスタンスにトラフィックが均等に分散されるようにします。",
        "Explanation": "アプリケーションロードバランサー（ALB）を使用してURLパスに基づいてトラフィックを分散することで、高度なルーティング機能が可能になり、アプリケーションはさまざまなタイプのリクエストを効率的に処理できます。リクエストを異なるターゲットグループに転送することで、ALBはトラフィックが複数のEC2インスタンスに均等に分散されることを確保でき、動的にスケールし、複数のアベイラビリティゾーン（AZ）で高可用性を維持するために不可欠です。この構成は、水平スケーリングと効率的なリソース利用をサポートし、現代のウェブアプリケーションにとって重要です。",
        "Other Options": [
            "クラシックロードバランサー（CLB）を使用してIPアドレスのみに基づいてトラフィックを分散することは、トラフィック管理の柔軟性と効率を制限します。CLBは、パスベースのルーティングのような高度なルーティング機能をサポートしていないため、トラフィックの不均等な分散を引き起こし、特定のインスタンスが過負荷になり、他のインスタンスが過少利用される可能性があります。",
            "すべてのトラフィックを単一のEC2インスタンスにルーティングすることは、負荷分散のためにALBを使用する目的を損ないます。この構成は単一障害点を作成し、高可用性とスケーラビリティの利点を無効にします。これは、ALBの能力を活用してトラフィックを複数のインスタンスに分散させていません。",
            "静的コンテンツのみにALBを使用し、動的コンテンツのトラフィックを単一のEC2インスタンスに向けることは、ロードバランサーの機能を制限し、パフォーマンスのボトルネックを引き起こす可能性があります。このアプローチは、ALBが静的および動的コンテンツを複数のインスタンスに分散する能力を活用しておらず、高可用性とスケーラビリティを維持するために重要です。"
        ]
    },
    {
        "Question Number": "32",
        "Situation": "ある製造会社が、インターネット接続が限られたリモートロケーションで運営されています。彼らは機械データを分析し、アプリケーションを実行するためのローカルコンピューティングリソースが必要ですが、接続が可能なときにAWSとデータを同期する能力も望んでいます。",
        "Question": "これらの要件を最もよく満たすハイブリッドコンピューティングオプションはどれですか？",
        "Options": {
            "1": "AWS Snowball Edge",
            "2": "AWS LambdaとVPCエンドポイント",
            "3": "最寄りのAWSリージョンのAmazon EC2インスタンス",
            "4": "オンデマンドスケーリングを使用したAmazon EKS"
        },
        "Correct Answer": "AWS Snowball Edge",
        "Explanation": "AWS Snowball Edgeは、限られたまたはインターネット接続がない環境でのエッジコンピューティングとデータ転送のために設計されています。これにより、ユーザーはデバイス上でアプリケーションを実行し、データをローカルで分析できるため、リモートロケーションにいる製造会社にとって理想的です。さらに、Snowball Edgeは接続が可能なときにAWSとのデータ同期をサポートしており、彼らの要件に完璧に適合します。",
        "Other Options": [
            "AWS LambdaとVPCエンドポイントは、AWSサービスにアクセスするために安定したインターネット接続が必要なため、適していません。接続が限られたリモートロケーションでは、このオプションは必要なローカルコンピューティングリソースを提供しません。",
            "最寄りのAWSリージョンのAmazon EC2インスタンスは、これらのインスタンスにアクセスするために常にインターネット接続が必要なため、会社のニーズを満たしません。このオプションは、リモートエリアでのデータ分析のためのローカルコンピューティングリソースを提供しません。",
            "オンデマンドスケーリングを使用したAmazon EKSも、クラウドでKubernetesクラスターを管理するために安定したインターネット接続に依存しています。このオプションは、接続が限られたリモートロケーションでは効果的に機能せず、ローカルコンピューティングリソースを提供しません。"
        ]
    },
    {
        "Question Number": "33",
        "Situation": "あるフィンテック企業が、大量のトランザクションデータをリアルタイムで処理するための新しいデータ分析プラットフォームを設計しています。高いパフォーマンスを確保するために、プラットフォームはデータが到着する際に最小限の遅延で処理し、迅速にエンドユーザーに洞察を提供する必要があります。",
        "Question": "これらの高パフォーマンス要件を最も効果的に満たすアーキテクチャの選択はどれですか？",
        "Options": {
            "1": "トランザクションデータを定期的にバッチ処理する",
            "2": "リアルタイムデータストリーミングを使用したイベント駆動型アーキテクチャ",
            "3": "すべてのトランザクションデータを従来のリレーショナルデータベースに保存する",
            "4": "すべてのアプリケーションコンポーネントを単一のアベイラビリティゾーンに展開してアクセスを速くする"
        },
        "Correct Answer": "リアルタイムデータストリーミングを使用したイベント駆動型アーキテクチャ",
        "Explanation": "リアルタイムデータストリーミングを使用したイベント駆動型アーキテクチャは、大量のトランザクションデータをリアルタイムで処理するための最も効果的な選択です。このアーキテクチャは、システムが到着するデータに反応できるようにし、即時の処理と分析を可能にします。高スループットと低遅延をサポートし、エンドユーザーにタイムリーな洞察を提供するために重要です。メッセージキューやストリーム処理フレームワークなどの技術を活用することで、プラットフォームは継続的なデータフローを効率的に処理し、重要な遅延なしに結果を提供できます。",
        "Other Options": [
            "トランザクションデータを定期的にバッチ処理することは、リアルタイム処理を要求する高パフォーマンス要件には適していません。このアプローチは、データが収集されバッチで処理されるため、遅延を引き起こし、洞察や応答性を遅らせる可能性があります。",
            "すべてのトランザクションデータを従来のリレーショナルデータベースに保存することは、構造化データストレージを提供するかもしれませんが、リアルタイム処理には最適化されていません。リレーショナルデータベースは通常、クエリにより多くの時間を要し、高速データストリームを効率的に処理できないため、パフォーマンスのボトルネックを引き起こす可能性があります。",
            "すべてのアプリケーションコンポーネントを単一のアベイラビリティゾーンに展開してアクセスを速くすることは、データ処理パフォーマンスを本質的に向上させるものではありません。ローカルアクセスの遅延を減らすかもしれませんが、リアルタイムデータ処理の必要性には対処せず、単一障害点を引き起こし、システムの信頼性を損なう可能性があります。"
        ]
    },
    {
        "Question Number": "34",
        "Situation": "ウェブ開発会社は、異なるトラフィックパターンを持つ複数のアプリケーションをAWS上でホストしています。コストを最適化するために、使用した分だけを支払い、サーバーを直接管理することを避けたいと考えています。",
        "Question": "これらの要件を最も満たすアプローチはどれですか？",
        "Options": {
            "1": "Amazon EC2にアプリケーションをデプロイし、Auto Scalingを使用する",
            "2": "Amazon ECSでFargateを使用してコンテナを利用する",
            "3": "リザーブドインスタンスでアプリケーションを実行する",
            "4": "静的コンテンツにはAmazon S3を、データベースにはAmazon RDSを使用する"
        },
        "Correct Answer": "Amazon ECSでFargateを使用してコンテナを利用する",
        "Explanation": "Amazon ECSでFargateを使用することで、ウェブ開発会社は基盤となるサーバーを管理することなくアプリケーションをコンテナで実行できます。Fargateは自動的にコンピューティングリソースをプロビジョニングおよび管理するため、会社はアプリケーションのトラフィックパターンに基づいて実際に使用したリソースに対してのみ支払います。このサーバーレスアプローチは、コストを最適化し、需要に応じてスケールする柔軟性を提供するのに理想的です。",
        "Other Options": [
            "Amazon EC2にアプリケーションをデプロイし、Auto Scalingを使用する場合、EC2インスタンスを管理する必要があります。自動的にスケールする場合でも、直接サーバー管理を避けるという要件を完全には満たさない可能性があります。会社はインスタンスのプロビジョニングやメンテナンスを行う必要があります。",
            "リザーブドインスタンスでアプリケーションを実行することは、特定のインスタンスタイプとサイズに1年または3年の期間をコミットすることを含み、使用した分だけを支払うという目標には合致しません。このオプションは予測可能なワークロードにはコスト効果が高いですが、異なるトラフィックパターンに必要な柔軟性を提供しません。",
            "静的コンテンツにはAmazon S3を、データベースにはAmazon RDSを使用することは特定のユースケースには良いアプローチですが、動的アプリケーションのホスティング要件には対応していません。このオプションはストレージとデータベース管理を分離しますが、異なるトラフィックパターンでアプリケーションを実行するための完全なソリューションを提供しません。"
        ]
    },
    {
        "Question Number": "35",
        "Situation": "研究機関は、分析のために実験データをデータベースに保存する必要があります。データは最初の3ヶ月間は積極的に使用され、その後はほとんどアクセスされませんが、コンプライアンスのために5年間保持されます。長期保存のコストを最小限に抑えたいと考えています。",
        "Question": "最もコスト効果の高いデータ保持ポリシーはどれですか？",
        "Options": {
            "1": "すべてのデータを高性能データベースに保存し、毎日バックアップを取る",
            "2": "3ヶ月後にデータをAmazon S3 Glacierにアーカイブする",
            "3": "ストレージコストを削減するために3ヶ月後にデータを削除する",
            "4": "3ヶ月後にデータを低コストのデータベース層に移動する"
        },
        "Correct Answer": "3ヶ月後にデータをAmazon S3 Glacierにアーカイブする",
        "Explanation": "3ヶ月後にデータをAmazon S3 Glacierにアーカイブすることは、長期保存に最もコスト効果の高いソリューションです。S3 Glacierは、アクセス頻度が低いデータ向けに設計されており、高性能データベースに比べて格段に低いストレージコストを提供します。データは最初の3ヶ月後はほとんどアクセスされませんが、コンプライアンスのために5年間保持する必要があるため、S3 Glacierはコストとアクセス性の適切なバランスを提供し、組織が経費を最小限に抑えつつ保持要件を満たすことを可能にします。",
        "Other Options": [
            "すべてのデータを高性能データベースに保存し、毎日バックアップを取ることは、特にデータが最初の3ヶ月後には積極的に使用されないため、長期保存にはコスト効果がありません。高性能データベースは通常高価であり、毎日のバックアップは、アクセス頻度が低いデータには不要な追加コストを加えます。",
            "3ヶ月後にデータを削除することはストレージコストを削減するかもしれませんが、5年間データを保持するというコンプライアンス要件を満たしません。このオプションは、非コンプライアンスによる法的および規制上のリスクに組織をさらすことになります。",
            "3ヶ月後にデータを低コストのデータベース層に移動することは、高性能データベースに保持するよりも良いオプションですが、S3 Glacierにアーカイブするよりも高価になる可能性があります。低コストのデータベース層は、アクセス頻度が低いデータ向けに設計されたアーカイブソリューションに比べて高いコストがかかる場合があり、長期保存には最適ではありません。"
        ]
    },
    {
        "Question Number": "36",
        "Situation": "組織は、特定の記録を少なくとも7年間保存することを要求するデータ保持ポリシーに準拠する必要があります。",
        "Question": "ストレージコストを最小限に抑えながらコンプライアンスを確保するための最も適切なソリューションはどれですか？",
        "Options": {
            "1": "データをAmazon S3 Standardに保存し、S3ライフサイクルポリシーを使用してデータをS3 Glacierに移行する",
            "2": "データをAmazon Elastic File System (EFS)に保存し、暗号化を有効にする",
            "3": "Amazon RDSを使用し、自動バックアップを設定してスナップショットを7年間保持する",
            "4": "データをAmazon DynamoDBに保存し、オンデマンドバックアップを行う"
        },
        "Correct Answer": "データをAmazon S3 Standardに保存し、S3ライフサイクルポリシーを使用してデータをS3 Glacierに移行する",
        "Explanation": "このオプションは、コスト効果の高いストレージ管理を可能にするため、最も適切です。Amazon S3 Standardは頻繁にアクセスされるデータに適しており、S3 Glacierは低コストで長期アーカイブストレージ向けに設計されています。S3ライフサイクルポリシーを実装することで、組織は指定された期間後にデータを自動的にS3 Glacierに移行でき、7年間の保持ポリシーに準拠しながら、ストレージコストを時間とともに最小限に抑えることができます。",
        "Other Options": [
            "データをAmazon Elastic File System (EFS)に保存し、暗号化を有効にすることは、S3 Glacierに比べてEFSに関連するコストが高いため、長期保存には最適な選択肢ではありません。EFSは低遅延アクセス向けに設計されており、アクセス頻度が低いデータの保存には高価です。",
            "Amazon RDSを使用し、自動バックアップを設定してスナップショットを7年間保持することはコストがかかる可能性があり、リレーショナルデータベースの機能を必要としないデータには必要ない場合があります。RDSは通常、トランザクションデータに使用され、S3 Glacierに比べて長期保存には高いコストがかかる可能性があります。",
            "データをAmazon DynamoDBに保存し、オンデマンドバックアップを行うことも長期保持には最もコスト効果の高いソリューションではありません。DynamoDBは高性能アプリケーションには優れていますが、バックアップの価格モデルは時間とともに高くなる可能性があり、数年間保持する必要があるデータには特に高価になることがあります。"
        ]
    },
    {
        "Question Number": "37",
        "Situation": "ある会社が「secretcatproject」という名前のS3バケットを持っており、その中には機密データが含まれています。この会社は、データが公共のアクセスから安全であることを確保しつつ、パートナーアカウントの特定のユーザーにこのバケットへのアクセスを許可する必要があります。",
        "Question": "会社は、匿名ユーザーによる不正アクセスを防ぎながら、必要なアクセスを許可するためにどの方法を使用すべきですか？",
        "Options": {
            "1": "バケットポリシーを設定して、すべてのユーザーに公共アクセスを許可し、アクセス管理を簡素化します。",
            "2": "パートナーアカウントのIAMロールをプリンシパルとして指定し、バケットへのアクセス権を持つS3バケットポリシーを使用します。",
            "3": "バケットで「Block Public Access」を有効にし、アクセス制御リスト（ACL）を使用してパートナーアカウントのアクセスを管理します。",
            "4": "バケットに直接IAMポリシーをアタッチして、パートナーアカウントのユーザーのアクセスを制御します。"
        },
        "Correct Answer": "パートナーアカウントのIAMロールをプリンシパルとして指定し、バケットへのアクセス権を持つS3バケットポリシーを使用します。",
        "Explanation": "S3バケットポリシーを使用してパートナーアカウントのIAMロールをプリンシパルとして指定することで、誰がバケットにアクセスできるかを正確に制御できます。この方法により、指定されたパートナーアカウントのユーザーのみが機密データにアクセスできるようになり、公共アクセスを防ぐことができます。バケットポリシーは、バケットレベルでの権限を定義できる強力なツールであり、アクセスをさらに制限する条件を含めることもできるため、機密データへのアクセスを安全に管理するのに理想的です。",
        "Other Options": [
            "バケットポリシーを設定してすべてのユーザーに公共アクセスを許可することは非常に不安全であり、データを公共アクセスから安全に保つという要件に反します。これにより、機密データがインターネット上の誰にでも公開されることになり、受け入れられません。",
            "パートナーアカウントのIAMロールを指定したS3バケットポリシーを使用することは正しいですが、このオプションはプリンシパルとしてのIAMロールの使用を明示的に述べていないため、安全にアクセスを許可する重要な側面が欠けています。したがって、正しい答えよりも正確性に欠けます。",
            "'Block Public Access'を有効にすることは公共アクセスを防ぐための良いプラクティスですが、アクセス制御リスト（ACL）を使用することはこのシナリオでのアクセス管理の最良の方法ではありません。ACLはバケットポリシーよりも複雑で柔軟性が低く、権限に対する明確さと制御のレベルを提供しません。"
        ]
    },
    {
        "Question Number": "38",
        "Situation": "ある会社がAmazon Route 53を使用してドメインのDNSレコードを管理しています。彼らはDNSスプーフィングやDDoS攻撃などの潜在的なDNS攻撃を懸念しており、DNSインフラストラクチャのセキュリティを確保したいと考えています。",
        "Question": "会社はRoute 53の設定のセキュリティを強化するためにどのような行動を取るべきですか？",
        "Options": {
            "1": "Route 53のホストゾーンでDNSSEC（ドメインネームシステムセキュリティ拡張）を有効にして、DNS応答が暗号的に署名されるようにし、DNSスプーフィング攻撃を防ぎます。",
            "2": "Route 53 Resolver DNS Firewallを使用して悪意のあるクエリをフィルタリングし、既知の悪意のあるIPからのトラフィックを防ぎ、正当なトラフィックのみがリソースに到達するようにします。",
            "3": "Route 53を設定してDNSクエリにHTTPのみを使用し、セキュリティを簡素化します。HTTPは他のプロトコルに比べてDDoS攻撃に対して脆弱性が低いためです。",
            "4": "Route 53ヘルスチェックを設定してDNSクエリのパフォーマンスを監視しますが、DNSセキュリティは他のAWSサービスによってカバーされていると仮定して、追加のセキュリティ機能は有効にしません。"
        },
        "Correct Answer": "Route 53のホストゾーンでDNSSEC（ドメインネームシステムセキュリティ拡張）を有効にして、DNS応答が暗号的に署名されるようにし、DNSスプーフィング攻撃を防ぎます。",
        "Explanation": "Route 53のホストゾーンでDNSSECを有効にすることで、DNS応答が暗号的に署名されるため、セキュリティの層が追加されます。これにより、応答が本物であり、改ざんされていないことが保証され、DNSスプーフィング攻撃を効果的に防ぎます。DNSSECはDNSデータの整合性を検証するのに役立ち、攻撃者が偽のDNS応答を通じてユーザーを悪意のあるサイトにリダイレクトすることを非常に困難にします。",
        "Other Options": [
            "Route 53 Resolver DNS Firewallを使用することは悪意のあるクエリをフィルタリングするための良いプラクティスですが、DNSスプーフィングの問題には直接対処していません。一部の脅威を軽減するのに役立つことはありますが、DNS応答の真正性を確保するためにはDNSSECほど効果的ではありません。",
            "Route 53を設定してDNSクエリにHTTPのみを使用することは不正確です。DNSクエリは通常UDPおよびTCPプロトコルを使用し、HTTPではありません。さらに、HTTPはDDoS攻撃に対するセキュリティを本質的に提供しません。むしろ、DNSインフラストラクチャをより多くのリスクにさらす可能性があります。DNS over HTTPS（DoH）やDNS over TLS（DoT）などの安全なプロトコルを使用する方が適切です。",
            "Route 53ヘルスチェックを設定することはDNSクエリのパフォーマンスを監視するのに役立ちますが、セキュリティを強化するものではありません。追加のセキュリティ機能を有効にせずにヘルスチェックのみに依存すると、DNSインフラストラクチャはスプーフィングやDDoSなどの攻撃に対して脆弱になります。これらの攻撃はDNSSECや他のセキュリティ対策を実装することで軽減できます。"
        ]
    },
    {
        "Question Number": "39",
        "Situation": "ある会社がAWS Lambda関数のアプリケーションクレデンシャルを保護したいと考えています。この関数はAmazon RDSデータベースに接続する必要があります。",
        "Question": "データベースのクレデンシャルを保存および管理する最も安全な方法はどれですか？",
        "Options": {
            "1": "Lambda関数内のプレーンテキスト設定ファイルにデータベースのクレデンシャルを保存します。",
            "2": "データベースに直接アクセスするための権限を持つAWS IAMロールを使用します。",
            "3": "AWS Secrets Managerにデータベースのクレデンシャルを保存し、Lambda関数にシークレットを取得する権限を付与します。",
            "4": "サーバー側の暗号化を有効にしたAmazon S3にデータベースのクレデンシャルを保存します。"
        },
        "Correct Answer": "AWS Secrets Managerにデータベースのクレデンシャルを保存し、Lambda関数にシークレットを取得する権限を付与します。",
        "Explanation": "AWS Secrets Managerを使用してデータベースのクレデンシャルを保存することは、機密情報を管理するために特別に設計されているため、最も安全なアプローチです。Secrets Managerは、クレデンシャルを静止状態で暗号化し、AWS IAMを通じて細かいアクセス制御を提供します。これにより、Lambda関数はクレデンシャルを安全に取得でき、関数のコードや設定ファイルにハードコーディングすることなく利用できます。さらに、Secrets Managerは自動的にクレデンシャルをローテーションすることができ、セキュリティをさらに強化します。",
        "Other Options": [
            "Lambda関数内のプレーンテキスト設定ファイルにデータベースのクレデンシャルを保存することは非常に不安全です。これは機密情報をコード内に直接公開し、コードが公開または共有された場合に不正アクセスのリスクを高めます。",
            "データベースに直接アクセスするための権限を持つAWS IAMロールを使用することは、データベースのクレデンシャルを安全に保存する必要性に対処していません。IAMロールはアクセス権限を管理できますが、データベースのクレデンシャルのような機密情報を安全に保存するためのメカニズムを提供しません。",
            "サーバー側の暗号化を有効にしたAmazon S3にデータベースのクレデンシャルを保存することは、プレーンテキストストレージよりは良いですが、Secrets Managerを使用するほど安全ではありません。S3はシークレットを管理するために設計されておらず、サーバー側の暗号化は静止状態でデータを保護しますが、Secrets Managerが提供するようなアクセス制御やシークレット管理機能のレベルは提供しません。"
        ]
    },
    {
        "Question Number": "40",
        "Situation": "あなたは、重要なアプリケーションのために、オンプレミスのデータセンターとAWSの間に高い耐障害性を持つ接続を構築する任務を負っています。AWS Direct Connectを使用します。",
        "Question": "Direct Connectは物理的なリンクであり、固有の耐障害性がないため、障害耐性を確保するための最良のアプローチは何ですか？",
        "Options": {
            "1": "同じAWSリージョン内の異なる場所（DXロケーション）に2つのDirect Connect接続を展開し、1つの接続が失敗した場合に冗長パスを提供します。",
            "2": "単一の高帯域幅のDirect Connect接続を使用して、過負荷による障害のリスクを減らします。",
            "3": "Direct Connect接続とVPNバックアップを組み合わせて、Direct Connectリンクがダウンした場合でも接続を維持します。",
            "4": "異なるAWSリージョンにDirect Connect接続を確立し、1つのリージョンに問題が発生した場合でも接続を確保します。"
        },
        "Correct Answer": "Direct Connect接続とVPNバックアップを組み合わせて、Direct Connectリンクがダウンした場合でも接続を維持します。",
        "Explanation": "Direct Connect接続とVPNバックアップを組み合わせることは、データ伝送のための二次パスを提供するため、障害耐性を確保するための最良のアプローチです。Direct Connectリンクが失敗した場合、VPNが引き継ぎ、継続的な接続を確保します。このハイブリッドアプローチは、Direct Connectの信頼性を活用しつつ、インターネットベースのVPNをフェイルオーバーオプションとして利用することで、全体的な耐障害性を向上させます。",
        "Other Options": [
            "同じAWSリージョン内の異なる場所に2つのDirect Connect接続を展開することで冗長性を提供できますが、リージョン全体の障害や両方の接続に影響を与える可能性のある他の問題には対処できません。さらに、VPNとのハイブリッドソリューションと比較してコスト効果が低い可能性があります。",
            "単一の高帯域幅のDirect Connect接続を使用しても、障害耐性は提供されません。その接続がダウンした場合、データのための代替パスがなくなり、重要なアプリケーションのダウンタイムにつながる可能性があります。",
            "異なるAWSリージョンにDirect Connect接続を確立することで一定の冗長性を提供できますが、リージョン間のトラフィック管理において遅延や複雑さを引き起こす可能性があります。さらに、両方の接続が同時に利用可能であることを保証するものではなく、特にリージョン自体に影響を与える問題がある場合にはそうなりません。"
        ]
    },
    {
        "Question Number": "41",
        "Situation": "ある企業がアプリケーションをAWSに移行する計画を立てており、AWS共有責任モデルの一環として管理しなければならないセキュリティ責任を理解したいと考えています。この企業は、アプリケーションサーバーにAmazon EC2、データベースにAmazon RDS、データの保存にAmazon S3を使用します。",
        "Question": "次のうち、企業が保持する責任とAWSが管理する責任はどれですか？",
        "Options": {
            "1": "企業は基盤となる物理インフラのセキュリティに責任を持ち、AWSは静止データの暗号化を管理します。",
            "2": "AWSはAmazon EC2インスタンスのパッチ適用に責任を持ち、企業はセキュリティグループやネットワークACLを使用してネットワークトラフィックのフィルタリングを管理します。",
            "3": "企業はAmazon RDSのセキュリティ設定の管理、データベースソフトウェアのパッチ適用に責任を持ち、AWSはRDSインスタンスがホストされているデータセンターのセキュリティを管理します。",
            "4": "AWSはAmazon S3に保存されている顧客データのセキュリティを管理し、企業はそのデータのアクセス権限と暗号化設定を構成する責任を持ちます。"
        },
        "Correct Answer": "企業はAmazon RDSのセキュリティ設定の管理、データベースソフトウェアのパッチ適用に責任を持ち、AWSはRDSインスタンスがホストされているデータセンターのセキュリティを管理します。",
        "Explanation": "AWS共有責任モデルでは、AWSはクラウドインフラのセキュリティ、つまりデータセンターの物理的セキュリティやAWSサービスを実行するハードウェアのセキュリティに責任を持ちます。しかし、顧客はアプリケーションとデータのセキュリティ、つまりAmazon RDSのようなサービスの設定管理やパッチ適用に責任を持ちます。これは、AWSが基盤となるインフラを保護する一方で、企業はデータベースの設定が安全で最新であることを確保しなければならないことを意味します。",
        "Other Options": [
            "企業はアプリケーションとデータのセキュリティに責任を持ち、基盤となる物理インフラはAWSが管理します。AWSは静止データの暗号化を管理しますが、それは企業が自分のデータに対して実装する責任があります。",
            "AWSは基盤となるインフラのパッチ適用に責任を持ちますが、企業はAmazon EC2インスタンスのオペレーティングシステムとアプリケーションレベルのパッチ適用を管理しなければなりません。企業はまた、ネットワークトラフィックフィルタリングのためにセキュリティグループやネットワークACLを構成する責任もあります。",
            "AWSはAmazon S3を支えるインフラのセキュリティを管理しますが、企業はS3に保存するデータのアクセス権限と暗号化設定を管理する責任があります。AWSは顧客データのセキュリティを直接管理せず、顧客がデータを保護するためのツールを提供します。"
        ]
    },
    {
        "Question Number": "42",
        "Situation": "ある企業が複数のアベイラビリティゾーン（AZ）にまたがる仮想プライベートクラウド（VPC）を設計しています。各サブネットが一意に定義され、他のサブネットと重複せず、特定のIPアドレスが各サブネット内の特定の機能のために予約されていることを確認する必要があります。",
        "Question": "サブネットを正しく構成し、IPの競合を避けるために従うべきガイドラインはどれですか？（2つ選択）",
        "Options": {
            "1": "各サブネットに対して一意のCIDRブロックを定義し、他のAZのサブネットと重複しないようにし、ネットワークおよびブロードキャスト機能のために予約されたIPアドレスを使用します。",
            "2": "VPC内のすべてのサブネットに同じCIDRブロックを使用し、AZ間でサブネットがシームレスに通信できるようにし、各サブネットの最初のIPアドレスをDNS用に予約します。",
            "3": "VPC内の各サブネットに対して重複しないCIDRブロックを割り当て、AZごとに1つのサブネットを持ち、特定のIPアドレス（ネットワークおよびブロードキャストアドレスなど）をAWSの要件に従って予約します。",
            "4": "VPC内のすべてのサブネットに対して単一の大きなCIDRブロックを割り当て、DHCPを使用してサブネット間のIP競合を防ぎます。",
            "5": "各サブネットのCIDRブロックがVPCのCIDRブロックのサブセットであることを確認し、重複せずに将来の成長に対応できるようにIP範囲を計画します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "VPC内の各サブネットに対して重複しないCIDRブロックを割り当て、AZごとに1つのサブネットを持ち、特定のIPアドレス（ネットワークおよびブロードキャストアドレスなど）をAWSの要件に従って予約します。",
            "各サブネットのCIDRブロックがVPCのCIDRブロックのサブセットであることを確認し、重複せずに将来の成長に対応できるようにIP範囲を計画します。"
        ],
        "Explanation": "正しい答えはオプション3と5です。オプション3は、VPC内の各サブネットに重複しないCIDRブロックを割り当てることで、各サブネットが一意に定義され、他のサブネットと競合しないことを保証します。ネットワークおよびブロードキャスト機能のために特定のIPアドレスを予約することは、ネットワーク設計の標準的な実践です。オプション5は、各サブネットのCIDRブロックがVPCのCIDRブロックのサブセットであるべきであるため正しいです。これにより、サブネット内のIPアドレスがVPC内で一意になります。重複せずに将来の成長に対応できるようにIP範囲を計画することは、将来のIP競合を避けるための良い実践です。",
        "Other Options": [
            "サブネット間のCIDRブロックが重複するとIP競合が発生する可能性があります。また、特定のIPアドレスはネットワークおよびブロードキャスト機能のために予約されるべきですが、このオプションは重複するCIDRブロックが良い実践であると誤って示唆しています。",
            "VPC内のすべてのサブネットに同じCIDRブロックを使用するとIP競合が発生する可能性があります。各サブネットの最初のIPアドレスは通常DNS用に予約されますが、このオプションはすべてのサブネットに同じCIDRブロックを使用することが良い実践であると誤って示唆しています。",
            "VPC内のすべてのサブネットに対して単一の大きなCIDRブロックを割り当てるとIP競合が発生する可能性があります。DHCPはサブネット内のIPアドレスを管理するのに役立ちますが、同じCIDRブロックを共有するサブネット間のIP競合を防ぐことはできません。"
        ]
    },
    {
        "Question Number": "43",
        "Situation": "ある企業がデータベースのニーズにAmazon RDSを使用していますが、データベース接続のスケーラビリティと可用性について懸念しています。彼らはデータベース接続の管理を改善し、RDSインスタンスに負荷をかけずにアプリケーションの高可用性を確保したいと考えています。",
        "Question": "この目標を達成するために、企業はどのAWSサービスを使用すべきで、その利点は何ですか？",
        "Options": {
            "1": "Amazon RDS Proxyを使用してデータベース接続を管理し、接続のプールと多重化を行い、RDSインスタンスへの負荷を軽減し、スケーラビリティを向上させます。",
            "2": "Amazon CloudFrontをプロキシとして使用し、データベースクエリをキャッシュしてRDSインスタンスへの負荷を軽減します。",
            "3": "Amazon SQSを使用してデータベースリクエストをキューに入れ、順次処理することでデータベース接続の高可用性を確保します。",
            "4": "Amazon ElastiCacheを使用してデータベースクエリをプロキシし、キャッシュしてデータベースの負荷を最小限に抑えます。"
        },
        "Correct Answer": "Amazon RDS Proxyを使用してデータベース接続を管理し、接続のプールと多重化を行い、RDSインスタンスへの負荷を軽減し、スケーラビリティを向上させます。",
        "Explanation": "Amazon RDS Proxyは、Amazon RDSのデータベース接続管理を強化するために特別に設計されています。接続プールと多重化を提供し、RDSインスタンスとの接続数を減少させるのに役立ちます。これにより、アプリケーションのスケーラビリティが向上し、より多くの同時接続を可能にし、フェイルオーバーシナリオをシームレスに管理することで可用性も向上します。RDS Proxyを使用することで、企業はデータベース接続を効率的に管理し、RDSインスタンスへの負荷を軽減し、全体的なアプリケーションパフォーマンスを向上させることができます。",
        "Other Options": [
            "Amazon CloudFrontをプロキシとして使用してデータベースクエリをキャッシュするのは誤りです。CloudFrontは主に静的コンテンツをキャッシュし、ウェブアプリケーションの配信を加速するために設計されたコンテンツ配信ネットワーク（CDN）であり、データベース接続の管理やデータベースクエリのキャッシュには適していません。",
            "Amazon SQSを使用してデータベースリクエストをキューに入れるのは、このシナリオには適していません。SQSは、マイクロサービス、分散システム、サーバーレスアプリケーションのデカップリングとスケーリングのために設計されたメッセージキューイングサービスであり、データベース接続を直接管理したり、その可用性を向上させたりするものではありません。",
            "Amazon ElastiCacheを使用してデータベースクエリをプロキシし、キャッシュするのはこの文脈では最良の選択肢ではありません。ElastiCacheは、データベースへの負荷を軽減するために頻繁にアクセスされるデータをキャッシュするために使用できますが、データベース接続を管理したり、接続プールを提供したりすることはなく、スケーラビリティと可用性における主な懸念事項には対応していません。"
        ]
    },
    {
        "Question Number": "44",
        "Situation": "ある企業がスケーラビリティ、ポータビリティ、リソース管理を改善するために、モノリシックアプリケーションをコンテナ化されたアーキテクチャに移行する計画を立てています。企業は、トラフィックの急増時に効率的にスケーリングできるように、モノリシックアプリケーションをより小さく、管理しやすいコンポーネントに分解したいと考えています。また、アプリケーションが環境やプラットフォーム間で簡単に移動できることを確認する必要があります。",
        "Question": "アプリケーションをコンテナに移行するための最も効果的なアプローチは何ですか？",
        "Options": {
            "1": "各アプリケーションコンポーネントをコンテナ化し、各マイクロサービスのDockerイメージを作成し、Amazon ECSまたはEKSにデプロイしてオーケストレーションと管理を行います。",
            "2": "アプリケーション全体を仮想マシンとしてAWSに移行し、Amazon EC2を使用してEC2オートスケーリンググループを通じてアプリケーションを管理します。",
            "3": "AWS Lambdaを使用してアプリケーションを移行し、サーバーレス関数に分割してコンテナの必要性を排除します。",
            "4": "アプリケーションをAmazon S3に保存し、AWS Fargateを使用して管理されたコンテナ環境でアプリケーションを実行します。"
        },
        "Correct Answer": "各アプリケーションコンポーネントをコンテナ化し、各マイクロサービスのDockerイメージを作成し、Amazon ECSまたはEKSにデプロイしてオーケストレーションと管理を行います。",
        "Explanation": "このアプローチは、モノリシックアプリケーションをコンテナ化されたアーキテクチャに移行するための最も効果的な方法です。アプリケーションを小さく、管理しやすいマイクロサービスに分解することができます。各コンポーネントのDockerイメージを作成することで、企業は各マイクロサービスを独立してデプロイ可能、スケーラブル、かつメンテナブルにすることができます。Amazon ECS（Elastic Container Service）またはEKS（Elastic Kubernetes Service）を使用することで、トラフィックの急増時に効率的にスケーリングし、異なる環境やプラットフォーム間でシームレスに移動できる強力なオーケストレーションと管理機能を提供します。",
        "Other Options": [
            "アプリケーション全体を仮想マシンとしてAWSに移行することは、コンテナ化の利点を十分に活用していません。EC2オートスケーリンググループを通じてスケーリングは可能ですが、モノリシックアプリケーションをマイクロサービスに分解することはできず、望ましいスケーラビリティとリソース管理を達成するためには不可欠です。",
            "AWS Lambdaを使用してアプリケーションをサーバーレス関数に移行するのは、すべてのアプリケーションに適しているわけではありません。特にサーバーレスに設計されていないアプリケーションには不向きです。このアプローチは、アプリケーションの大幅な再設計を必要とする可能性があり、企業が具体的に実装しようとしているコンテナを利用していません。",
            "アプリケーションをAmazon S3に保存し、AWS Fargateを使用して管理されたコンテナ環境でアプリケーションを実行するのは完全な解決策ではありません。Fargateはサーバーを管理せずにコンテナを実行することを可能にしますが、アプリケーションをS3に保存するだけでは、モノリシックアプリケーションをマイクロサービスに分解したり、Dockerイメージを作成したりする必要に対処していません。これらは効果的なコンテナ化にとって重要です。"
        ]
    },
    {
        "Question Number": "45",
        "Situation": "ある金融サービス会社がクライアントデータを保護するために新しいウェブアプリケーションをHTTPSで保護する必要があります。彼らは、SSL/TLS証明書の発行、デプロイ、および更新を簡素化するソリューションを求めており、期限切れの証明書によるダウンタイムのリスクを避けたいと考えています。インフラのほとんどがAWS上にあるため、ELB、CloudFront、API Gatewayなどのサービス全体で証明書を管理するためにAWS Certificate Manager（ACM）を検討しています。",
        "Question": "AWS Certificate Manager（ACM）は、企業のニーズに対して安全で自動化されたSSL/TLS証明書管理をどのようにサポートしますか？",
        "Options": {
            "1": "ACMは手動での証明書発行と更新を許可し、更新プロセスに対する制御を提供します。",
            "2": "ACMは証明書を自動的に発行、デプロイ、および更新し、AWSサービスと統合し、AWSリソースと共に使用する場合は無料で証明書を提供します。",
            "3": "ACMは自己署名証明書のみをサポートし、企業が更新とセキュリティを別々に管理する必要があります。",
            "4": "ACMは証明書を発行しますが、更新にはサードパーティツールが必要で、AWSサービスと直接統合されていません。"
        },
        "Correct Answer": "ACMは証明書を自動的に発行、デプロイ、および更新し、AWSサービスと統合し、AWSリソースと共に使用する場合は無料で証明書を提供します。",
        "Explanation": "AWS Certificate Manager（ACM）は、SSL/TLS証明書の管理を簡素化し、発行、デプロイ、および更新プロセスを自動化します。これにより、金融サービス会社は期限切れの証明書によるダウンタイムのリスクを回避でき、ACMが自動的に更新を処理します。さらに、ACMはElastic Load Balancing（ELB）、CloudFront、API GatewayなどのさまざまなAWSサービスとシームレスに統合され、これらのサービスと共に使用する場合は無料で証明書を提供するため、ウェブアプリケーションを保護するためのコスト効果の高いソリューションとなります。",
        "Other Options": [
            "ACMは手動での証明書発行と更新を許可しますが、企業のニーズは期限切れの証明書のリスクを避けるための自動化に焦点を当てています。手動プロセスは、必要な証明書管理を簡素化するものではありません。",
            "ACMは自己署名証明書のみをサポートしているわけではありません。主にブラウザやクライアントに信頼される公開証明書を発行し、これは本番環境でクライアントデータを保護するために不可欠です。",
            "ACMは更新にサードパーティツールを必要とせず、更新プロセスを自動化します。さらに、ACMはAWSサービスと直接統合されるように設計されており、これは企業のインフラニーズをサポートする重要な機能です。"
        ]
    },
    {
        "Question Number": "46",
        "Situation": "",
        "Question": "Amazon Redshiftのどの機能が、バックアップと災害復旧の能力を提供することでデータの耐久性と回復力を確保しますか？",
        "Options": {
            "1": "Enhanced VPC Routingは、VPC内でカスタマイズされたネットワーキングを可能にします。",
            "2": "Compute Nodesのスライスは、データとクエリを複数のノードに分散させることを可能にします。",
            "3": "Automatic Snapshots to S3は、データが8時間ごとまたは5GBの増分でAmazon S3にバックアップされることで耐久性を確保します。",
            "4": "Redshift Spectrumは、データをRedshiftにロードすることなくS3内のデータを直接クエリすることを可能にします。"
        },
        "Correct Answer": "Automatic Snapshots to S3は、データが8時間ごとまたは5GBの増分でAmazon S3にバックアップされることで耐久性を確保します。",
        "Explanation": "Amazon Redshiftは、データの耐久性と回復力を確保するための重要な機能としてAutomatic Snapshots to S3を提供しています。この機能は、Redshiftに保存されたデータを8時間ごとまたはデータサイズが5GB増加するたびに自動的にAmazon S3にバックアップします。これらのスナップショットは、データの損失や破損が発生した場合にユーザーがデータを以前の状態に復元できるため、災害復旧にとって重要です。これにより、データの整合性と可用性が確保されます。",
        "Other Options": [
            "Enhanced VPC Routingは、主に仮想プライベートクラウド（VPC）内でのネットワークセキュリティとトラフィック管理の改善に焦点を当てており、データの耐久性やバックアップ機能には直接関係しません。",
            "Compute Nodesのスライスは、Redshiftクラスター内の複数のノードにデータが分散され、処理される方法を指します。これによりパフォーマンスとスケーラビリティが向上しますが、バックアップや災害復旧機能は提供されません。",
            "Redshift Spectrumは、ユーザーがAmazon S3内のデータをRedshiftにロードすることなく直接クエリできるようにします。これは大規模データセットにアクセスするのに便利ですが、バックアップや災害復旧機能は提供しません。"
        ]
    },
    {
        "Question Number": "47",
        "Situation": "ある企業がAWS上でセキュアなネットワークアーキテクチャを設計しています。一部のリソースは公共アクセスを必要とし、他のリソースはVPC内でプライベートアクセスに制限されています。彼らは、プライベートサービス内の機密データがインターネットから隔離される一方で、特定の公共AWSサービスへの安全なアクセスを許可したいと考えています。",
        "Question": "次のアプローチのうち、彼らのセキュリティ要件を最もよく満たすものはどれですか？",
        "Options": {
            "1": "すべてのリソースをAWS Public ZoneにパブリックIPでデプロイし、アクセスとセキュリティ管理を簡素化します。",
            "2": "機密EC2インスタンスをAWS Private Zone内のプライベートサブネットに配置し、NATゲートウェイを介してインターネットにアクセスし、VPNまたはDirect Connectを使用してVPCへの安全なオンプレミスアクセスを確保します。",
            "3": "機密サービスにパブリックサブネットを使用し、セキュリティグループを適用して入出力トラフィックを制御します。",
            "4": "プライベートサービスをパブリックサブネットに構成し、IGWやVPNを使用せずにインターネット経由でAWSサービスに直接アクセスします。"
        },
        "Correct Answer": "機密EC2インスタンスをAWS Private Zone内のプライベートサブネットに配置し、NATゲートウェイを介してインターネットにアクセスし、VPNまたはDirect Connectを使用してVPCへの安全なオンプレミスアクセスを確保します。",
        "Explanation": "このアプローチは、機密データとリソースをプライベートサブネットに配置することで効果的に隔離します。このサブネットはインターネットから直接アクセスできません。NATゲートウェイを使用することで、これらのプライベートインスタンスはインターネットへのアウトバウンドトラフィックを開始でき（更新など）、インバウンドトラフィックをインターネットから防ぐことができるため、セキュリティが維持されます。さらに、VPNまたはDirect Connectを使用することで、VPCへのオンプレミスアクセスのための安全な接続が提供され、機密データが公共の露出から保護されます。",
        "Other Options": [
            "すべてのリソースをAWS Public ZoneにパブリックIPでデプロイすると、アクセスは簡素化されますが、すべてのリソースがインターネットにさらされるため、機密データにとって重大なセキュリティリスクとなります。",
            "機密サービスにパブリックサブネットを使用することは、インターネットからの隔離の要件に矛盾します。パブリックサブネットはインターネットからアクセス可能であり、機密データへの不正アクセスを引き起こす可能性があります。",
            "プライベートサービスをパブリックサブネットに構成し、IGWやVPNを使用せずにインターネット経由でAWSサービスに直接アクセスすることは実現不可能です。パブリックサブネットは本質的にインターネットにさらされており、機密データの隔離というセキュリティ要件を満たしません。"
        ]
    },
    {
        "Question Number": "48",
        "Situation": "ある企業がAWS上で新しいマイクロサービスベースのアプリケーションをデプロイしています。各マイクロサービスはDockerコンテナにパッケージ化されています。このアプリケーションは、コンテナを管理し、スケーリングを処理し、高可用性を確保するためのオーケストレーションを必要としています。",
        "Question": "ソリューションアーキテクトは、コンテナオーケストレーションのためにどのAWSサービスを推奨すべきですか？",
        "Options": {
            "1": "Amazon EC2 Auto Scaling",
            "2": "AWS Lambda",
            "3": "Amazon Elastic Kubernetes Service (EKS)",
            "4": "Amazon Elastic Container Service (ECS)"
        },
        "Correct Answer": "Amazon Elastic Kubernetes Service (EKS)",
        "Explanation": "Amazon Elastic Kubernetes Service (EKS)は、KubernetesをAWS上で簡単に実行できる完全管理型サービスであり、独自のKubernetesコントロールプレーンやノードをインストールして運用する必要がありません。Dockerコンテナを管理するために必要なオーケストレーションを提供し、スケーリングや高可用性を確保します。EKSは特にマイクロサービスアーキテクチャに適しており、Kubernetesを使用してコンテナ化されたアプリケーションのデプロイ、スケーリング、および管理を可能にします。Kubernetesは業界で広く採用されているオーケストレーションツールです。",
        "Other Options": [
            "Amazon EC2 Auto Scalingは、需要に応じてEC2インスタンスの数を自動的に調整するサービスです。アプリケーションのスケーリングに役立ちますが、Dockerコンテナを管理するためのコンテナオーケストレーション機能は提供しません。",
            "AWS Lambdaは、イベントに応じてコードを実行し、必要な計算リソースを自動的に管理するサーバーレスコンピューティングサービスです。コンテナオーケストレーションには設計されておらず、複数のマイクロサービスをコンテナで管理するよりもイベント駆動型アーキテクチャに適しています。",
            "Amazon Elastic Container Service (ECS)は、AWSが提供する別のコンテナオーケストレーションサービスです。Dockerコンテナを管理し、スケーリングや高可用性を処理できますが、質問では特にオーケストレーションを求めており、EKSはその広範な機能とコミュニティサポートからKubernetesベースのアプリケーションに好まれることが多いです。"
        ]
    },
    {
        "Question Number": "49",
        "Situation": "急成長中のeコマースプラットフォームは、バックエンドサービスを拡張して高トラフィック量を処理するために、受信APIリクエストを効率的に管理したいと考えています。リクエストが認証され、検証され、変換され、最適なパフォーマンスのためにキャッシュされることを保証したいと考えています。さらに、プラットフォームはリクエストとレスポンスのサイクルを監視し、使用状況に関する詳細なメトリクスを収集したいと考えています。",
        "Question": "この会社が信頼性が高く、スケーラブルなAPI管理レイヤーを構築するために使用すべきAWSサービスはどれであり、このサービスのどの特定の機能が彼らの要件をサポートしますか？",
        "Options": {
            "1": "Amazon API Gatewayは、認証、スロットリング、キャッシュを処理でき、リアルタイムの監視とメトリクス収集のためにAWS CloudWatchとシームレスに統合されます。",
            "2": "AWS Lambdaは、サーバーレスコンピューティング能力を提供し、各リクエストを独立して処理、認証、および処理するために使用できます。",
            "3": "Amazon EC2インスタンスとNGINXを使用して負荷分散とキャッシュを管理し、CloudWatchエージェントを利用してメトリクスとログを取得します。",
            "4": "Amazon S3と署名付きURLを使用してアクセスを制限し、CloudFrontでキャッシュを行うことで、バックエンドサービスへの負荷を軽減できます。"
        },
        "Correct Answer": "Amazon API Gatewayは、認証、スロットリング、キャッシュを処理でき、リアルタイムの監視とメトリクス収集のためにAWS CloudWatchとシームレスに統合されます。",
        "Explanation": "Amazon API Gatewayは、大規模なAPIの作成、展開、管理のために特別に設計されています。AWS IAM、Lambdaオーソライザー、またはAmazon Cognitoを使用した認証、リクエストの検証、リクエストとレスポンスの変換、パフォーマンス向上のためのキャッシュのための組み込み機能を提供します。さらに、AWS CloudWatchと統合されており、プラットフォームはAPIの使用状況を監視し、リクエストとレスポンスのサイクルを追跡し、詳細なメトリクスを収集できます。これは、高トラフィック量を効率的に管理するための会社の要件に完全に一致します。",
        "Other Options": [
            "AWS Lambdaはリクエストを処理できるサーバーレスコンピューティングサービスですが、完全なAPI管理レイヤーを提供しません。認証とリクエストの処理は可能ですが、API Gatewayが提供するキャッシュ、スロットリング、および包括的な監視のための組み込み機能が不足しています。",
            "Amazon EC2インスタンスとNGINXを使用して負荷分散とキャッシュを管理することは可能ですが、このアプローチはAPI Gatewayと比較して手動での設定と管理がより多く必要です。さらに、CloudWatchエージェントはメトリクスを提供できますが、API管理においてAPI Gatewayと同じレベルの統合と使いやすさを提供しません。",
            "Amazon S3と署名付きURLおよびCloudFrontは静的コンテンツの安全なアクセスとキャッシュを提供できますが、動的APIリクエストの管理には適していません。このソリューションは、eコマースプラットフォームのニーズにとって重要な認証、リクエストの検証、およびAPI使用状況の詳細な監視のための必要な機能が不足しています。"
        ]
    },
    {
        "Question Number": "50",
        "Situation": "ある会社がマルチティアWebアプリケーションのために複数のサブネットを持つVPCを構成しています。アプリケーションのパブリックサブネットはインターネットアクセスを許可する必要があり、プライベートサブネットはNATゲートウェイを介してのみインターネットへのアウトバウンドトラフィックを許可する必要があります。",
        "Question": "これらのサブネット間のトラフィックの正しいルーティングを確保する最も効率的な方法は何ですか？",
        "Options": {
            "1": "パブリックサブネット用のルートテーブルを作成し、デフォルトルート（0.0.0.0/0）をインターネットゲートウェイに指すようにし、プライベートサブネット用のルートテーブルを作成してNATゲートウェイへのルートを追加します。",
            "2": "パブリックサブネットとプライベートサブネットの両方のために単一のルートテーブルを作成し、アウトバウンドインターネットアクセスのためにNATゲートウェイへのルートを追加します。",
            "3": "プライベートサブネット用のルートテーブルを作成し、外部トラフィックのためにインターネットゲートウェイに直接指すようにします。",
            "4": "Amazon Route 53を使用して両方のサブネットのルーティングを処理し、すべてのトラフィックを内部DNSサーバーにルーティングします。"
        },
        "Correct Answer": "パブリックサブネット用のルートテーブルを作成し、デフォルトルート（0.0.0.0/0）をインターネットゲートウェイに指すようにし、プライベートサブネット用のルートテーブルを作成してNATゲートウェイへのルートを追加します。",
        "Explanation": "このオプションは、VPC内のパブリックサブネットとプライベートサブネットの両方のルーティングを正しく設定します。パブリックサブネットには、すべてのアウトバウンドトラフィック（0.0.0.0/0）をインターネットゲートウェイに向けるルートテーブルが必要であり、そのサブネット内のインスタンスがインターネットに直接アクセスできるようにします。一方、プライベートサブネットは直接インターネットアクセスを持つべきではなく、アウトバウンドトラフィックをNATゲートウェイにルーティングする必要があります。これにより、プライベートサブネット内のインスタンスのインターネットアクセスが処理されます。この構成により、パブリックサブネットはWebトラフィックを提供しながら、プライベートサブネットのセキュリティを維持できます。",
        "Other Options": [
            "パブリックサブネットとプライベートサブネットの両方のために単一のルートテーブルを作成し、アウトバウンドインターネットアクセスのためにNATゲートウェイへのルートを追加することは不正解です。パブリックサブネットはインターネットゲートウェイにトラフィックをルーティングする必要があり、NATゲートウェイではありません。NATゲートウェイはプライベートサブネットのアウトバウンドトラフィックのためだけです。",
            "プライベートサブネット用のルートテーブルを作成し、外部トラフィックのためにインターネットゲートウェイに直接指すようにすることは不正解です。プライベートサブネットはインターネットへの直接アクセスを持つべきではなく、セキュリティを維持し、インターネットへの直接露出を防ぐためにNATゲートウェイを介してトラフィックをルーティングする必要があります。",
            "Amazon Route 53を使用して両方のサブネットのルーティングを処理し、すべてのトラフィックを内部DNSサーバーにルーティングすることは不正解です。Route 53は主にDNSサービスであり、VPC内のサブネット間のルーティングを管理しません。ルーティングはルートテーブルによって処理され、DNSサービスによってではありません。"
        ]
    },
    {
        "Question Number": "51",
        "Situation": "メディア共有プラットフォームは、ユーザーが動画をアップロードできるようにし、これらの動画は自動的に複数のフォーマットにトランスコードされ、さまざまなデバイスで最適に再生されます。プラットフォームは、ユーザー認証のためにGoogleをアイデンティティプロバイダーとして使用しており、ログインに成功すると、ユーザーはAmazon S3バケットに動画をアップロードできます。一連のLambda関数がトリガーされ、動画を処理してロードし、トランスコーディングジョブを開始し、DynamoDBテーブルのメタデータを更新します。",
        "Question": "このサーバーレスアーキテクチャがプラットフォームに提供する利点は何ですか？",
        "Options": {
            "1": "固定の期間内での動画処理の保証",
            "2": "最小限のサーバー管理で低い運用オーバーヘッド",
            "3": "動画トランスコーディングタスクに対する手動介入が必要",
            "4": "高いアップロードトラフィックを処理するための専用サーバー"
        },
        "Correct Answer": "最小限のサーバー管理で低い運用オーバーヘッド",
        "Explanation": "サーバーレスアーキテクチャにより、プラットフォームはAWS Lambda、S3、およびDynamoDBなどのクラウドサービスを利用でき、基盤となるサーバーを管理する必要がありません。これにより、プラットフォームはサーバーのメンテナンス、プロビジョニング、スケーリングの問題を心配することなく、開発とスケーリングに集中できるため、運用オーバーヘッドが低くなります。Lambda関数の自動スケーリングと、S3およびDynamoDBの管理された性質は、手動介入やサーバー管理の必要性をさらに減少させます。",
        "Other Options": [
            "固定の期間内での動画処理の保証は、サーバーレスアーキテクチャの利点ではありません。サーバーレス関数は自動的にスケールできますが、処理の期間に関してはワークロードや他の要因によって変動するため、保証はありません。",
            "動画トランスコーディングタスクに対する手動介入が必要というのは、プロセスを自動化するために設計されたサーバーレスアーキテクチャの利点に反します。このシナリオでは、Lambda関数の使用が手動介入なしでトランスコーディングタスクが自動化されていることを示しています。",
            "高いアップロードトラフィックを処理するための専用サーバーは、サーバーレスアーキテクチャの特徴ではありません。代わりに、サーバーレスソリューションは必要に応じてリソースを動的に割り当て、専用サーバーの必要性を排除し、より効率的なリソース利用を可能にします。"
        ]
    },
    {
        "Question Number": "52",
        "Situation": "金融サービス会社は、複数のAWSアカウントに保存された機密クライアントデータの暗号化キーを管理するためにAWS Key Management Service (KMS)を使用しています。セキュリティチームは、認可された担当者とアプリケーションのみが特定のキーにアクセスできるようにアクセスポリシーを実装し、不正アクセスを防ぐ必要があります。規制要件を遵守するために、役割、部門、特定のプロジェクトに基づいてアクセスを制限する必要もあります。",
        "Question": "これらのアクセスポリシーを効果的に施行するために、どのアプローチを取るべきですか？（2つ選択してください。）",
        "Options": {
            "1": "KMSのリソースベースのポリシーを使用して、各キーの特定のアクセス権限を定義し、これらの権限を関連するIAMユーザー、グループ、およびロールに割り当てます。",
            "2": "各部門のためにセキュリティグループを作成し、関連する暗号化キーを添付し、ネットワークレベルの権限を適用してアクセスを制御します。",
            "3": "AWS S3バケットポリシーを通じてアクセス制御を実装し、どのユーザーがキーによって暗号化されたデータにアクセスできるかを制御します。",
            "4": "異なる部門とプロジェクトのために最小権限のAWS Identity and Access Management (IAM)ロールを利用します。",
            "5": "AWS Shieldに依存して、すべてのリソースにわたる暗号化キーアクセスポリシーを管理および施行します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "KMSのリソースベースのポリシーを使用して、各キーの特定のアクセス権限を定義し、これらの権限を関連するIAMユーザー、グループ、およびロールに割り当てます。",
            "異なる部門とプロジェクトのために最小権限のAWS Identity and Access Management (IAM)ロールを利用します。"
        ],
        "Explanation": "正しい回答は、KMSのリソースベースのポリシーを使用し、最小権限のIAMロールを利用することです。KMSのリソースベースのポリシーを使用すると、誰がどのキーにアクセスできるかを指定でき、これらの権限を関連するIAMユーザー、グループ、およびロールに割り当てることができます。これは、役割、部門、特定のプロジェクトに基づいてアクセスを制限する要件に合致します。最小権限のIAMロールも良いアプローチであり、各部門とプロジェクトが必要なリソースにのみアクセスできるようにし、不正アクセスのリスクを軽減します。",
        "Other Options": [
            "各部門のためにセキュリティグループを作成し、関連する暗号化キーを添付することは正しいアプローチではありません。なぜなら、AWSのセキュリティグループはインスタンスレベルでの入出力トラフィックを制御するために使用され、暗号化キーへのアクセスを管理するためのものではないからです。",
            "AWS S3バケットポリシーを通じてアクセス制御を実装することは正しいアプローチではありません。なぜなら、S3バケットポリシーはバケット内のデータにアクセスできるユーザーを制御できますが、KMSの暗号化キーへのアクセスを管理するものではないからです。",
            "AWS Shieldに依存して暗号化キーアクセスポリシーを管理および施行することは正しいアプローチではありません。なぜなら、AWS Shieldは管理された分散サービス拒否（DDoS）保護サービスであり、暗号化キーへのアクセスを管理するサービスではないからです。"
        ]
    },
    {
        "Question Number": "53",
        "Situation": "ある会社は、システムが障害から迅速に回復できることを保証するために、重要なアプリケーションの災害復旧（DR）戦略を必要としています。会社は、復旧時間目標（RTO）と復旧ポイント目標（RPO）を最小限に抑え、アプリケーションを最小限のパフォーマンス影響で運用し続けるために、セカンダリリージョンに追加のインフラを実装する意向があります。",
        "Question": "会社はどのDR戦略を実装すべきですか？",
        "Options": {
            "1": "2つのリージョンにわたるアクティブ-アクティブフェイルオーバー戦略を実装し、アプリケーションが常に両方のリージョンで稼働し、トラフィックが動的に分散されるようにします。",
            "2": "セカンダリリージョンで最小限のインフラを運用し、フェイルオーバーが発生した際にリソースをスケールアップするウォームスタンバイ戦略を実装します。",
            "3": "データがAmazon S3にバックアップされ、障害が発生した場合に手動で復元されるバックアップと復元戦略を実装します。",
            "4": "セカンダリリージョンで最小限のインフラを運用し、必要に応じてフルキャパシティにスケールアップするパイロットライト戦略を実装します。"
        },
        "Correct Answer": "2つのリージョンにわたるアクティブ-アクティブフェイルオーバー戦略を実装し、アプリケーションが常に両方のリージョンで稼働し、トラフィックが動的に分散されるようにします。",
        "Explanation": "アクティブ-アクティブフェイルオーバー戦略では、アプリケーションが2つのリージョンで同時に稼働することができ、両方のリージョンが常にトラフィックを処理できます。この設定により、障害時にセカンダリリージョンに切り替える必要がなく、ダウンタイムが大幅に短縮されます。このアプローチは、データが2つのリージョン間で継続的に同期され、常に最新のデータが利用可能であるため、復旧時間目標（RTO）と復旧ポイント目標（RPO）の両方を効果的に最小化します。",
        "Other Options": [
            "ウォームスタンバイ戦略を実装することは、セカンダリリージョンで最小限のインフラを維持し、フェイルオーバーが発生した際にスケールアップすることを含みます。この方法はコールドスタンバイと比較して復旧時間を改善しますが、リソースをスケールアップするために時間がかかるため、ダウンタイムが増加し、アクティブ-アクティブ設定と比較してRTOが高くなります。",
            "バックアップと復元戦略は、データの定期的なバックアップに依存し、これらはAmazon S3のようなサービスに保存されます。障害が発生した場合、システムはこれらのバックアップから手動で復元する必要があります。このアプローチは、アプリケーションとデータを復元するのにかなりの時間がかかるため、最小限のダウンタイムが重要なシナリオには適していません。",
            "パイロットライト戦略は、セカンダリリージョンでアプリケーションの最小限のバージョンを運用し、フェイルオーバー時にフルキャパシティにスケールアップすることを含みます。これはコールドスタンバイよりも効率的ですが、スケールアップには時間がかかるため、常に完全に稼働しているアクティブ-アクティブ戦略と比較してRTOが長くなります。"
        ]
    },
    {
        "Question Number": "54",
        "Situation": "ある金融機関は、AWSに保存された顧客データを保護するために暗号化を使用しており、規制要件を遵守するために暗号化キーを定期的にローテーションし、SSL証明書を更新する必要があります。機関は、手動介入を避け、人為的エラーのリスクを減らすために、キーのローテーションと証明書の更新を自動化する必要があります。",
        "Question": "機関はAWS環境全体でキーのローテーションと証明書の更新を効率的に管理するためにどのアプローチを取るべきですか？",
        "Options": {
            "1": "AWS KMSで自動キー回転を有効にし、AWS Certificate Manager (ACM)を使用して管理ドメインのSSL/TLS証明書を自動的に更新します。",
            "2": "90日ごとにKMSキーを手動でローテーションし、サードパーティプロバイダーから新しい証明書をリクエストしてSSL証明書を更新します。",
            "3": "IAMポリシーを使用して、AWSアカウント全体で定期的なキーのローテーションと証明書の更新を強制します。",
            "4": "AWS CloudTrailを設定して、暗号化キーを自動的にローテーションし、期限切れが近づいたときに証明書を更新します。"
        },
        "Correct Answer": "AWS KMSで自動キー回転を有効にし、AWS Certificate Manager (ACM)を使用して管理ドメインのSSL/TLS証明書を自動的に更新します。",
        "Explanation": "このアプローチは、自動化とコンプライアンスのために設計されたAWSサービスを活用します。AWS Key Management Service (KMS)は自動キー回転を可能にし、手動介入なしで暗号化キーが定期的にローテーションされることを保証し、人為的エラーのリスクを減らします。さらに、AWS Certificate Manager (ACM)は管理ドメインのSSL/TLS証明書を自動的に更新でき、プロセスを簡素化し、証明書が常に最新であることを保証します。この組み合わせは、機関のコンプライアンスとセキュリティのニーズを効果的に満たします。",
        "Other Options": [
            "90日ごとにKMSキーを手動でローテーションし、サードパーティプロバイダーから新しい証明書をリクエストしてSSL証明書を更新することは非効率的で、人為的エラーが発生しやすいです。このアプローチはプロセスを自動化せず、コンプライアンスを維持し、見落としのリスクを減らすためには重要です。",
            "IAMポリシーを使用してAWSアカウント全体で定期的なキーのローテーションと証明書の更新を強制することは、プロセスを直接自動化するものではありません。IAMポリシーは権限とアクセス制御を強制できますが、実際のローテーションや更新タスクを処理しないため、このオプションは機関のニーズには効果的ではありません。",
            "AWS CloudTrailを設定して暗号化キーを自動的にローテーションし、期限切れが近づいたときに証明書を更新することは誤りです。なぜなら、CloudTrailは主にAPIコールとAWS内の活動を追跡するロギングサービスであり、自動キー回転や証明書更新を実行する能力はないからです。"
        ]
    },
    {
        "Question Number": "55",
        "Situation": "複数のAWSアカウントを持つ大企業が、請求プロセスを効率化し、AWSアカウントの集中管理を確保したいと考えています。また、組織は部門間でのセキュリティおよびコンプライアンス基準を強制するために、特定のアカウントグループに対するポリシーを設定したいと考えています。",
        "Question": "これらの要件を満たすためにどのAWS機能を使用すべきか、またこの設定における管理アカウントの役割は何ですか？（2つ選択してください。）",
        "Options": {
            "1": "AWS Control Towerを使用してアカウント管理を行い、管理アカウントがアイデンティティフェデレーションを処理します。",
            "2": "AWS Organizationsを設定し、統合請求を使用して、管理アカウントが請求を担当し、他のアカウントをメンバーアカウントとして招待できるようにします。",
            "3": "AWS Identity and Access Management (IAM)を使用してすべてのアカウントの権限を管理し、ルートアカウントが各アカウントの請求を処理します。",
            "4": "AWS Single Sign-On (SSO)を有効にし、各アカウントをリンクさせ、管理アカウントがすべてのリンクされたアカウントのユーザーアクセスと請求を管理できるようにします。",
            "5": "AWS Organizations内でAWSサービスコントロールポリシー（SCP）を実装し、メンバーアカウント全体でセキュリティおよびコンプライアンス基準を強制します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Organizationsを設定し、統合請求を使用して、管理アカウントが請求を担当し、他のアカウントをメンバーアカウントとして招待できるようにします。",
            "AWS Organizations内でAWSサービスコントロールポリシー（SCP）を実装し、メンバーアカウント全体でセキュリティおよびコンプライアンス基準を強制します。"
        ],
        "Explanation": "AWS Organizationsを設定し、統合請求を使用することで、組織は請求プロセスを集中化できます。この設定における管理アカウントは、メンバーアカウントによって発生するすべての料金を支払う責任があり、他のアカウントを招待または削除できます。この機能により、組織は支払い方法を統合し、請求プロセスをより効率的にすることができます。AWS Organizations内でAWSサービスコントロールポリシー（SCP）を実装することで、組織は複数のAWSアカウント全体で権限を集中管理できます。SCPは、特定のアカウントグループに対するポリシーを設定するという組織の要件に沿って、メンバーアカウント全体でセキュリティおよびコンプライアンス基準を強制するために使用できます。",
        "Other Options": [
            "AWS Control Towerはアカウント管理に使用できますが、アイデンティティフェデレーションを処理しません。アイデンティティフェデレーションは通常、AWS Identity and Access Management (IAM)またはAWS Single Sign-On (SSO)によって処理されます。",
            "AWS Identity and Access Management (IAM)は権限を管理するために使用できますが、ルートアカウントは各アカウントの請求を処理しません。請求は通常、AWS Organizations内の管理アカウントによって処理されます。",
            "AWS Single Sign-On (SSO)はユーザーアクセスを管理するために使用できますが、すべてのリンクされたアカウントの請求を直接処理することはありません。請求は通常、AWS Organizations内の管理アカウントによって処理されます。"
        ]
    },
    {
        "Question Number": "56",
        "Situation": "ある企業が、オンプレミスのデータセンターとAWS環境の間に安全で専用のネットワーク接続を確立し、重要なアプリケーションへの低遅延アクセスを実現する必要があります。彼らは、インターネットを介して機密データを送信することによる潜在的なセキュリティリスクを懸念しています。",
        "Question": "安全で専用の接続を提供し、一貫したネットワークパフォーマンスを確保するAWSソリューションはどれですか？",
        "Options": {
            "1": "インターネットゲートウェイ（IGW）を設定し、セキュリティグループを使用してオンプレミスアプリケーションへのアクセスを制限します。",
            "2": "AWS VPNを使用してインターネット上に安全なIPsecトンネルを確立し、暗号化された通信を可能にします。",
            "3": "AWS Direct Connectを実装し、オンプレミスのデータセンターとAWSの間にプライベートで専用のネットワークリンクを提供し、必要に応じて追加のVPNレイヤーを介して暗号化をサポートします。",
            "4": "Elastic Load Balancer（ELB）を展開し、オンプレミスのデータセンターへのルーティングを構成して安全なアクセスを提供します。"
        },
        "Correct Answer": "AWS Direct Connectを実装し、オンプレミスのデータセンターとAWSの間にプライベートで専用のネットワークリンクを提供し、必要に応じて追加のVPNレイヤーを介して暗号化をサポートします。",
        "Explanation": "AWS Direct Connectは、オンプレミスのデータセンターとAWSの間に専用のプライベート接続を提供し、重要なアプリケーションへの低遅延アクセスに最適です。このソリューションは、公共のインターネットをバイパスし、機密データをインターネット上で送信する際のセキュリティリスクを大幅に低減します。さらに、Direct ConnectはVPNと組み合わせて追加の暗号化を提供でき、データが転送中に安全であることを保証します。",
        "Other Options": [
            "インターネットゲートウェイ（IGW）を設定し、セキュリティグループを使用することは専用の接続を提供しません。代わりに、公共のインターネットを介してAWSリソースへのアクセスを許可し、機密データに対するセキュリティリスクをもたらします。",
            "AWS VPNを使用すると、インターネット上に安全なIPsecトンネルを確立し、データを暗号化します。ただし、依然として公共のインターネットに依存しており、専用接続と比較して遅延や潜在的なセキュリティ脆弱性を引き起こす可能性があります。",
            "AWS Direct Connectが正しい選択である一方で、Elastic Load Balancer（ELB）を展開するオプションは専用のネットワーク接続を確立するためには関連性がありません。ELBは、複数のターゲットに対して受信アプリケーショントラフィックを分散するために使用され、オンプレミスのデータセンターとAWSの間に直接リンクを提供しません。"
        ]
    },
    {
        "Question Number": "57",
        "Situation": "チームは、複数のアプリケーションが高頻度のデータストリームを読み取り、処理し、分析できるメッセージングサービスを実装する必要があります。これは、アプリのユーザーインタラクションに関するリアルタイム分析などのデータです。このサービスは、同時に複数の消費者をサポートし、それぞれが定義されたローリングウィンドウ内でデータを読み取れるようにする必要があります。",
        "Question": "これらの要件に最も適したサービスはどれで、なぜですか？",
        "Options": {
            "1": "Amazon SQS、メッセージの永続性を持つ非同期通信のためのデカップリングを提供するため。",
            "2": "Amazon Kinesis、大規模なデータ取り込みと複数の消費者に最適化されており、リアルタイム分析のためのローリングウィンドウをサポートするため。",
            "3": "Amazon SNS、複数の消費者をサポートし、さまざまなエンドポイントへのリアルタイム配信を行うため。",
            "4": "AWS LambdaとS3、イベント駆動トリガーを使用してリアルタイムでデータを取り込み、処理するため。"
        },
        "Correct Answer": "Amazon Kinesis、大規模なデータ取り込みと複数の消費者に最適化されており、リアルタイム分析のためのローリングウィンドウをサポートするため。",
        "Explanation": "Amazon Kinesisは、リアルタイムデータストリームを処理するために特別に設計されており、高スループットのデータ取り込みに最適化されています。複数の消費者が同じデータストリームから同時に読み取ることができるため、複数のアプリケーションがデータを同時に処理するという要件に不可欠です。さらに、Kinesisはローリングウィンドウの概念をサポートしており、アプリケーションが指定された時間枠内でデータを分析できるため、ユーザーインタラクションに関するリアルタイム分析に最適です。",
        "Other Options": [
            "Amazon SQSは主にマイクロサービスのデカップリングと非同期通信のために設計されています。メッセージの永続性を提供しますが、リアルタイムデータストリーミングや複数の消費者のためのローリングウィンドウの概念をサポートしていないため、記述されたユースケースには適していません。",
            "Amazon SNSは、メッセージを複数のサブスクライバーにプッシュするパブリッシュ/サブスクライブメッセージングサービスです。ただし、消費者が定義されたローリングウィンドウ内でデータを読み取る能力や、高頻度データストリームを効果的に処理する能力を提供しないため、リアルタイム分析には重要です。",
            "AWS LambdaとS3はメッセージングサービスではなく、イベントに応じてデータを処理できるサーバーレスコンピューティングサービスです。リアルタイム処理に使用できますが、ストレージにはS3に依存しており、高頻度データストリームや複数の消費者が同時に同じデータにアクセスするためには最適化されていません。"
        ]
    },
    {
        "Question Number": "58",
        "Situation": "メディア会社は、大きなビデオファイルをオンプレミスに保存しており、これらのファイルをスケーラブルなストレージとグローバルアクセスのためにAmazon S3に移行する必要があります。移行は自動化され、手動での介入を最小限に抑える必要があります。",
        "Question": "ソリューションアーキテクトは、このデータ転送を促進するためにどのAWSサービスを使用すべきですか？",
        "Options": {
            "1": "AWS Snowball",
            "2": "AWS DataSync",
            "3": "Amazon S3 Transfer Acceleration",
            "4": "AWS Direct Connect"
        },
        "Correct Answer": "AWS DataSync",
        "Explanation": "AWS DataSyncは、オンプレミスのストレージとAmazon S3などのAWSサービス間で大量のデータを自動的に転送するために特別に設計されています。データ転送を効率的に処理し、転送タスクのスケジューリングと監視を可能にすることで、移行プロセスを簡素化し加速します。これにより手動での介入が最小限に抑えられ、メディア会社が大きなビデオファイルをS3に移行するというシナリオに最適です。",
        "Other Options": [
            "AWS Snowballは、ネットワーク転送が実行できない場合に大量のデータをAWSに転送するために使用される物理データ輸送ソリューションです。大規模なデータ移行に使用できますが、デバイスの物理的な発送が必要であり、DataSyncのように自動化されていません。",
            "Amazon S3 Transfer Accelerationは、Amazon CloudFrontのグローバルに分散したエッジロケーションを使用してS3へのアップロードを加速する機能です。しかし、オンプレミスのストレージからの転送プロセスを自動化することはなく、開始された後に転送を加速するだけです。",
            "AWS Direct Connectは、オンプレミスからAWSへの専用ネットワーク接続を提供し、データ転送の帯域幅を改善し、レイテンシを減少させることができます。しかし、移行プロセスを自動化することはなく、一時的な移行よりも継続的なデータ転送ニーズに適しています。"
        ]
    },
    {
        "Question Number": "59",
        "Situation": "SaaS会社は、複数のアプリケーションが中央データベースに接続しており、ピーク時に高い接続数が発生しています。彼らは、接続を開いたり維持したりすることに関連するコストを削減しつつ、スムーズなデータベースのパフォーマンスを確保したいと考えています。",
        "Question": "どのソリューションがこれらの要件を最もよく満たしますか？",
        "Options": {
            "1": "接続を分散するためにデータベースインスタンスを追加する",
            "2": "接続をプールするためにデータベースプロキシを実装する",
            "3": "フェイルオーバーのためにマルチAZデプロイメントを有効にする",
            "4": "接続を処理するためにキャッシングレイヤーを使用する"
        },
        "Correct Answer": "接続をプールするためにデータベースプロキシを実装する",
        "Explanation": "接続をプールするためにデータベースプロキシを実装することは、接続を開いたり維持したりすることに関連するコストを削減しつつ、スムーズなデータベースのパフォーマンスを確保するための最良のソリューションです。データベースプロキシは既存の接続を管理し再利用することができ、新しい接続を確立するオーバーヘッドを最小限に抑え、データベースへの接続数を減少させます。これによりリソースの利用効率が向上し、ピーク時にアプリケーションが接続を効率的に共有できることでパフォーマンスが大幅に改善されます。",
        "Other Options": [
            "接続を分散するためにデータベースインスタンスを追加することは負荷分散に役立つかもしれませんが、高い接続数の問題に直接対処するものではありません。接続管理の根本的な問題を解決せずにコストが増加する可能性があります。",
            "フェイルオーバーのためにマルチAZデプロイメントを有効にすることは、主に可用性と災害復旧を改善するための戦略です。レジリエンスを高めますが、接続数やそれに関連するコストを直接減少させるものではありません。",
            "接続を処理するためにキャッシングレイヤーを使用することは、データベースへの負荷を軽減することでパフォーマンスを向上させることができますが、接続プールの問題に特に対処するものではありません。キャッシングは、データベース接続を管理するのではなく、頻繁にアクセスされるデータを保存することに関するものです。"
        ]
    },
    {
        "Question Number": "60",
        "Situation": "ある会社は、AWSユーザーに対してセキュリティを強化するために多要素認証（MFA）を実装することを要求しています。各ユーザーは、モバイルフォンアプリなどのユニークなデバイスを使用して、時間ベースのワンタイムコードを生成する必要があります。このコードは定期的に変更され、ユーザー名とパスワードに加えて、ログインするたびに必要です。",
        "Question": "この種のMFA設定によって提供されるセキュリティの利点を最もよく説明しているのは次のうちどれですか？",
        "Options": {
            "1": "AWSルートアカウントのパスワードを知っているユーザーのみがログインできることを保証します。",
            "2": "ユーザーが知っているものと持っているものの両方で認証することを要求し、不正アクセスの可能性を減少させます。",
            "3": "正しいMFAコードを使用している場合、ユーザーがパスワードをバイパスできるようにします。",
            "4": "AWS管理コンソールに物理的にアクセスできるユーザーにのみ機能します。"
        },
        "Correct Answer": "ユーザーが知っているものと持っているものの両方で認証することを要求し、不正アクセスの可能性を減少させます。",
        "Explanation": "この文は、多要素認証（MFA）のセキュリティの利点を正確に説明しています。MFAは、ユーザーが知っているもの（パスワード）と持っているもの（モバイルデバイスによって生成された時間ベースのワンタイムコード）の2つの確認形式を要求することでセキュリティを強化します。この二重の要件は、不正アクセスのリスクを大幅に減少させます。攻撃者は、パスワードとユーザーのデバイスへのアクセスの両方を必要とするため、侵入が困難になります。",
        "Other Options": [
            "この文は不正確です。なぜなら、MFAは特にAWSルートアカウントのパスワードを知っているユーザーのみがログインできることを保証するものではないからです。MFAはすべてのユーザーに適用され、ルートアカウントを超えてセキュリティを強化します。",
            "この文は不正確です。なぜなら、正しい答えだからです。MFAのセキュリティの利点を正確に説明しており、ユーザーが知っているもの（パスワード）と持っているもの（MFAコード）を組み合わせています。",
            "この文は不正確です。なぜなら、MFAはユーザーがパスワードをバイパスすることを許可しないからです。MFAコードは、成功した認証のためにパスワードと一緒に提供されなければならない追加のセキュリティ層です。"
        ]
    },
    {
        "Question Number": "61",
        "Situation": "ある組織がAWS CloudFormationを使用して、IAMロール、セキュリティグループ、暗号化されたストレージボリュームなどのセキュリティ関連リソースを含むインフラストラクチャの展開を自動化しています。彼らは、すべての展開がセキュリティポリシーに準拠し、重要なリソースへの不正な変更を防ぐことを確実にしたいと考えています。",
        "Question": "CloudFormationで管理されるリソースを保護するために従うべきベストプラクティスは何ですか？（2つ選択してください。）",
        "Options": {
            "1": "StackSetsを有効にし、CloudFormationのドリフト検出を使用して展開されたリソースの変更を監視し、IAMポリシーを使用してスタックを変更できる人を制限します。",
            "2": "すべてのCloudFormationテンプレートをS3にバージョン管理なしで保存し、更新と修正を簡素化します。",
            "3": "CloudFormationを使用してリソースをパブリックサブネットにのみ展開し、組織内のすべてのユーザーが簡単にアクセスできるようにします。",
            "4": "AWS Configルールを実装して、展開中にCloudFormationスタックをセキュリティポリシーに対して検証します。",
            "5": "CloudFormationスタックでIAMロールの使用を避け、代わりにEC2キーペアに依存してアクセス制御を簡素化します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "StackSetsを有効にし、CloudFormationのドリフト検出を使用して展開されたリソースの変更を監視し、IAMポリシーを使用してスタックを変更できる人を制限します。",
            "AWS Configルールを実装して、展開中にCloudFormationスタックをセキュリティポリシーに対して検証します。"
        ],
        "Explanation": "StackSetsを有効にし、CloudFormationのドリフト検出を使用することで、組織は展開されたリソースの変更を監視できます。これにより、重要なリソースへの不正な変更を特定するのに役立ちます。IAMポリシーを使用してスタックを変更できる人を制限することで、認可された担当者のみがインフラストラクチャに変更を加えられるようになり、セキュリティが強化されます。展開中にCloudFormationスタックをセキュリティポリシーに対して検証するためにAWS Configルールを実装することで、すべての展開が組織のセキュリティポリシーに準拠していることが保証されます。これにより、セキュリティ侵害を防ぐことができます。",
        "Other Options": [
            "すべてのCloudFormationテンプレートをS3にバージョン管理なしで保存することは、更新と修正を簡素化しますが、変更を追跡したり、何か問題が発生した場合に以前のバージョンに戻したりする方法を提供しません。これにより、セキュリティの脆弱性が生じる可能性があるため、ベストプラクティスではありません。",
            "CloudFormationを使用してリソースをパブリックサブネットにのみ展開することは、セキュリティを保証するものではありません。これは、組織内のすべてのユーザーに簡単なアクセスを提供しますが、同時にリソースを潜在的な外部の脅威にさらすことになります。したがって、CloudFormationで管理されるリソースを保護するためのベストプラクティスではありません。",
            "CloudFormationスタックでIAMロールの使用を避け、EC2キーペアに依存してアクセス制御を簡素化することは、セキュリティを簡素化しますが、IAMロールが提供する詳細な制御を提供しません。IAMロールは、誰がどのリソースにアクセスできるかについて、より柔軟性と制御を提供するため、セキュリティのためにはより良い選択です。したがって、これはベストプラクティスではありません。"
        ]
    },
    {
        "Question Number": "62",
        "Situation": "ある企業が新しいマルチアカウントAWS環境を設定しており、すべてのアカウントで一貫したセキュリティとコンプライアンス基準を確保したいと考えています。また、自動化された監視と通知機能も望んでいます。",
        "Question": "このプロセスを効率化するためにどのAWSサービスを使用すべきで、どの特定の機能がこの環境内のすべてのアカウントに対してルールと基準を強制するのに役立ちますか？",
        "Options": {
            "1": "AWS Organizationsを使用し、アカウント間でルールを強制するためにサービスコントロールポリシー（SCP）を実装します。",
            "2": "AWS Control Towerを使用してマルチアカウント環境のセットアップと管理を自動化し、ガードレールを使用してルールを強制し、コンプライアンスを監視します。",
            "3": "各アカウントにAWS Configを使用し、リソースを監視するためのコンプライアンスルールを手動で設定します。",
            "4": "AWS CloudFormationを使用してカスタム環境を展開し、アカウント間でセキュリティ基準を管理するためにIAMポリシーを実装します。"
        },
        "Correct Answer": "AWS Control Towerを使用してマルチアカウント環境のセットアップと管理を自動化し、ガードレールを使用してルールを強制し、コンプライアンスを監視します。",
        "Explanation": "AWS Control Towerは、組織がAWSのベストプラクティスに基づいて安全なマルチアカウントAWS環境を設定し、管理するのを支援するために特別に設計されています。アカウントを作成し、ガバナンスを適用し、事前に設定されたガードレールを通じてコンプライアンスを確保するための効率的な方法を提供します。これらのガードレールは、アカウント間でポリシーを強制するのに役立つルールです。このサービスはセットアッププロセスを自動化し、環境が定義された基準に従っていることを確認するための監視機能を含んでおり、企業の要件に最適な選択です。",
        "Other Options": [
            "AWS Organizationsをサービスコントロールポリシー（SCP）と共に使用することは、アカウント間での権限管理に有効なアプローチですが、AWS Control Towerが提供する包括的な自動化とガバナンス機能を提供しません。SCPは、コンプライアンスの強制や監視よりもアクセス制御に関するものです。",
            "AWS Configは、AWSリソースの構成を評価、監査、評価するためのサービスです。コンプライアンス監視には役立ちますが、各アカウントのルールを手動で設定する必要があり、企業の自動化されたセットアップと複数アカウント間での一貫した強制の希望には合致しません。",
            "AWS CloudFormationは、インフラストラクチャをコードとして展開するためのサービスであり、一貫して環境を設定するのに役立ちます。ただし、複数のアカウント間でのガバナンスやコンプライアンス監視機能を本質的に提供するものではありません。IAMポリシーはセキュリティ基準を管理できますが、AWS Control Towerのようにコンプライアンスを強制したり、自動監視機能を提供したりすることはありません。"
        ]
    },
    {
        "Question Number": "63",
        "Situation": "メディアストリーミングプラットフォームであるMediaStreamは、世界中で数百万の同時ユーザーをサポートするためにAWSに大きく依存しています。彼らは、ストリーミングサービスを中断させる可能性のある分散型サービス拒否（DDoS）攻撃のリスクを懸念しています。MediaStreamは、基本的なDDoS保護と追加の保護のための高度なレイヤー、さらにDDoSイベントのリアルタイムの可視性を提供するソリューションを求めています。彼らは、ネットワーク、トランスポート、アプリケーションレイヤーを含むさまざまなレイヤーでの潜在的な攻撃からアプリケーションを保護するために、AWS Shield StandardとAWS Shield Advancedを検討しています。MediaStreamは、攻撃がAWSの使用量を大幅に増加させた場合の潜在的なコストへの影響からの保護も望んでいます。",
        "Question": "AWSインフラストラクチャにおけるDDoS緩和のために提供される保護と機能の観点から、AWS Shield StandardとAWS Shield Advancedの違いを最もよく説明しているのはどの文ですか？",
        "Options": {
            "1": "AWS Shield Standardは、すべてのAWS顧客に無料で基本的なDDoS保護を提供し、主にAWSサービスの周辺での保護に焦点を当てていますが、プロアクティブな関与や高度な健康ベースの検出機能は含まれていません。",
            "2": "AWS Shield Advancedは、すべてのAWS顧客に利用可能な無料サービスであり、アプリケーションレイヤー攻撃（L7）に対する強化されたDDoS保護を提供し、コスト保護とDDoSイベントのリアルタイムの可視性を提供するためにAWS WAFと密接に統合されています。",
            "3": "AWS Shield Standardは、有料サービスであり、すべてのAWSサービスにおけるアプリケーションレイヤー（L7）DDoS攻撃に対する自動保護を提供し、AWS Shieldレスポンスチームによるプロアクティブな関与を含みます。",
            "4": "AWS Shield Advancedは、Elastic IPを持つすべてのAWSリソースに自動的に有効化され、すべてのDDoSイベントに対して無料のWeb ACL構成、プロアクティブなコスト保護、およびAWS Shieldレスポンスチームからの即時対応を提供します。"
        },
        "Correct Answer": "AWS Shield Standardは、すべてのAWS顧客に無料で基本的なDDoS保護を提供し、主にAWSサービスの周辺での保護に焦点を当てていますが、プロアクティブな関与や高度な健康ベースの検出機能は含まれていません。",
        "Explanation": "AWS Shield Standardは、すべてのAWS顧客に基本的なDDoS保護を提供する無料サービスです。主にネットワークおよびトランスポート層での一般的かつ最も頻繁に発生するDDoS攻撃から保護しますが、AWSサービスの周辺での保護に焦点を当てています。しかし、AWS Shield Advancedでのみ利用可能な、AWS Shieldレスポンスチームからのプロアクティブな関与や高度な健康ベースの検出機能などの高度な機能は提供されていません。これにより、AWS Shield Standardの限界を正確に説明する文となります。",
        "Other Options": [
            "AWS Shield Advancedは無料サービスではなく、有料サービスであり、アプリケーションレイヤー（L7）攻撃を含む強化されたDDoS保護を提供し、AWS WAFと統合されています。ただし、コスト保護やリアルタイムの可視性を提供しますが、すべてのAWS顧客に無料で提供されるものではありません。",
            "AWS Shield Standardは有料サービスではなく、無料であり、アプリケーションレイヤー（L7）DDoS攻撃に対する自動保護を提供しません。AWS Shieldレスポンスチームによるプロアクティブな関与はAWS Shield Advancedの機能であり、Standardには含まれていません。",
            "AWS Shield Advancedは、Elastic IPを持つすべてのAWSリソースに自動的に有効化されるものではなく、サブスクリプションが必要です。さらに、プロアクティブなコスト保護やAWS Shieldレスポンスチームからの即時対応を提供しますが、サービスの一部として無料のWeb ACL構成を提供することはありません。"
        ]
    },
    {
        "Question Number": "64",
        "Situation": "ある企業が、コンテナを使用したマイクロサービスベースのアプリケーションを構築しており、AWS上でこれらのコンテナをスケーラブルに管理およびオーケストレーションしたいと考えています。企業はオーケストレーションのためにAmazon ECSとAmazon EKSを検討していますが、どのサービスが最も適しているかは不明です。彼らはオーケストレーションに対する細かい制御、カスタムネットワーキング、およびコンテナ管理を必要としています。",
        "Question": "企業がAmazon ECSの代わりにAmazon EKSを使用すべきタイミングを最もよく説明しているのはどれですか？",
        "Options": {
            "1": "企業がカスタムオーケストレーションや複雑なネットワーキング機能など、Kubernetesネイティブの機能を必要とする場合は、Amazon EKSを使用してください。",
            "2": "すべてのコンテナオーケストレーションのニーズにはAmazon ECSを使用してください。これは、コンテナ化されたアプリケーションにとってよりシンプルでコスト効果が高いからです。",
            "3": "企業がすべてのコンテナ化されたワークロードのスケーリングと負荷分散を自動的に処理する完全管理型コンテナサービスを必要とする場合は、Amazon EKSを使用してください。",
            "4": "企業がサーバーレスコンテナを使用している場合のみAmazon ECSを使用してください。なぜなら、Amazon EKSはサーバーレスワークロードをサポートしていないからです。"
        },
        "Correct Answer": "企業がカスタムオーケストレーションや複雑なネットワーキング機能など、Kubernetesネイティブの機能を必要とする場合は、Amazon EKSを使用してください。",
        "Explanation": "Amazon EKS（Elastic Kubernetes Service）は、Kubernetesが提供する高度な機能と柔軟性を必要とするユーザー向けに設計されています。これには、オーケストレーションに対する細かい制御、カスタムネットワーキングソリューションの実装能力、およびKubernetesネイティブのツールやAPIの使用が含まれます。企業がこれらの機能を求めている場合、EKSはECS（Elastic Container Service）よりも優れた選択肢です。ECSはよりシンプルで、コンテナオーケストレーションに対してより意見が強いアプローチを取っています。",
        "Other Options": [
            "この選択肢は不正確です。なぜなら、Amazon EKSはKubernetesネイティブの機能を提供しますが、単にシンプルさやコスト効果のためだけではありません。ECSはシンプルで、ストレートフォワードなコンテナオーケストレーションのニーズにはコスト効果が高いかもしれませんが、EKSが提供する高度な機能が欠けています。",
            "この選択肢は誤解を招くものです。なぜなら、Amazon EKSは管理されたサービスを提供しますが、すべてのワークロードに対してECSと同じ方法で自動的にスケーリングと負荷分散を処理するわけではありません。EKSは、同様の結果を得るためにより多くの設定とKubernetesの理解を必要とします。",
            "この選択肢は不正確です。なぜなら、Amazon EKSはAWS Fargateを通じてサーバーレスワークロードをサポートしており、Amazon ECSと同様です。したがって、EKSがサーバーレスワークロードをサポートしていないという主張は誤りです。"
        ]
    },
    {
        "Question Number": "65",
        "Situation": "ある企業が、AWSでマルチティアアプリケーションをサポートするための仮想プライベートクラウド（VPC）アーキテクチャを設計しています。このアーキテクチャには、将来の成長のために追加の予備ゾーンを含む3つのアベイラビリティゾーン（AZ）が必要です。各アベイラビリティゾーンには、ウェブ、アプリケーション、およびデータベースティア用の別々のサブネットがあり、将来の拡張のために追加のサブネットが予約されます。企業は、各ティアでアプリケーションをスケールさせるために十分なIPアドレスがあることを確認したいと考えています。",
        "Question": "将来の成長を考慮しながら、これらの要件を最もよく満たすVPC構成はどれですか？",
        "Options": {
            "1": "VPCに/28 CIDRブロックを使用し、各アベイラビリティゾーンを/30サブネットに分割して、各サブネット内でのIPアドレスの使用を最大化します。",
            "2": "VPCに/16 CIDRブロックを設定し、合計65,536のIPアドレスを提供し、各アベイラビリティゾーンの各ティアに/20サブネットを割り当てて、各ティアに十分なIPアドレスを確保します。",
            "3": "VPCに/24 CIDRブロックを選択し、合計256のIPアドレスを提供し、各アベイラビリティゾーンの各ティアに/26サブネットを使用してアドレス空間を最適化します。",
            "4": "VPCに/22 CIDRブロックを構成して1,024のIPアドレスをサポートし、各アベイラビリティゾーンを各ティアのために/25サブネットに分割してアドレス空間とスケーラビリティのバランスを取ります。"
        },
        "Correct Answer": "VPCに/16 CIDRブロックを設定し、合計65,536のIPアドレスを提供し、各アベイラビリティゾーンの各ティアに/20サブネットを割り当てて、各ティアに十分なIPアドレスを確保します。",
        "Explanation": "/16 CIDRブロックをVPCに選択することで、65,536のIPアドレスという大きなアドレス空間を確保できます。これは、3つのアベイラビリティゾーンにわたってウェブ、アプリケーション、およびデータベースティアのために別々のサブネットを必要とするマルチティアアプリケーションには十分です。将来の成長のために追加のサブネットも必要です。/20サブネットを割り当てることで、各サブネットには4,096のIPアドレス（2^(32-20)）があり、各ティア内でのスケーリングに十分な余裕を持ちながら、将来の拡張も可能です。",
        "Other Options": [
            "/28 CIDRブロックをVPCに使用すると、16のIPアドレスしか提供されず、3つのアベイラビリティゾーンに複数のサブネットを必要とするマルチティアアプリケーションには限界があります。各AZを/30サブネットに分割すると、使用可能なIPアドレスの数がさらに減少し、この選択肢は実用的ではありません。",
            "/24 CIDRブロックは256のIPアドレスしか提供せず、アプリケーションの要件には不十分です。/26サブネットを使用すると、各サブネットに64のIPアドレスしか許可されず、ウェブ、アプリケーション、およびデータベースティアには特に将来の成長を考慮すると不十分です。",
            "/22 CIDRブロックを構成すると1,024のIPアドレスが提供され、前の選択肢よりは良いですが、スケーリングに十分な余裕を提供しない可能性があります。各アベイラビリティゾーンを/25サブネットに分割すると、各サブネットに128のIPアドレスが提供され、特に将来の拡張を計画している企業にとってはアプリケーションティアに制限がかかる可能性があります。"
        ]
    }
]