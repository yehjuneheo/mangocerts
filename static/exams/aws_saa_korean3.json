[
    {
        "Question Number": "1",
        "Situation": "한 전자상거래 회사가 휴일 세일 기간 동안 웹사이트 트래픽의 계절적 급증을 경험하고 있습니다. 높은 가용성을 보장하고 들어오는 트래픽을 효율적으로 분산하기 위해, 회사는 요청의 내용에 따라 요청을 라우팅할 수 있는 로드 밸런싱 솔루션을 구현하고자 합니다.",
        "Question": "솔루션 아키텍트가 추천해야 할 AWS 로드 밸런싱 솔루션은 무엇인가요?",
        "Options": {
            "1": "라운드 로빈 라우팅으로 구성된 Classic Load Balancer",
            "2": "정적 IP 주소가 있는 Network Load Balancer",
            "3": "경로 기반 라우팅 규칙이 있는 Application Load Balancer",
            "4": "DNS 기반 라우팅이 있는 AWS Global Accelerator"
        },
        "Correct Answer": "경로 기반 라우팅 규칙이 있는 Application Load Balancer",
        "Explanation": "Application Load Balancer (ALB)는 HTTP 및 HTTPS 트래픽을 처리하도록 설계되었으며, URL 경로나 호스트 헤더와 같은 요청의 내용에 따라 요청을 라우팅할 수 있습니다. 이는 계절적 급증 동안 트래픽을 효율적으로 분산하고 요청을 내용에 따라 다양한 서비스로 라우팅해야 하는 전자상거래 회사에 적합합니다. 경로 기반 라우팅을 통해 ALB는 URL 경로에 따라 특정 백엔드 서비스로 트래픽을 유도할 수 있으며, 이는 여러 서비스 또는 마이크로서비스가 있는 애플리케이션에 특히 유용합니다.",
        "Other Options": [
            "Classic Load Balancer는 콘텐츠 기반 라우팅을 지원하지 않는 레거시 옵션입니다. 주로 라운드 로빈 또는 스티키 세션 라우팅을 사용하며, 요청 내용에 따라 라우팅이 필요한 애플리케이션에는 유연성이 떨어집니다.",
            "Network Load Balancer는 TCP 트래픽 처리를 최적화하며, 초저지연을 유지하면서 초당 수백만 개의 요청을 처리할 수 있습니다. 그러나 콘텐츠 기반 라우팅을 지원하지 않으므로 이 시나리오의 요구 사항에 적합하지 않습니다.",
            "AWS Global Accelerator는 전 세계 사용자가 있는 애플리케이션의 가용성과 성능을 개선하기 위해 트래픽을 건강, 지리 및 라우팅 정책에 따라 최적의 엔드포인트로 라우팅하도록 설계되었습니다. 그러나 콘텐츠 기반 라우팅 기능을 제공하지 않으므로 요청 내용을 기반으로 라우팅해야 하는 특정 요구 사항에 적합하지 않습니다."
        ]
    },
    {
        "Question Number": "2",
        "Situation": "한 회사가 EC2 인스턴스에 연결된 Amazon EBS 볼륨의 데이터를 보호하고, 데이터가 저장 시 암호화된 상태를 유지하도록 하기를 원합니다. 또한, 이 볼륨의 스냅샷을 백업 목적으로 찍을 계획입니다.",
        "Question": "다음 중 이 사용 사례에 대한 EBS 암호화 기능을 올바르게 설명하는 것은 무엇인가요? (두 가지 선택)",
        "Options": {
            "1": "EBS 볼륨은 전용 인스턴스에 연결된 경우에만 암호화할 수 있으며, 찍은 각 스냅샷에 수동으로 암호화를 적용해야 합니다.",
            "2": "각 EBS 볼륨은 AWS KMS에 의해 생성된 고유한 데이터 암호화 키 (DEK)를 사용하며, 이 스냅샷과 이 스냅샷에서 생성된 모든 미래 볼륨은 동일한 DEK를 사용합니다.",
            "3": "EBS 암호화는 인스턴스 수준의 암호화에만 의존하며 KMS 통합이 필요하지 않아 볼륨에 투명하게 암호화됩니다.",
            "4": "AWS KMS 관리 키를 사용하여 모든 EBS 볼륨에 대해 기본적으로 암호화를 활성화하여 기존 및 새로운 모든 스냅샷이 자동으로 암호화되도록 합니다.",
            "5": "EBS 암호화는 스냅샷만 암호화하며, EC2 인스턴스에 저장된 활성 볼륨 데이터는 암호화하지 않습니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "각 EBS 볼륨은 AWS KMS에 의해 생성된 고유한 데이터 암호화 키 (DEK)를 사용하며, 이 스냅샷과 이 스냅샷에서 생성된 모든 미래 볼륨은 동일한 DEK를 사용합니다.",
            "AWS KMS 관리 키를 사용하여 모든 EBS 볼륨에 대해 기본적으로 암호화를 활성화하여 기존 및 새로운 모든 스냅샷이 자동으로 암호화되도록 합니다."
        ],
        "Explanation": "각 EBS 볼륨은 AWS KMS에 의해 생성된 고유한 데이터 암호화 키 (DEK)를 사용합니다. 이 DEK는 볼륨을 암호화하는 데 사용되며, 볼륨에서 찍은 모든 스냅샷과 이 스냅샷에서 생성된 모든 미래 볼륨도 동일한 DEK를 사용합니다. 이는 데이터가 저장 시 암호화된 상태를 유지하도록 보장합니다. 또한, AWS는 AWS KMS 관리 키를 사용하여 모든 EBS 볼륨에 대해 기본적으로 암호화를 활성화할 수 있도록 허용합니다. 이를 통해 기존 및 새로운 모든 스냅샷이 자동으로 암호화되어 추가적인 보안 계층을 제공합니다.",
        "Other Options": [
            "EBS 볼륨은 전용 인스턴스에 연결된 경우에만 암호화할 수 있으며, 찍은 각 스냅샷에 수동으로 암호화를 적용해야 한다는 것은 잘못된 정보입니다. EBS 암호화는 전용 인스턴스에 국한되지 않으며, 암호화된 볼륨에서 찍은 스냅샷은 자동으로 암호화됩니다.",
            "EBS 암호화는 인스턴스 수준의 암호화에만 의존하며 KMS 통합이 필요하지 않다는 것은 잘못된 정보입니다. EBS 암호화는 암호화 키를 생성하고 관리하기 위해 AWS KMS와의 통합이 필요합니다.",
            "EBS 암호화는 스냅샷만 암호화하며, EC2 인스턴스에 저장된 활성 볼륨 데이터는 암호화하지 않는다는 것은 잘못된 정보입니다. EBS 암호화는 활성 볼륨 데이터와 스냅샷 모두를 암호화합니다."
        ]
    },
    {
        "Question Number": "3",
        "Situation": "한 글로벌 게임 회사가 전 세계의 플레이어를 끌어들이는 새로운 온라인 멀티플레이어 게임을 출시하고자 합니다. 회사는 모든 플레이어에게 지리적 위치에 관계없이 최소한의 지연 시간과 원활한 게임 경험을 보장하고자 합니다. 또한, DDoS 공격으로부터 게임 서버를 보호하는 것을 목표로 하고 있습니다.",
        "Question": "솔루션 아키텍트가 콘텐츠 전송을 최적화하고 엣지에서 보안을 강화하기 위해 추천해야 할 AWS 서비스는 무엇인가요? (두 가지 선택)",
        "Options": {
            "1": "Amazon CloudFront와 AWS Shield Advanced",
            "2": "AWS Global Accelerator와 Amazon Route 53",
            "3": "AWS Direct Connect와 AWS WAF",
            "4": "Amazon ElastiCache와 AWS Firewall Manager",
            "5": "AWS Global Accelerator와 AWS Shield Advanced"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon CloudFront와 AWS Shield Advanced",
            "AWS Global Accelerator와 AWS Shield Advanced"
        ],
        "Explanation": "Amazon CloudFront와 AWS Shield Advanced, 그리고 AWS Global Accelerator와 AWS Shield Advanced가 올바른 답변입니다. Amazon CloudFront는 데이터를 전 세계 고객에게 낮은 지연 시간과 높은 전송 속도로 제공하는 콘텐츠 전송 네트워크 (CDN)입니다. AWS Shield Advanced는 AWS에서 실행되는 리소스에 대한 비용 효율적인 DDoS 보호를 제공하며, 이는 게임 회사가 DDoS 공격으로부터 서버를 보호하는 데 중요합니다. AWS Global Accelerator는 사용자의 트래픽을 Amazon Web Service의 글로벌 네트워크 인프라를 통해 전송하여 인터넷 사용자 성능을 최대 60% 향상시킵니다. AWS Shield Advanced와 결합하면 성능을 향상시킬 뿐만 아니라 DDoS 보호도 제공합니다.",
        "Other Options": [
            "AWS Global Accelerator와 Amazon Route 53은 완전한 솔루션이 아닙니다. AWS Global Accelerator는 애플리케이션의 가용성과 성능을 개선하지만, Amazon Route 53은 확장 가능한 도메인 이름 시스템 (DNS) 웹 서비스로 DDoS 보호를 제공하지 않습니다.",
            "AWS Direct Connect와 AWS WAF는 최선의 솔루션이 아닙니다. AWS Direct Connect는 귀하의 시설에서 AWS로 전용 네트워크 연결을 쉽게 설정할 수 있는 클라우드 서비스 솔루션이며, AWS WAF는 웹 애플리케이션을 일반 웹 공격으로부터 보호하는 웹 애플리케이션 방화벽이지만, 이 두 서비스 모두 콘텐츠 전송을 최적화하거나 엣지에서 DDoS 보호를 제공하지 않습니다.",
            "Amazon ElastiCache와 AWS Firewall Manager는 올바른 솔루션이 아닙니다. Amazon ElastiCache는 클라우드에서 인메모리 캐시를 쉽게 배포, 운영 및 확장할 수 있는 웹 서비스이며, AWS Firewall Manager는 AWS 조직 내의 계정 및 애플리케이션 전반에 걸쳐 방화벽 규칙을 중앙에서 구성하고 관리할 수 있는 보안 관리 서비스입니다. 그러나 이 두 서비스 모두 콘텐츠 전송을 최적화하거나 엣지에서 DDoS 보호를 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "4",
        "Situation": "한 소매 회사가 AWS 환경에서 특정 이벤트가 발생할 때 자동으로 특정 작업이 트리거되는 모니터링 시스템을 구현하고자 합니다. 예를 들어, EC2 인스턴스의 상태가 \"중지됨\"에서 \"실행 중\"으로 변경되면, 이 활동을 기록하기 위해 Lambda 함수가 트리거되어야 합니다. 또한, 동일한 서비스를 사용하여 야간 백업과 같은 주기적인 작업을 예약하고자 합니다.",
        "Question": "이 요구 사항을 가장 잘 충족하는 AWS 서비스 구성은 무엇인가요?",
        "Options": {
            "1": "예약된 쿼리가 있는 Amazon CloudWatch Logs",
            "2": "주기적 호출 설정이 있는 AWS Lambda",
            "3": "이벤트 패턴 규칙 및 예약 규칙이 있는 Amazon EventBridge",
            "4": "재시도 패턴이 있는 AWS Step Functions"
        },
        "Correct Answer": "이벤트 패턴 규칙 및 예약 규칙이 있는 Amazon EventBridge",
        "Explanation": "Amazon EventBridge는 이벤트 기반 아키텍처를 촉진하도록 설계되었으며, EC2 인스턴스와 같은 AWS 리소스의 상태 변경에 반응할 수 있습니다. 특정 이벤트가 발생할 때 작업(예: Lambda 함수 호출)을 트리거하는 이벤트 패턴을 생성할 수 있습니다. 또한, EventBridge는 예약된 이벤트를 지원하여 야간 백업과 같은 주기적인 작업을 설정할 수 있습니다. 이는 시나리오에 명시된 요구 사항에 가장 적합합니다.",
        "Other Options": [
            "예약된 쿼리가 있는 Amazon CloudWatch Logs는 주로 로그 데이터를 기록하고 쿼리하는 데 사용됩니다. 로그 모니터링에 도움이 될 수 있지만, 이벤트에 따라 작업을 트리거하거나 작업을 직접 예약하는 기능을 본질적으로 제공하지 않습니다.",
            "주기적 호출 설정이 있는 AWS Lambda는 일정에 따라 함수를 실행할 수 있지만, 리소스 상태 변경에 따라 이벤트 기반 트리거를 본래적으로 처리하지 않습니다. EC2 상태 변경을 모니터링하려면 추가 설정이 필요합니다.",
            "AWS Step Functions는 복잡한 워크플로를 조정하고 여러 서비스 간의 상태를 관리하는 서비스입니다. 재시도 및 워크플로 관리는 가능하지만, 이벤트 기반 트리거 또는 작업 예약을 직접 처리하도록 설계되지 않았으므로 요구 사항에 덜 적합합니다."
        ]
    },
    {
        "Question Number": "5",
        "Situation": "웹 애플리케이션이 변동하는 트래픽 부하를 처리해야 하며, 회사는 인스턴스 간에 트래픽을 효율적으로 분산하면서 비용을 최소화하는 로드 밸런싱 전략을 사용하고자 합니다. 또한, Layer 7 (애플리케이션 계층) 로드 밸런싱을 사용하여 비용을 최적화하고자 합니다.",
        "Question": "이 요구 사항에 가장 비용 효율적인 로드 밸런싱 옵션은 무엇인가요?",
        "Options": {
            "1": "수동 스케일링이 있는 Classic Load Balancer 사용",
            "2": "자동 스케일링이 활성화된 Application Load Balancer (ALB) 배포",
            "3": "HTTP/HTTPS 트래픽을 처리하기 위한 Network Load Balancer 사용",
            "4": "각 가용 영역에 대해 개별 로드 밸런서 배포"
        },
        "Correct Answer": "자동 스케일링이 활성화된 Application Load Balancer (ALB) 배포",
        "Explanation": "Application Load Balancer (ALB)는 Layer 7에서 HTTP 및 HTTPS 트래픽을 처리하도록 특별히 설계되어 요청의 내용에 따라 고급 라우팅 및 트래픽 관리를 가능하게 합니다. 자동 스케일링을 활성화하면 애플리케이션은 현재 트래픽 부하에 따라 인스턴스 수를 자동으로 조정하여 자원 활용을 효율적으로 하고 비용 효율성을 보장합니다. 이 조합은 회사가 트래픽을 효율적으로 분산하면서 자원 과잉 프로비저닝과 관련된 비용을 최소화할 수 있도록 합니다.",
        "Other Options": [
            "수동 스케일링이 있는 Classic Load Balancer를 사용하는 것은 비용 효율적이지 않습니다. 이는 트래픽 부하에 따라 인스턴스 수를 조정하기 위해 수동 개입이 필요하며, 이로 인해 자원이 과소 활용되거나 과다 활용될 수 있어 비용이 증가할 수 있습니다.",
            "Network Load Balancer (NLB)를 사용하는 것은 HTTP/HTTPS 트래픽에 적합하지 않습니다. NLB는 Layer 4에서 작동하며 ALB가 제공하는 고급 라우팅 기능을 제공하지 않습니다. 또한, NLB는 일반적으로 더 비쌉니다.",
            "각 가용 영역에 대해 개별 로드 밸런서를 배포하는 것은 비효율적이고 비용이 많이 듭니다. 이 접근 방식은 여러 로드 밸런서를 유지 관리해야 하므로 운영 오버헤드와 비용이 증가하며, 여러 영역에서 트래픽을 효율적으로 관리할 수 있는 단일 ALB를 활용하는 것보다 비효율적입니다."
        ]
    },
    {
        "Question Number": "6",
        "Situation": "마케팅 분석 회사가 대규모 데이터 웨어하우스를 AWS로 마이그레이션하려고 합니다. 데이터는 트랜잭션 작업보다는 복잡한 분석 쿼리를 위해 구조화되어 있으며, 회사는 기존 SQL 기반 BI 도구와 쉽게 통합할 수 있는 솔루션이 필요합니다. 또한, 회사는 Amazon S3에 저장된 역사적 데이터를 데이터 웨어하우스에 로드하지 않고 직접 쿼리하고자 합니다.",
        "Question": "솔루션 아키텍트가 추천해야 할 AWS 서비스 및 기능 조합은 무엇입니까?",
        "Options": {
            "1": "Amazon Redshift with Redshift Spectrum",
            "2": "Amazon RDS with Read Replicas",
            "3": "Amazon DynamoDB with Global Tables",
            "4": "Amazon S3 with Athena for ad-hoc queries"
        },
        "Correct Answer": "Amazon Redshift with Redshift Spectrum",
        "Explanation": "Amazon Redshift는 복잡한 분석 쿼리를 위해 설계된 완전 관리형 데이터 웨어하우스 서비스로, 마케팅 분석 회사의 요구에 적합합니다. Redshift Spectrum은 사용자가 데이터를 Redshift에 로드할 필요 없이 Amazon S3에 저장된 데이터에 대해 쿼리를 실행할 수 있게 해주며, 이는 역사적 데이터를 쿼리하는 데 이상적입니다. 이 조합은 Redshift가 쿼리에 표준 SQL을 사용하므로 기존 SQL 기반 BI 도구와의 원활한 통합을 가능하게 합니다.",
        "Other Options": [
            "Amazon RDS with Read Replicas는 주로 트랜잭션 작업 및 관계형 데이터베이스 관리를 위해 설계되었으며, 이는 복잡한 분석 쿼리 및 S3에서의 역사적 데이터 직접 쿼리라는 회사의 요구와 일치하지 않습니다.",
            "Amazon DynamoDB with Global Tables는 고속 트랜잭션 작업에 최적화된 NoSQL 데이터베이스 서비스로, 복잡한 분석 쿼리에는 적합하지 않습니다. Redshift만큼 SQL 기반 BI 도구를 효과적으로 지원하지 않습니다.",
            "Amazon S3 with Athena for ad-hoc queries는 S3에서 데이터를 직접 쿼리하는 데 유효한 옵션이지만, 복잡한 분석 쿼리에 대해 Amazon Redshift with Redshift Spectrum만큼의 성능과 최적화를 제공하지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "7",
        "Situation": "생명공학 회사가 상당한 컴퓨팅 자원을 간헐적으로 요구하는 대규모 유전체 시퀀싱 분석을 수행하고 있습니다. 회사는 필요할 때만 컴퓨팅 자원을 활용하고 작업 부하 요구에 따라 자동으로 확장할 수 있도록 비용을 최적화하고자 합니다.",
        "Question": "이 시나리오에 대해 솔루션 아키텍트가 추천해야 할 AWS 컴퓨팅 서비스는 무엇입니까?",
        "Options": {
            "1": "Amazon EC2 Auto Scaling",
            "2": "AWS Lambda",
            "3": "AWS Batch",
            "4": "Amazon ECS on EC2"
        },
        "Correct Answer": "AWS Batch",
        "Explanation": "AWS Batch는 배치 컴퓨팅 작업을 효율적으로 실행하기 위해 특별히 설계되었습니다. 제출된 배치 작업의 양과 특정 자원 요구 사항에 따라 최적의 수량과 유형의 컴퓨팅 자원(예: CPU 또는 메모리 최적화 인스턴스)을 자동으로 프로비저닝합니다. 이는 생명공학 회사의 요구에 이상적이며, 간헐적으로 상당한 컴퓨팅 자원을 요구하는 대규모 유전체 시퀀싱 분석을 처리할 수 있으며, 필요할 때만 자원을 활용하고 작업 부하 요구에 따라 자동으로 확장하여 비용을 최적화합니다.",
        "Other Options": [
            "Amazon EC2 Auto Scaling은 EC2 인스턴스를 관리하고 수요에 따라 확장하는 데 유용하지만, 배치 처리 작업에 맞게 특별히 조정되지 않았습니다. AWS Batch에 비해 수동 설정 및 관리가 더 많이 필요합니다.",
            "AWS Lambda는 이벤트에 응답하여 코드를 실행하고 필요한 컴퓨팅 자원을 자동으로 관리하는 서버리스 컴퓨팅 서비스입니다. 그러나 유전체 시퀀싱 분석과 같은 장기 실행 배치 작업에는 적합하지 않으며, 호출당 최대 실행 시간 제한이 15분입니다.",
            "Amazon ECS on EC2는 Docker 컨테이너를 실행하고 관리할 수 있는 컨테이너 오케스트레이션 서비스입니다. 수요에 따라 확장할 수 있지만, 더 많은 관리가 필요하며 AWS Batch와 같은 배치 처리 작업에 최적화되어 있지 않아 회사의 간헐적인 컴퓨팅 자원 요구에 덜 적합합니다."
        ]
    },
    {
        "Question Number": "8",
        "Situation": "온라인 교육 플랫폼은 피크 시간 동안 강의 콘텐츠에 대한 높은 읽기 트래픽을 경험합니다. 응답 시간을 개선하고 데이터베이스 부하를 줄이기 위해 회사는 캐싱 레이어를 구현하고자 합니다.",
        "Question": "최고의 성능 개선을 달성하기 위해 솔루션 아키텍트가 추천해야 할 캐싱 솔루션은 무엇입니까?",
        "Options": {
            "1": "더 빠른 콘텐츠 전송을 위해 Amazon S3 with Transfer Acceleration을 구현합니다.",
            "2": "자주 접근되는 강의 콘텐츠를 캐시하기 위해 Amazon ElastiCache를 Redis로 배포합니다.",
            "3": "엣지 위치에서 데이터베이스 쿼리를 캐시하기 위해 Amazon CloudFront를 사용합니다.",
            "4": "각 애플리케이션 서버에 인메모리 캐시를 설정하여 강의 콘텐츠를 저장합니다."
        },
        "Correct Answer": "자주 접근되는 강의 콘텐츠를 캐시하기 위해 Amazon ElastiCache를 Redis로 배포합니다.",
        "Explanation": "Amazon ElastiCache를 Redis로 사용하면 자주 접근되는 데이터에 대한 고속 액세스를 제공하는 인메모리 데이터 저장소입니다. 강의 콘텐츠를 메모리에 캐시함으로써 읽기 요청에 대한 응답 시간을 크게 줄이고 피크 트래픽 시간 동안 데이터베이스의 부하를 완화합니다. Redis는 낮은 대기 시간과 높은 처리량이 요구되는 시나리오에 특히 적합하여 온라인 교육 플랫폼의 성능 개선에 이상적인 선택입니다.",
        "Other Options": [
            "Amazon S3 with Transfer Acceleration을 구현하는 것은 파일 업로드 및 다운로드 속도를 개선하는 데 주로 초점을 맞추고 있으며, 동적 콘텐츠나 데이터베이스 쿼리를 캐싱하는 데는 적합하지 않습니다. 정적 자산에 대한 콘텐츠 전송을 향상시킬 수 있지만, 자주 접근되는 강의 콘텐츠를 효과적으로 캐싱하는 필요를 해결하지 않습니다.",
            "Amazon CloudFront를 사용하여 엣지 위치에서 데이터베이스 쿼리를 캐시하는 것은 CloudFront의 일반적인 사용 사례가 아니며, 이는 데이터베이스 쿼리보다 정적 및 동적 웹 콘텐츠를 캐싱하도록 설계되었습니다. 정적 자산에 대한 콘텐츠 전송을 개선할 수 있지만, Redis와 같은 인메모리 캐시가 제공하는 자주 접근되는 동적 콘텐츠에 대한 성능 개선 수준을 제공하지 않습니다.",
            "각 애플리케이션 서버에 인메모리 캐시를 설정하면 여러 서버 간 캐시 동기화 관리의 불일치와 복잡성이 증가할 수 있습니다. 이 접근 방식은 애플리케이션 서버 수가 증가함에 따라 잘 확장되지 않을 수 있으며, Amazon ElastiCache와 같은 중앙 집중식 캐싱 솔루션에 비해 덜 효율적입니다."
        ]
    },
    {
        "Question Number": "9",
        "Situation": "회사가 여러 단계를 포함하는 애플리케이션을 구축하고 있으며, 여기에는 Lambda 함수 호출, 특정 시간 대기, 다양한 작업 간 데이터 전달이 포함됩니다. 그들은 작업이 올바른 순서로 실행되고 확장 가능하며 신뢰할 수 있고 관리 가능하도록 보장하고자 합니다. 회사는 이러한 작업의 워크플로를 조정하기 위해 다양한 AWS 서비스를 고려하고 있습니다.",
        "Question": "회사가 이 목적을 위해 사용해야 할 AWS 서비스는 무엇입니까?",
        "Options": {
            "1": "AWS Step Functions를 사용하여 작업의 흐름과 전환을 관리하는 상태 기계를 정의하고 실행합니다.",
            "2": "AWS Lambda를 사용하여 다른 Lambda 함수를 순차적으로 호출하고 환경 변수를 통해 데이터를 전달하여 작업을 조정합니다.",
            "3": "Amazon SQS를 사용하여 작업을 큐에 넣고 EC2 인스턴스를 사용하여 순차적으로 처리합니다.",
            "4": "Amazon EC2 Auto Scaling을 사용하여 작업 실행을 관리하고 완료해야 할 작업 수에 따라 자동으로 확장합니다."
        },
        "Correct Answer": "AWS Step Functions를 사용하여 작업의 흐름과 전환을 관리하는 상태 기계를 정의하고 실행합니다.",
        "Explanation": "AWS Step Functions는 AWS Lambda 함수 호출, 특정 시간 대기 및 작업 간 데이터 전달을 포함하는 복잡한 워크플로를 조정하기 위해 특별히 설계되었습니다. 작업의 순서와 전환을 명확하게 설명하는 상태 기계를 정의할 수 있어 작업이 올바른 순서로 실행되도록 보장합니다. Step Functions는 또한 내장된 오류 처리, 재시도 및 상태 관리 기능을 제공하여 워크플로를 조정하는 데 신뢰할 수 있고 관리 가능한 솔루션이 됩니다.",
        "Other Options": [
            "AWS Lambda를 사용하여 다른 Lambda 함수를 순차적으로 호출하여 작업을 조정하는 것은 이상적이지 않습니다. Lambda는 복잡한 워크플로를 관리하기보다는 단일 함수를 실행하도록 설계되었기 때문입니다. 함수를 순차적으로 호출할 수 있지만, Step Functions가 제공하는 내장 상태 관리 및 오류 처리 기능이 부족합니다.",
            "Amazon SQS를 사용하여 작업을 큐에 넣고 EC2 인스턴스를 사용하여 순차적으로 처리하는 것은 워크플로를 조정하는 데 최선의 선택이 아닙니다. SQS는 구성 요소를 분리하는 데 도움이 되는 메시징 서비스이지만, 작업의 실행 순서나 상태를 본질적으로 관리하지 않으며, 이는 설명된 시나리오에 필수적입니다.",
            "Amazon EC2 Auto Scaling을 사용하여 작업 실행을 관리하고 완료해야 할 작업 수에 따라 자동으로 확장하는 것은 워크플로를 조정하는 데 적합하지 않습니다. EC2 Auto Scaling은 수요에 따라 EC2 인스턴스를 확장하는 데 초점을 맞추지만, 작업의 순서와 종속성을 관리하는 데 필수적인 워크플로 조정 기능을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "10",
        "Situation": "회사는 AWS 환경이 최소 권한 원칙을 따르도록 하여 보안 위험을 최소화하고자 합니다. 회사는 AWS에서 여러 애플리케이션을 운영하고 있으며, 각 애플리케이션은 특정 리소스에 접근하기 위한 특정 권한이 필요합니다.",
        "Question": "이 보안 모범 사례를 구현하기 위한 가장 효과적인 접근 방식은 무엇입니까?",
        "Options": {
            "1": "각 애플리케이션에 AdministratorAccess 정책을 할당하여 모든 리소스에 대한 전체 권한을 부여합니다.",
            "2": "각 애플리케이션이 필요로 하는 권한만 부여하는 사용자 지정 IAM 정책을 생성하고 이를 애플리케이션의 해당 IAM 역할에 연결합니다.",
            "3": "모든 애플리케이션에 대해 루트 사용자 계정을 사용하고 각 애플리케이션의 권한을 수동으로 추적합니다.",
            "4": "계정의 모든 IAM 사용자에게 전체 권한을 부여하고 애플리케이션의 내부 제어에 의존하여 접근을 제한합니다."
        },
        "Correct Answer": "각 애플리케이션이 필요로 하는 권한만 부여하는 사용자 지정 IAM 정책을 생성하고 이를 애플리케이션의 해당 IAM 역할에 연결합니다.",
        "Explanation": "각 애플리케이션이 필요로 하는 권한만 부여하는 사용자 지정 IAM 정책을 생성하는 것은 최소 권한 원칙을 구현하는 가장 효과적인 방법입니다. 이 접근 방식은 각 애플리케이션이 운영에 필요한 리소스에만 접근할 수 있도록 하여, 무단 접근이나 다른 리소스에 대한 우발적인 변경의 위험을 줄입니다. 이러한 정책을 특정 IAM 역할에 연결함으로써 회사는 권한을 중앙에서 관리하고 다른 애플리케이션에 영향을 주지 않고 필요에 따라 조정할 수 있습니다.",
        "Other Options": [
            "각 애플리케이션에 AdministratorAccess 정책을 할당하는 것은 모든 리소스에 대한 전체 권한을 부여하므로 안전한 관행이 아니며, 이는 최소 권한 원칙에 반하고 보안 위험을 크게 증가시킵니다.",
            "모든 애플리케이션에 대해 루트 사용자 계정을 사용하는 것은 매우 권장되지 않으며, 루트 계정은 모든 AWS 리소스에 대한 무제한 접근 권한을 가지고 있습니다. 이 관행은 루트 계정이 침해될 경우 AWS 환경에 대한 전체 제어를 초래하는 심각한 보안 위험을 초래합니다.",
            "계정의 모든 IAM 사용자에게 전체 권한을 부여하고 애플리케이션의 내부 제어에 의존하는 것은 안전한 접근 방식이 아닙니다. 이는 AWS 환경을 잠재적인 오용에 노출시키며, 모든 IAM 사용자가 제한 없이 모든 리소스에 접근할 수 있어 최소 권한 원칙을 저해합니다."
        ]
    },
    {
        "Question Number": "11",
        "Situation": "온라인 교육 플랫폼은 수요에 따라 자동으로 확장할 수 있는 데이터베이스 솔루션이 필요합니다. 그들의 트래픽은 하루의 특정 시간에 피크를 이루며 크게 변동합니다. 그들은 수동 개입 없이 용량을 자동으로 조정하는 비용 효율적인 솔루션을 원합니다.",
        "Question": "이러한 요구 사항을 가장 잘 충족하는 데이터베이스 용량 계획 전략은 무엇입니까?",
        "Options": {
            "1": "피크 시간 동안 수동 확장이 포함된 프로비저닝 용량",
            "2": "3년 약정의 예약 인스턴스",
            "3": "자동 확장이 활성화된 온디맨드 용량",
            "4": "고트래픽 기간 동안 읽기 복제본 사용"
        },
        "Correct Answer": "자동 확장이 활성화된 온디맨드 용량",
        "Explanation": "자동 확장이 활성화된 온디맨드 용량은 온라인 교육 플랫폼에 가장 적합한 솔루션입니다. 이는 데이터베이스가 수동 개입 없이 실시간 수요에 따라 용량을 자동으로 조정할 수 있게 해줍니다. 이는 변동하는 트래픽 패턴을 처리하는 데 특히 중요하며, 플랫폼이 피크 부하를 효율적으로 관리하면서 비피크 시간 동안 비용 효율성을 유지할 수 있도록 보장합니다. 자동 확장 기능은 필요에 따라 자원을 동적으로 할당하여 변동하는 트래픽 수준에 적응할 수 있는 솔루션 요구 사항과 완벽하게 일치합니다.",
        "Other Options": [
            "피크 시간 동안 수동 확장이 포함된 프로비저닝 용량은 수요에 따라 자동 확장을 요구하는 요구 사항을 충족하지 않으며, 이는 예상치 못한 트래픽 급증 시 성능 문제를 초래할 수 있습니다.",
            "3년 약정의 예약 인스턴스는 플랫폼을 고정 용량 및 비용에 묶어두며, 이는 매우 변동성이 큰 트래픽 상황에 적합하지 않습니다. 이 전략은 수요에 따라 자동으로 확장할 수 있는 유연성을 제공하지 않으며, 저트래픽 기간 동안 과잉 프로비저닝 및 불필요한 비용을 초래할 수 있습니다.",
            "고트래픽 기간 동안 읽기 복제본을 사용하는 것은 읽기 요청을 분산시키는 데 도움이 될 수 있지만, 데이터베이스의 전체 용량 계획을 해결하지는 않습니다. 기본 데이터베이스 자체가 증가된 쓰기 작업이나 전체 부하를 처리할 수 없을 경우 이 전략은 충분하지 않을 수 있으며, 수동 구성 및 관리가 필요합니다."
        ]
    },
    {
        "Question Number": "12",
        "Situation": "한 회사가 온프레미스 Oracle 데이터베이스를 AWS로 마이그레이션하고 있습니다. 그들은 관리형 데이터베이스 서비스로 이동하면서 애플리케이션에 대한 변경을 최소화하고자 합니다.",
        "Question": "이 이질적인 마이그레이션을 위해 솔루션 아키텍트가 추천해야 할 AWS 데이터베이스 서비스는 무엇입니까?",
        "Options": {
            "1": "PostgreSQL 호환성이 있는 Amazon Aurora",
            "2": "Amazon RDS for Oracle",
            "3": "Amazon DynamoDB",
            "4": "Amazon Redshift"
        },
        "Correct Answer": "Amazon RDS for Oracle",
        "Explanation": "Amazon RDS for Oracle은 온프레미스 Oracle 데이터베이스를 AWS로 마이그레이션하면서 애플리케이션에 대한 변경을 최소화하는 데 가장 적합한 선택입니다. RDS for Oracle은 Oracle 데이터베이스 기능을 지원하는 관리형 데이터베이스 서비스를 제공하여 애플리케이션의 코드나 데이터베이스 쿼리에 대한 큰 변경 없이 원활한 전환을 가능하게 합니다. 이 서비스는 백업, 패치 및 확장과 같은 일상적인 데이터베이스 작업도 처리하여 운영 오버헤드를 줄이는 데 도움을 줍니다.",
        "Other Options": [
            "PostgreSQL 호환성이 있는 Amazon Aurora는 PostgreSQL과 호환되는 관계형 데이터베이스 서비스입니다. 그러나 PostgreSQL 방언 및 기능에 적응하기 위해 애플리케이션에 변경이 필요하므로 Oracle에서 원활한 마이그레이션에 덜 적합합니다.",
            "Amazon DynamoDB는 높은 성능과 확장성을 위해 설계된 NoSQL 데이터베이스 서비스입니다. Oracle 관계형 데이터베이스에서 NoSQL 데이터베이스로 마이그레이션하려면 애플리케이션 아키텍처 및 데이터 모델에 상당한 변경이 필요하므로 마이그레이션 중 변경을 최소화하려는 목표와 모순됩니다.",
            "Amazon Redshift는 분석 및 보고를 위해 최적화된 데이터 웨어하우징 서비스입니다. 이는 일반적으로 Oracle 데이터베이스가 처리하는 트랜잭션 작업을 위해 설계되지 않았습니다. Redshift로 마이그레이션하려면 애플리케이션 및 데이터 접근 패턴을 완전히 재설계해야 하므로 이 시나리오에 적합하지 않습니다."
        ]
    },
    {
        "Question Number": "13",
        "Situation": "한 회사가 AWS에 배포된 마이크로서비스 기반 애플리케이션의 성능 문제를 해결하고 있습니다. 그들은 애플리케이션 아키텍처에 대한 깊은 가시성을 확보하여 병목 현상을 식별하고 응답 시간을 개선하고자 합니다.",
        "Question": "회사가 마이크로서비스를 통해 요청을 추적하고 분석하여 애플리케이션 성능에 대한 자세한 통찰력을 얻기 위해 어떤 AWS 서비스를 사용해야 합니까?",
        "Options": {
            "1": "AWS X-Ray를 사용하여 애플리케이션을 통한 요청 흐름을 추적하고 분석하여 지연 시간과 병목 현상에 대한 통찰력을 실시간으로 제공합니다.",
            "2": "Amazon CloudWatch Logs를 사용하여 애플리케이션 로그를 모니터링하고 저장하지만 EC2 인스턴스를 사용하여 성능 데이터를 수동으로 분석합니다.",
            "3": "AWS CloudTrail을 사용하여 API 요청을 추적하지만 특정 성능 통찰력을 위해 추가 사용자 정의 로깅을 구성합니다.",
            "4": "Amazon RDS Performance Insights를 사용하여 데이터베이스 성능을 분석하고 애플리케이션의 느린 쿼리를 식별합니다."
        },
        "Correct Answer": "AWS X-Ray를 사용하여 애플리케이션을 통한 요청 흐름을 추적하고 분석하여 지연 시간과 병목 현상에 대한 통찰력을 실시간으로 제공합니다.",
        "Explanation": "AWS X-Ray는 마이크로서비스 아키텍처에서 요청을 추적하기 위해 특별히 설계되었습니다. 이는 개발자가 다양한 서비스 간의 요청 흐름을 시각화하고 지연 시간을 식별하며 병목 현상을 파악할 수 있도록 하여 애플리케이션 성능에 대한 자세한 통찰력을 제공합니다. 이러한 깊은 가시성은 성능 문제를 해결하고 마이크로서비스 환경에서 응답 시간을 최적화하는 데 매우 중요합니다.",
        "Other Options": [
            "Amazon CloudWatch Logs는 로그를 모니터링하고 저장하는 데 유용하지만, 요청 흐름에 대한 추적 및 분석 수준이 AWS X-Ray와 동일하지 않습니다. EC2 인스턴스를 사용한 수동 분석은 성능 병목 현상을 식별하는 데 시간 소모적이고 덜 효과적일 수 있습니다.",
            "AWS CloudTrail은 주로 API 요청 및 AWS 리소스 변경을 추적하는 데 중점을 두며, 애플리케이션 성능 분석에는 적합하지 않습니다. API 사용에 대한 통찰력을 제공할 수 있지만, 마이크로서비스의 성능 문제를 식별하는 데 필요한 자세한 요청 추적을 제공하지 않습니다.",
            "Amazon RDS Performance Insights는 데이터베이스 성능 분석 및 느린 쿼리 식별에 적합하지만, 전체 애플리케이션 성능이나 마이크로서비스를 통한 요청 흐름에 대한 통찰력을 제공하지 않습니다. 이는 데이터베이스 수준의 분석에 한정되며, 더 넓은 애플리케이션 아키텍처를 다루지 않습니다."
        ]
    },
    {
        "Question Number": "14",
        "Situation": "한 회사가 고객 주문 및 재고 업데이트와 같은 실시간 이벤트에 응답해야 하는 이벤트 기반 애플리케이션을 개발하고 있습니다. 시스템은 구성 요소가 느슨하게 결합되어 확장성과 신뢰성을 향상시켜야 합니다. 회사는 또한 각 서비스가 독립적으로 이벤트를 처리할 수 있도록 비동기적으로 이벤트를 처리할 수 있는 기능을 원합니다.",
        "Question": "회사가 게시/구독 메시징 패턴을 구현하기 위해 어떤 AWS 서비스를 사용해야 합니까? (두 가지 선택)",
        "Options": {
            "1": "Amazon SNS (Simple Notification Service)를 사용하여 이벤트를 게시하고, 다양한 애플리케이션 구성 요소(AWS Lambda 함수 등)를 SNS 주제에 구독하여 처리합니다.",
            "2": "게시/구독 모델을 구현하지 않고 구성 요소 간의 직접 메시지 큐를 위해 Amazon SQS (Simple Queue Service)를 사용합니다.",
            "3": "구성 요소 간의 전용 네트워크 링크를 통해 이벤트를 직접 게시하기 위해 AWS Direct Connect를 사용하여 전용 연결을 설정합니다.",
            "4": "Amazon EventBridge를 사용하여 이벤트 버스를 생성하고 여러 대상을 위한 이벤트 라우팅 규칙을 정의하여 게시/구독 패턴을 구현합니다.",
            "5": "Amazon S3를 사용하여 이벤트를 저장하고 구성 요소가 S3 버킷을 폴링하여 새로운 이벤트를 처리하도록 합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon SNS (Simple Notification Service)를 사용하여 이벤트를 게시하고, 다양한 애플리케이션 구성 요소(AWS Lambda 함수 등)를 SNS 주제에 구독하여 처리합니다.",
            "Amazon EventBridge를 사용하여 이벤트 버스를 생성하고 여러 대상을 위한 이벤트 라우팅 규칙을 정의하여 게시/구독 패턴을 구현합니다."
        ],
        "Explanation": "Amazon SNS (Simple Notification Service)는 메시지를 구독하는 엔드포인트나 클라이언트에 전달하거나 전송하는 것을 조정하고 관리하는 웹 서비스입니다. 이는 회사가 필요로 하는 게시/구독 메시징 패턴을 지원하도록 설계되었습니다. AWS Lambda 함수는 SNS 주제에 구독할 수 있으며 비동기적으로 이벤트를 처리할 수 있습니다. Amazon EventBridge는 서버리스 이벤트 버스 서비스로, 자체 애플리케이션, 통합된 SaaS 애플리케이션 및 AWS 서비스를 사용하여 애플리케이션을 쉽게 연결할 수 있게 해줍니다. 이는 이벤트 버스와 규칙을 생성하여 여러 대상을 위한 이벤트 라우팅을 가능하게 하여 게시/구독 메시징 패러다임을 구현합니다.",
        "Other Options": [
            "Amazon SQS (Simple Queue Service)는 마이크로서비스, 분산 시스템 및 서버리스 애플리케이션을 분리하고 확장할 수 있게 해주는 완전 관리형 메시지 큐 서비스입니다. 그러나 이는 주어진 시나리오에서 요구되는 게시/구독 모델을 본질적으로 지원하지 않습니다.",
            "AWS Direct Connect는 귀하의 시설에서 AWS로 전용 네트워크 연결을 쉽게 설정할 수 있게 해주는 클라우드 서비스 솔루션입니다. 이는 게시/구독 메시징 패턴을 지원하지 않으며, 비동기 이벤트 처리를 본질적으로 제공하지 않습니다.",
            "Amazon S3 (Simple Storage Service)는 업계 최고의 확장성, 데이터 가용성, 보안 및 성능을 제공하는 객체 저장 서비스입니다. 그러나 이는 실시간 이벤트 기반 애플리케이션이나 게시/구독 메시징 패턴을 구현하기 위해 설계되지 않았습니다. S3를 사용하면 구성 요소가 새로운 이벤트를 지속적으로 폴링해야 하므로 비효율적이며 실시간이 아닙니다."
        ]
    },
    {
        "Question Number": "15",
        "Situation": "한 회사가 Amazon Elastic Container Service (ECS)를 사용하여 프로덕션 환경에서 마이크로서비스 기반 애플리케이션을 배포하고 있습니다. 이 애플리케이션은 민감한 고객 데이터를 처리하며, 회사는 애플리케이션의 모든 계층에서 보안이 적절히 구현되도록 하고자 합니다.",
        "Question": "ECS 컨테이너를 보호하고 데이터를 보호하기 위해 구현해야 할 관행은 무엇입니까?",
        "Options": {
            "1": "서버리스 컨테이너 관리를 위해 Amazon ECS와 AWS Fargate를 사용하고 모든 민감한 데이터를 Amazon S3에 암호화하여 저장합니다.",
            "2": "ECS 작업에 대한 IAM 역할을 사용하여 AWS 리소스에 대한 최소한의 필요한 권한을 할당하고, 컨테이너 인스턴스의 보안 그룹을 구성하여 인바운드 트래픽을 제한합니다.",
            "3": "민감한 데이터를 보호하기 위해 Amazon ECS 작업 수준 암호화에만 의존하며, 이는 전체 애플리케이션에 대한 종단 간 암호화를 제공합니다.",
            "4": "ECS 인스턴스에 공용 IP 주소를 활성화하여 인터넷에서 컨테이너에 대한 접근을 보장하고, 유연한 트래픽 흐름을 위해 보안 그룹을 구성합니다."
        },
        "Correct Answer": "ECS 작업에 대한 IAM 역할을 사용하여 AWS 리소스에 대한 최소한의 필요한 권한을 할당하고, 컨테이너 인스턴스의 보안 그룹을 구성하여 인바운드 트래픽을 제한합니다.",
        "Explanation": "ECS 작업에 대한 IAM 역할을 사용하면 컨테이너가 AWS 리소스에 접근하는 데 필요한 최소 권한을 할당할 수 있으며, 이는 기본적인 보안 원칙입니다. 이는 민감한 데이터에 대한 무단 접근 위험을 최소화합니다. 또한, 컨테이너 인스턴스의 보안 그룹을 구성하면 인바운드 및 아웃바운드 트래픽을 제어하여 신뢰할 수 있는 소스만 컨테이너와 통신할 수 있도록 하여 보안을 더욱 강화합니다.",
        "Other Options": [
            "Amazon ECS와 AWS Fargate를 사용하여 서버리스 컨테이너 관리를 하고 민감한 데이터를 Amazon S3에 암호화하여 저장하는 것은 좋은 관행이지만, ECS 컨테이너 자체에 대한 적절한 접근 제어 및 네트워크 보안 필요성을 해결하지 않습니다. 암호화는 중요하지만, IAM 역할 및 보안 그룹을 포함하는 더 넓은 보안 전략의 일부여야 합니다.",
            "Amazon ECS 작업 수준 암호화에만 의존하는 것은 민감한 데이터를 보호하는 데 충분하지 않습니다. 작업 수준 암호화는 도움이 될 수 있지만, 전체 애플리케이션에 대한 포괄적인 보안을 제공하지 않으며, 접근 제어 및 네트워크 보안과 같은 다른 중요한 측면을 다루지 않습니다.",
            "ECS 인스턴스에 공용 IP 주소를 활성화하면 컨테이너가 인터넷에 노출되어 상당한 보안 위험이 발생합니다. 이는 무단 접근 및 공격으로 이어질 수 있습니다. 대신, 보안 모범 사례는 보안 그룹을 통해 접근을 제한하고 가능한 경우 개인 IP를 사용하는 것을 권장합니다."
        ]
    },
    {
        "Question Number": "16",
        "Situation": "금융 거래 플랫폼은 초당 수천 건의 거래를 처리하며, 거의 무제한 처리량으로 방대한 양의 메시지를 처리할 수 있는 고도로 확장 가능한 큐 서비스가 필요합니다. 거래 시스템은 메시지 순서를 요구하지 않으며, 각 메시지가 최소한 한 번 처리되는 것을 보장하는 한, 가끔 중복 메시지를 허용할 수 있습니다.",
        "Question": "어떤 Amazon SQS 구성이 이러한 요구 사항을 가장 잘 충족합니까?",
        "Options": {
            "1": "메시지 순서를 유지하고 정확히 한 번 처리되도록 보장하는 Amazon SQS FIFO Queue를 구성합니다.",
            "2": "높은 처리량과 가끔 중복을 허용하는 최소 한 번 배달을 제공하는 Amazon SQS Standard Queue를 사용합니다.",
            "3": "높은 처리량과 낮은 지연 시간을 보장하기 위해 FIFO 메시지 배달이 있는 Amazon SNS Topic을 설정합니다.",
            "4": "실시간 거래 처리를 위해 순서가 있는 메시지 처리와 최소 한 번 배달을 제공하는 Amazon Kinesis Data Streams를 배포합니다."
        },
        "Correct Answer": "높은 처리량과 가끔 중복을 허용하는 최소 한 번 배달을 제공하는 Amazon SQS Standard Queue를 사용합니다.",
        "Explanation": "Amazon SQS Standard Queue는 높은 처리량을 위해 설계되었으며, 거의 무제한 확장성으로 방대한 양의 메시지를 처리할 수 있습니다. 최소 한 번 배달을 제공하므로 메시지가 여러 번 배달될 수 있지만, 모든 메시지가 최소한 한 번 처리된다는 것을 보장합니다. 이는 메시지 순서가 필요 없고 가끔 중복을 허용할 수 있는 거래 시스템의 요구 사항과 완벽하게 일치합니다.",
        "Other Options": [
            "Amazon SQS FIFO Queue를 구성하는 것은 메시지 순서가 중요한 시나리오를 위해 설계되었기 때문에 적합하지 않습니다. FIFO 큐는 정확히 한 번 처리되도록 보장하지만, Standard Queues에 비해 낮은 처리량을 초래합니다. 이는 고용량 거래 플랫폼에는 이상적이지 않습니다.",
            "FIFO 메시지 배달이 있는 Amazon SNS Topic을 설정하는 것은 적절하지 않습니다. SNS는 주로 pub/sub 메시징에 사용되며, SQS와 같은 방식으로 메시지를 큐잉하는 데 설계되지 않았습니다. 또한 FIFO 주제는 Standard Queues에 비해 처리량이 제한적입니다.",
            "Amazon Kinesis Data Streams를 배포하면 순서가 있는 메시지 처리와 최소 한 번 배달을 제공하지만, 이는 더 복잡하며 일반적으로 단순한 큐잉 요구 사항보다는 실시간 분석에 사용됩니다. 거래 시스템의 요구 사항은 Standard Queue로 충분할 때 Kinesis의 추가 복잡성을 필요로 하지 않습니다."
        ]
    },
    {
        "Question Number": "17",
        "Situation": "조직은 Amazon S3를 사용하여 기밀 데이터를 저장하고 있으며, AWS Key Management Service (KMS)가 키를 관리할 수 있는 서버 측 암호화 방법이 필요합니다. 또한, 키 회전 제어 및 역할 분리를 원하는 기능이 있습니다.",
        "Question": "어떤 S3 암호화 옵션이 이러한 요구를 가장 잘 충족합니까?",
        "Options": {
            "1": "클라이언트 측 암호화",
            "2": "S3 관리 키(SSE-S3)를 사용하는 서버 측 암호화",
            "3": "고객 제공 키(SSE-C)를 사용하는 서버 측 암호화",
            "4": "AWS KMS 관리 키(SSE-KMS)를 사용하는 서버 측 암호화"
        },
        "Correct Answer": "AWS KMS 관리 키(SSE-KMS)를 사용하는 서버 측 암호화",
        "Explanation": "SSE-KMS는 AWS Key Management Service (KMS)가 암호화 키를 관리할 수 있게 해주기 때문에 이 시나리오에 가장 적합한 옵션입니다. 이 방법은 조직이 일정에 따라 키를 자동으로 회전할 수 있는 키 회전 제어와 키 사용 및 관리에 대한 권한을 서로 다른 역할에 할당할 수 있는 역할 분리와 같은 향상된 보안 기능을 제공합니다. 이는 기밀 데이터를 안전하게 관리하기 위한 조직의 요구 사항과 완벽하게 일치합니다.",
        "Other Options": [
            "클라이언트 측 암호화는 클라이언트가 암호화 키를 관리해야 하므로 AWS KMS를 활용하지 않으며, 조직이 필요로 하는 키 회전 및 역할 분리 기능이 부족합니다.",
            "S3 관리 키(SSE-S3)를 사용하는 서버 측 암호화는 Amazon S3가 암호화 키를 관리하지만, SSE-KMS가 제공하는 키 관리에 대한 제어 수준, 즉 키 회전 및 역할 분리에 대한 제어를 제공하지 않습니다.",
            "고객 제공 키(SSE-C)를 사용하는 서버 측 암호화는 고객이 자신의 암호화 키를 관리할 수 있게 해주므로, 조직이 키 관리 및 회전을 직접 처리해야 하며, AWS KMS를 활용하지 않고 원하는 기능이 부족합니다."
        ]
    },
    {
        "Question Number": "18",
        "Situation": "스타트업이 사용자 업로드를 처리하고, 이미지 변환을 수행하며, 결과를 저장하는 모바일 백엔드를 개발하고 있습니다. 팀은 운영 오버헤드를 최소화하고 백엔드가 사용자 수요에 따라 원활하게 확장될 수 있도록 하기를 원합니다.",
        "Question": "이미지 처리 작업을 처리하기 위해 솔루션 아키텍트가 어떤 서버리스 AWS 서비스를 사용해야 합니까? (두 가지 선택)",
        "Options": {
            "1": "AWS Fargate",
            "2": "Amazon EC2",
            "3": "AWS Lambda",
            "4": "Amazon ECS",
            "5": "Amazon S3 이벤트 알림"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Lambda",
            "Amazon S3 이벤트 알림"
        ],
        "Explanation": "AWS Lambda는 서버를 프로비저닝하거나 관리하지 않고 코드를 실행할 수 있게 해주는 서버리스 컴퓨팅 서비스입니다. 이는 높은 가용성으로 애플리케이션을 자동으로 확장하며, 소비한 컴퓨팅 시간에 대해서만 비용을 지불합니다. 이는 확장 가능하고 비용 효율적인 방식으로 이미지 처리 작업을 처리하는 데 완벽한 선택입니다. Amazon S3 이벤트 알림은 AWS Lambda와 함께 사용되어 새로운 이미지가 S3 버킷에 업로드될 때마다 이미지 처리 작업을 트리거할 수 있습니다. 이는 시스템이 사용자 업로드에 즉시 반응할 수 있게 하여 운영 오버헤드를 더욱 줄입니다.",
        "Other Options": [
            "AWS Fargate는 컨테이너를 위한 서버리스 컴퓨팅 엔진입니다. 이미지 처리 작업을 실행하는 데 사용할 수 있지만, 이 특정 사용 사례에 대해 AWS Lambda만큼 간단하거나 비용 효율적이지 않습니다. 또한 S3 이벤트 알림으로 달성할 수 있는 사용자 업로드에 대한 즉각적인 응답을 제공하지 않습니다.",
            "Amazon EC2는 클라우드에서 조정 가능한 컴퓨팅 용량을 제공하는 웹 서비스입니다. 이는 서버리스가 아니므로 수동 확장 및 서버 관리가 필요하며, 팀의 운영 오버헤드를 최소화하려는 바람과 모순됩니다.",
            "Amazon ECS(Elastic Container Service)는 고도로 확장 가능하고 높은 성능의 컨테이너 오케스트레이션 서비스입니다. 이미지 처리 작업에 사용할 수 있지만, 서버리스가 아니며 AWS Lambda보다 더 많은 운영 오버헤드를 요구합니다. 또한 S3 이벤트 알림으로 달성할 수 있는 사용자 업로드에 대한 즉각적인 응답을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "19",
        "Situation": "회사는 AWS 환경에 대한 접근 제어를 설정하고 있으며, 각 팀원이 AWS 서비스에 적절한 수준의 접근 권한을 갖도록 하기를 원합니다. 회사에는 개발, 재무, 인사와 같은 여러 부서가 있으며, 각 부서는 서로 다른 수준의 권한이 필요합니다.",
        "Question": "이러한 부서의 사용자에게 권한을 할당하는 가장 효과적이고 관리 가능한 IAM 구조는 무엇입니까?",
        "Options": {
            "1": "각 팀원에 대해 개별 IAM 사용자를 생성하고 각 사용자에게 정책을 직접 연결합니다.",
            "2": "각 부서에 대한 IAM 그룹을 생성하고, 적절한 그룹에 사용자를 할당한 다음, 각 그룹에 부서별 정책을 연결합니다.",
            "3": "모든 사용자에게 전체 권한이 있는 단일 IAM 역할을 사용하고 필요에 따라 모든 사용자가 이 역할을 가정하도록 합니다.",
            "4": "각 부서에 대해 별도의 AWS 계정을 생성하고 계정 수준에서 접근을 관리합니다."
        },
        "Correct Answer": "각 부서에 대한 IAM 그룹을 생성하고, 적절한 그룹에 사용자를 할당한 다음, 각 그룹에 부서별 정책을 연결합니다.",
        "Explanation": "각 부서에 대한 IAM 그룹을 생성하는 것은 권한을 할당하는 가장 효과적이고 관리 가능한 방법입니다. 이는 권한의 중앙 집중식 관리를 가능하게 합니다. 개별 사용자에게 정책을 연결하는 대신 그룹에 정책을 연결함으로써, 팀원이 조직에 합류하거나 떠나거나 역할이 변경될 때 접근 수준을 쉽게 관리할 수 있습니다. 이 접근 방식은 권한 관리의 관리 오버헤드를 줄이고, 각 부서의 모든 사용자가 직무 기능에 맞는 일관된 접근 권한을 갖도록 보장합니다.",
        "Other Options": [
            "각 팀원에 대해 개별 IAM 사용자를 생성하고 정책을 직접 연결하는 것은 사용자 수가 증가함에 따라 복잡하고 관리하기 어려운 상황을 초래할 수 있습니다. 사용자 간에 일관된 권한을 유지하기 어려워지고, 접근 수준의 변경은 각 사용자에 대해 개별적으로 이루어져야 합니다.",
            "모든 사용자에게 전체 권한이 있는 단일 IAM 역할을 사용하는 것은 안전한 관행이 아닙니다. 이는 최소 권한 원칙을 위반하며, 모든 사용자에게 모든 리소스에 대한 접근을 허용하여 AWS 환경을 위협할 수 있는 우발적이거나 악의적인 행동의 위험을 증가시킵니다.",
            "각 부서에 대해 별도의 AWS 계정을 생성하는 것은 관리 복잡성을 초래하고 비용 및 관리 오버헤드를 증가시킬 수 있습니다. 또한 부서 간 자원 공유를 어렵게 하며, 더 복잡한 청구 및 접근 관리 전략이 필요합니다."
        ]
    },
    {
        "Question Number": "20",
        "Situation": "회사는 수요 변동에 따라 EC2 인스턴스를 관리하기 위해 Auto Scaling Group (ASG)을 설정하고 있습니다. 그들은 집합 CPU 사용률을 40%로 유지하기 위해 인스턴스 용량을 자동으로 조정하고자 합니다.",
        "Question": "어떤 유형의 스케일링 정책을 구현해야 하며, 그 이유는 무엇입니까?",
        "Options": {
            "1": "수동 스케일링, 이는 실시간 모니터링에 따라 원하는 용량을 직접 제어할 수 있게 해줍니다.",
            "2": "예정된 스케일링, 이는 예측된 수요 패턴에 따라 특정 시간에 용량을 조정합니다.",
            "3": "목표 추적을 통한 동적 스케일링, 이는 지정된 CPU 목표를 자동으로 유지하기 위해 용량을 조정합니다.",
            "4": "단순 스케일링, 이는 단일 CPU 임계 조건에 따라 용량을 증가시키거나 감소시킬 수 있습니다."
        },
        "Correct Answer": "목표 추적을 통한 동적 스케일링",
        "Explanation": "목표 추적을 통한 동적 스케일링은 이 시나리오에 가장 적합한 옵션입니다. 이는 Auto Scaling Group의 EC2 인스턴스 수를 자동으로 조정하여 지정된 CPU 사용률 목표(이 경우 40%)를 유지합니다. 이 유형의 스케일링 정책은 CPU 사용률을 지속적으로 모니터링하고 필요에 따라 조정하여, 애플리케이션이 수요 변동에 수동 개입 없이 대응할 수 있도록 보장합니다.",
        "Other Options": [
            "수동 스케일링은 원하는 용량을 조정하기 위해 인간의 개입이 필요하므로, 특히 동적 환경에서 특정 CPU 사용률 목표를 유지하는 데 효율적이지 않습니다.",
            "예정된 스케일링은 수요를 특정 시간에 예측할 수 있는 예측 가능한 작업에 유용하지만, CPU 사용률의 실시간 변화에 반응하지 않으므로 목표 사용률 수준을 유지하는 데 덜 효과적입니다.",
            "단순 스케일링은 특정 임계값에 반응하지만, 40%와 같은 평균 CPU 사용률 목표를 유지하는 데 필요한 지속적인 조정을 제공하지 않습니다. 수요가 자주 변동할 경우 과잉 프로비저닝 또는 부족 프로비저닝으로 이어질 수 있습니다."
        ]
    },
    {
        "Question Number": "21",
        "Situation": "한 회사가 Amazon S3 버킷을 보호하고 CloudFront 배포를 통해서만 접근을 제한하고자 합니다. 이를 위해 Origin Access Identity (OAI)를 사용하기로 결정했습니다.",
        "Question": "이 구성에서 OAI의 주요 기능은 무엇인가요?",
        "Options": {
            "1": "OAI는 S3 버킷에 대한 접근을 제한하기 위해 IAM 정책에 추가할 수 있는 사용자 역할을 합니다.",
            "2": "OAI는 CloudFront와 연결된 아이덴티티가 되어, CloudFront에서 오는 요청만 S3 버킷에 접근할 수 있도록 하며, 모든 직접 접근은 기본적으로 차단됩니다.",
            "3": "OAI는 CloudFront 제한을 우회하여 어떤 위치에서든 S3 버킷에 직접 접근할 수 있게 합니다.",
            "4": "OAI는 사용자 정의 헤더를 통해 S3 버킷에 대한 공개 접근을 제공하는 데 사용됩니다."
        },
        "Correct Answer": "OAI는 CloudFront와 연결된 아이덴티티가 되어, CloudFront에서 오는 요청만 S3 버킷에 접근할 수 있도록 하며, 모든 직접 접근은 기본적으로 차단됩니다.",
        "Explanation": "Origin Access Identity (OAI)는 Amazon S3 버킷에 대한 접근을 제한하여 오직 CloudFront만 접근할 수 있도록 하는 CloudFront의 특별한 기능입니다. OAI를 CloudFront 배포와 연결함으로써 S3 버킷에 대한 요청이 오직 CloudFront에서만 올 수 있도록 보장하며, 인터넷에서 S3 버킷에 대한 모든 직접 접근을 효과적으로 차단합니다. 이는 S3 콘텐츠에 대한 무단 접근을 방지하면서도 사용자가 CloudFront를 통해 접근할 수 있도록 하여 보안을 강화합니다.",
        "Other Options": [
            "OAI는 IAM 정책에 추가할 수 있는 사용자 역할로 작용하지 않습니다. 대신, CloudFront에 대한 접근을 제한하는 방법을 제공하는 CloudFront 기능입니다.",
            "이 옵션은 실제로 OAI의 기능을 정확하게 설명하고 있으므로 정답입니다.",
            "OAI는 어떤 위치에서든 S3 버킷에 직접 접근할 수 있도록 하지 않습니다. 사실, OAI는 오직 CloudFront만 S3 버킷에 접근할 수 있도록 보장하여 모든 다른 직접 접근을 차단합니다."
        ]
    },
    {
        "Question Number": "22",
        "Situation": "한 기술 회사가 Amazon EC2 인스턴스에서 중요한 애플리케이션을 호스팅하고 있습니다. 보안을 강화하기 위해 인스턴스에 대한 접근을 제어하고 네트워크 및 애플리케이션 계층을 포함한 여러 수준에서 데이터 보호를 보장해야 합니다. 또한 무단 접근에 대한 우려가 있어 안전한 접근 정책을 시행하고 잠재적인 위협을 모니터링하고자 합니다.",
        "Question": "EC2 환경의 보안을 보장하기 위해 어떤 모범 사례를 구현해야 할까요? (두 가지 선택)",
        "Options": {
            "1": "EC2 인스턴스에 보안 그룹을 연결하여 인바운드 및 아웃바운드 트래픽을 제한하고, IAM 역할을 사용하여 권한을 관리하며, CloudTrail 로깅을 활성화하여 접근 및 활동을 모니터링합니다.",
            "2": "모든 EC2 인스턴스를 공용 서브넷에 배포하여 무제한 접근을 허용하고, 사용자에게 원격 관리 및 접근을 쉽게 합니다.",
            "3": "EC2 인스턴스에서 AWS Shield를 활성화하여 모든 보안 요구 사항을 처리하고 모든 수신 트래픽을 차단하여 무단 접근을 방지합니다.",
            "4": "모든 사용자에 대한 접근 관리를 위해 EC2 키 쌍을 사용하고, 인스턴스에 직접 키를 저장하여 빠른 로그인을 용이하게 합니다.",
            "5": "보안 그룹 외에 네트워크 ACL을 구현하여 계층화된 네트워크 보안을 제공하고, Amazon GuardDuty를 활성화하여 위협 탐지를 수행합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "EC2 인스턴스에 보안 그룹을 연결하여 인바운드 및 아웃바운드 트래픽을 제한하고, IAM 역할을 사용하여 권한을 관리하며, CloudTrail 로깅을 활성화하여 접근 및 활동을 모니터링합니다.",
            "보안 그룹 외에 네트워크 ACL을 구현하여 계층화된 네트워크 보안을 제공하고, Amazon GuardDuty를 활성화하여 위협 탐지를 수행합니다."
        ],
        "Explanation": "보안 그룹은 EC2 인스턴스에 대한 인바운드 및 아웃바운드 트래픽을 제어하는 가상 방화벽 역할을 합니다. IAM 역할은 AWS 서비스 및 리소스에 대한 안전하고 통제된 접근을 제공합니다. CloudTrail 로깅은 AWS 인프라 전반에 걸친 활동과 관련된 계정 활동을 모니터링하고 기록하는 데 도움이 됩니다. 네트워크 ACL은 하나 이상의 서브넷의 트래픽을 제어할 수 있는 추가 보안 계층을 제공합니다. Amazon GuardDuty는 악의적이거나 무단 행동을 지속적으로 모니터링하는 위협 탐지 서비스입니다.",
        "Other Options": [
            "모든 EC2 인스턴스를 공용 서브넷에 배포하여 무제한 접근을 허용하는 것은 보안 모범 사례가 아닙니다. 이는 인스턴스를 인터넷의 잠재적 위협에 노출시키고, 인스턴스에 대한 접근을 제어할 수 없게 만듭니다.",
            "AWS Shield는 DDoS 보호를 제공하지만, EC2 인스턴스에 대한 모든 보안 요구 사항을 처리하지는 않습니다. 모든 수신 트래픽을 차단하지 않기 때문에, 이는 인스턴스에 대한 합법적인 접근을 방해할 수 있습니다.",
            "EC2 키 쌍을 사용하여 접근을 관리하는 것은 좋은 관행이지만, 인스턴스에 직접 키를 저장하는 것은 좋지 않습니다. 인스턴스가 손상되면 키에 접근할 수 있어 추가적인 무단 접근으로 이어질 수 있습니다."
        ]
    },
    {
        "Question Number": "23",
        "Situation": "한 글로벌 뉴스 조직이 전 세계의 시청자들에게 지연을 줄이고 사용자 경험을 개선하기 위해 여러 지리적 지역에 콘텐츠 배달 애플리케이션을 배포해야 합니다. 이 애플리케이션은 모든 지역에서 실시간으로 콘텐츠 업데이트를 동기화해야 합니다.",
        "Question": "이 분산 컴퓨팅 요구 사항을 달성하기 위해 솔루션 아키텍트가 추천해야 할 AWS 서비스는 무엇인가요?",
        "Options": {
            "1": "Amazon CloudFront",
            "2": "AWS Global Accelerator",
            "3": "Amazon Route 53",
            "4": "Amazon ElastiCache"
        },
        "Correct Answer": "Amazon CloudFront",
        "Explanation": "Amazon CloudFront는 전 세계의 엣지 위치에서 콘텐츠를 캐시하는 콘텐츠 배달 네트워크(CDN) 서비스로, 다양한 지리적 지역에서 애플리케이션에 접근하는 사용자에게 지연을 줄이는 데 도움을 줍니다. 또한 실시간 콘텐츠 업데이트를 지원하여 모든 지역에서 동기화를 가능하게 하여, 시청자에게 시의적절한 업데이트를 제공해야 하는 글로벌 뉴스 조직에 적합합니다.",
        "Other Options": [
            "AWS Global Accelerator는 최적의 엔드포인트로 트래픽을 유도하여 애플리케이션의 가용성과 성능을 개선하지만, CloudFront와 같은 콘텐츠 배달 또는 캐싱 기능을 제공하지 않습니다.",
            "Amazon Route 53은 도메인 등록 및 라우팅을 제공하는 확장 가능한 도메인 이름 시스템(DNS) 웹 서비스이지만, 콘텐츠 배달이나 콘텐츠 업데이트 동기화를 처리하지 않습니다.",
            "Amazon ElastiCache는 애플리케이션 성능을 개선하기 위해 인메모리 캐싱을 제공하는 서비스이지만, 지리적 지역 간의 콘텐츠 배달을 위해 설계되지 않았으며 실시간 콘텐츠 업데이트 동기화를 지원하지 않습니다."
        ]
    },
    {
        "Question Number": "24",
        "Situation": "한 국제 금융 회사가 지역 중단 동안에도 운영을 유지해야 하는 핵심 애플리케이션의 높은 가용성을 보장해야 합니다. 그들은 다운타임을 최소화하고 기본 지역이 실패할 경우 다른 지역의 대기 환경으로 트래픽을 자동으로 재라우팅하는 장애 조치 전략을 구현하고자 합니다.",
        "Question": "그들의 요구 사항을 고려할 때, 어떤 AWS 장애 조치 전략이 가장 적합하며 그 이유는 무엇인가요?",
        "Options": {
            "1": "Pilot Light, 다른 지역에 애플리케이션의 최소 버전을 유지하여 장애 조치 이벤트 동안 빠른 ramp-up을 가능하게 합니다.",
            "2": "Warm Standby, 다른 지역에서 애플리케이션의 축소된 버전을 실행하여 최소한의 설정 시간으로 더 빠른 장애 조치를 가능하게 합니다.",
            "3": "Active-Active Failover, 두 지역 모두 전체 애플리케이션 부하를 실행하여 실패 시 즉시 트래픽을 보조 지역으로 라우팅할 수 있게 합니다.",
            "4": "Backup and Restore, 다른 지역에 저장된 백업에서 복원하는 것을 포함하여 비핵심 애플리케이션에 대한 비용 효율적인 솔루션을 제공합니다."
        },
        "Correct Answer": "Active-Active Failover, 두 지역 모두 전체 애플리케이션 부하를 실행하여 실패 시 즉시 트래픽을 보조 지역으로 라우팅할 수 있게 합니다.",
        "Explanation": "Active-Active Failover 전략은 두 지역이 동시에 전체 애플리케이션 부하를 실행할 수 있게 하여 국제 금융 회사에 가장 적합합니다. 이는 한 지역에서 중단이 발생할 경우 트래픽을 즉시 다른 지역으로 라우팅할 수 있어 다운타임 없이 운영을 유지할 수 있습니다. 이 접근 방식은 높은 가용성을 보장하고 지역 중단 동안 최소한의 다운타임을 요구하는 회사의 요구 사항을 충족시켜, 핵심 애플리케이션에 가장 효과적인 솔루션입니다.",
        "Other Options": [
            "Pilot Light는 다른 지역에 애플리케이션의 최소 버전만 유지하므로 장애 조치 이벤트 동안 확장하는 데 시간이 필요하여 잠재적인 다운타임이 발생할 수 있으므로 적합하지 않습니다.",
            "Warm Standby는 Pilot Light보다 나은 옵션이지만, 여전히 애플리케이션의 축소된 버전을 실행합니다. Pilot Light보다 더 빠른 장애 조치를 가능하게 하지만, 높은 가용성을 위해 필요한 즉각적인 트래픽 라우팅을 제공하지 않을 수 있습니다.",
            "Backup and Restore는 백업에서 복원하는 것을 포함하므로 상당한 시간이 소요될 수 있으며, 높은 가용성을 위해 설계되지 않았습니다. 이 전략은 다운타임을 허용할 수 있는 비핵심 애플리케이션에 더 적합합니다."
        ]
    },
    {
        "Question Number": "25",
        "Situation": "한 회사가 Amazon RDS MySQL 데이터베이스에 민감한 고객 데이터를 저장하고 있습니다. 보안 및 규제 요구 사항을 준수하기 위해 데이터가 저장 시 암호화되고, 암호화 키에 대한 접근이 엄격하게 통제되어야 합니다. 또한 데이터베이스의 백업 및 스냅샷도 암호화되어야 합니다.",
        "Question": "이 요구 사항을 가장 잘 충족하는 솔루션은 무엇인가요? (두 가지 선택)",
        "Options": {
            "1": "AWS Key Management Service (KMS)를 사용하여 고객 관리형 CMK로 RDS 저장 시 암호화를 활성화하여 특정 IAM 역할만 키에 접근할 수 있도록 합니다.",
            "2": "내장된 MySQL 암호화 기능을 사용하여 저장 시 데이터를 암호화하고, RDS를 구성하여 자동 백업 및 스냅샷에서 암호화를 활성화합니다.",
            "3": "MySQL에서 투명 데이터 암호화(TDE)를 활성화하고 AWS CloudHSM을 사용하여 암호화 키를 관리하여 AWS가 암호화 키에 접근할 수 없도록 합니다.",
            "4": "RDS 데이터베이스 내에 평문으로 데이터를 저장하되, 안전한 접근을 위해 SSL/TLS를 활성화하여 네트워크 보안에 의존합니다.",
            "5": "RDS를 구성하여 SSL/TLS로 전송 중 암호화를 사용하고, Amazon S3에 저장하기 전에 백업을 수동으로 암호화합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Key Management Service (KMS)를 사용하여 고객 관리형 CMK로 RDS 저장 시 암호화를 활성화하여 특정 IAM 역할만 키에 접근할 수 있도록 합니다.",
            "MySQL에서 투명 데이터 암호화(TDE)를 활성화하고 AWS CloudHSM을 사용하여 암호화 키를 관리하여 AWS가 암호화 키에 접근할 수 없도록 합니다."
        ],
        "Explanation": "옵션 1은 AWS Key Management Service (KMS)가 저장 시 암호화를 허용하고, 특정 IAM 역할에 권한을 부여하여 암호화 키에 대한 접근을 통제할 수 있게 하므로 올바른 선택입니다. 이는 암호화 키에 대한 접근을 엄격하게 통제하는 요구 사항을 충족합니다. 옵션 3도 올바른 선택입니다. MySQL의 투명 데이터 암호화(TDE)는 저장 시 암호화를 제공하며, AWS CloudHSM은 AWS가 접근할 수 없는 방식으로 암호화 키를 관리할 수 있게 하여 암호화 키에 대한 접근을 엄격하게 통제하는 요구 사항을 충족합니다.",
        "Other Options": [
            "옵션 2는 MySQL의 내장 암호화 기능이 저장 시 데이터를 암호화할 수 있지만, 이 시나리오에서 요구되는 암호화 키 접근에 대한 통제 수준을 제공하지 않기 때문에 부적합합니다.",
            "옵션 4는 RDS 데이터베이스 내에 평문으로 데이터를 저장하는 것이므로 저장 시 암호화를 제공하지 않으며, 이는 이 시나리오에서 요구되는 사항입니다. SSL/TLS는 안전한 접근을 제공하지만, 저장된 데이터는 보호하지 않습니다.",
            "옵션 5는 SSL/TLS로 전송 중 암호화를 제공하고 백업을 수동으로 암호화할 수 있지만, RDS 데이터베이스 내의 데이터에 대한 저장 시 암호화를 제공하지 않으므로 이 시나리오에서 요구되는 사항을 충족하지 않습니다."
        ]
    },
    {
        "Question Number": "26",
        "Situation": "정부 기관이 여러 지사에서 Amazon S3 데이터 레이크로 민감한 데이터를 수집해야 합니다. 데이터 수집 지점은 무단 접근을 방지하고 전송 중 데이터 무결성을 보장하기 위해 안전해야 합니다.",
        "Question": "솔루션 아키텍트가 데이터 수집 지점에 대한 접근을 안전하게 하기 위해 어떤 솔루션을 구현해야 합니까?",
        "Options": {
            "1": "각 지사에서 Amazon S3에 데이터를 직접 업로드하기 위해 Amazon S3 사전 서명된 URL을 사용합니다.",
            "2": "각 지사와 AWS VPC 간에 VPN 연결을 설정하고 S3 접근을 VPC 엔드포인트로 제한합니다.",
            "3": "각 지사에 대해 S3 접근 키가 있는 IAM 사용자를 구현합니다.",
            "4": "S3 버킷에 대한 공개 접근을 활성화하고 객체 수준 암호화를 사용합니다."
        },
        "Correct Answer": "각 지사와 AWS VPC 간에 VPN 연결을 설정하고 S3 접근을 VPC 엔드포인트로 제한합니다.",
        "Explanation": "각 지사와 AWS VPC 간에 VPN 연결을 설정하면 모든 데이터 전송이 안전하고 암호화된 채널을 통해 이루어집니다. 이는 전송 중 민감한 데이터를 무단 접근으로부터 보호합니다. S3 접근을 VPC 엔드포인트로 제한함으로써, VPC에서 발생하는 트래픽만 S3 버킷에 접근할 수 있도록 하여 공용 인터넷으로부터 격리하고 잠재적인 위협에 대한 노출 위험을 줄입니다.",
        "Other Options": [
            "Amazon S3 사전 서명된 URL을 사용하면 데이터를 직접 S3에 업로드할 수 있는 임시 접근을 허용하지만, 데이터 전송을 위한 안전한 채널을 제공하지 않습니다. 사전 서명된 URL이 가로채어지면 무단 사용자가 S3 버킷에 접근할 수 있어 데이터 보안이 위협받을 수 있습니다.",
            "각 지사에 대해 S3 접근 키가 있는 IAM 사용자를 구현하면 접근 제어를 제공할 수 있지만, 데이터 전송 자체를 안전하게 하지 않습니다. 접근 키가 유출되면 무단 사용자가 S3 버킷에 접근할 수 있습니다. 또한, 이 방법은 전송 중 데이터를 암호화하지 않아 가로채기 위험에 노출됩니다.",
            "S3 버킷에 대한 공개 접근을 활성화하고 객체 수준 암호화를 사용하는 것은 매우 안전하지 않습니다. 공개 접근은 인터넷의 누구나 데이터에 접근할 수 있음을 의미하며, 이는 무단 접근을 방지해야 한다는 요구 사항에 반합니다. 객체 수준 암호화는 데이터가 정지 상태일 때 보호하지만, 전송 중 데이터를 안전하게 하지 않아 가로채기 위험에 노출됩니다."
        ]
    },
    {
        "Question Number": "27",
        "Situation": "미디어 스트리밍 회사가 전 세계 사용자에게 비디오 콘텐츠를 제공하는 애플리케이션의 성능을 개선하고자 합니다. 회사는 지연 시간을 최소화하고 백엔드 서버의 부하를 줄여야 합니다.",
        "Question": "회사가 빠른 콘텐츠 제공과 높은 가용성을 유지하기 위해 어떤 캐싱 전략을 사용해야 합니까?",
        "Options": {
            "1": "Amazon CloudFront를 콘텐츠 전송 네트워크(CDN)로 사용하여 엣지 위치에서 비디오 콘텐츠를 캐시하고, 자주 접근하는 콘텐츠를 Amazon S3에 장기 저장합니다.",
            "2": "Amazon ElastiCache를 사용하여 데이터베이스 쿼리를 캐시하고 비디오 콘텐츠를 Amazon DynamoDB에 저장하여 사용자에게 빠른 접근 시간을 보장합니다.",
            "3": "로드 밸런서가 있는 Amazon EC2 인스턴스를 사용하여 비디오 콘텐츠를 캐시하고, 콘텐츠를 전통적인 파일 시스템에 저장하여 쉽게 검색할 수 있도록 합니다.",
            "4": "읽기 복제본이 있는 Amazon RDS를 사용하여 데이터를 캐시하고 비디오 제공을 최적화하며, 미디어 콘텐츠를 Amazon EFS에 저장하여 공유 접근을 제공합니다."
        },
        "Correct Answer": "Amazon CloudFront를 콘텐츠 전송 네트워크(CDN)로 사용하여 엣지 위치에서 비디오 콘텐츠를 캐시하고, 자주 접근하는 콘텐츠를 Amazon S3에 장기 저장합니다.",
        "Explanation": "Amazon CloudFront를 CDN으로 사용하면 미디어 스트리밍 회사가 전 세계 엣지 위치에서 비디오 콘텐츠를 캐시할 수 있습니다. 이는 중앙 서버가 아닌 사용자와 가까운 위치에서 콘텐츠를 제공함으로써 사용자에게 지연 시간을 크게 줄입니다. 또한, 자주 접근하는 콘텐츠를 Amazon S3에 저장하면 확장 가능하고 내구성이 뛰어난 저장 솔루션을 제공하여 콘텐츠를 쉽게 검색할 수 있도록 합니다. 이 조합은 성능을 최적화하고 높은 가용성을 유지하여 빠른 콘텐츠 제공을 위한 최선의 선택이 됩니다.",
        "Other Options": [
            "Amazon ElastiCache를 사용하여 데이터베이스 쿼리를 캐시하고 비디오 콘텐츠를 Amazon DynamoDB에 저장하는 것은 비디오 콘텐츠 제공에 적합하지 않습니다. ElastiCache는 주로 데이터베이스 쿼리를 가속화하기 위해 인메모리 데이터를 캐시하는 데 사용되며, DynamoDB는 대규모 비디오 파일을 효율적으로 제공하는 데 최적화되지 않은 NoSQL 데이터베이스입니다.",
            "로드 밸런서가 있는 Amazon EC2 인스턴스를 사용하여 비디오 콘텐츠를 캐시하고 콘텐츠를 전통적인 파일 시스템에 저장하는 것은 효율적인 전략이 아닙니다. 이 접근 방식은 더 많은 관리 및 확장 노력이 필요하며, 전통적인 파일 시스템은 글로벌 콘텐츠 제공을 위한 CDN과 같은 성능 이점을 제공하지 않을 수 있습니다.",
            "읽기 복제본이 있는 Amazon RDS를 사용하여 데이터를 캐시하고 비디오 제공을 최적화하는 것은 비디오 콘텐츠에 적합하지 않습니다. RDS는 관계형 데이터베이스를 위해 설계되었으며 대규모 미디어 파일을 제공하는 데 최적화되지 않았습니다. 또한, Amazon EFS는 비디오 스트리밍을 위한 CDN과 같은 성능 이점을 제공하지 않을 수 있는 파일 저장 서비스입니다."
        ]
    },
    {
        "Question Number": "28",
        "Situation": "한 회사가 Amazon EC2 인스턴스에서 실행 중인 애플리케이션이 Amazon S3 버킷에 저장된 데이터에 접근해야 합니다. 장기 자격 증명을 관리하지 않기 위해 회사는 인스턴스에 필요한 권한을 안전하게 제공하고자 합니다.",
        "Question": "어떤 구성이 이러한 요구 사항을 가장 잘 충족합니까?",
        "Options": {
            "1": "각 EC2 인스턴스에 S3 버킷에 접근할 수 있는 권한이 있는 IAM 역할을 연결합니다. 이 역할은 자동으로 회전되는 임시 자격 증명을 제공합니다.",
            "2": "IAM 접근 키와 비밀 접근 키를 수동으로 생성하고 S3 권한을 부여하여 각 EC2 인스턴스에 저장하여 애플리케이션에서 사용합니다.",
            "3": "S3 접근 권한이 있는 IAM 사용자를 생성하고, 각 EC2 인스턴스에 사용자의 자격 증명을 구성하며, 자격 증명을 수동으로 회전시키기 위해 예약 작업을 설정합니다.",
            "4": "AWS Secrets Manager를 사용하여 S3 접근 자격 증명을 저장하고 EC2 인스턴스에서 실행되는 애플리케이션 코드에서 이를 검색합니다."
        },
        "Correct Answer": "각 EC2 인스턴스에 S3 버킷에 접근할 수 있는 권한이 있는 IAM 역할을 연결합니다. 이 역할은 자동으로 회전되는 임시 자격 증명을 제공합니다.",
        "Explanation": "EC2 인스턴스에 IAM 역할을 연결하는 것은 S3와 같은 AWS 리소스에 접근할 수 있는 권한을 제공하는 최선의 방법입니다. 이 방법을 사용하면 인스턴스가 역할을 가정하고 AWS에 의해 자동으로 회전되는 임시 보안 자격 증명을 받을 수 있습니다. 이는 장기 자격 증명의 필요성을 없애고 보안을 강화하며, 자격 증명이 AWS에 의해 관리되므로 수동으로 저장하거나 회전할 필요가 없습니다.",
        "Other Options": [
            "IAM 접근 키와 비밀 접근 키를 수동으로 생성하고 각 EC2 인스턴스에 저장하는 것은 안전하지 않습니다. 이러한 자격 증명이 유출되면 수동으로 철회될 때까지 무한정 사용할 수 있습니다. 또한, 이러한 자격 증명을 관리하고 회전하는 것은 번거롭고 오류가 발생할 수 있습니다.",
            "S3 접근 권한이 있는 IAM 사용자를 생성하고 각 EC2 인스턴스에 사용자의 자격 증명을 구성하는 것도 안전하지 않습니다. 이전 옵션과 마찬가지로, 이 접근 방식은 장기 자격 증명을 수동으로 관리해야 하므로 자격 증명이 유출되거나 적절히 회전되지 않을 경우 보안 취약점이 발생할 수 있습니다.",
            "AWS Secrets Manager를 사용하여 S3 접근 자격 증명을 저장하고 애플리케이션 코드에서 이를 검색하는 것은 인스턴스에 자격 증명을 직접 저장하는 것보다 나은 접근 방식입니다. 그러나 여전히 자격 증명을 관리해야 하므로 IAM 역할이 자동으로 임시 자격 증명을 제공할 수 있는 경우에는 불필요합니다. 이 경우 복잡성을 추가하면서도 큰 이점을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "29",
        "Situation": "금융 기관인 SecureBank는 데이터 암호화 및 키 관리에 대한 엄격한 규정 준수 요구 사항을 가지고 있습니다. 규제 기준을 충족하기 위해 SecureBank는 키 저장 및 관리를 위해 FIPS 140-2 Level 3을 준수하는 하드웨어 보안 모듈(HSM)을 사용해야 합니다. 그들은 이러한 요구 사항을 충족하기 위해 AWS CloudHSM과 AWS Key Management Service(KMS)를 고려하고 있습니다. SecureBank는 키 관리 프로세스에 대한 완전한 제어와 사용자 정의 암호화 워크플로우를 위한 산업 표준 API와의 통합 능력을 원합니다. 또한, AWS CloudHSM과 AWS KMS 간의 고객 제어, 규정 준수 수준 및 AWS 서비스와의 통합 차이를 이해하고자 합니다.",
        "Question": "AWS CloudHSM과 AWS Key Management Service(KMS) 간의 고객 제어 및 규정 준수 수준의 주요 차이를 특히 FIPS 140-2 Level 3과 같은 엄격한 보안 기준을 다룰 때 가장 잘 설명하는 것은 무엇입니까?",
        "Options": {
            "1": "AWS CloudHSM과 AWS KMS 모두 FIPS 140-2 Level 3 준수를 제공하지만, AWS CloudHSM만이 완전히 관리되는 다중 테넌트 서비스로, 고객이 공유 환경에서 암호화 키를 관리할 수 있습니다.",
            "2": "AWS CloudHSM은 AWS에서 제공하지만 고객이 완전히 관리하는 단일 테넌트 하드웨어 보안 모듈(HSM)로, FIPS 140-2 Level 3 준수를 제공합니다. 반면 AWS KMS는 일반적으로 Level 2 준수를 제공하며 AWS 서비스와의 더 깊은 통합을 제공하지만 키 관리에 대한 고객 제어는 적습니다.",
            "3": "AWS CloudHSM은 S3 서버 측 암호화와 같은 AWS 서비스와 원활하게 통합되도록 설계되어 암호화 관리를 제공합니다. 그러나 AWS KMS는 고객 제어 HSM이 필요한 규정 준수 중심 환경에 더 적합합니다.",
            "4": "AWS CloudHSM과 달리 AWS KMS는 고객이 다른 암호화 워크플로우와 통합하기 위해 PKCS#11 및 CNG 라이브러리를 포함한 산업 표준 API를 사용할 수 있도록 하여 사용자 정의 암호화 구현에 더 적합합니다."
        },
        "Correct Answer": "AWS CloudHSM은 AWS에서 제공하지만 고객이 완전히 관리하는 단일 테넌트 하드웨어 보안 모듈(HSM)로, FIPS 140-2 Level 3 준수를 제공합니다. 반면 AWS KMS는 일반적으로 Level 2 준수를 제공하며 AWS 서비스와의 더 깊은 통합을 제공하지만 키 관리에 대한 고객 제어는 적습니다.",
        "Explanation": "AWS CloudHSM은 고객에게 암호화 키에 대한 완전한 제어를 제공하며, FIPS 140-2 Level 3을 포함한 엄격한 규정 준수 요구 사항을 충족하도록 설계되었습니다. 이는 단일 테넌트 솔루션으로, 하드웨어가 단일 고객에게 전용되어 보안과 제어를 강화합니다. 반면 AWS Key Management Service(KMS)는 다중 테넌트 서비스로, 키 관리를 간소화하고 다른 AWS 서비스와 원활하게 통합되지만 CloudHSM만큼 키 관리에 대한 제어를 제공하지 않습니다. KMS는 일반적으로 FIPS 140-2 Level 2 준수를 충족하며, 이는 SecureBank가 직면한 가장 엄격한 규제 요구 사항을 충족하지 못할 수 있습니다.",
        "Other Options": [
            "옵션 1은 AWS CloudHSM과 AWS KMS 모두 FIPS 140-2 Level 3 준수를 제공한다고 잘못 설명합니다. CloudHSM은 이 기준을 충족하지만 KMS는 일반적으로 Level 2 준수를 충족하며, 이는 SecureBank의 요구 사항에 있어 중요한 차이입니다.",
            "옵션 3은 AWS CloudHSM과 AWS KMS의 기능을 잘못 설명합니다. CloudHSM은 S3와 같은 AWS 서비스와의 통합을 주로 위해 설계되지 않았으며, 오히려 키 관리를 위한 안전한 환경을 제공하는 데 중점을 두고 있습니다. KMS는 AWS 서비스와 더 통합되어 있지만 CloudHSM만큼의 제어 수준을 제공하지 않습니다.",
            "옵션 4는 AWS KMS가 사용자 정의 암호화 구현을 위해 PKCS#11 및 CNG 라이브러리와 같은 산업 표준 API를 사용할 수 있도록 한다고 잘못 주장합니다. 실제로 AWS CloudHSM은 이러한 API를 지원하여 사용자 정의 암호화 워크플로우에 필요한 유연성을 제공하며, KMS는 동일한 수준의 제어 또는 API 지원을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "30",
        "Situation": "모바일 앱이 주요 이벤트 동안 사용량이 급증하여 애플리케이션이 빠르게 확장해야 합니다. 앱은 이러한 급증을 효율적으로 처리하면서 비용을 통제해야 합니다.",
        "Question": "어떤 확장 전략이 이러한 요구를 가장 잘 충족합니까? (두 가지 선택)",
        "Options": {
            "1": "트래픽이 많은 동안 더 큰 인스턴스 유형으로 수직 확장합니다.",
            "2": "Auto Scaling 그룹과 동적 확장 정책을 사용하여 수평 확장합니다.",
            "3": "이벤트 시간 동안 리소스를 추가하기 위해 예약 확장을 사용합니다.",
            "4": "예상 수요에 따라 인스턴스를 수동으로 추가하여 수동 확장을 수행합니다.",
            "5": "Amazon CloudWatch를 사용하여 트래픽 급증을 예측하고 용량을 사전 조정하는 예측 확장을 구현합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Auto Scaling 그룹과 동적 확장 정책을 사용하여 수평 확장합니다.",
            "Amazon CloudWatch를 사용하여 트래픽 급증을 예측하고 용량을 사전 조정하는 예측 확장을 구현합니다."
        ],
        "Explanation": "Auto Scaling 그룹과 동적 확장 정책을 사용한 수평 확장은 수요가 증가함에 따라 애플리케이션이 더 많은 인스턴스를 추가하고, 수요가 감소함에 따라 인스턴스를 제거할 수 있게 해주므로 사용량 급증을 처리하는 데 이상적입니다. Amazon CloudWatch를 사용한 예측 확장도 올바른 선택으로, 머신 러닝 알고리즘을 사용하여 미래의 수요를 예측하고 용량을 사전 조정하여 트래픽 급증을 효율적으로 처리하고 비용을 통제하는 데 도움이 됩니다.",
        "Other Options": [
            "트래픽이 많은 동안 더 큰 인스턴스 유형으로 수직 확장하는 것은 이상적인 솔루션이 아닙니다. 이는 단일 인스턴스의 용량을 증가시키는 것을 포함하며, 비용이 많이 들 수 있고 대규모 사용량 급증을 처리하는 데 필요한 유연성을 제공하지 않을 수 있습니다.",
            "이벤트 시간 동안 리소스를 추가하기 위해 예약 확장을 사용하는 것은 비효율적일 수 있습니다. 이는 급증이 발생할 시점을 정확히 예측해야 하며, 이는 항상 가능하지 않을 수 있습니다.",
            "예상 수요에 따라 인스턴스를 수동으로 추가하는 것은 최선의 전략이 아닙니다. 이는 수동 개입이 필요하며, 갑작스러운 수요 급증에 신속하게 대응하지 못할 수 있습니다."
        ]
    },
    {
        "Question Number": "31",
        "Situation": "XYZ Corp는 데이터베이스 자격 증명, API 키 및 애플리케이션의 다양한 마이크로서비스에 필요한 기타 비밀 정보를 관리하고 있습니다. 이들은 이러한 비밀 정보를 안전하게 저장하고 각 애플리케이션이 필요할 때만 접근할 수 있도록 하기를 원합니다. 또한, XYZ Corp는 비밀 정보가 수동 업데이트 없이 자동으로 회전되기를 원하며, 구성 변경으로 인한 다운타임이 없기를 원합니다. 보안 팀은 이러한 비밀 정보를 관리하고 회전시키기 위해 AWS Secrets Manager를 선택했습니다. 그들은 또한 비밀 정보가 저장 중에 암호화되고 권한이 있는 서비스와 애플리케이션만 접근할 수 있도록 하기를 원합니다.",
        "Question": "다음 단계 중 AWS Secrets Manager가 애플리케이션의 안전한 접근을 위해 비밀 정보를 검색하고 회전시키는 방법을 올바르게 설명하는 것은 무엇입니까?",
        "Options": {
            "1": "Secrets Manager는 AWS Key Management Service (KMS)에서 비밀 정보를 검색하고 주기적으로 애플리케이션에 직접 업데이트하여 동기화를 유지합니다.",
            "2": "애플리케이션은 SDK를 사용하여 Secrets Manager에서 비밀 정보를 검색하고, Secrets Manager는 AWS Lambda를 활용하여 비밀 정보를 자동으로 회전시키며, 비밀 정보는 KMS를 사용하여 저장 중에 암호화됩니다.",
            "3": "Secrets Manager는 모든 비밀 정보를 IAM 역할 내에 저장하여 자동 회전을 제공하며, 이는 AWS Identity and Access Management (IAM) 정책을 통해 주기적으로 회전됩니다.",
            "4": "AWS Secrets Manager는 IAM에서 자격 증명을 직접 검색하여 권한을 부여하며, 비밀 정보는 Lambda 함수 없이 자동으로 회전됩니다."
        },
        "Correct Answer": "애플리케이션은 SDK를 사용하여 Secrets Manager에서 비밀 정보를 검색하고, Secrets Manager는 AWS Lambda를 활용하여 비밀 정보를 자동으로 회전시키며, 비밀 정보는 KMS를 사용하여 저장 중에 암호화됩니다.",
        "Explanation": "AWS Secrets Manager는 애플리케이션이 AWS SDK를 사용하여 비밀 정보를 안전하게 검색할 수 있도록 합니다. 애플리케이션이 비밀 정보가 필요할 때, Secrets Manager API를 호출하여 안전한 저장소에서 비밀 정보를 검색합니다. Secrets Manager는 비밀 정보를 자동으로 회전시키는 기능도 지원하며, 이는 AWS Lambda 함수를 사용하여 구현할 수 있습니다. 이는 비밀 정보를 수동 개입 없이 업데이트할 수 있음을 의미하며, 애플리케이션은 다운타임 없이 계속 작동할 수 있습니다. 또한, 비밀 정보는 AWS Key Management Service (KMS)를 사용하여 저장 중에 암호화되어 민감한 정보가 보호됩니다.",
        "Other Options": [
            "옵션 1은 AWS Secrets Manager가 KMS에서 비밀 정보를 직접 검색하지 않기 때문에 잘못되었습니다. 대신, Secrets Manager는 비밀 정보를 자체적으로 관리하고 저장 중 암호화를 위해 KMS를 사용합니다. 비밀 정보는 애플리케이션에 직접 주기적으로 업데이트되지 않으며, 애플리케이션은 필요할 때 비밀 정보의 최신 버전을 검색합니다.",
            "옵션 3은 AWS Secrets Manager가 비밀 정보를 IAM 역할 내에 저장하지 않기 때문에 잘못되었습니다. IAM은 권한 및 접근 제어를 관리하는 데 사용되지만, Secrets Manager는 비밀 정보를 자체적으로 관리하며 회전을 위해 Lambda를 사용합니다.",
            "옵션 4는 AWS Secrets Manager가 IAM에서 자격 증명을 직접 검색하지 않기 때문에 잘못되었습니다. 대신, Secrets Manager는 비밀 정보를 독립적으로 관리하고 자동 회전을 위해 Lambda 함수를 사용합니다. IAM은 권한 부여 및 접근 제어에 사용되지만, 비밀 정보 검색을 처리하지 않습니다."
        ]
    },
    {
        "Question Number": "32",
        "Situation": "한 회사는 AWS Key Management Service (AWS KMS)를 사용하여 암호화 키를 관리하고 있으며, 사용자 역할에 따라 이러한 키에 대한 접근을 제어하고자 합니다.",
        "Question": "회사가 KMS 키에 대한 접근 권한을 정의하기 위해 어떤 방법을 사용해야 합니까?",
        "Options": {
            "1": "IAM 사용자에게 직접 권한을 할당합니다.",
            "2": "KMS 키에 대한 리소스 기반 정책을 사용합니다.",
            "3": "KMS 키에서 MFA 삭제를 활성화합니다.",
            "4": "KMS 키에 대한 접근 제어 목록(ACL)을 구성합니다."
        },
        "Correct Answer": "KMS 키에 대한 리소스 기반 정책을 사용합니다.",
        "Explanation": "AWS Key Management Service (KMS)는 리소스 기반 정책을 사용하여 KMS 키에 대한 접근 권한을 정의할 수 있도록 합니다. 이러한 정책은 KMS 키에 직접 연결되어 어떤 IAM 사용자, 역할 또는 서비스가 키에 대해 특정 작업을 수행할 수 있는지를 지정합니다. 이 방법은 접근에 대한 세밀한 제어를 제공하며, KMS 키에 대한 권한 관리를 위한 권장 접근 방식입니다. 이는 사용자 수준이 아닌 리소스 수준에서 권한을 정의할 수 있게 해줍니다.",
        "Other Options": [
            "IAM 사용자에게 직접 권한을 할당하는 것은 KMS 키에 대한 접근 관리를 위한 최선의 방법이 아닙니다. 이는 필요한 세분화가 부족하고 관리 복잡성을 초래할 수 있습니다. 리소스 기반 정책이 키 관리에 더 적합합니다.",
            "MFA 삭제를 활성화하는 것은 주로 Amazon S3와 관련된 기능이며 KMS 키에는 적용되지 않습니다. MFA(다단계 인증)는 보안을 강화할 수 있지만 KMS 키에 대한 접근 권한을 직접 제어하지는 않습니다.",
            "접근 제어 목록(ACL)을 구성하는 것은 KMS 키에 적용되지 않습니다. KMS는 접근 제어를 위해 IAM 정책 및 리소스 기반 정책을 사용하며, ACL은 일반적으로 S3와 같은 다른 AWS 서비스에서 사용됩니다."
        ]
    },
    {
        "Question Number": "33",
        "Situation": "한 회사는 이미지, 비디오 및 문서를 포함한 사용자 생성 콘텐츠를 저장해야 하며, 저장 용량을 쉽게 확장하고 빠른 접근을 제공할 수 있는 솔루션을 찾고 있습니다. 이 회사는 대량의 비구조적 데이터를 처리할 수 있고 높은 가용성을 지원하는 솔루션을 원합니다. 또한, 저장 솔루션이 비용 효율적이며 여러 서비스에서 쉽게 접근할 수 있기를 원합니다.",
        "Question": "회사가 이 데이터를 저장하기 위해 어떤 AWS 저장 유형을 사용해야 하며, 그 특성은 무엇입니까?",
        "Options": {
            "1": "파일 저장을 위해 Amazon S3(객체 저장소)를 사용합니다. 이는 매우 확장 가능하며 비구조적 데이터에 적합하고 HTTP/HTTPS를 통해 쉽게 접근할 수 있습니다.",
            "2": "대형 비디오 파일 저장을 위해 Amazon EBS(블록 저장소)를 사용합니다. 이는 데이터에 대한 저지연 접근과 성능 민감한 애플리케이션을 위한 높은 처리량을 제공합니다.",
            "3": "사용자 생성 콘텐츠 저장을 위해 Amazon EFS(파일 저장소)를 사용합니다. 이는 여러 EC2 인스턴스 간에 공유 파일 접근을 제공하며 확장 가능한 저장 용량을 갖추고 있습니다.",
            "4": "구조적 데이터 모델과 강력한 일관성을 위해 사용자 생성 콘텐츠 저장을 위해 Amazon RDS(관계형 데이터베이스)를 사용합니다."
        },
        "Correct Answer": "파일 저장을 위해 Amazon S3(객체 저장소)를 사용합니다. 이는 매우 확장 가능하며 비구조적 데이터에 적합하고 HTTP/HTTPS를 통해 쉽게 접근할 수 있습니다.",
        "Explanation": "Amazon S3(간단한 저장 서비스)는 웹 어디서나 데이터를 저장하고 검색할 수 있도록 설계되었습니다. 이는 매우 확장 가능한 객체 저장 서비스로, 이미지, 비디오 및 문서와 같은 사용자 생성 콘텐츠에 이상적입니다. S3는 비구조적 데이터를 지원하며 높은 가용성을 제공하여 HTTP/HTTPS를 통해 쉽게 접근할 수 있습니다. 또한, 사용자는 사용한 저장 용량에 대해서만 비용을 지불하므로 비용 효율적이며, 다양한 AWS 서비스와 잘 통합되어 여러 애플리케이션에서 접근할 수 있습니다.",
        "Other Options": [
            "Amazon EBS(Elastic Block Store)를 사용하는 것은 이 시나리오에서 대형 비디오 파일을 저장하는 데 이상적이지 않습니다. EBS는 저지연 접근과 높은 처리량이 필요한 데이터에 주로 사용되는 블록 저장소입니다. 이는 비구조적 데이터 저장을 위한 대규모 설계가 아니며, 데이터 블록에 대한 빠른 접근이 필요한 데이터베이스나 애플리케이션에 더 적합합니다.",
            "Amazon EFS(Elastic File System)를 사용하는 것은 여러 EC2 인스턴스 간에 공유 파일 접근을 제공할 수 있지만, 이는 객체 저장소보다는 파일 저장이 필요한 시나리오에 더 적합합니다. EFS는 대량의 비구조적 데이터에 대해 S3보다 일반적으로 더 비쌀 수 있으며, 사용자 생성 콘텐츠의 대량 저장에 대해 S3와 같은 수준의 확장성과 비용 효율성을 제공하지 않습니다.",
            "Amazon RDS(관계형 데이터베이스 서비스)를 사용하는 것은 사용자 생성 콘텐츠를 저장하는 데 부적절합니다. RDS는 구조적 데이터 및 관계형 데이터베이스를 위해 설계되었으며, 이미지 및 비디오와 같은 비구조적 데이터에 최적화되어 있지 않습니다. 이러한 목적으로 사용하면 비용 효율적이지 않으며 복잡한 데이터베이스 스키마와 관리가 필요합니다."
        ]
    },
    {
        "Question Number": "34",
        "Situation": "한 조직은 SAML을 사용하여 사용자가 역할을 맡을 수 있도록 온프레미스 아이덴티티 공급자를 AWS와 연동했습니다. 이 조직은 AWS Management Console에 접근하는 모든 연합 사용자에 대해 다단계 인증(MFA)을 시행하고자 합니다.",
        "Question": "이 시나리오에서 MFA를 시행하기 위한 최선의 접근 방식은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "연합 접근에 사용되는 AWS IAM 역할에서 MFA 설정을 구성합니다.",
            "2": "조직의 온프레미스 아이덴티티 공급자를 통해 MFA를 요구합니다.",
            "3": "AWS 루트 계정 수준에서 MFA를 활성화합니다.",
            "4": "MFA 요구 사항이 있는 Amazon Cognito 사용자 풀을 설정합니다.",
            "5": "AWS IAM 정책을 사용하여 역할 맡기를 위한 MFA 인증을 의무화합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "조직의 온프레미스 아이덴티티 공급자를 통해 MFA를 요구합니다.",
            "AWS IAM 정책을 사용하여 역할 맡기를 위한 MFA 인증을 의무화합니다."
        ],
        "Explanation": "이 시나리오에서 AWS Management Console에 접근하는 모든 연합 사용자에 대해 MFA를 시행하기 위한 최선의 접근 방식은 조직의 온프레미스 아이덴티티 공급자를 통해 MFA를 요구하고 AWS IAM 정책을 사용하여 역할 맡기를 위한 MFA 인증을 의무화하는 것입니다. 온프레미스 아이덴티티 공급자는 초기 사용자 인증, 즉 MFA를 포함한 인증을 담당합니다. 사용자가 인증되면, 아이덴티티 공급자는 SAML 어설션을 생성하여 임시 보안 자격 증명을 요청하고 IAM 역할을 맡습니다. AWS IAM 정책은 역할 맡기 시 MFA를 시행하는 데 사용될 수 있으며, 사용자가 역할을 맡기 전에 MFA로 인증되었는지 확인합니다.",
        "Other Options": [
            "연합 접근에 사용되는 AWS IAM 역할에서 MFA 설정을 구성하는 것은 불가능합니다. MFA 시행은 IAM 역할에서 직접 구성할 수 있는 설정이 아닙니다.",
            "AWS 루트 계정 수준에서 MFA를 활성화하는 것은 연합 사용자에게 MFA를 시행하지 않습니다. 루트 계정 수준의 MFA는 계정의 루트 사용자에게만 적용되며, IAM 사용자나 연합 사용자에게는 적용되지 않습니다.",
            "MFA 요구 사항이 있는 Amazon Cognito 사용자 풀을 설정하는 것은 AWS Management Console에 접근하는 연합 사용자에게 MFA를 시행하지 않습니다. Amazon Cognito는 모바일 및 웹 애플리케이션에서 사용자 인증을 구축, 보호 및 확장하는 데 사용되며, AWS Management Console에 접근하는 연합 사용자에게 MFA를 시행하는 데 사용되지 않습니다."
        ]
    },
    {
        "Question Number": "35",
        "Situation": "실시간 주식 거래 데이터를 처리하는 애플리케이션은 높은 CPU 성능이 필요하지만 메모리는 많이 필요하지 않습니다. 회사는 가장 적합한 인스턴스 유형을 선택하여 비용을 최적화하고자 합니다.",
        "Question": "어떤 인스턴스 패밀리가 이러한 성능 및 비용 요구 사항을 가장 잘 충족합니까?",
        "Options": {
            "1": "메모리 최적화",
            "2": "컴퓨트 최적화",
            "3": "스토리지 최적화",
            "4": "가속 컴퓨팅"
        },
        "Correct Answer": "컴퓨트 최적화",
        "Explanation": "컴퓨트 최적화 인스턴스 패밀리는 높은 CPU 성능이 필요한 애플리케이션을 위해 특별히 설계되었습니다. 이 애플리케이션은 실시간 주식 거래 데이터를 처리하고 있으므로 이러한 인스턴스가 제공하는 증가된 처리 성능의 혜택을 받을 수 있습니다. 또한, 컴퓨트 최적화 인스턴스는 일반적으로 CPU 집약적인 작업에 대해 다른 인스턴스 유형보다 비용 효율적입니다.",
        "Other Options": [
            "메모리 최적화 인스턴스는 높은 메모리 성능이 필요한 애플리케이션을 위해 설계되었습니다. 애플리케이션이 메모리를 많이 필요로 하지 않기 때문에 이 옵션은 적합하지 않으며 불필요한 비용이 발생할 수 있습니다.",
            "스토리지 최적화 인스턴스는 높은 스토리지 처리량과 IOPS가 필요한 작업에 맞춰져 있습니다. 애플리케이션이 상당한 스토리지 요구가 없기 때문에 이 인스턴스 유형은 적합하지 않으며 비용 최적화에도 도움이 되지 않습니다.",
            "가속 컴퓨팅 인스턴스는 GPU와 같은 하드웨어 가속기가 유리한 작업을 위해 설계되었습니다. 이러한 인스턴스는 일반적으로 머신 러닝, 그래픽 렌더링 또는 기타 전문 작업에 사용됩니다. 애플리케이션이 CPU 성능에 중점을 두고 가속이 필요하지 않기 때문에 이 옵션은 요구 사항을 효과적으로 충족하지 않습니다."
        ]
    },
    {
        "Question Number": "36",
        "Situation": "전자상거래 플랫폼이 제품 카탈로그에 대한 높은 읽기 트래픽을 경험하고 있으며, 이는 기본 데이터베이스의 성능에 영향을 미칩니다. 회사는 데이터 일관성을 저해하지 않으면서 확장성을 개선하기 위해 읽기 작업을 오프로드하고자 합니다.",
        "Question": "이 목표를 달성하기 위해 솔루션 아키텍트가 어떤 전략을 구현해야 합니까?",
        "Options": {
            "1": "Amazon RDS 인스턴스에 대해 Multi-AZ 배포를 활성화하여 읽기 트래픽을 분산합니다.",
            "2": "Amazon RDS 읽기 복제본을 생성하고 애플리케이션을 구성하여 읽기 쿼리를 복제본으로 직접 전달합니다.",
            "3": "Amazon DynamoDB와 Global Tables를 사용하여 읽기 확장성을 처리합니다.",
            "4": "Amazon EC2 인스턴스와 MySQL을 사용하여 마스터-슬레이브 복제 설정을 구현합니다."
        },
        "Correct Answer": "Amazon RDS 읽기 복제본을 생성하고 애플리케이션을 구성하여 읽기 쿼리를 복제본으로 직접 전달합니다.",
        "Explanation": "Amazon RDS 읽기 복제본을 생성하면 전자상거래 플랫폼이 기본 데이터베이스에서 읽기 트래픽을 오프로드할 수 있습니다. 읽기 복제본은 읽기 작업을 처리하도록 특별히 설계되어 데이터 일관성을 저해하지 않으면서 확장성과 성능을 개선하는 데 도움이 됩니다. 복제본은 기본 데이터베이스에서 비동기적으로 데이터를 복제하여 읽기 쿼리를 이러한 복제본으로 전달할 수 있도록 하여 기본 인스턴스의 부하를 줄이고 전체 애플리케이션 성능을 향상시킵니다.",
        "Other Options": [
            "Amazon RDS 인스턴스에 대해 Multi-AZ 배포를 활성화하는 것은 읽기 작업의 확장보다는 고가용성과 장애 조치 기능에 주로 초점을 맞춥니다. 이는 중복성을 제공하지만 읽기 트래픽을 효과적으로 분산하는 데 도움이 되지 않습니다.",
            "Amazon DynamoDB와 Global Tables를 사용하는 것은 기존 아키텍처가 Amazon RDS에 의존하는 경우 적합하지 않을 수 있는 다른 데이터베이스 솔루션입니다. 또한 데이터 마이그레이션 및 현재 애플리케이션과의 호환성을 보장하는 데 복잡성을 초래할 수 있습니다.",
            "Amazon EC2 인스턴스와 MySQL을 사용하여 마스터-슬레이브 복제 설정을 구현하는 것은 더 많은 관리 오버헤드를 요구하며 Amazon RDS의 내장 기능을 활용하지 않습니다. 이 접근 방식은 일관성 문제를 초래할 수 있으며 RDS 읽기 복제본을 사용하는 것보다 효율성이 떨어집니다."
        ]
    },
    {
        "Question Number": "37",
        "Situation": "마케팅 팀은 Amazon S3에 저장된 클릭스트림 데이터를 분석하여 사용자 행동에 대한 통찰력을 얻고 웹사이트 참여도를 개선할 필요가 있습니다. 그들은 전체 데이터 웨어하우스를 설정하거나 서버를 관리하지 않고도 이 데이터에 대해 SQL 쿼리를 직접 실행하고 싶어합니다. 또한, 그들은 실제로 쿼리하는 데이터에 대해서만 비용을 지불할 수 있는 솔루션을 원하며, 이를 통해 비용 절감과 최소한의 서버리스 인프라를 유지하고자 합니다.",
        "Question": "어떤 AWS 서비스가 그들의 요구를 가장 잘 충족합니까?",
        "Options": {
            "1": "Amazon Redshift",
            "2": "Amazon EMR",
            "3": "Amazon RDS",
            "4": "Amazon Athena"
        },
        "Correct Answer": "Amazon Athena",
        "Explanation": "Amazon Athena는 사용자가 표준 SQL을 사용하여 Amazon S3에서 데이터를 직접 분석할 수 있는 서버리스 대화형 쿼리 서비스입니다. 이는 즉석 쿼리를 위해 설계되었으며 인프라 관리가 필요하지 않아 마케팅 팀의 요구에 이상적입니다. Athena를 사용하면 사용자는 실행한 쿼리에 대해서만 비용을 지불하므로 인프라를 최소화하면서 비용 절감 목표에 부합합니다.",
        "Other Options": [
            "Amazon Redshift는 클러스터를 설정하고 리소스를 관리해야 하는 완전 관리형 데이터 웨어하우스 서비스입니다. 이는 서버리스가 아니며, 더 높은 비용과 복잡성을 수반하므로 더 간단한 솔루션을 찾고 있는 마케팅 팀에는 적합하지 않습니다.",
            "Amazon EMR(Elastic MapReduce)는 Apache Hadoop 및 Apache Spark와 같은 프레임워크를 사용하여 대량의 데이터를 처리할 수 있는 클라우드 빅데이터 플랫폼입니다. 그러나 이는 Athena와 같은 서버리스 솔루션에 비해 더 많은 관리 및 설정이 필요하므로 팀의 요구에 덜 적합합니다.",
            "Amazon RDS(관계형 데이터베이스 서비스)는 데이터베이스 인스턴스를 프로비저닝하고 관리해야 하는 관리형 관계형 데이터베이스 서비스입니다. 이는 S3에서 직접 데이터를 쿼리하기 위해 설계되지 않았으며 마케팅 팀이 원하는 것보다 더 많은 오버헤드를 수반합니다."
        ]
    },
    {
        "Question Number": "38",
        "Situation": "비디오 제작 회사는 수천 개의 비디오 파일을 저장하고 있으며, 초기 제작 후에는 거의 접근하지 않습니다. 그들은 이러한 파일을 아카이브할 수 있는 비용 효율적인 저장 솔루션을 원하지만 필요할 때 몇 분 이내에 여전히 검색할 수 있기를 원합니다.",
        "Question": "어떤 AWS 저장 서비스가 이러한 요구 사항을 가장 잘 충족합니까?",
        "Options": {
            "1": "Amazon EFS",
            "2": "Amazon S3 Glacier Instant Retrieval",
            "3": "Amazon FSx for Windows File Server",
            "4": "Amazon EBS Provisioned IOPS"
        },
        "Correct Answer": "Amazon S3 Glacier Instant Retrieval",
        "Explanation": "Amazon S3 Glacier Instant Retrieval은 장기 데이터 아카이빙을 위해 특별히 설계되었으며, 일반적으로 밀리초 이내에 데이터를 신속하게 검색할 수 있는 기능을 제공합니다. 이 서비스는 비디오 제작 회사에 이상적이며, 드물게 접근하는 대량의 비디오 파일을 비용 효율적으로 저장하면서 필요할 때 몇 분 이내에 이러한 파일에 접근할 수 있는 기능을 제공합니다. 'Instant Retrieval' 기능은 아카이브된 파일에 대한 신속한 접근 요구 사항과 일치하는 검색 시간을 보장합니다.",
        "Other Options": [
            "Amazon EFS(Elastic File System)는 공유 파일 저장소에 대한 저지연 접근을 위해 설계되었으며, 드물게 접근하는 데이터의 장기 아카이빙에는 비용 효율적이지 않습니다. 이는 데이터에 대한 빈번한 접근이 필요한 애플리케이션에 더 적합합니다.",
            "Amazon FSx for Windows File Server는 완전 관리형 Windows 파일 시스템을 제공하지만 장기 아카이빙에 최적화되어 있지 않습니다. 이는 Windows 호환성과 저지연 접근이 필요한 공유 파일 저장소가 필요한 애플리케이션에 더 적합합니다.",
            "Amazon EBS(Elastic Block Store) Provisioned IOPS는 EC2 인스턴스를 위한 고성능 블록 저장소를 위해 설계되었습니다. 이는 드물게 접근하는 대량의 데이터를 아카이빙하는 데 적합하지 않으며, 더 비쌉니다."
        ]
    },
    {
        "Question Number": "39",
        "Situation": "조직은 EC2 인스턴스의 플릿을 관리하기 위해 Auto Scaling Group(ASG)을 사용하고 있으며, 수요 수준의 변화에 대응하고 있습니다. 그들의 목표는 전체 CPU 사용률 평균을 40%로 유지하기 위해 인스턴스 수를 자동으로 조정하는 것입니다.",
        "Question": "조직이 이 목표를 효과적으로 달성하기 위해 어떤 유형의 스케일링 정책을 구현해야 하며, 그 이유는 무엇입니까?",
        "Options": {
            "1": "수동 스케일링: 실시간 모니터링을 기반으로 원하는 용량에 대한 직접적인 제어를 제공합니다.",
            "2": "예약 스케일링: 예측된 수요 추세에 따라 미리 정해진 시간에 용량을 조정합니다.",
            "3": "목표 추적을 통한 동적 스케일링: 지정된 CPU 사용률 목표를 유지하기 위해 용량을 자동으로 수정합니다.",
            "4": "단순 스케일링: 개별 CPU 임계값 트리거에 따라 용량을 증가 또는 감소시킵니다."
        },
        "Correct Answer": "목표 추적을 통한 동적 스케일링",
        "Explanation": "목표 추적을 통한 동적 스케일링은 전체 CPU 사용률 평균을 40%로 유지하려는 조직의 목표에 가장 효과적인 스케일링 정책입니다. 이 정책은 실시간 메트릭을 기반으로 Auto Scaling Group의 EC2 인스턴스 수를 자동으로 조정하며, 특히 지정된 CPU 사용률 수준을 목표로 합니다. CPU 사용률을 지속적으로 모니터링하고 필요에 따라 조정함으로써 조직은 수동 개입 없이 성능 목표를 달성할 수 있어 자원 사용과 비용을 최적화할 수 있습니다.",
        "Other Options": [
            "수동 스케일링은 원하는 용량을 조정하기 위해 직접적인 인간 개입이 필요하며, 이는 변화하는 수요 수준에 효율적으로 대응하지 못합니다. 이 접근 방식은 특정 CPU 사용률 목표를 효과적으로 유지하는 데 필요한 자동화를 제공하지 않습니다.",
            "예약 스케일링은 미리 정해진 시간에 용량을 조정하지만, 이는 실제 수요 변동과 일치하지 않을 수 있습니다. 이 방법은 실시간 작업 변화에 덜 반응적이며, 자원의 과잉 프로비저닝 또는 부족 프로비저닝을 초래할 수 있습니다.",
            "단순 스케일링은 개별 CPU 임계값 트리거에 따라 용량을 증가 또는 감소시키며, 이는 원하는 평균 40%의 CPU 사용률을 안정화하지 못할 수 있는 빠른 스케일링 작업을 초래할 수 있습니다. 이 방법은 목표 추적의 지속적인 조정 기능이 부족하여 특정 사용률 수준을 유지하는 데 덜 적합합니다."
        ]
    },
    {
        "Question Number": "40",
        "Situation": "회사는 Amazon RDS를 사용하여 고가용성 데이터베이스를 AWS에 배포하고 있으며, 장애 발생 시 대기 인스턴스로 자동 장애 조치를 보장하고자 합니다. 또한 일부 읽기 트래픽을 오프로드하고 읽기 성능을 개선할 필요가 있습니다.",
        "Question": "어떤 Amazon RDS 구성을 선택해야 하며, 어떤 이점을 제공합니까? (두 가지 선택)",
        "Options": {
            "1": "Amazon RDS Multi-AZ 인스턴스 아키텍처를 사용하여 대기 인스턴스로 동기 복제를 제공하고, 같은 리전에서 자동 장애 조치를 제공하며, 성능 향상을 위해 대기 인스턴스에서 백업을 수행합니다.",
            "2": "Amazon RDS Multi-AZ 클러스터 아키텍처를 구성하여 하나의 작성자와 두 개의 읽기 인스턴스를 서로 다른 가용 영역에 배치하여 읽기 트래픽을 오프로드하고 트랜잭션 로그 기반 복제를 통해 더 빠른 장애 조치 시간을 제공합니다.",
            "3": "Amazon RDS를 단일 가용 영역에 설정하고 백업을 위해 S3에 자주 스냅샷을 수행하여 데이터 내구성을 보장하지만 자동 장애 조치를 제공하지 않습니다.",
            "4": "Amazon RDS를 교차 리전 복제로 배포하여 다른 AWS 리전으로 장애 조치를 가능하게 하여 지역적 장애의 위험을 줄이지만 동기 복제를 지원하지 않습니다.",
            "5": "Amazon RDS 읽기 복제본을 같은 리전에서 구현하여 읽기 트래픽을 분산하고 읽기 성능을 향상시키며, 자동 장애 조치를 위한 Multi-AZ 설정을 유지합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon RDS Multi-AZ 인스턴스 아키텍처를 사용하여 대기 인스턴스로 동기 복제를 제공하고, 같은 리전에서 자동 장애 조치를 제공하며, 성능 향상을 위해 대기 인스턴스에서 백업을 수행합니다.",
            "Amazon RDS 읽기 복제본을 같은 리전에서 구현하여 읽기 트래픽을 분산하고 읽기 성능을 향상시키며, 자동 장애 조치를 위한 Multi-AZ 설정을 유지합니다."
        ],
        "Explanation": "첫 번째 정답은 Amazon RDS Multi-AZ 배포가 DB 인스턴스에 대한 고가용성과 장애 조치 지원을 제공하기 때문에 올바릅니다. 이는 다른 가용 영역(AZ)에 있는 대기 인스턴스로 데이터를 자동으로 복제하여 작동합니다. 장애가 발생할 경우 Amazon RDS는 대기 인스턴스로 자동 장애 조치를 수행하여 장애 조치가 완료되는 즉시 데이터베이스 작업을 재개할 수 있습니다. 두 번째 정답은 Amazon RDS 읽기 복제본이 데이터베이스(DB) 인스턴스에 대한 성능과 내구성을 향상시키기 때문에 올바릅니다. 이 기능은 읽기 중심의 데이터베이스 작업 부하에 대해 단일 DB 인스턴스의 용량 제약을 넘어 탄력적으로 확장할 수 있도록 합니다.",
        "Other Options": [
            "옵션 'Amazon RDS Multi-AZ 클러스터 아키텍처를 구성하여 하나의 작성자와 두 개의 읽기 인스턴스를 서로 다른 가용 영역에 배치하여 읽기 트래픽을 오프로드하고 트랜잭션 로그 기반 복제를 통해 더 빠른 장애 조치 시간을 제공합니다.'는 Amazon RDS가 Multi-AZ 배포에서 하나의 작성자와 두 개의 읽기 인스턴스를 지원하지 않기 때문에 잘못된 것입니다.",
            "옵션 'Amazon RDS를 단일 가용 영역에 설정하고 백업을 위해 S3에 자주 스냅샷을 수행하여 데이터 내구성을 보장하지만 자동 장애 조치를 제공하지 않습니다.'는 이 설정이 자동 장애 조치를 제공하지 않기 때문에 잘못된 것입니다.",
            "옵션 'Amazon RDS를 교차 리전 복제로 배포하여 다른 AWS 리전으로 장애 조치를 가능하게 하여 지역적 장애의 위험을 줄이지만 동기 복제를 지원하지 않습니다.'는 교차 리전 복제가 자동 장애 조치에 필요한 동기 복제를 지원하지 않기 때문에 잘못된 것입니다."
        ]
    },
    {
        "Question Number": "41",
        "Situation": "공용 서브넷에서 실행 중인 애플리케이션이 프라이빗 서브넷에 호스팅된 Amazon RDS 데이터베이스와 안전하게 통신해야 합니다.",
        "Question": "데이터베이스에 대한 안전한 액세스를 허용하기 위해 애플리케이션을 어떻게 구성해야 합니까?",
        "Options": {
            "1": "RDS 보안 그룹에 인터넷에서 모든 트래픽을 허용하는 인바운드 규칙 추가",
            "2": "NAT 게이트웨이를 사용하여 공용 서브넷에서 프라이빗 서브넷으로 트래픽 라우팅",
            "3": "공용 서브넷과 프라이빗 서브넷 간에 VPC 피어링 연결 생성",
            "4": "EC2 인스턴스를 데이터베이스의 프라이빗 IP 주소를 사용하도록 구성하고 RDS 보안 그룹을 통해 액세스를 허용"
        },
        "Correct Answer": "EC2 인스턴스를 데이터베이스의 프라이빗 IP 주소를 사용하도록 구성하고 RDS 보안 그룹을 통해 액세스를 허용",
        "Explanation": "공용 서브넷의 EC2 인스턴스가 프라이빗 서브넷의 RDS 데이터베이스에 안전하게 접근할 수 있도록 하려면, EC2 인스턴스가 데이터베이스의 프라이빗 IP 주소를 사용하여 연결해야 합니다. 이는 트래픽이 공용 인터넷을 통과하지 않도록 하여 보안을 유지합니다. 또한, RDS 보안 그룹은 EC2 인스턴스의 보안 그룹에서 인바운드 트래픽을 허용하도록 구성되어야 하며, 이를 통해 승인된 트래픽만 허용됩니다.",
        "Other Options": [
            "RDS 보안 그룹에 인터넷에서 모든 트래픽을 허용하는 인바운드 규칙을 추가하는 것은 안전하지 않으며 권장되지 않습니다. 이는 RDS 데이터베이스를 인터넷의 모든 출처로부터의 잠재적 공격에 노출시켜 보안을 위협합니다.",
            "NAT 게이트웨이를 사용하여 공용 서브넷에서 프라이빗 서브넷으로 트래픽을 라우팅하는 것은 이 시나리오에서는 필요하지 않습니다. NAT 게이트웨이는 일반적으로 프라이빗 서브넷의 인스턴스가 인터넷에 접근할 수 있도록 하는 데 사용되며, 동일한 VPC 내의 공용 및 프라이빗 서브넷 간의 통신에는 사용되지 않습니다.",
            "공용 서브넷과 프라이빗 서브넷 간에 VPC 피어링 연결을 생성하는 것은 불필요합니다. 두 서브넷 모두 이미 동일한 VPC의 일부이기 때문입니다. VPC 피어링은 서로 다른 VPC를 연결하는 데 사용되며, 동일한 VPC 내의 서브넷 간에는 사용되지 않습니다."
        ]
    },
    {
        "Question Number": "42",
        "Situation": "생명공학 회사가 복원력과 확장성을 위해 여러 가용 영역에서 컨테이너 오케스트레이션이 필요한 고성능 애플리케이션을 배포하고 있습니다. 그들은 보안을 위해 IAM과 스토리지를 위해 EBS와 통합된 관리 솔루션을 선호합니다. 또한 플랫폼은 오픈 소스이며 클라우드에 구애받지 않아 향후 AWS 외부에서의 배포에 유연성을 제공해야 합니다.",
        "Question": "어떤 AWS 서비스 구성이 이러한 요구 사항을 가장 잘 충족합니까?",
        "Options": {
            "1": "Amazon ECS와 Fargate 및 EBS 통합",
            "2": "Amazon EKS와 관리형 노드 그룹 및 다중 AZ 제어 플레인",
            "3": "Docker와 교차 AZ 복제를 사용하는 Amazon EC2 인스턴스",
            "4": "교차 지역 복제를 사용하는 AWS Batch"
        },
        "Correct Answer": "Amazon EKS와 관리형 노드 그룹 및 다중 AZ 제어 플레인",
        "Explanation": "Amazon EKS(Elastic Kubernetes Service)는 여러 가용 영역에서 컨테이너 오케스트레이션을 제공하는 관리형 Kubernetes 서비스로, 복원력과 확장성을 보장합니다. IAM과 EBS와 같은 AWS 서비스와 원활하게 통합됩니다. EKS는 또한 오픈 소스이며 클라우드에 구애받지 않아 AWS 외부에서의 향후 배포에 유연성을 제공합니다. 관리형 노드 그룹은 기본 EC2 인스턴스의 관리를 간소화하며, 다중 AZ 제어 플레인은 가용성과 내결함성을 향상시킵니다.",
        "Other Options": [
            "Amazon ECS와 Fargate 및 EBS 통합은 컨테이너 오케스트레이션을 위한 실행 가능한 옵션이지만, EKS만큼 클라우드에 구애받지 않습니다. ECS는 AWS 서비스와 더 밀접하게 통합되어 있으며, AWS 외부에서의 향후 배포에 대한 유연성을 제공하지 않습니다.",
            "Docker와 교차 AZ 복제를 사용하는 Amazon EC2 인스턴스는 EKS와 같은 관리형 서비스에 비해 더 많은 수동 관리와 설정이 필요합니다. 원하는 결과를 달성할 수 있지만, AWS 서비스와의 통합 수준이나 관리형 솔루션에서 제공하는 사용 용이성을 제공하지 않습니다.",
            "교차 지역 복제를 사용하는 AWS Batch는 배치 처리를 위해 설계되었으며, 지속적인 고성능 애플리케이션에는 적합하지 않습니다. 설명된 시나리오에 필요한 컨테이너 오케스트레이션 기능을 제공하지 않으며, 실시간 확장성과 복원력이 필요한 애플리케이션에는 적합하지 않습니다."
        ]
    },
    {
        "Question Number": "43",
        "Situation": "금융 서비스 회사는 실시간 데이터 처리 및 거래 작업을 지원하기 위해 온프레미스 데이터 센터와 AWS 간의 안전하고 저지연 연결이 필요합니다. 신뢰성을 보장하면서 네트워크 비용을 줄이기 위해, 회사는 공용 인터넷을 우회하여 관련된 보안 및 성능 위험을 피하는 중요한 데이터 전송을 위한 사설 일관된 연결을 찾고 있습니다.",
        "Question": "어떤 네트워크 연결 옵션이 이러한 요구를 가장 잘 충족합니까?",
        "Options": {
            "1": "AWS Site-to-Site VPN을 설정하여 공용 인터넷을 통한 암호화된 데이터 전송을 허용하는 저비용 솔루션",
            "2": "전용 사설 네트워크 연결을 제공하는 AWS Direct Connect를 설정하여 안전하고 일관된 대역폭 제공",
            "3": "정기 인터넷 연결과 AWS Shield를 사용하여 DDoS 공격으로부터 보호하고 보안 보장",
            "4": "VPC 피어링을 구성하여 온프레미스 데이터 센터와 AWS 간의 직접 연결을 설정하여 안전한 연결 제공"
        },
        "Correct Answer": "전용 사설 네트워크 연결을 제공하는 AWS Direct Connect를 설정하여 안전하고 일관된 대역폭 제공",
        "Explanation": "AWS Direct Connect는 온프레미스 데이터 센터와 AWS 간의 전용 사설 연결을 제공하도록 특별히 설계되었습니다. 이 옵션은 공용 인터넷을 우회하여 저지연, 높은 신뢰성 및 중요한 데이터 전송에 대한 보안을 보장합니다. 이는 실시간 데이터 처리 및 거래 작업에 이상적이며, 전통적인 인터넷 연결에 비해 일관된 대역폭과 네트워크 비용 절감을 제공합니다.",
        "Other Options": [
            "AWS Site-to-Site VPN을 설정하면 공용 인터넷을 통한 암호화된 데이터 전송이 가능하지만, 사설 연결 요구 사항을 충족하지 않습니다. 저비용 솔루션이지만, 공용 인터넷 트래픽과 관련된 지연 및 잠재적 보안 위험을 초래합니다.",
            "정기 인터넷 연결과 AWS Shield를 사용하는 것은 DDoS 공격으로부터 보호를 제공하지만, 회사가 요구하는 전용 사설 연결을 제공하지 않습니다. 이 옵션은 여전히 공용 인터넷에 의존하므로 성능 문제와 보안 취약점이 발생할 수 있습니다.",
            "VPC 피어링을 구성하면 두 VPC 간의 직접 연결이 생성되지만, 온프레미스 데이터 센터와 AWS 간의 연결을 설정하지 않습니다. 이는 회사의 요구에 적합하지 않으며, 안전하고 일관된 데이터 전송을 위한 전용 사설 네트워크 연결을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "44",
        "Situation": "회사는 여러 지리적 지역의 사용자에게 높은 가용성과 저지연성을 요구하는 글로벌 복원력 애플리케이션을 설계하고 있습니다. 또한 한 지역이나 가용 영역(AZ)에서의 실패가 다른 곳의 애플리케이션 가용성에 영향을 미치지 않도록 하기를 원합니다.",
        "Question": "AWS의 글로벌 인프라를 활용하여 이러한 요구를 가장 잘 지원하는 AWS 서비스 또는 기능은 무엇입니까?",
        "Options": {
            "1": "Amazon Route 53을 사용하여 지연 기반 라우팅으로 사용자를 가장 가까운 AWS 지역으로 안내하여 저지연성을 높이고 지역적 결함 격리를 가능하게 합니다.",
            "2": "AWS 지역 내 단일 가용 영역에 애플리케이션을 배포하고, 스냅샷을 사용하여 데이터를 백업하여 복원력을 확보합니다.",
            "3": "Amazon S3와 교차 지역 복제를 사용하여 단일 지역 내 여러 가용 영역에 데이터를 미러링합니다.",
            "4": "Amazon CloudFront 엣지 위치를 사용하여 글로벌하게 배포하여 저지연 액세스를 보장하되, 지역 또는 AZ 수준에서 완전한 결함 격리를 제공하지 않습니다."
        },
        "Correct Answer": "Amazon Route 53을 사용하여 지연 기반 라우팅으로 사용자를 가장 가까운 AWS 지역으로 안내하여 저지연성을 높이고 지역적 결함 격리를 가능하게 합니다.",
        "Explanation": "Amazon Route 53은 지연 기반 라우팅을 제공하는 고가용성 및 확장 가능한 도메인 이름 시스템(DNS) 웹 서비스입니다. 이 기능을 통해 애플리케이션은 사용자를 가장 가까운 AWS 지역으로 안내하여 지연을 최소화하고 성능을 향상시킵니다. 또한, 트래픽을 다른 지역으로 라우팅함으로써 한 지역에서 실패가 발생하더라도 사용자가 다른 지역에서 애플리케이션에 계속 접근할 수 있도록 하여 지역적 결함 격리와 높은 가용성을 제공합니다.",
        "Other Options": [
            "AWS 지역 내 단일 가용 영역에 애플리케이션을 배포하는 것은 필요한 복원력이나 높은 가용성을 제공하지 않습니다. 해당 AZ가 실패하면 애플리케이션이 완전히 사용할 수 없게 되어 결함 격리 요구 사항에 반합니다.",
            "Amazon S3와 교차 지역 복제를 사용하는 것은 데이터 내구성과 가용성만을 다루며, 사용자에게 저지연성을 보장하거나 애플리케이션 수준의 결함 격리를 제공하지 않습니다. 이는 주로 데이터 저장에 중점을 두고 있으며, 지역 간 애플리케이션 성능을 보장하지 않습니다.",
            "Amazon CloudFront 엣지 위치를 사용하여 글로벌하게 배포하면 콘텐츠 전송의 지연을 개선할 수 있지만, 지역 또는 AZ 수준에서 완전한 결함 격리를 제공하지 않습니다. 특정 지역의 원본 서버가 실패하면 사용자가 여전히 다운타임을 경험할 수 있어 높은 가용성 요구 사항을 충족하지 않습니다."
        ]
    },
    {
        "Question Number": "45",
        "Situation": "미디어 회사는 전 세계 청중에게 콘텐츠를 신속하게 전달하여 지연을 줄이고 사용자 경험을 개선해야 합니다. 또한 원본 서버의 부하를 줄이기 위해 사용자 가까이에 콘텐츠를 캐시하고자 합니다.",
        "Question": "어떤 AWS 서비스가 이러한 요구 사항을 가장 잘 충족하며, 어떤 이점을 제공합니까?",
        "Options": {
            "1": "Amazon CloudFront",
            "2": "Amazon S3",
            "3": "AWS Direct Connect",
            "4": "Amazon API Gateway"
        },
        "Correct Answer": "Amazon CloudFront",
        "Explanation": "Amazon CloudFront는 전 세계 엣지 위치에서 콘텐츠를 캐시하는 콘텐츠 전송 네트워크(CDN) 서비스입니다. 이를 통해 지연을 줄이고 사용자에게 콘텐츠를 더 빠르게 전달할 수 있으며, 콘텐츠가 사용자에게 더 가까운 위치에서 제공됩니다. CloudFront는 사용자 가까이에 콘텐츠를 캐시함으로써 원본 서버의 부하를 줄여 전반적인 성능과 사용자 경험을 개선합니다. 이는 전 세계 청중에게 콘텐츠를 신속하고 효율적으로 전달하려는 미디어 회사에 가장 적합한 선택입니다.",
        "Other Options": [
            "Amazon S3는 데이터를 저장하고 검색할 수 있는 확장 가능한 스토리지 서비스입니다. 콘텐츠를 저장하는 데 사용할 수 있지만, 이 시나리오에서 지연을 줄이고 사용자 경험을 개선하는 데 필수적인 캐싱 및 글로벌 배포 기능을 제공하지 않습니다.",
            "AWS Direct Connect는 귀하의 시설과 AWS 간의 전용 네트워크 연결을 제공하는 서비스입니다. 이는 AWS 서비스에 대한 사설 연결을 설정하는 데 주로 사용되며, 데이터 전송의 대역폭을 개선하고 지연을 줄일 수 있지만, 글로벌 청중을 위한 콘텐츠 전송 및 캐싱 요구 사항을 해결하지 않습니다.",
            "Amazon API Gateway는 API를 생성, 게시 및 관리하기 위한 서비스입니다. 서버리스 애플리케이션을 구축하고 API 호출을 관리하는 데 도움이 될 수 있지만, 미디어 콘텐츠를 전 세계 청중에게 신속하게 전달하기 위해 필요한 콘텐츠 전송 및 캐싱 기능을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "46",
        "Situation": "의료 제공자가 AWS에 환자 데이터를 저장하고 있으며, 데이터 보호 및 개인 정보 보호 규정을 준수해야 합니다. 이 규정은 엄격한 접근 제어 및 데이터 생애 주기 관리를 요구합니다. 제공자는 데이터 접근이 권한이 있는 사용자로 제한되고, 데이터가 암호화되며, 오래된 데이터가 정책에 따라 보관되거나 삭제되도록 해야 합니다.",
        "Question": "의료 제공자가 안전한 데이터 접근, 생애 주기 관리 및 보호를 위한 정책을 구현하기 위해 어떤 조치를 취해야 합니까?",
        "Options": {
            "1": "IAM 정책을 사용하여 데이터 접근을 제어하고, S3 생애 주기 정책을 구현하여 데이터 노후화를 관리하며, AWS KMS를 통해 암호화를 구성합니다.",
            "2": "모든 데이터를 Amazon Glacier에 저장하여 보관하고, 5년 후에 데이터를 자동으로 삭제합니다.",
            "3": "AWS CloudTrail 로깅을 활성화하여 모든 데이터를 자동으로 보관하고, 추가 정책 없이 데이터 생애 주기 관리를 보장합니다.",
            "4": "AWS Shield를 사용하여 생애 주기를 관리하고 규정을 준수하여 민감한 데이터에 대한 접근을 제어합니다."
        },
        "Correct Answer": "IAM 정책을 사용하여 데이터 접근을 제어하고, S3 생애 주기 정책을 구현하여 데이터 노후화를 관리하며, AWS KMS를 통해 암호화를 구성합니다.",
        "Explanation": "이 옵션은 의료 제공자의 안전한 데이터 접근, 생애 주기 관리 및 데이터 보호 요구를 포괄적으로 해결하기 때문에 올바릅니다. IAM(Identity and Access Management) 정책을 사용하면 제공자가 특정 데이터에 접근할 수 있는 사용자를 정의할 수 있어 권한이 있는 사용자만 접근할 수 있도록 보장합니다. S3 생애 주기 정책은 제공자가 데이터를 다른 저장 클래스으로 자동 전환하거나 지정된 기간 후에 삭제하도록 하여 데이터 노후화를 효과적으로 관리할 수 있게 합니다. 또한, AWS KMS(Key Management Service)를 사용한 암호화는 데이터가 저장 중 및 전송 중 모두 보호되도록 하여 데이터 보호 규정을 준수합니다.",
        "Other Options": [
            "이 옵션은 Amazon Glacier에 데이터를 저장하는 것이 좋은 보관 방법이지만, 접근 제어나 암호화에 대한 포괄적인 솔루션을 제공하지 않기 때문에 잘못된 것입니다. 또한, 단순한 보관 및 5년 후 삭제를 넘어 데이터 접근이나 생애 주기 정책 관리의 필요성을 다루지 않습니다.",
            "이 옵션은 AWS CloudTrail 로깅을 활성화하는 것이 주로 API 호출의 감사 및 모니터링을 위한 것이며, 데이터 생애 주기나 접근 제어를 직접적으로 관리하지 않기 때문에 잘못된 것입니다. CloudTrail은 데이터를 자동으로 보관하거나 생애 주기 관리 정책을 시행하지 않으며, 이러한 목표를 달성하기 위해 추가 구성이 필요합니다.",
            "이 옵션은 AWS Shield가 DDoS 공격으로부터 애플리케이션을 보호하기 위해 설계된 서비스이며, 생애 주기 관리나 접근 제어 기능을 제공하지 않기 때문에 잘못된 것입니다. 이 옵션은 시나리오에서 설명된 데이터 보호 및 규정 준수의 특정 요구를 다루지 않습니다."
        ]
    },
    {
        "Question Number": "47",
        "Situation": "한 전자상거래 회사가 신뢰성과 확장성을 개선하기 위해 주문 처리 시스템을 재설계하고 있습니다. 이 시스템은 높은 주문량을 처리해야 하며, 구성 요소 실패가 발생하더라도 각 주문이 정확히 한 번만 처리되도록 해야 합니다.",
        "Question": "솔루션 아키텍트가 주문 제출을 주문 처리 구성 요소와 효과적으로 분리하기 위해 어떤 AWS 서비스를 구현해야 합니까?",
        "Options": {
            "1": "Amazon SNS (Simple Notification Service)",
            "2": "Amazon SQS (Simple Queue Service)",
            "3": "AWS Step Functions",
            "4": "Amazon MQ"
        },
        "Correct Answer": "Amazon SQS (Simple Queue Service)",
        "Explanation": "Amazon SQS는 마이크로서비스, 분산 시스템 및 서버리스 애플리케이션의 분리를 가능하게 하는 완전 관리형 메시지 큐 서비스입니다. 주문 제출 구성 요소가 메시지를 큐에 보내면, 주문 처리 구성 요소가 독립적으로 이를 처리할 수 있습니다. 이는 SQS가 최소 한 번의 전송을 제공하고 중복 제거 기능을 사용하여 정확히 한 번 처리되도록 구성할 수 있기 때문에, 구성 요소 실패가 발생하더라도 각 주문이 정확히 한 번만 처리되도록 보장합니다. 또한, SQS는 높은 메시지 볼륨을 처리할 수 있어 전자상거래 시스템의 확장성 요구에 적합합니다.",
        "Other Options": [
            "Amazon SNS (Simple Notification Service)는 주로 pub/sub 메시징에 사용되며, 정확히 한 번 처리되도록 보장하는 방식으로 주문 제출과 처리를 분리하기 위해 설계되지 않았습니다. SNS는 메시지를 여러 구독자에게 방송하는 데 더 적합합니다.",
            "AWS Step Functions는 여러 AWS 서비스를 서버리스 워크플로로 조정할 수 있는 서버리스 오케스트레이션 서비스입니다. 복잡한 워크플로를 관리할 수 있지만, SQS와 같은 구성 요소 분리를 위해 특별히 설계되지 않았습니다. 이는 메시지 큐 처리를 다루기보다는 작업을 조정하는 데 더 적합합니다.",
            "Amazon MQ는 다양한 메시징 프로토콜을 지원하는 관리형 메시지 브로커 서비스입니다. 구성 요소를 분리하는 데 사용할 수 있지만, SQS에 비해 설정 및 관리가 더 복잡합니다. 또한, SQS가 제공하는 높은 볼륨의 주문 처리를 위한 확장성과 신뢰성을 제공하지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "48",
        "Situation": "한 미디어 회사가 여러 부서에서 사용하는 Amazon RDS를 통해 데이터베이스 비용을 추적하고 각 부서에 할당하여 비용을 이해하고 사용을 최적화하고자 합니다.",
        "Question": "어떤 AWS 비용 관리 기능이 이들을 가장 잘 도와줄 수 있습니까? (두 가지 선택)",
        "Options": {
            "1": "부서 간 다중 계정 청구 활성화",
            "2": "부서별로 각 RDS 데이터베이스 인스턴스에 비용 할당 태그 적용",
            "3": "각 부서에 대해 별도의 AWS 예산 설정",
            "4": "모든 부서 데이터베이스에 AWS 무료 사용 계층 사용",
            "5": "부서별 기준에 따라 비용을 그룹화하기 위해 AWS 비용 범주 구현"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "부서별로 각 RDS 데이터베이스 인스턴스에 비용 할당 태그 적용",
            "부서별 기준에 따라 비용을 그룹화하기 위해 AWS 비용 범주 구현"
        ],
        "Explanation": "부서별로 각 RDS 데이터베이스 인스턴스에 비용 할당 태그를 적용하면 회사가 각 부서에 비용을 추적하고 할당할 수 있습니다. 이러한 태그는 상세 청구 보고서에서 비용을 분류하는 데 사용될 수 있습니다. AWS 비용 범주는 부서별 기준에 따라 비용을 그룹화하는 데 사용될 수 있습니다. 이를 통해 회사는 비용을 보고 관리하는 방식을 사용자 정의할 수 있으며, 각 부서의 AWS 리소스 사용과 관련된 비용을 이해하는 데 도움이 될 수 있습니다.",
        "Other Options": [
            "부서 간 다중 계정 청구를 활성화하는 것은 각 부서가 자체 AWS 계정을 가져야 하므로 최선의 해결책이 아닙니다. 이 옵션은 또한 각 부서에 비용을 추적하고 할당하는 데 직접적으로 도움이 되지 않습니다.",
            "각 부서에 대해 별도의 AWS 예산을 설정하는 것은 비용 관리에 도움이 될 수 있지만, 각 부서에 비용을 추적하고 할당하는 데 직접적으로 도움이 되지 않습니다. 이는 비용을 추적하고 할당하기보다는 지출 한도를 설정하고 관리하는 것에 더 가깝습니다.",
            "모든 부서 데이터베이스에 AWS 무료 사용 계층을 사용하는 것은 실행 가능한 해결책이 아닙니다. 무료 사용 계층에는 사용 한도가 있으며, 여러 부서에서 여러 애플리케이션을 사용하는 미디어 회사는 이러한 한도를 초과할 가능성이 높습니다. 또한, 이 옵션은 비용을 추적하고 할당하는 데 도움이 되지 않습니다."
        ]
    },
    {
        "Question Number": "49",
        "Situation": "한 조직이 제3자 공급업체에게 AWS 계정 내 특정 리소스에 대한 임시 접근을 제공해야 합니다. 공급업체의 접근은 특정 기간으로 제한되어야 하며, 조직은 공급업체가 IAM 사용자로 직접 로그인할 수 없도록 하기를 원합니다.",
        "Question": "조직이 공급업체에게 안전하고 임시 접근을 부여하기 위해 어떤 접근 방식을 취해야 합니까? (두 가지 선택)",
        "Options": {
            "1": "공급업체를 위한 IAM 사용자를 생성하고 필요한 권한을 부여한 후, 더 이상 접근이 필요하지 않을 때 사용자 계정을 삭제합니다.",
            "2": "필요한 권한이 있는 IAM 그룹을 설정하고, 공급업체를 그룹에 추가한 후, 더 이상 접근이 필요하지 않을 때 제거합니다.",
            "3": "IAM 역할과 보안 토큰 서비스(STS)를 사용하여 공급업체에게 역할 승인을 통해 임시 접근을 제공합니다.",
            "4": "루트 계정에 정책을 연결하여 공급업체에게 임시 접근을 허용하고, 필요한 기간이 지나면 이를 제거합니다.",
            "5": "AWS IAM Identity Center (AWS Single Sign-On)를 사용하여 공급업체에게 임시 접근 역할을 할당합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "IAM 역할과 보안 토큰 서비스(STS)를 사용하여 공급업체에게 역할 승인을 통해 임시 접근을 제공합니다.",
            "AWS IAM Identity Center (AWS Single Sign-On)를 사용하여 공급업체에게 임시 접근 역할을 할당합니다."
        ],
        "Explanation": "IAM 역할과 보안 토큰 서비스(STS)는 AWS 리소스에 대한 임시 접근을 제공하도록 설계되었습니다. 역할 승인을 사용하여 공급업체에게 필요한 권한을 부여할 수 있으며, 영구적인 IAM 사용자를 생성할 필요가 없습니다. 권한은 역할을 제거함으로써 간단히 철회할 수 있습니다. AWS IAM Identity Center (AWS Single Sign-On)도 임시 접근 할당을 허용하며, 공급업체의 접근이 더 이상 필요하지 않을 때 철회할 수 있습니다. 이 두 가지 방법 모두 공급업체가 IAM 사용자로 직접 로그인할 수 없도록 보장하여 조직의 요구를 충족합니다.",
        "Other Options": [
            "공급업체를 위한 IAM 사용자를 생성하고 접근이 더 이상 필요하지 않을 때 삭제하는 것은 권장되지 않는 접근 방식입니다. 이는 영구적인 IAM 사용자를 생성하고 관리하는 것을 포함하며, 보안 위험이 될 수 있습니다. 또한, 이는 공급업체가 IAM 사용자로 직접 로그인하는 것을 방지하지 않습니다.",
            "IAM 그룹을 설정하고 공급업체를 그룹에 추가하는 것도 권장되지 않는 접근 방식입니다. 이는 그룹 수준에서 권한을 관리할 수 있지만, 여전히 공급업체를 위한 영구적인 IAM 사용자를 생성하는 것을 포함하므로 이 시나리오에서는 바람직하지 않습니다.",
            "루트 계정에 정책을 연결하여 공급업체에게 임시 접근을 허용하는 것은 좋은 관행이 아닙니다. 루트 계정은 AWS 계정의 모든 리소스에 대한 전체 접근 권한을 가지고 있으며, 일상적인 상호작용이나 제3자에게 임시 접근을 부여하는 데 사용하는 것은 권장되지 않습니다."
        ]
    },
    {
        "Question Number": "50",
        "Situation": "한 미디어 제작 회사가 20 PB의 아카이브된 고화질 비디오 영상을 온프레미스 스토리지에서 AWS로 장기 저장 및 가끔 처리하기 위해 마이그레이션해야 합니다. 데이터는 여러 사이트에 분산되어 있으며, 회사는 비용 효율적이고 전송 과정에서 일부 데이터 처리 기능을 제공하는 솔루션을 선호합니다.",
        "Question": "어떤 AWS 데이터 마이그레이션 솔루션이 회사의 요구에 가장 적합합니까?",
        "Options": {
            "1": "AWS Snowball 80 TB 장치",
            "2": "AWS Snowball Edge 스토리지 최적화 장치",
            "3": "AWS Snowmobile",
            "4": "AWS Direct Connect 전용 연결"
        },
        "Correct Answer": "AWS Snowball Edge 스토리지 최적화 장치",
        "Explanation": "AWS Snowball Edge 스토리지 최적화 장치는 대량의 데이터(장치당 최대 100 TB)를 전송할 수 있으며, 장치 내에서 처리 기능도 제공하므로 회사의 요구에 가장 적합합니다. 이는 회사가 아카이브된 영상을 가끔 처리해야 하는 요구를 충족하기 위해 전송 중 일부 데이터 처리를 수행할 수 있게 합니다. 또한, Snowball Edge 장치는 엣지 컴퓨팅을 위해 설계되어 여러 사이트에서 데이터를 효율적으로 처리할 수 있습니다.",
        "Other Options": [
            "AWS Snowball 80 TB 장치는 대량 데이터 전송을 처리할 수 있지만, Snowball Edge 장치만큼의 처리 기능을 제공하지 않기 때문에 최선의 선택이 아닙니다. 회사는 전송 중 일부 처리 기능이 필요하므로 Snowball은 이를 제공하지 않습니다.",
            "AWS Snowmobile은 매우 대량의 데이터 마이그레이션(최대 100 PB)에 적합한 옵션이지만, 데이터가 단일 사이트에 위치하고 대규모 물리적 전송이 필요한 시나리오에 더 적합합니다. 데이터가 여러 사이트에 분산되어 있고 회사가 더 유연한 솔루션을 선호하므로 Snowmobile은 최선의 선택이 아닙니다.",
            "AWS Direct Connect는 AWS에 전용 네트워크 연결을 제공하여 데이터 전송을 용이하게 할 수 있지만, 대량의 데이터를 효율적으로 마이그레이션하거나 전송 중 처리 기능을 제공하는 수단을 본질적으로 제공하지 않습니다. 이 옵션은 Snowball Edge를 사용하는 것에 비해 비용이 더 많이 들고 회사의 특정 요구에 덜 효과적일 것입니다."
        ]
    },
    {
        "Question Number": "51",
        "Situation": "한 회사가 AWS 환경의 네트워크 보안을 구성하고 있으며 상태 저장 및 비상태 방화벽의 동작을 이해하고자 합니다. 보안 팀은 클라이언트가 회사의 웹 서버에 HTTPS 연결을 시작할 수 있도록 허용하고 응답이 올바르게 반환되도록 해야 합니다.",
        "Question": "회사가 이 연결을 허용하기 위해 보안 규칙을 어떻게 구성해야 하며 상태 저장 및 비상태 필터링의 차이를 이해해야 합니까?",
        "Options": {
            "1": "상태 저장 방화벽을 사용하여 아웃바운드 요청에 대한 인바운드 응답을 자동으로 허용하고 클라이언트에서 서버로의 HTTPS(포트 443) 아웃바운드 규칙만 구성합니다.",
            "2": "비상태 방화벽을 사용하여 포트 443에서 아웃바운드 및 인바운드 규칙을 모두 구성하여 클라이언트에서 서버로의 HTTPS 트래픽과 서버에서 클라이언트로의 응답을 허용합니다.",
            "3": "상태 저장 방화벽을 사용하여 포트 443에서 아웃바운드 및 인바운드 규칙을 모두 구성합니다. 상태 저장 방화벽은 연결 상태를 자동으로 추적하지 않기 때문입니다.",
            "4": "비상태 방화벽을 사용하여 포트 443에서 인바운드 규칙만 구성합니다. 아웃바운드 응답은 자동으로 허용됩니다."
        },
        "Correct Answer": "상태 저장 방화벽을 사용하여 아웃바운드 요청에 대한 인바운드 응답을 자동으로 허용하고 클라이언트에서 서버로의 HTTPS(포트 443) 아웃바운드 규칙만 구성합니다.",
        "Explanation": "상태 저장 방화벽은 활성 연결의 상태를 추적하고 설정된 연결에 대한 반환 트래픽을 자동으로 허용합니다. 이 시나리오에서 클라이언트가 웹 서버에 HTTPS 연결을 시작하면 상태 저장 방화벽은 별도의 인바운드 규칙 없이 서버에서 클라이언트로의 인바운드 응답을 허용합니다. 따라서 클라이언트에서 서버로의 HTTPS 트래픽에 대한 아웃바운드 규칙만 필요하며, 상태 저장 방화벽이 해당 인바운드 트래픽을 자동으로 처리합니다.",
        "Other Options": [
            "비상태 방화벽을 사용하면 인바운드 및 아웃바운드 트래픽에 대한 명시적인 규칙이 필요합니다. 따라서 HTTPS에 대한 아웃바운드 규칙만 구성하면 서버의 응답이 클라이언트에 도달하지 못합니다. 비상태 방화벽은 연결 상태를 추적하지 않으며 인바운드 응답을 차단합니다.",
            "이 옵션은 상태 저장 방화벽이 자동으로 연결 상태를 추적하지 않는다고 잘못 설명하고 있습니다. 실제로 상태 저장 방화벽은 연결 상태를 추적하므로 초기 요청에 대해 아웃바운드 규칙만 필요하며 인바운드 응답을 자동으로 허용합니다.",
            "이 옵션은 비상태 방화벽이 아웃바운드 응답을 자동으로 허용하지 않기 때문에 잘못된 것입니다. 양방향 모두에 대한 명시적인 규칙이 필요합니다. 인바운드 규칙만 구성하면 서버의 응답이 클라이언트에 도달하지 못합니다. 아웃바운드 요청에 대한 해당 규칙이 없기 때문입니다."
        ]
    },
    {
        "Question Number": "52",
        "Situation": "한 소매 회사가 사용자 행동 패턴을 분석하고 고객 참여를 개선하기 위해 고트래픽 전자상거래 웹사이트에서 실시간 클릭스트림 데이터를 수집하고자 합니다. 데이터는 Amazon Redshift로 분석을 위해, Amazon S3로 장기 보관을 위해 전달되기 전에 데이터 정리 및 태깅을 포함하여 즉시 변환되어야 합니다. 회사는 최소한의 운영 오버헤드와 실시간 변환 기능을 갖춘 관리형 확장 가능한 솔루션을 찾고 있습니다.",
        "Question": "이 요구 사항을 가장 잘 충족하는 AWS 서비스 구성은 무엇입니까?",
        "Options": {
            "1": "Amazon Kinesis Data Streams와 AWS Lambda를 함께 사용하여 데이터를 실시간으로 변환한 후 Amazon S3에 저장합니다.",
            "2": "AWS Lambda 함수를 사용하여 실시간 변환을 위한 Amazon Kinesis Data Firehose를 구현하고 변환된 데이터를 Amazon Redshift와 Amazon S3 모두에 전달하도록 구성합니다.",
            "3": "Amazon S3를 주요 데이터 저장소로 사용하고 AWS Glue를 사용하여 데이터를 변환한 후 Amazon Redshift에 로드합니다.",
            "4": "Amazon Managed Streaming for Apache Kafka를 설정하여 스트리밍 데이터 수집을 처리하고 AWS Lambda가 변환을 수행한 후 Redshift에 전달합니다."
        },
        "Correct Answer": "AWS Lambda 함수를 사용하여 실시간 변환을 위한 Amazon Kinesis Data Firehose를 구현하고 변환된 데이터를 Amazon Redshift와 Amazon S3 모두에 전달하도록 구성합니다.",
        "Explanation": "Amazon Kinesis Data Firehose는 실시간 데이터 수집 및 변환을 위해 특별히 설계되었습니다. AWS Lambda와의 원활한 통합을 허용하여 필요한 데이터 정리 및 태깅을 즉시 수행할 수 있습니다. 이 구성은 소매 회사가 클릭스트림 데이터를 효율적으로 수집하고 실시간으로 처리하여 변환된 데이터를 Amazon Redshift로 분석 및 Amazon S3로 장기 저장할 수 있게 합니다. 이 솔루션은 관리형이며 확장 가능하여 운영 오버헤드를 최소화하면서 지속적인 데이터 흐름 요구 사항을 충족합니다.",
        "Other Options": [
            "Amazon Kinesis Data Streams와 AWS Lambda를 사용하는 것은 실시간 데이터 처리에 대한 실행 가능한 옵션이지만, Amazon Redshift와 Amazon S3 모두에 대한 데이터 전달을 관리하기 위해 추가 단계가 필요하므로 Kinesis Data Firehose를 사용하는 것보다 덜 간단합니다.",
            "Amazon S3를 주요 데이터 저장소로 사용하고 AWS Glue를 사용하여 데이터 변환을 배치 처리하는 것은 실시간 데이터 변환 요구 사항을 충족하지 않으며, 배치 처리에 의존하므로 지연이 발생하고 지속적인 데이터 흐름에 적합하지 않습니다.",
            "Amazon Managed Streaming for Apache Kafka를 설정하면 스트리밍 데이터 수집을 효과적으로 처리할 수 있지만, Kinesis Data Firehose에 비해 관리 및 운영 오버헤드 측면에서 복잡성을 추가합니다. 또한 변환을 위해 AWS Lambda와 통합하고 데이터를 Redshift에 전달하기 위해 더 많은 구성이 필요합니다."
        ]
    },
    {
        "Question Number": "53",
        "Situation": "한 금융 기관이 실시간 데이터 처리 및 거래 활동을 지원하기 위해 온프레미스 데이터 센터와 AWS 간의 안정적이고 고대역폭, 저지연 연결이 필요한 미션 크리티컬 애플리케이션을 운영하고 있습니다. 그들은 모든 데이터 전송이 공용 인터넷을 우회하는 안전한 개인 연결을 통해 이루어지도록 하여 잠재적인 보안 위험과 성능 변동으로부터 보호하고자 합니다.",
        "Question": "어떤 옵션이 그들의 요구 사항을 가장 잘 충족합니까?",
        "Options": {
            "1": "통신 제공업체로부터 AWS로 직접 고속 전용 회선을 사용합니다.",
            "2": "공용 인터넷을 통해 AWS Site-to-Site VPN을 설정합니다.",
            "3": "AWS Direct Connect를 배포하여 개인 전용 네트워크 연결을 만듭니다.",
            "4": "주기적인 데이터 동기화를 위해 암호화된 파일 전송 프로토콜(FTP)을 설정합니다."
        },
        "Correct Answer": "AWS Direct Connect를 배포하여 개인 전용 네트워크 연결을 만듭니다.",
        "Explanation": "AWS Direct Connect는 온프레미스 데이터 센터와 AWS 간의 전용 개인 연결을 제공합니다. 이 옵션은 실시간 데이터 처리 및 거래와 같은 미션 크리티컬 애플리케이션에 필수적인 안정적이고 고대역폭, 저지연 연결에 대한 금융 기관의 요구 사항을 충족합니다. Direct Connect는 공용 인터넷을 우회하여 보안 위험과 성능 변동을 크게 줄여 안전하고 신뢰할 수 있는 데이터 전송을 위한 최선의 선택입니다.",
        "Other Options": [
            "통신 제공업체로부터 AWS로 직접 고속 전용 회선을 사용하는 것은 높은 대역폭을 제공할 수 있지만, AWS Direct Connect와 같은 수준의 통합 및 신뢰성을 보장하지 않습니다. 또한 설정 및 관리에서 더 높은 비용과 복잡성을 수반할 수 있습니다.",
            "공용 인터넷을 통해 AWS Site-to-Site VPN을 설정하면 암호화 및 보안을 제공하지만, 실시간 애플리케이션에 필요한 저지연 및 고대역폭 요구 사항을 충족하지 않습니다. VPN은 공용 인터넷에 의존하므로 성능 변동의 영향을 받을 수 있습니다.",
            "주기적인 데이터 동기화를 위해 암호화된 파일 전송 프로토콜(FTP)을 설정하는 것은 실시간 데이터 처리 및 거래 활동 요구 사항을 충족하지 않습니다. 이 방법은 연속적이고 저지연 데이터 전송이 중요한 기관의 운영에 적합한 배치 처리에 더 적합합니다."
        ]
    },
    {
        "Question Number": "54",
        "Situation": "한 회사는 개발 계정과 프로덕션 계정의 두 개의 AWS 계정을 보유하고 있습니다. 개발 계정의 개발자는 테스트 목적으로 프로덕션 계정의 특정 리소스에 임시로 접근할 필요가 있습니다. 회사는 최소 권한 원칙을 시행하고 개발자가 제한된 시간 동안 필요한 리소스에만 접근할 수 있도록 하기를 원합니다.",
        "Question": "회사가 이 요구 사항을 달성하기 위해 어떤 접근 방식을 사용해야 합니까?",
        "Options": {
            "1": "프로덕션 계정에 IAM 사용자를 생성하고 필요한 리소스에 대한 접근을 허용하는 정책을 연결합니다.",
            "2": "AWS Security Token Service (STS)를 사용하여 임시 보안 자격 증명을 생성하고 개발자가 필요한 리소스에 접근할 수 있는 권한을 가진 프로덕션 계정의 역할을 맡도록 허용합니다.",
            "3": "개발 계정에 IAM 그룹을 생성하고 프로덕션 계정의 리소스에 대한 접근을 허용하는 정책을 연결하여 교차 계정 접근을 설정합니다.",
            "4": "AWS Organizations를 사용하여 모든 개발자에 대해 개발 계정에서 프로덕션 계정으로 권한을 자동으로 복제합니다."
        },
        "Correct Answer": "AWS Security Token Service (STS)를 사용하여 임시 보안 자격 증명을 생성하고 개발자가 필요한 리소스에 접근할 수 있는 권한을 가진 프로덕션 계정의 역할을 맡도록 허용합니다.",
        "Explanation": "AWS Security Token Service (STS)를 사용하여 임시 보안 자격 증명을 생성하는 것은 이 시나리오에 가장 적합한 접근 방식입니다. 이를 통해 개발자는 특정 권한을 가진 프로덕션 계정의 역할을 맡을 수 있습니다. 이 방법은 최소 권한 원칙을 준수하여 제한된 시간 동안 필요한 리소스에만 접근할 수 있도록 합니다. STS에서 제공하는 임시 자격 증명은 지정된 기간 후에 만료되어 접근이 영구적이지 않으며 프로덕션 리소스에 대한 무단 접근 위험을 줄입니다.",
        "Other Options": [
            "프로덕션 계정에 IAM 사용자를 생성하고 필요한 리소스에 대한 접근을 허용하는 정책을 연결하는 것은 영구 사용자 계정을 생성해야 하므로 최소 권한 원칙에 어긋나며 임시 접근을 제공하지 않습니다.",
            "개발 계정에 IAM 그룹을 생성하고 프로덕션 계정의 리소스에 대한 접근을 허용하는 정책을 연결하여 교차 계정 접근을 설정하는 것은 잘못된 것입니다. IAM 그룹은 교차 계정 권한을 직접 지원하지 않으므로 역할을 사용해야 합니다.",
            "AWS Organizations를 사용하여 모든 개발자에 대해 개발 계정에서 프로덕션 계정으로 권한을 자동으로 복제하는 것은 필요 이상으로 넓은 접근을 허용하므로 최소 권한 원칙을 위반합니다. 이 접근 방식은 임시 접근을 위한 세밀한 제어를 허용하지 않습니다."
        ]
    },
    {
        "Question Number": "55",
        "Situation": "한 회사가 높은 볼륨의 비동기 작업을 처리할 수 있는 확장 가능한 애플리케이션 아키텍처를 설계하고자 하며, 구성 요소가 서로 직접적인 의존성 없이 통신할 수 있어야 합니다.",
        "Question": "느슨하게 결합된 이벤트 기반 아키텍처를 구현하는 데 가장 적합한 AWS 서비스는 무엇이며 그 이유는 무엇입니까?",
        "Options": {
            "1": "Amazon SQS",
            "2": "Amazon RDS",
            "3": "Amazon DynamoDB",
            "4": "AWS Lambda"
        },
        "Correct Answer": "Amazon SQS",
        "Explanation": "Amazon SQS(간단한 큐 서비스)는 분산 애플리케이션의 구성 요소를 분리하기 위해 특별히 설계되었습니다. 메시지 큐를 사용하여 애플리케이션의 서로 다른 부분 간의 비동기 통신을 허용합니다. 즉, 구성 요소는 메시지를 큐에 보내면서 그 메시지를 처리할 다른 구성 요소에 대해 알 필요가 없으므로 느슨하게 결합된 아키텍처를 가능하게 합니다. SQS는 높은 볼륨의 메시지를 처리할 수 있어 비동기 작업 처리에서 확장성과 신뢰성이 필요한 애플리케이션에 적합합니다.",
        "Other Options": [
            "Amazon RDS(관계형 데이터베이스 서비스)는 주로 구조화된 데이터를 저장하는 데 사용되는 관리형 관계형 데이터베이스 서비스입니다. SQS가 제공하는 이벤트 기반 아키텍처나 구성 요소의 분리를 제공하지 않으며, 애플리케이션과 데이터베이스 간의 직접 연결이 필요합니다.",
            "Amazon DynamoDB는 빠르고 예측 가능한 성능을 제공하며 원활한 확장성을 갖춘 NoSQL 데이터베이스 서비스입니다. 높은 볼륨의 데이터를 처리할 수 있지만 비동기 작업 관리나 이벤트 기반 아키텍처에서 구성 요소를 분리하는 데 특별히 설계되지 않았습니다.",
            "AWS Lambda는 이벤트에 응답하여 코드를 실행하는 서버리스 컴퓨팅 서비스입니다. 이벤트 기반 아키텍처의 일부가 될 수 있지만, 자체적으로 메시징 서비스 역할을 하지 않습니다. 일반적으로 SQS 또는 다른 서비스와 함께 사용되어 메시지를 처리하지만 구성 요소 간의 느슨한 결합을 허용하는 큐잉 메커니즘을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "56",
        "Situation": "솔루션 아키텍트는 회사의 AWS 계정 내 특정 IAM 역할만이 Amazon S3에 저장된 특정 민감한 데이터에 접근할 수 있도록 보장해야 합니다. 회사는 엄격한 최소 권한 접근 모델을 따릅니다.",
        "Question": "이 요구 사항을 시행하기 위한 가장 적절한 방법은 무엇입니까?",
        "Options": {
            "1": "특정 IAM 역할에만 접근을 허용하는 S3 버킷 정책 사용",
            "2": "S3 버킷에서 MFA Delete 활성화",
            "3": "무단 접근 시도를 위한 Amazon CloudWatch 경고 구성",
            "4": "S3 Transfer Acceleration 활성화"
        },
        "Correct Answer": "특정 IAM 역할에만 접근을 허용하는 S3 버킷 정책 사용",
        "Explanation": "특정 IAM 역할에만 접근을 허용하는 S3 버킷 정책을 사용하는 것은 민감한 데이터에 대한 접근을 제한하는 요구 사항을 시행하는 가장 적절한 방법입니다. 버킷 정책은 S3 버킷에 저장된 데이터에 접근할 수 있는 사람에 대해 세밀한 제어를 허용하며, 최소 권한 접근 모델과 일치합니다. 어떤 IAM 역할이 버킷에 접근할 수 있는지를 지정함으로써 솔루션 아키텍트는 승인된 역할만이 민감한 데이터에 접근할 수 있는 필요한 권한을 갖도록 보장할 수 있어 보안을 강화합니다.",
        "Other Options": [
            "S3 버킷에서 MFA Delete를 활성화하는 것은 버킷 내 객체의 우발적인 삭제를 방지하고 삭제 작업에 다중 인증을 요구하는 보안 기능입니다. 보안 계층을 추가하지만 데이터 자체에 대한 접근을 제어하지 않으므로 IAM 역할에 따라 접근을 제한하는 요구 사항과는 덜 관련이 있습니다.",
            "무단 접근 시도를 위한 Amazon CloudWatch 경고를 구성하는 것은 의심스러운 활동을 모니터링하고 경고하는 데 도움이 될 수 있지만, 접근을 방지하지는 않습니다. 이 접근 방식은 접근 제어의 시행보다는 탐지에 더 중점을 두고 있으며, 이는 이 시나리오에서 주요 관심사입니다.",
            "S3 Transfer Acceleration을 활성화하면 S3와의 데이터 전송 속도가 향상되지만 접근 제어와는 관련이 없습니다. 이 옵션은 IAM 역할에 따라 민감한 데이터에 대한 접근을 제한하는 요구 사항을 해결하지 않습니다."
        ]
    },
    {
        "Question Number": "57",
        "Situation": "온라인 뉴스 포털은 클릭, 조회수 및 공유를 포함하여 매일 수백만 건의 사용자 상호작용을 받습니다. 이러한 상호작용은 분석 및 개인화된 콘텐츠 제공을 위해 실시간으로 수집되어야 합니다. 회사는 향후 1년 동안 상호작용의 양이 급격히 증가할 것으로 예상하고 있습니다.",
        "Question": "이 시나리오를 효과적으로 처리하기 위해 솔루션 아키텍트가 설계해야 할 데이터 수집 패턴은 무엇입니까?",
        "Options": {
            "1": "일일 데이터 전송을 통한 배치 수집",
            "2": "실시간 스트리밍 수집",
            "3": "AWS Management Console을 통한 수동 데이터 업로드",
            "4": "AWS Data Pipeline을 사용한 예약 수집"
        },
        "Correct Answer": "실시간 스트리밍 수집",
        "Explanation": "실시간 스트리밍 수집은 온라인 뉴스 포털이 클릭, 조회수 및 공유와 같은 사용자 상호작용을 즉시 처리해야 하므로 이 시나리오에 가장 적합한 패턴입니다. 예상되는 상호작용 양의 급격한 증가를 고려할 때, 실시간 접근 방식은 지속적인 데이터 흐름과 즉각적인 분석을 가능하게 하여 개인화된 콘텐츠 제공과 시의적절한 통찰력을 제공합니다. 이 방법은 데이터가 도착하는 즉시 처리되도록 보장하여 매력적인 사용자 경험을 유지하고 사용자 행동에 실시간으로 적응하는 데 필수적입니다.",
        "Other Options": [
            "일일 데이터 전송을 통한 배치 수집은 데이터를 일정 기간 동안 수집한 후 한 번에 처리하는 방식이므로 이 시나리오에 적합하지 않습니다. 이는 분석 및 콘텐츠 제공에 지연을 초래하여 실시간 사용자 상호작용에 의존하는 플랫폼에는 적합하지 않습니다.",
            "AWS Management Console을 통한 수동 데이터 업로드는 매일 수백만 건의 상호작용을 처리하는 데 비현실적입니다. 이 방법은 노동 집약적이며 확장성이 떨어져 자동화와 속도가 중요한 고용량 환경에는 적합하지 않습니다.",
            "AWS Data Pipeline을 사용한 예약 수집은 어느 정도의 자동화를 제공할 수 있지만 여전히 실시간이 아닌 미리 정의된 일정에 따라 작동합니다. 이는 뉴스 포털의 즉각적인 데이터 처리 요구를 충족하지 못하며, 구식 분석 및 콘텐츠 제공으로 이어질 수 있습니다."
        ]
    },
    {
        "Question Number": "58",
        "Situation": "스타트업이 AWS에서 실시간 분석 플랫폼을 구축하고 있습니다. 이 플랫폼은 수천 개의 IoT 장치에서 데이터를 수집하고, 데이터를 실시간으로 처리하며, 처리된 데이터를 추가 분석을 위해 저장해야 합니다. 솔루션은 높은 확장성을 가지며 운영 오버헤드를 최소화해야 합니다.",
        "Question": "솔루션 아키텍트가 이 플랫폼을 구축하기 위해 사용해야 할 AWS 서비스 조합은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "AWS Lambda",
            "2": "Amazon Kinesis Data Streams",
            "3": "Amazon RDS for MySQL",
            "4": "Amazon S3",
            "5": "Amazon QuickSight"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Lambda",
            "Amazon Kinesis Data Streams"
        ],
        "Explanation": "AWS Lambda는 서버를 프로비저닝하거나 관리할 필요 없이 코드를 실행할 수 있게 해주는 서버리스 컴퓨팅 서비스입니다. 주어진 시나리오에서 요구되는 실시간 데이터 처리를 위해 사용할 수 있습니다. Amazon Kinesis Data Streams는 수백만 개의 소스(웹사이트 클릭 스트림, 데이터베이스 이벤트 스트림, 금융 거래, 소셜 미디어 피드, IT 로그, 위치 추적 이벤트 등)에서 초당 기가바이트의 데이터를 지속적으로 캡처할 수 있는 확장 가능하고 내구성이 뛰어난 실시간 데이터 스트리밍 서비스입니다. 이는 수천 개의 IoT 장치에서 실시간으로 데이터를 수집하는 데 적합한 선택입니다.",
        "Other Options": [
            "Amazon RDS for MySQL은 관계형 데이터베이스 서비스입니다. 데이터를 저장하는 데 사용할 수 있지만, 주어진 시나리오에서 요구되는 실시간 데이터 수집 및 처리에는 적합하지 않습니다.",
            "Amazon S3는 저장 서비스입니다. 처리된 데이터를 저장하는 데 사용할 수 있지만, 실시간 데이터 수집 및 처리를 지원하지 않습니다.",
            "Amazon QuickSight는 비즈니스 분석 서비스입니다. 데이터를 분석하는 데 사용할 수 있지만, 주어진 시나리오에서 요구되는 실시간 데이터 수집, 처리 및 저장을 지원하지 않습니다."
        ]
    },
    {
        "Question Number": "59",
        "Situation": "회사는 Amazon EC2 인스턴스를 사용하여 레거시 애플리케이션을 호스팅하고 있습니다. 이 애플리케이션은 네트워크 파일 시스템에 저장된 파일에 접근해야 하며, 낮은 대기 시간으로 여러 동시 연결을 지원해야 합니다. 회사는 높은 가용성을 가진 확장 가능한 저장소를 제공하는 관리형 솔루션이 필요합니다.",
        "Question": "솔루션 아키텍트가 추천해야 할 AWS 서비스는 무엇입니까?",
        "Options": {
            "1": "Amazon S3",
            "2": "Amazon EFS (Elastic File System)",
            "3": "Amazon FSx for Windows File Server",
            "4": "Amazon EBS (Elastic Block Store)"
        },
        "Correct Answer": "Amazon EFS (Elastic File System)",
        "Explanation": "Amazon EFS (Elastic File System)는 Amazon EC2 인스턴스와 함께 사용하도록 설계된 완전 관리형, 확장 가능하고 탄력적인 파일 저장 서비스입니다. 여러 동시 연결을 지원하며 파일에 대한 낮은 대기 시간 접근을 제공하여 파일 시스템에 대한 공유 접근이 필요한 애플리케이션에 적합합니다. EFS는 파일이 추가되거나 제거됨에 따라 자동으로 확장되어 높은 가용성과 내구성을 보장하며, 이는 상황에서 설명된 레거시 애플리케이션의 요구 사항과 완벽하게 일치합니다.",
        "Other Options": [
            "Amazon S3는 파일 시스템 인터페이스와 낮은 대기 시간 접근이 필요한 애플리케이션에 적합하지 않은 객체 저장 서비스입니다. 대량의 비구조적 데이터를 저장하고 검색하는 데 설계되었지만, 여러 인스턴스의 동시 접근을 위한 파일 시스템 의미론을 지원하지 않습니다.",
            "Amazon FSx for Windows File Server는 SMB 프로토콜을 지원하는 완전 관리형 Windows 파일 시스템을 제공합니다. Windows 기반 애플리케이션에 적합하지만, 높은 가용성과 확장성을 제공하는 동시에 레거시 애플리케이션이 Windows 전용 기능을 요구하지 않는 경우에는 필요하지 않을 수 있습니다.",
            "Amazon EBS (Elastic Block Store)는 EC2 인스턴스를 위한 블록 저장소를 제공하며 단일 인스턴스 사용 사례에 적합합니다. 여러 인스턴스에서의 동시 연결을 지원하지 않으며, 레거시 애플리케이션의 요구 사항입니다. EBS는 또한 관리형 파일 시스템이 아니며, 볼륨의 수동 관리가 필요합니다."
        ]
    },
    {
        "Question Number": "60",
        "Situation": "분석 회사는 소프트웨어 업데이트 및 외부 데이터 동기화를 위해 인터넷 접근이 필요한 여러 Amazon EC2 인스턴스를 프라이빗 서브넷 내에 두고 있습니다. 네트워크 비용을 낮게 유지하기 위해 이 인스턴스들이 외부 인터넷 접근을 가능하게 하는 NAT(Network Address Translation) 설정 옵션을 고려하고 있습니다. 회사는 과도한 인프라를 배치하지 않고 인터넷 연결을 제공하는 비용 효율적인 접근 방식을 원합니다.",
        "Question": "가장 비용 효율적인 접근 방식은 무엇입니까?",
        "Options": {
            "1": "각 가용 영역에 NAT 게이트웨이를 배포하여 중복성을 보장하고 여러 영역 간의 트래픽을 분산",
            "2": "프라이빗 서브넷 내 모든 EC2 인스턴스의 트래픽을 처리하기 위해 단일 NAT 인스턴스를 사용하여 인프라 비용 최소화",
            "3": "각 VPC에 대해 별도의 NAT 게이트웨이를 배포하여 각 가상 네트워크가 독립적으로 인터넷 접근 요구를 처리하도록 함",
            "4": "여러 지역에서 Elastic IP가 있는 NAT 게이트웨이를 사용하여 인터넷 접근을 제공하고 높은 가용성 보장"
        },
        "Correct Answer": "프라이빗 서브넷 내 모든 EC2 인스턴스의 트래픽을 처리하기 위해 단일 NAT 인스턴스를 사용하여 인프라 비용 최소화",
        "Explanation": "단일 NAT 인스턴스를 사용하는 것은 프라이빗 서브넷 내 여러 EC2 인스턴스에 인터넷 접근을 제공하는 가장 비용 효율적인 솔루션입니다. NAT 인스턴스는 일반적으로 NAT 게이트웨이보다 저렴하며, 단일 인스턴스가 서브넷 내 모든 인스턴스의 아웃바운드 트래픽을 처리할 수 있습니다. 이 접근 방식은 소프트웨어 업데이트 및 데이터 동기화를 위한 필요한 인터넷 연결을 허용하면서 인프라 비용을 최소화합니다.",
        "Other Options": [
            "각 가용 영역에 NAT 게이트웨이를 배포하면 중복성과 로드 밸런싱을 제공하지만, NAT 인스턴스에 비해 NAT 게이트웨이의 가격이 높기 때문에 비용이 크게 증가합니다. 이 옵션은 회사의 요구에 비효율적입니다.",
            "각 VPC에 대해 별도의 NAT 게이트웨이를 배포하면 각 게이트웨이에 요금이 부과되므로 비용이 증가합니다. 인터넷 접근을 제공하면서 인프라 비용을 최소화하는 것이 목표라면 이 접근 방식은 불필요합니다.",
            "여러 지역에서 Elastic IP가 있는 NAT 게이트웨이를 사용하는 것은 높은 가용성을 보장하지만 매우 비용이 많이 듭니다. NAT 게이트웨이는 시간당 및 처리된 GB당 요금이 부과되므로, 비용에 민감한 요구 사항에는 비현실적입니다."
        ]
    },{
        "Question Number": "61",
        "Situation": "한 회사가 개발, 테스트 및 운영과 같은 다양한 환경을 관리하기 위해 여러 AWS 계정을 사용하고 있습니다. 보안 팀은 중앙 관리 및 모니터링을 허용하면서 모든 계정에 일관된 보안 정책을 적용하고자 합니다.",
        "Question": "회사가 안전한 다중 계정 환경을 설정하기 위해 어떤 AWS 서비스를 사용해야 하며, 각 계정에 특정 보안 통제를 적용하는 데 도움이 되는 기능은 무엇입니까?",
        "Options": {
            "1": "각 계정에 대해 권한 경계를 설정한 AWS Identity and Access Management (IAM)를 사용하십시오.",
            "2": "AWS Control Tower와 서비스 제어 정책(SCP)을 사용하여 계정 간의 보안 정책을 관리하십시오.",
            "3": "AWS Shield를 구현하여 다양한 계정 간의 보안 규칙을 적용하십시오.",
            "4": "Amazon GuardDuty를 사용하여 계정 간의 보안 정책을 관리하고 적용하십시오."
        },
        "Correct Answer": "AWS Control Tower와 서비스 제어 정책(SCP)을 사용하여 계정 간의 보안 정책을 관리하십시오.",
        "Explanation": "AWS Control Tower는 조직이 안전한 다중 계정 AWS 환경을 설정하고 관리하는 데 특별히 설계되었습니다. 이는 계정을 중앙에서 관리하고 정책을 적용하는 방법을 제공합니다. 서비스 제어 정책(SCP)은 AWS Organizations의 기능으로, 계정에 대한 권한 가드레일을 정의하여 모든 계정에서 특정 보안 통제가 일관되게 적용되도록 보장합니다. 이는 중앙 관리 및 모니터링을 허용하면서 일관된 보안 정책을 적용해야 하는 회사의 요구에 가장 적합한 선택입니다.",
        "Other Options": [
            "AWS Identity and Access Management (IAM)와 권한 경계는 단일 계정 내에서 권한을 관리하는 데 유용하지만, 여러 계정 간의 정책을 중앙에서 적용하는 방법을 제공하지 않으므로 회사의 다중 계정 환경에 적합하지 않습니다.",
            "AWS Shield는 DDoS 공격으로부터 애플리케이션을 보호하는 관리형 서비스입니다. 보안을 강화하지만, 여러 계정 간의 보안 정책을 적용하는 메커니즘을 제공하지 않으므로 회사의 요구에 적합하지 않습니다.",
            "Amazon GuardDuty는 악의적인 활동 및 무단 행동을 지속적으로 모니터링하는 위협 탐지 서비스입니다. 보안 통찰력을 제공하지만, 계정 간의 보안 정책을 적용하지 않으므로 회사의 주요 요구 사항에 부합하지 않습니다."
        ]
    },
    {
        "Question Number": "62",
        "Situation": "한 회사가 트래픽 급증과 잠재적인 구성 요소 실패를 처리하면서 일관된 서비스를 유지해야 하는 고가용성 및 내결함성 시스템을 설계하고 있습니다. 이 시스템은 마이크로서비스를 사용하며 복원력과 확장성을 보장해야 합니다.",
        "Question": "회사가 이를 달성하기 위해 어떤 분산 설계 패턴을 사용해야 합니까?",
        "Options": {
            "1": "서킷 브레이커 패턴을 사용하여 서비스 실패를 사전에 감지하고 관리하여 부분 실패 동안 시스템 성능을 유지하도록 합니다.",
            "2": "모놀리식 패턴을 사용하여 복잡성을 줄이고 모든 구성 요소가 긴밀하게 통합되어 서로 의존하도록 합니다.",
            "3": "재시도 패턴을 사용하여 시스템이 높은 트래픽이나 구성 요소 실패를 경험하더라도 실패한 작업을 지속적으로 재시도합니다.",
            "4": "상태 유지 패턴을 사용하여 서비스가 요청 간에 세션 데이터를 유지하여 트래픽 급증을 처리할 수 있도록 합니다."
        },
        "Correct Answer": "서킷 브레이커 패턴을 사용하여 서비스 실패를 사전에 감지하고 관리하여 부분 실패 동안 시스템 성능을 유지하도록 합니다.",
        "Explanation": "서킷 브레이커 패턴은 실패를 감지하고 시스템이 실패할 가능성이 있는 서비스에 호출을 하지 않도록 설계되었습니다. 이는 서비스가 상호 의존하는 마이크로서비스 아키텍처에서 특히 유용합니다. 서킷 브레이커를 구현함으로써 시스템은 빠르게 실패하고 트래픽을 재배치하거나 대체 옵션을 제공하여 부분 실패 동안 전체 시스템 성능과 가용성을 유지할 수 있습니다. 이 패턴은 시스템이 실패에서 우아하게 복구하고 트래픽 급증을 효과적으로 관리할 수 있도록 하여 복원력을 향상시킵니다.",
        "Other Options": [
            "모놀리식 패턴은 마이크로서비스를 사용하는 고가용성 및 내결함성 시스템에 적합하지 않습니다. 모놀리식 아키텍처는 모든 구성 요소를 긴밀하게 결합하여 개별 서비스를 독립적으로 확장하고 관리하기 어렵게 만듭니다. 이는 복원력과 확장성의 목표와 모순됩니다.",
            "재시도 패턴은 특정 시나리오에서 유용할 수 있지만, 높은 트래픽이나 구성 요소 실패 동안 문제를 악화시킬 수 있습니다. 전략 없이 실패한 작업을 지속적으로 재시도하면 시스템에 부하가 증가하고 잠재적인 연쇄 실패를 초래할 수 있어, 실패 동안 일관된 서비스를 유지하는 데 이상적이지 않습니다.",
            "상태 유지 패턴은 마이크로서비스 아키텍처에서 확장성과 복원력을 복잡하게 만들 수 있습니다. 요청 간에 세션 데이터를 유지하면 부하 분산 및 실패 관리에 어려움이 발생할 수 있으며, 상태 유지 서비스는 세션 정보를 잃지 않고 쉽게 확장하거나 실패에서 복구하기 어려울 수 있습니다."
        ]
    },
    {
        "Question Number": "63",
        "Situation": "한 회사가 Amazon Kinesis를 사용하여 실시간 스트리밍 데이터를 처리하고 있습니다. 그들은 권한이 있는 사용자만 데이터 스트림에 접근할 수 있도록 하고, 데이터가 전송 중과 저장 중 모두 암호화되도록 하기를 원합니다.",
        "Question": "회사가 Kinesis 데이터 스트림을 보호하기 위해 어떤 조치를 취해야 합니까?",
        "Options": {
            "1": "AWS Key Management Service (KMS)를 사용하여 서버 측 암호화(SSE)를 활성화하여 저장 중인 데이터를 암호화하고, IAM 정책을 사용하여 스트림에 대한 접근을 제어합니다.",
            "2": "Kinesis Data Streams를 구성하여 저장 중에만 암호화를 사용하고, 전송 중 암호화는 활성화하지 않습니다. 이는 내부 AWS 통신에는 필요하지 않습니다.",
            "3": "Kinesis와 다른 AWS 서비스 간에 VPC 피어링을 활성화하여 데이터가 보안 네트워크 연결을 통해 전송되도록 합니다.",
            "4": "암호화 없이 Kinesis 스트림에 대한 공개 접근을 허용하여 다양한 애플리케이션이 데이터를 신속하게 접근할 수 있도록 하고, CloudTrail을 사용하여 접근 로그를 모니터링합니다."
        },
        "Correct Answer": "AWS Key Management Service (KMS)를 사용하여 서버 측 암호화(SSE)를 활성화하여 저장 중인 데이터를 암호화하고, IAM 정책을 사용하여 스트림에 대한 접근을 제어합니다.",
        "Explanation": "AWS Key Management Service (KMS)를 사용하여 서버 측 암호화(SSE)를 활성화하면 Kinesis Data Streams에 저장된 데이터가 저장 중에 암호화되어 무단 접근에 대한 보안 계층을 제공합니다. 또한 IAM 정책을 사용하면 회사가 스트림에 접근할 수 있는 사용자와 수행할 수 있는 작업을 정의할 수 있어, 권한이 있는 사용자만 민감한 데이터에 접근할 수 있도록 보장합니다. 이 암호화와 접근 제어의 조합은 클라우드 환경에서 데이터를 보호하는 데 필수적입니다.",
        "Other Options": [
            "Kinesis Data Streams를 저장 중에만 암호화를 사용하도록 구성하고 전송 중 암호화를 활성화하지 않는 것은 불충분합니다. 데이터가 전송 중에 가로채질 수 있기 때문입니다. 전송 중 암호화는 데이터가 네트워크를 통해 이동할 때 보호하는 데 중요합니다, 특히 실시간 스트리밍 컨텍스트에서.",
            "VPC 피어링을 활성화하면 AWS 서비스 간의 개인 통신을 허용하여 보안을 강화할 수 있지만, 저장 중 또는 전송 중 암호화의 필요성을 해결하지는 않습니다. 암호화가 없으면 데이터는 여전히 무단 접근에 취약할 수 있으므로, Kinesis 데이터 스트림을 보호하는 데 불완전한 옵션입니다.",
            "암호화 없이 Kinesis 스트림에 대한 공개 접근을 허용하는 것은 심각한 보안 위험을 초래합니다. 이는 민감한 데이터를 스트림에 접근할 수 있는 누구에게나 노출시키기 때문입니다. CloudTrail로 접근 로그를 모니터링하는 것은 무단 접근을 방지하지 않으며, 단지 사후에 가시성을 제공할 뿐입니다. 이 접근 방식은 데이터 보안에 대한 모범 사례에 반합니다."
        ]
    },
    {
        "Question Number": "64",
        "Situation": "고품질 미디어 콘텐츠를 스트리밍하기 위한 글로벌 웹사이트를 출시한다고 가정해 보십시오. 사용자가 지리적 위치에 관계없이 최소한의 지연 시간과 원활한 재생을 경험하도록 해야 합니다. 이를 달성하기 위해 Amazon CloudFront를 콘텐츠 배달에 사용하기로 결정했습니다.",
        "Question": "CloudFront의 어떤 구성 요소가 사용자에게 더 빠른 접근을 위해 콘텐츠를 더 가까이 캐시하는 역할을 하며, 이는 지연 시간을 줄이는 데 어떻게 기여합니까?",
        "Options": {
            "1": "배포, 이는 주요 구성을 제공하고 캐시 동작을 정의합니다.",
            "2": "엣지 로케이션, 이는 캐시된 콘텐츠를 사용자에게 더 가까이 저장하여 자주 요청되는 데이터에 대한 더 빠른 접근 시간을 제공합니다.",
            "3": "지역 엣지 캐시, 이는 엣지 로케이션의 더 큰 버전으로 더 많은 데이터를 보유하여 캐싱 효율성을 향상시킵니다.",
            "4": "오리진, 이는 CloudFront가 사용자 요청 시 가져오는 원본 콘텐츠를 보유합니다."
        },
        "Correct Answer": "엣지 로케이션, 이는 캐시된 콘텐츠를 사용자에게 더 가까이 저장하여 자주 요청되는 데이터에 대한 더 빠른 접근 시간을 제공합니다.",
        "Explanation": "엣지 로케이션은 Amazon CloudFront의 핵심 구성 요소로, 전 세계 다양한 지리적 위치에서 콘텐츠를 캐시합니다. 콘텐츠의 복사본을 사용자에게 더 가까이 저장함으로써 엣지 로케이션은 데이터가 이동해야 하는 거리를 크게 줄여 지연 시간을 최소화하고 콘텐츠 배달 속도를 향상시킵니다. 이는 고품질 미디어 스트리밍에 특히 중요하며, 사용자는 버퍼링 없이 콘텐츠에 빠르게 접근할 것으로 기대합니다.",
        "Other Options": [
            "배포는 CloudFront가 콘텐츠를 제공하는 방법을 정의하는 구성으로, 캐시 동작에 대한 설정을 포함하지만, 콘텐츠를 직접 캐시하지는 않습니다. 이는 물리적 캐싱보다는 전체 설정에 관한 것입니다.",
            "지역 엣지 캐시는 오리진과 엣지 로케이션 간의 중개 역할을 하며, 더 많은 데이터를 보유하여 캐싱 효율성을 향상시킵니다. 그러나 이는 사용자에게 가장 가까운 콘텐츠를 캐시하는 주요 구성 요소가 아니며, 그 역할은 엣지 로케이션이 수행합니다.",
            "오리진은 콘텐츠의 원본 소스를 나타내며, S3 버킷이나 웹 서버와 같은 것입니다. 캐시에서 사용할 수 없는 콘텐츠를 가져오는 데 필수적이지만, 일반적으로 엣지 로케이션보다 최종 사용자와 더 멀리 위치하므로 지연 시간을 줄이는 데 기여하지 않습니다."
        ]
    },
    {
        "Question Number": "65",
        "Situation": "메시지를 특정 순서로 처리해야 하고 중복이 허용되지 않는 작업 처리 시스템을 설계하고 있습니다. 그러나 메시지의 양이 크게 변동할 수 있으므로 이 순서 요구 사항과 높은 확장성 간의 균형을 맞추고 싶습니다.",
        "Question": "이 요구 사항을 충족하기 위해 어떤 유형의 Amazon SQS 큐를 선택해야 하며, 그 이유는 무엇입니까?",
        "Options": {
            "1": "표준 큐, 이는 무제한 처리량을 허용하고 엄격한 순서 없이 높은 확장성을 위해 최적화되어 있습니다.",
            "2": "FIFO 큐, 이는 정확히 한 번 처리와 메시지의 엄격한 순서를 보장하므로 귀하의 요구 사항에 중요합니다.",
            "3": "표준 큐, 이는 최소 한 번 전달을 제공하므로 변동하는 메시지 양을 처리하는 데 적합합니다.",
            "4": "FIFO 큐, 이는 TPS에 대한 제한을 두지 않으며 최선의 노력을 기울인 순서에 최적화되어 있어 고용량 애플리케이션에 이상적입니다."
        },
        "Correct Answer": "FIFO 큐, 이는 정확히 한 번 처리와 메시지의 엄격한 순서를 보장하므로 귀하의 요구 사항에 중요합니다.",
        "Explanation": "Amazon SQS의 FIFO(First-In-First-Out) 큐는 메시지가 전송된 정확한 순서로 처리되고 각 메시지가 정확히 한 번 처리되도록 설계되었습니다. 이는 메시지 처리의 순서가 중요한 시나리오와 중복을 피해야 하는 경우에 필수적입니다. 엄격한 순서를 유지하고 중복을 방지해야 하는 요구 사항을 고려할 때 FIFO 큐가 가장 적합한 선택입니다.",
        "Other Options": [
            "표준 큐, 이는 무제한 처리량을 허용하고 엄격한 순서 없이 높은 확장성을 위해 최적화되어 있습니다. 그러나 이 옵션은 엄격한 순서 요구 사항을 충족하지 않으며 메시지 중복을 초래할 수 있습니다.",
            "FIFO 큐, 이는 정확히 한 번 처리와 메시지의 엄격한 순서를 보장하므로 귀하의 요구 사항에 중요합니다. 이 옵션은 실제로 맞지만 질문에서 반복되어 혼란을 줄 수 있습니다.",
            "표준 큐, 이는 최소 한 번 전달을 제공하므로 변동하는 메시지 양을 처리하는 데 적합합니다. 이 옵션은 높은 확장성을 허용하지만 메시지의 순서를 보장하지 않으며 중복이 발생할 수 있으므로 요구 사항을 충족하지 않습니다."
        ]
    }
]