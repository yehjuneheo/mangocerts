[
    {
        "Question Number": "1",
        "Situation": "한 회사가 여러 부서에 대해 여러 개의 AWS 계정을 보유하고 있으며, 한 계정의 사용자가 다른 계정의 리소스에 안전하게 접근할 수 있도록 교차 계정 접근 관리 구현을 원하고 있습니다. 접근은 장기 자격 증명을 사용하지 않고 효과적으로 관리되어야 합니다. 이들은 이를 달성하기 위해 다양한 AWS 서비스와 방법론을 고려하고 있습니다.",
        "Question": "안전한 교차 계정 접근 관리를 구현하기 위해 어떤 조치를 조합해야 합니까? (두 가지 선택)",
        "Options": {
            "1": "AWS Organizations를 사용하여 모든 계정에서 특정 리소스에 대한 접근을 허용하는 서비스 제어 정책(SCP)을 생성합니다.",
            "2": "필요한 권한을 부여하는 IAM 역할을 대상 계정에 생성합니다. 소스 계정의 사용자가 역할 ARN을 사용하여 이 역할을 맡을 수 있도록 허용합니다.",
            "3": "대상 계정의 리소스에 대해 소스 계정의 IAM 사용자에게 접근을 허용하는 리소스 기반 정책을 생성합니다.",
            "4": "모든 계정에서 사용자 신원을 연합하고 리소스에 대한 접근을 관리하는 중앙 집중식 아이덴티티 공급자(IdP)를 구현합니다.",
            "5": "소스 계정에 Amazon Cognito 아이덴티티 풀을 설정하고 이를 구성하여 대상 계정의 리소스에 대한 접근을 허용합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "필요한 권한을 부여하는 IAM 역할을 대상 계정에 생성합니다. 소스 계정의 사용자가 역할 ARN을 사용하여 이 역할을 맡을 수 있도록 허용합니다.",
            "대상 계정의 리소스에 대해 소스 계정의 IAM 사용자에게 접근을 허용하는 리소스 기반 정책을 생성합니다."
        ],
        "Explanation": "대상 계정에 IAM 역할을 생성하면 소스 계정의 사용자가 이 역할을 맡을 수 있어 장기 자격 증명 없이 필요한 권한을 부여받게 됩니다. 또한, 대상 계정의 리소스에 대한 리소스 기반 정책을 구현하면 소스 계정의 특정 IAM 사용자가 해당 리소스에 직접 접근할 수 있어 보안성과 관리성이 향상됩니다.",
        "Other Options": [
            "소스 계정에 Amazon Cognito 아이덴티티 풀을 설정하는 것은 이 시나리오에서 교차 계정 접근 관리에 적합한 솔루션이 아닙니다. 이는 주로 사용자 인증을 촉진하며 다른 계정의 AWS 리소스에 대한 직접 접근을 제공하지 않습니다.",
            "AWS Organizations와 서비스 제어 정책(SCP)을 사용하는 것은 계정 간 리소스에 대한 접근을 직접적으로 부여하지 않습니다. SCP는 조직 수준에서 권한을 제어하도록 설계되었습니다.",
            "연합된 아이덴티티를 위한 중앙 집중식 아이덴티티 공급자(IdP)를 구현하는 것은 더 복잡한 솔루션이며, 한 계정의 특정 사용자가 다른 계정의 리소스에 접근할 수 있도록 하는 요구 사항에는 필요하지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "2",
        "Situation": "한 금융 서비스 회사가 최근 인프라를 AWS로 마이그레이션했습니다. 그들은 환경의 보안에 대해 우려하고 있으며, 무단 접근이나 잠재적 위협을 감지할 수 있도록 하고 싶어합니다. 다양한 AWS 보안 서비스를 검토한 후, 그들은 Amazon GuardDuty를 구현하여 보안 태세를 강화하기로 결정했습니다.",
        "Question": "다음 중 Amazon GuardDuty에 대한 설명 중 TRUE인 것은 무엇입니까?",
        "Options": {
            "1": "Amazon GuardDuty는 추가 설정 없이 AWS CloudTrail 로그, VPC 흐름 로그 및 DNS 로그를 자동으로 분석하여 악의적인 행동을 감지합니다.",
            "2": "Amazon GuardDuty는 AWS 리소스에 대한 실시간 모니터링을 제공하는 서비스지만, 의심스러운 활동에 대한 로그 분석은 하지 않습니다.",
            "3": "Amazon GuardDuty는 네트워크 활동을 효과적으로 모니터링하기 위해 위협 정보 소스의 수동 구성이 필요합니다.",
            "4": "Amazon GuardDuty는 미리 정의된 서명에 기반하여만 위협을 감지할 수 있으며, 시간이 지남에 따라 새로운 위협에 적응할 수 없습니다."
        },
        "Correct Answer": "Amazon GuardDuty는 추가 설정 없이 AWS CloudTrail 로그, VPC 흐름 로그 및 DNS 로그를 자동으로 분석하여 악의적인 행동을 감지합니다.",
        "Explanation": "Amazon GuardDuty는 CloudTrail, VPC 흐름 로그 및 DNS 로그를 포함한 다양한 AWS 소스의 로그 데이터를 자동으로 분석하여 지속적인 위협 감지를 제공하도록 설계되었습니다. 이 기능은 수동 구성 없이 잠재적 위협을 식별할 수 있게 하여 AWS 환경에서 보안을 강화하는 데 유용한 도구입니다.",
        "Other Options": [
            "이 설명은 잘못되었습니다. Amazon GuardDuty는 내장된 위협 정보를 사용하며, 효과적으로 작동하기 위해 위협 정보 소스의 수동 구성이 필요하지 않습니다.",
            "이 설명은 잘못되었습니다. Amazon GuardDuty는 미리 정의된 서명뿐만 아니라 기계 학습 및 이상 탐지를 사용하여 새로운 위협과 진화하는 위협을 식별합니다.",
            "이 설명은 잘못되었습니다. GuardDuty의 기능을 잘못 설명하고 있습니다. GuardDuty는 의심스러운 활동에 대한 로그를 분석하며, 실시간으로 잠재적 보안 위협을 식별하는 데 중점을 둡니다."
        ]
    },
    {
        "Question Number": "3",
        "Situation": "한 회사가 여러 AWS 계정을 관리하기 위해 AWS Organizations를 구현했습니다. 그들은 회원 계정 전반에 걸쳐 보안 및 규정을 시행하기 위해 서비스 제어 정책(SCP)을 정의했습니다. 보안 팀은 이러한 계정의 사용자에게 부여된 권한에 대해 우려하고 있으며, 다른 SCP에 명시적인 허용 문이 존재하더라도 특정 작업이 허용되지 않도록 하고 싶어합니다.",
        "Question": "이 시나리오에서 서비스 제어 정책(SCP)에 대한 다음 설명 중 TRUE인 것은 무엇입니까?",
        "Options": {
            "1": "SCP는 마스터 계정의 루트 사용자에 대한 작업을 제한하는 데 사용할 수 있습니다.",
            "2": "SCP의 명시적인 허용은 다른 SCP의 거부 문이 있더라도 권한을 부여할 수 있습니다.",
            "3": "SCP의 명시적인 거부는 다른 SCP에서 부여된 허용 권한을 무시합니다.",
            "4": "SCP는 회원 계정의 서비스 연결 역할을 관리하는 데 적용될 수 있습니다."
        },
        "Correct Answer": "SCP의 명시적인 거부는 다른 SCP에서 부여된 허용 권한을 무시합니다.",
        "Explanation": "서비스 제어 정책(SCP)은 AWS Organizations 전반에 걸쳐 권한을 관리하도록 설계되었습니다. 명시적인 거부는 항상 모든 허용 권한보다 우선하므로, 제한된 작업은 다른 정책에서 허용되더라도 수행할 수 없습니다.",
        "Other Options": [
            "이 설명은 잘못되었습니다. SCP의 명시적인 허용은 동일한 SCP 또는 다른 SCP의 명시적인 거부를 무시하지 않습니다. 거부는 항상 우선합니다.",
            "이 설명은 잘못되었습니다. SCP는 마스터 계정의 루트 사용자에게 영향을 미치지 않습니다. 이는 회원 계정에만 적용됩니다.",
            "이 설명은 잘못되었습니다. SCP는 서비스 연결 역할에 적용되지 않습니다. 이는 계정 수준에서 관리되며 SCP의 영향을 받지 않습니다."
        ]
    },
    {
        "Question Number": "4",
        "Situation": "금융 기관이 애플리케이션을 AWS로 마이그레이션하고 있으며, 특정 리소스에 대한 접근은 승인된 인원만 가능해야 합니다. 보안 팀은 위험을 완화하기 위해 최소 권한 원칙을 엄격히 준수해야 한다고 강조합니다. 솔루션 아키텍트로서, 다양한 서비스와 사용자에 걸쳐 이 원칙을 시행하는 IAM 정책을 설계하는 임무를 맡았습니다.",
        "Question": "다음 중 이 AWS 환경에서 사용자와 역할에 대한 최소 권한 접근을 가장 잘 구현하는 방법은 무엇입니까?",
        "Options": {
            "1": "AWS 계정 수준에 따라 IAM 권한을 할당하여 모든 사용자가 해당 계정의 모든 리소스에 접근할 수 있도록 합니다.",
            "2": "각 사용자 그룹에 대해 직무 기능에 필요한 권한만 부여하는 특정 IAM 정책을 개발하고, 이를 해당 IAM 역할에 적용합니다.",
            "3": "모든 리소스에 대한 전체 접근 권한을 가진 단일 IAM 역할을 생성하고, AWS 리소스에 접근해야 하는 모든 사용자에게 할당합니다.",
            "4": "모든 관리 작업에 대해 단일 IAM 사용자를 활용하고, 팀원 간에 자격 증명을 공유하여 접근 관리를 간소화합니다."
        },
        "Correct Answer": "각 사용자 그룹에 대해 직무 기능에 필요한 권한만 부여하는 특정 IAM 정책을 개발하고, 이를 해당 IAM 역할에 적용합니다.",
        "Explanation": "이 접근 방식은 각 사용자 또는 역할이 직무 기능을 수행하는 데 필요한 권한만 가지도록 하여 최소 권한 원칙을 준수합니다. 사용자 그룹에 맞게 IAM 정책을 조정함으로써 과도한 권한과 잠재적인 보안 위반의 위험을 최소화합니다.",
        "Other Options": [
            "전체 접근 권한을 가진 단일 IAM 역할을 생성하는 것은 최소 권한 원칙을 위반하며, 해당 역할에 할당된 모든 사용자에게 과도한 권한을 부여하여 보안 위험을 증가시킵니다.",
            "계정 수준에서 IAM 권한을 할당하면 모든 사용자가 모든 리소스에 무제한 접근할 수 있어 최소 권한 원칙에 반하며, 무단 접근으로 이어질 수 있습니다.",
            "모든 관리 작업에 대해 단일 IAM 사용자를 활용하는 것은 보안 모범 사례를 저해하며, 자격 증명을 공유하면 책임 문제를 초래하고 자격 증명 노출의 위험을 증가시킵니다."
        ]
    },
    {
        "Question Number": "5",
        "Situation": "다국적 소매 회사가 AWS에서 여러 지역에 애플리케이션을 배포하고 있습니다. 이 회사는 온프레미스 데이터 센터와 AWS 리소스 간의 안전한 통신을 촉진하는 고가용성 아키텍처를 요구합니다. 그들은 AWS Direct Connect를 활용하여 트래픽이 서로 다른 지역의 Amazon VPC 간에 효율적으로 라우팅되도록 하는 솔루션을 구현하고자 합니다. 또한 링크 실패 시 중복성을 제공해야 합니다.",
        "Question": "회사의 요구 사항을 충족하기 위해 솔루션 아키텍트가 AWS에서 구현해야 하는 옵션은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "같은 AWS 지역에 중복 Direct Connect 연결을 설정하고 장애 조치를 위해 가상 프라이빗 게이트웨이를 구성합니다.",
            "2": "Direct Connect 게이트웨이를 생성하고 이를 서로 다른 지역의 여러 VPC와 연결하여 VPC 피어링을 활성화합니다.",
            "3": "AWS Global Accelerator를 구현하여 여러 AWS 지역 간에 트래픽을 라우팅하여 가용성과 성능을 개선합니다.",
            "4": "Direct Connect 연결의 백업으로 사이트 간 VPN을 구성하여 실패 시 연결을 유지합니다.",
            "5": "AWS Transit Gateway를 사용하여 여러 VPC와 온프레미스 네트워크를 연결하고 라우팅을 위한 단일 관리 지점을 제공합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Transit Gateway를 사용하여 여러 VPC와 온프레미스 네트워크를 연결하고 라우팅을 위한 단일 관리 지점을 제공합니다.",
            "Direct Connect 연결의 백업으로 사이트 간 VPN을 구성하여 실패 시 연결을 유지합니다."
        ],
        "Explanation": "AWS Transit Gateway를 사용하면 회사가 여러 VPC와 온프레미스 네트워크 간의 연결을 효율적으로 관리할 수 있으며, 확장 가능하고 중앙 집중화된 라우팅 솔루션을 제공합니다. 사이트 간 VPN은 Direct Connect 연결의 신뢰할 수 있는 백업 역할을 하여 실패 시 통신이 원활하게 계속될 수 있도록 보장합니다.",
        "Other Options": [
            "Direct Connect 게이트웨이를 생성하고 여러 VPC와 연결하는 것은 중복성을 제공하지 않으며, 장애 조치 메커니즘이 부족하고 Direct Connect에만 의존합니다.",
            "같은 AWS 지역에 중복 Direct Connect 연결을 설정하는 것은 지역 간 통신 문제를 해결하지 않으며 포괄적인 장애 조치 전략을 제공하지 않습니다.",
            "AWS Global Accelerator를 구현하는 것은 온프레미스와 AWS 리소스 간의 직접 연결을 설정하는 데 적합하지 않으며, 주로 AWS 지역 간의 애플리케이션 트래픽 라우팅을 최적화합니다."
        ]
    },
    {
        "Question Number": "6",
        "Situation": "금융 서비스 회사가 AWS 리소스를 사용하여 산업 규정을 준수하고 있습니다. 현재 AWS Config를 설정하여 리소스를 모니터링하고 있지만, 준수 및 거버넌스 프레임워크를 강화하고자 합니다. 팀은 리소스 구성 편차나 비준수가 발생할 경우 수동 개입 없이 자동으로 수정하는 자동화된 수정 전략을 구현하는 것을 고려하고 있습니다.",
        "Question": "AWS에서 리소스 준수 모니터링 및 수정을 자동화하기 위해 솔루션 아키텍트가 구현해야 하는 솔루션은 무엇입니까?",
        "Options": {
            "1": "AWS Config가 구성 문제를 감지할 때 비준수 인스턴스에서 스크립트를 실행하기 위해 AWS Systems Manager Run Command를 구현합니다.",
            "2": "AWS Config를 활성화하여 리소스 구성을 매 24시간마다 스냅샷으로 생성하고, 이를 수동으로 검토하여 회사 정책 준수를 보장합니다.",
            "3": "AWS Config가 비준수 리소스를 감지할 때마다 운영 팀에 알림을 보내는 Amazon CloudWatch 경고를 설정하여 문제를 해결하기 위해 수동으로 조치를 취할 수 있도록 합니다.",
            "4": "AWS Config 규칙 위반 시 자동으로 문제를 수정하여 리소스를 준수 상태로 되돌리는 AWS Lambda 함수를 생성합니다."
        },
        "Correct Answer": "AWS Config 규칙 위반 시 자동으로 문제를 수정하여 리소스를 준수 상태로 되돌리는 AWS Lambda 함수를 생성합니다.",
        "Explanation": "이 접근 방식은 AWS Lambda를 활용하여 발생하는 준수 문제를 자동으로 해결하여, 수동 개입 없이 리소스가 신속하게 준수 상태로 돌아가도록 보장합니다. 이는 자동화된 모니터링 및 수정의 목표를 완전히 지원합니다.",
        "Other Options": [
            "이 옵션은 스냅샷의 수동 검토에 의존하므로 실시간 수정이 제공되지 않으며 비준수 상태가 장기화될 수 있습니다.",
            "CloudWatch 경고는 팀에 준수 문제를 알릴 수 있지만, 수정을 자동화하지 않으며 문제를 해결하기 위해 수동 개입이 필요합니다.",
            "Systems Manager Run Command를 사용하는 것은 어느 정도의 자동화를 허용하지만, 준수 위반에 따른 자동 수정을 위해 AWS Config 규칙과 직접 연결되지 않습니다."
        ]
    },
    {
        "Question Number": "7",
        "Situation": "한 금융 서비스 회사가 AWS에 민감한 고객 데이터를 처리하는 웹 애플리케이션을 배포했습니다. 이 애플리케이션은 Elastic Load Balancer 뒤에서 Amazon EC2 인스턴스에서 실행되며 Amazon RDS를 데이터베이스로 사용합니다. 회사는 네트워크에서 애플리케이션 및 데이터에 이르기까지 아키텍처의 모든 계층에서 보안이 유지되도록 해야 합니다. 귀하는 구현된 솔루션을 검토하고 보안을 강화하기 위한 권장 사항을 제시하는 임무를 맡았습니다.",
        "Question": "아키텍처의 모든 계층에서 포괄적인 보호를 보장하기 위해 어떤 보안 조치를 권장해야 합니까?",
        "Options": {
            "1": "AWS WAF를 구현하여 애플리케이션을 일반적인 웹 공격으로부터 보호하고 AWS Key Management Service (KMS)를 사용하여 모든 데이터를 암호화합니다.",
            "2": "EC2 인스턴스에 대한 IAM 역할을 구현하여 최소 권한 액세스를 보장하고 AWS CloudTrail을 사용하여 모니터링을 위한 중앙 집중식 로깅 솔루션을 배포합니다.",
            "3": "AWS Shield를 사용하여 DDoS 공격으로부터 보호하고 Amazon CloudFront를 활성화하여 콘텐츠를 캐시하여 애플리케이션 서버의 부하를 줄입니다.",
            "4": "Amazon Inspector를 배포하여 EC2 인스턴스의 취약성을 정기적으로 평가하고 보안 그룹을 구성하여 필요한 포트로의 수신 트래픽을 제한합니다."
        },
        "Correct Answer": "AWS WAF를 구현하여 애플리케이션을 일반적인 웹 공격으로부터 보호하고 AWS Key Management Service (KMS)를 사용하여 모든 데이터를 암호화합니다.",
        "Explanation": "AWS WAF를 구현하면 웹 기반 공격에 대한 강력한 보안 계층이 제공되며, AWS KMS를 사용하여 데이터를 암호화하면 민감한 고객 정보가 보호됩니다. 이 조합은 애플리케이션 및 데이터 계층 모두에서 보안을 보장합니다.",
        "Other Options": [
            "Amazon Inspector를 배포하는 것은 취약성 평가를 위한 좋은 관행이지만, AWS WAF만큼 웹 공격에 대한 보호 수준을 제공하지 않으며 데이터 암호화 문제를 해결하지 않습니다.",
            "AWS Shield를 사용하면 DDoS 공격으로부터 보호하지만, 애플리케이션 취약성이나 데이터 암호화에 대한 포괄적인 보안 조치를 제공하지 않습니다.",
            "IAM 역할을 구현하는 것은 액세스 제어에 필수적이지만, AWS WAF 및 데이터 암호화와 같은 추가 조치 없이 모든 계층에서 보안 요구 사항을 완전히 해결하지는 못합니다."
        ]
    },
    {
        "Question Number": "8",
        "Situation": "대규모 전자상거래 플랫폼이 빈번한 분산 서비스 거부(DDoS) 공격을 경험하고 있으며, 이로 인해 AWS에 호스팅된 웹 애플리케이션의 가용성과 성능에 영향을 미치고 있습니다. 이 플랫폼은 신뢰성과 서비스 연속성을 보장하면서 긍정적인 사용자 경험을 유지하기 위한 강력한 완화 전략 세트가 필요합니다.",
        "Question": "솔루션 아키텍트가 전자상거래 플랫폼을 위한 효과적인 공격 완화 전략을 개발하기 위해 어떤 접근 방식을 권장해야 합니까?",
        "Options": {
            "1": "DDoS 보호를 위해 AWS Shield Advanced를 활용하고 트래픽 급증을 자동으로 처리하기 위해 Auto Scaling 그룹을 설정합니다.",
            "2": "악성 요청을 필터링하기 위해 AWS WAF를 구현하고 Amazon CloudFront를 사용하여 엣지 위치에서 정적 콘텐츠를 캐시합니다.",
            "3": "DNS 관리를 위해 Amazon Route 53을 사용하고 헬스 체크를 구성하여 영향을 받는 리소스에서 트래픽을 우회합니다.",
            "4": "웹 애플리케이션 방화벽이 있는 애플리케이션 로드 밸런서를 배포하고 모든 트래픽을 VPN을 통해 라우팅하여 추가 보안을 제공합니다."
        },
        "Correct Answer": "DDoS 보호를 위해 AWS Shield Advanced를 활용하고 트래픽 급증을 자동으로 처리하기 위해 Auto Scaling 그룹을 설정합니다.",
        "Explanation": "AWS Shield Advanced는 복잡한 공격에 맞춤화된 향상된 DDoS 보호를 제공하며, Auto Scaling은 용량을 자동으로 조정하여 애플리케이션이 증가된 트래픽을 처리할 수 있도록 보장합니다. 이 조합은 공격을 효과적으로 완화하고 애플리케이션 성능을 유지합니다.",
        "Other Options": [
            "AWS WAF만 구현하는 것은 대규모 DDoS 공격에 대해 충분하지 않을 수 있으며, CloudFront로 캐싱하는 것은 도움이 되지만 공격 완화의 근본적인 문제를 해결하지 않습니다.",
            "웹 애플리케이션 방화벽이 있는 애플리케이션 로드 밸런서를 배포하면 추가 보안을 제공하지만, 모든 트래픽을 VPN을 통해 라우팅하면 지연과 복잡성이 발생하여 성능이 저하될 수 있습니다.",
            "Amazon Route 53을 DNS 관리에 사용하는 것은 라우팅에 유용하지만, 단독으로는 필요한 DDoS 보호나 공격 중 애플리케이션 가용성을 보장할 수 있는 확장성을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "9",
        "Situation": "한 금융 서비스 회사가 온프레미스 MySQL 데이터베이스를 AWS로 마이그레이션할 계획을 세우고 있습니다. 데이터베이스는 애플리케이션의 다운타임을 최소화하기 위해 마이그레이션 과정 동안 운영 상태를 유지해야 합니다. 또한, 회사는 초기 마이그레이션이 완료된 후에도 데이터베이스에 대한 지속적인 변경 사항이 캡처되기를 요구합니다. 이러한 요구 사항을 충족하기 위해 솔루션 아키텍트가 권장해야 할 AWS 서비스는 무엇입니까?",
        "Question": "어떤 AWS 서비스가 최소한의 다운타임을 보장하면서 데이터베이스를 마이그레이션하고 마이그레이션 후 변경 사항의 지속적인 복제를 허용합니까?",
        "Options": {
            "1": "Amazon RDS Read Replica",
            "2": "AWS Database Migration Service (DMS)",
            "3": "Amazon Aurora Global Database",
            "4": "AWS Snowball"
        },
        "Correct Answer": "AWS Database Migration Service (DMS)",
        "Explanation": "AWS Database Migration Service (DMS)는 최소한의 다운타임으로 원활한 데이터베이스 마이그레이션을 가능하게 합니다. 데이터베이스 변경 사항의 지속적인 복제를 허용하여 소스 데이터베이스가 마이그레이션 과정 내내 운영 상태를 유지하도록 보장합니다.",
        "Other Options": [
            "Amazon RDS Read Replica는 읽기 작업을 확장하기 위해 설계되었으며, 이 시나리오에 필요한 지속적인 데이터 마이그레이션 및 변경 캡처 기능을 제공하지 않습니다.",
            "AWS Snowball은 대량의 데이터를 AWS로 이동하는 데 주로 사용되는 데이터 전송 서비스이며, 지속적인 데이터베이스 마이그레이션이나 변경 데이터 캡처를 지원하지 않습니다.",
            "Amazon Aurora Global Database는 전 세계적으로 분산된 애플리케이션을 위해 설계되었으며, 최소한의 다운타임을 보장하면서 기존 데이터베이스를 마이그레이션하는 데 중점을 두지 않습니다."
        ]
    },
    {
        "Question Number": "10",
        "Situation": "한 회사가 모바일 애플리케이션의 사용자 활동 로그를 저장하기 위해 Amazon DynamoDB를 사용하고 있습니다. 이들은 데이터의 변경 사항을 실시간으로 캡처하고 이러한 변경 사항을 처리하여 별도의 분석 테이블을 업데이트하는 솔루션을 구현하고자 합니다. 또한, 특정 작업이 DynamoDB 테이블에서 특정 이벤트가 발생할 때 사용자에게 알림을 트리거하도록 보장하고자 합니다.",
        "Question": "DynamoDB의 변경 사항을 실시간으로 처리하고 사용자에게 알림을 보내기 위해 사용할 수 있는 옵션은 무엇입니까? (두 개 선택)",
        "Options": {
            "1": "사용자 활동 로그 테이블에서 DynamoDB Streams를 활성화하고 스트림을 AWS Lambda 함수와 연결하여 사용자에게 직접 알림을 보냅니다.",
            "2": "DynamoDB 테이블에 변경 사항이 있을 때마다 Amazon SNS를 사용하여 알림을 게시하고 Lambda 함수가 이러한 알림을 구독하도록 합니다.",
            "3": "DynamoDB Streams를 사용하여 테이블의 변경 사항을 캡처하고 AWS Lambda 대신 메시지를 처리하기 위해 Amazon SQS 큐를 설정합니다.",
            "4": "사용자 활동 로그 테이블에서 DynamoDB Streams를 활성화하고 스트림을 처리하고 분석 테이블을 업데이트하기 위해 AWS Lambda 함수를 구성합니다.",
            "5": "AWS Lambda 함수를 예약하여 매 분마다 DynamoDB 테이블을 폴링하고 데이터의 변경 사항을 확인합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "사용자 활동 로그 테이블에서 DynamoDB Streams를 활성화하고 스트림을 처리하고 분석 테이블을 업데이트하기 위해 AWS Lambda 함수를 구성합니다.",
            "사용자 활동 로그 테이블에서 DynamoDB Streams를 활성화하고 스트림을 AWS Lambda 함수와 연결하여 사용자에게 직접 알림을 보냅니다."
        ],
        "Explanation": "DynamoDB Streams를 활성화하고 AWS Lambda 함수를 구성함으로써 회사는 실시간으로 변경 사항을 자동으로 처리하고, 이러한 변경 사항에 따라 분석 테이블을 업데이트하고 사용자에게 알림을 보낼 수 있습니다. 이 접근 방식은 데이터 수정 및 사용자 알림을 처리하는 효율적이고 확장 가능한 방법을 제공합니다.",
        "Other Options": [
            "DynamoDB 테이블을 매 분마다 폴링하는 예약 Lambda 함수를 만드는 것은 실시간 처리에 비효율적이며, 지연을 초래하고 변경 사항에 즉시 반응하지 않습니다.",
            "DynamoDB Streams를 사용하지 않고 Amazon SNS를 알림에 활용하는 것은 데이터의 변경 사항을 처리하기 위한 직접적인 연결을 제공하지 않으며, 변경 사항을 모니터링하기 위한 추가 로직이 필요합니다.",
            "DynamoDB Streams의 메시지를 처리하기 위해 SQS 큐를 사용하는 것은 아키텍처를 복잡하게 만드는 추가 레이어이며, Lambda 함수가 스트림을 직접 처리할 수 있으므로 불필요합니다."
        ]
    },
    {
        "Question Number": "11",
        "Situation": "한 금융 서비스 회사가 온프레미스 Oracle 데이터베이스를 AWS로 마이그레이션할 계획을 세우고 있습니다. 이들은 마이그레이션 프로세스가 효율적이며 기존 데이터베이스의 스키마가 대상 AWS 데이터베이스 서비스와 호환되는지 확인하고자 합니다. 회사에는 Oracle에 경험이 있지만 AWS 서비스에는 경험이 없는 데이터베이스 관리자 팀이 있습니다. 이들은 현재 환경을 평가하고 다운타임을 최소화하면서 마이그레이션을 용이하게 할 수 있는 도구를 찾고 있습니다. (두 개 선택)",
        "Question": "마이그레이션을 효율적으로 수행하는 데 도움이 되는 도구의 조합은 무엇입니까?",
        "Options": {
            "1": "마이그레이션 프로세스에 AWS Database Migration Service (AWS DMS)를 사용하고 데이터베이스 스키마를 분석하고 변환하기 위해 AWS Schema Conversion Tool (AWS SCT)을 사용합니다.",
            "2": "데이터 전송을 위해 AWS Snowball을 구현하고 지속적인 복제를 처리하기 위해 AWS Database Migration Service (AWS DMS)를 사용합니다.",
            "3": "AWS Database Migration Service (AWS DMS)를 사용하여 데이터를 복제하고 AWS Schema Conversion Tool (AWS SCT)을 사용하여 데이터베이스 스키마를 변환합니다.",
            "4": "AWS Glue를 활용하여 데이터 마이그레이션을 위한 ETL 작업을 생성하고 AWS Schema Conversion Tool (AWS SCT)을 사용하여 스키마 변환을 수행합니다.",
            "5": "AWS Data Pipeline을 사용하여 데이터를 Amazon RDS로 이동하고 AWS Schema Conversion Tool (AWS SCT)을 사용하여 스키마를 평가합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Database Migration Service (AWS DMS)를 사용하여 데이터를 복제하고 AWS Schema Conversion Tool (AWS SCT)을 사용하여 데이터베이스 스키마를 변환합니다.",
            "마이그레이션 프로세스에 AWS Database Migration Service (AWS DMS)를 사용하고 데이터베이스 스키마를 분석하고 변환하기 위해 AWS Schema Conversion Tool (AWS SCT)을 사용합니다."
        ],
        "Explanation": "두 개의 정답 모두 데이터 마이그레이션을 위해 AWS DMS를 사용하고 스키마 변환을 위해 AWS SCT를 사용하는데, 이는 AWS로 데이터베이스를 효과적으로 마이그레이션하면서 스키마 호환성을 보장하기 위해 특별히 설계되었습니다.",
        "Other Options": [
            "AWS Data Pipeline은 주로 데이터 오케스트레이션에 사용되며 데이터베이스 마이그레이션을 위해 특별히 설계되지 않았습니다. AWS SCT와 같은 수준의 스키마 변환 기능을 제공하지 않습니다.",
            "AWS Snowball은 대규모 데이터 전송에 사용되지만 지속적인 복제 시나리오에는 적합하지 않습니다. 이 옵션은 스키마 변환의 필요성을 해결하지 않습니다.",
            "AWS Glue는 데이터 마이그레이션에 주로 초점을 맞추지 않은 ETL 서비스입니다. 데이터 마이그레이션을 용이하게 할 수 있지만 AWS SCT가 제공하는 전용 스키마 변환 기능을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "12",
        "Situation": "한 금융 서비스 회사가 다양한 AWS 리소스에 조직 내 여러 팀이 접근할 수 있는 보안 애플리케이션을 설계하고 있습니다. 이 회사는 IAM 역할을 사용하여 접근을 안전하게 관리하고 있습니다. 특정 사용자와 서비스만 특정 역할을 가정할 수 있도록 보장해야 하며, 안전한 통신을 위해 SSL 인증서를 업로드해야 합니다. 이러한 요구 사항을 고려할 때, 역할 접근 및 SSL 인증서를 관리하기 위한 최선의 전략은 무엇입니까?",
        "Question": "회사가 IAM 역할에 대한 접근을 효과적으로 제어하고 SSL 인증서를 관리하기 위해 구현해야 할 전략은 무엇입니까?",
        "Options": {
            "1": "회사는 어떤 사용자가 역할을 가정할 수 있는지를 명시하는 신뢰 정책을 가진 IAM 역할을 생성해야 합니다. 또한, 애플리케이션의 도메인에 대한 SSL 인증서를 AWS Certificate Manager (ACM)에 업로드하여 안전한 통신을 보장해야 합니다.",
            "2": "회사는 신뢰 정책을 명시하지 않고 IAM 역할을 생성하여 모든 AWS 계정이 이를 가정할 수 있도록 해야 합니다. SSL 인증서는 ACM 대신 IAM에 업로드하여 관리해야 합니다.",
            "3": "회사는 각 팀에 대해 제한적인 신뢰 정책을 가진 여러 IAM 역할을 생성하고 SSL 인증서를 ACM 대신 IAM에 업로드하여 안전한 통신을 해야 합니다.",
            "4": "회사는 모든 내부 사용자가 역할을 가정할 수 있도록 광범위한 신뢰 정책을 가진 단일 IAM 역할을 생성해야 합니다. SSL 인증서는 ACM 대신 서버에 직접 업로드하여 관리해야 합니다."
        },
        "Correct Answer": "회사는 어떤 사용자가 역할을 가정할 수 있는지를 명시하는 신뢰 정책을 가진 IAM 역할을 생성해야 합니다. 또한, 애플리케이션의 도메인에 대한 SSL 인증서를 AWS Certificate Manager (ACM)에 업로드하여 안전한 통신을 보장해야 합니다.",
        "Explanation": "이 옵션은 IAM 역할에 대한 특정 신뢰 정책을 통해 최소 권한 접근을 구현하여 지정된 사용자만 역할을 가정할 수 있도록 하여 AWS 모범 사례를 따릅니다. 또한 SSL 인증서를 관리하기 위해 AWS Certificate Manager (ACM)를 사용하는 것이 올바른 접근 방식임을 제안합니다.",
        "Other Options": [
            "이 옵션은 최소 권한 원칙을 따르지 않는 광범위한 신뢰 정책을 제안하여 무단 접근을 허용할 수 있습니다. 또한, SSL 인증서를 서버에 직접 관리하는 것은 덜 안전하며 AWS의 최상의 서비스를 활용하지 않습니다.",
            "이 옵션은 신뢰 정책 없이 IAM 역할을 생성하는 것을 나타내며, 이는 모든 AWS 계정에서 무단 접근을 허용하게 됩니다. 또한, ACM을 사용하는 것보다 IAM에 SSL 인증서를 업로드하는 것이 최선의 관행이 아님을 잘못 제안합니다.",
            "이 옵션은 여러 역할을 사용하는 것을 제안하지만 SSL 인증서를 IAM 대신 ACM을 통해 관리하는 것이 잘못된 접근 방식이며, 불필요한 복잡성과 보안 문제를 초래할 수 있습니다."
        ]
    },
    {
        "Question Number": "13",
        "Situation": "한 금융 서비스 회사가 애플리케이션을 AWS로 전환하고 Amazon ECS 환경에서 비용 절감을 위해 Spot Instances를 활용하고자 합니다. 이 회사는 Spot Instance 중단 동안 서비스 중단을 최소화하면서 작업의 높은 가용성과 성능을 유지하는 솔루션이 필요합니다. 그들은 Spot Instance 중단에 대응하여 작업의 생애 주기를 관리하기 위해 ECS의 기능을 사용하고자 합니다.",
        "Question": "다음 구성 중 Spot Instances에서 실행되는 ECS 작업이 서비스 중단 없이 원활하게 종료되고 교체되도록 보장하는 것은 무엇입니까?",
        "Options": {
            "1": "ECS를 구성하여 On-Demand 인스턴스에서만 작업을 실행하여 Spot 인스턴스 종료로 인한 중단을 피하고, 더 높은 비용으로 일관된 가용성을 보장합니다.",
            "2": "정기적으로 Spot 인스턴스 중단을 확인하고 클러스터의 건강한 인스턴스에서 종료된 작업을 수동으로 교체하는 예약 작업을 사용합니다.",
            "3": "Spot 인스턴스 중단 동안 일부 작업이 종료될 수 있도록 최소 건강 비율을 설정하여 서비스의 전체 용량을 유지합니다.",
            "4": "ECS 자동 Spot 인스턴스 배수를 활성화하여 두 분간의 중단 통지를 받은 후 작업이 배수되고 원활하게 종료되도록 하며, 다른 인스턴스에서 교체 작업을 예약합니다."
        },
        "Correct Answer": "ECS 자동 Spot 인스턴스 배수를 활성화하여 두 분간의 중단 통지를 받은 후 작업이 배수되고 원활하게 종료되도록 하며, 다른 인스턴스에서 교체 작업을 예약합니다.",
        "Explanation": "ECS 자동 Spot 인스턴스 배수를 활성화하면 고유한 DRAINING 기능을 사용하여 작업이 원활하게 종료됩니다. 이 과정은 작업이 중단 없이 중지되고 교체되도록 하여 서비스 중단을 최소화하고 Spot 인스턴스 사용의 효율성을 극대화합니다.",
        "Other Options": [
            "예약 작업을 사용하여 종료된 작업을 수동으로 교체하는 것은 지연과 잠재적인 서비스 중단을 초래할 수 있으며, Spot 인스턴스 중단에 자동으로 대응하지 않습니다.",
            "ECS를 구성하여 On-Demand 인스턴스에서만 작업을 실행하면 Spot 인스턴스를 사용하는 비용 이점이 사라지고 중단이 발생할 때 이를 처리하는 방법을 해결하지 않습니다.",
            "최소 건강 비율을 설정하면 Spot 인스턴스 중단 동안 서비스 저하가 발생할 수 있으며, 모든 작업이 원활하게 종료되거나 적시에 교체된다는 보장을 하지 않습니다."
        ]
    },
    {
        "Question Number": "14",
        "Situation": "한 금융 서비스 회사가 높은 가용성과 데이터 보호가 필요한 중요한 애플리케이션을 운영하고 있습니다. 이 회사의 재해 복구 계획에는 최소한의 다운타임과 데이터 손실을 보장하기 위한 특정 복구 시간 목표(RTO)와 복구 지점 목표(RPO)가 포함되어 있습니다. 팀은 이러한 목표를 효과적으로 달성하기 위해 다양한 AWS 서비스를 고려하고 있습니다.",
        "Question": "어떤 AWS 서비스 조합이 회사가 중요한 애플리케이션의 RTO 및 RPO 목표를 달성하는 데 가장 도움이 될까요?",
        "Options": {
            "1": "애플리케이션 배포를 위해 AWS Elastic Beanstalk를 구현하고 데이터 보호를 위해 AWS Backup을 사용합니다.",
            "2": "Amazon RDS를 활용하여 자동 백업 및 Multi-AZ 배포로 높은 가용성을 제공합니다.",
            "3": "데이터 저장을 위해 Amazon S3를 사용하고 데이터 백업 처리를 위해 AWS Lambda를 사용합니다.",
            "4": "데이터 백업 및 복구를 위해 Amazon EC2와 EBS 스냅샷을 활용합니다."
        },
        "Correct Answer": "Amazon RDS를 활용하여 자동 백업 및 Multi-AZ 배포로 높은 가용성을 제공합니다.",
        "Explanation": "Amazon RDS는 내장된 자동 백업 및 Multi-AZ 배포를 제공하여 빠른 장애 조치 및 시점 복구를 가능하게 하여 RTO 및 RPO를 향상시킵니다. 이는 높은 가용성과 최소한의 데이터 손실이 필요한 중요한 애플리케이션에 적합한 선택입니다.",
        "Other Options": [
            "Amazon EC2와 EBS 스냅샷은 복구 옵션을 제공할 수 있지만, 스냅샷의 수동적 특성으로 인해 RTO 및 RPO가 관리형 서비스인 RDS에 비해 더 길어질 수 있습니다.",
            "AWS Elastic Beanstalk는 애플리케이션 배포를 용이하게 하지만 데이터베이스 백업이나 가용성을 본질적으로 관리하지 않으므로 엄격한 RTO 및 RPO 요구 사항에 덜 적합합니다.",
            "Amazon S3는 내구성 있는 저장 옵션이지만 높은 가용성과 애플리케이션 수준의 복구를 위한 내장 기능이 부족하여 낮은 RTO 및 RPO 목표를 달성하는 데 필수적입니다."
        ]
    },
    {
        "Question Number": "15",
        "Situation": "한 회사가 다양한 서비스가 AWS Lambda 함수를 동기적으로 호출해야 하는 서버리스 아키텍처를 설계하고 있습니다. 솔루션 아키텍트는 실시간 데이터 처리 및 사용자 상호작용을 처리하기 위해 어떤 서비스가 Lambda 함수를 동기적으로 직접 호출할 수 있는지 식별해야 합니다.",
        "Question": "다음 서비스 중 AWS Lambda 함수를 동기적으로 호출할 수 있는 것은 무엇입니까?",
        "Options": {
            "1": "Amazon Kinesis Data Firehose, Amazon S3 Batch, Amazon CloudFront, Amazon Cognito",
            "2": "Amazon CloudFront, Amazon Lex, Elastic Load Balancing, Amazon S3 Batch",
            "3": "Amazon Lex, Amazon API Gateway, AWS Step Functions, Elastic Load Balancing",
            "4": "Amazon API Gateway, Amazon Kinesis Data Firehose, AWS Step Functions, Amazon Cognito"
        },
        "Correct Answer": "Amazon Lex, Amazon API Gateway, AWS Step Functions, Elastic Load Balancing",
        "Explanation": "Amazon Lex, Amazon API Gateway, AWS Step Functions 및 Elastic Load Balancing은 모두 AWS Lambda 함수를 동기적으로 호출할 수 있습니다. 이러한 서비스는 실시간 요청을 처리하도록 설계되었으며 Lambda 함수의 응답을 기다린 후 진행할 수 있습니다.",
        "Other Options": [
            "옵션 1은 잘못되었습니다. Amazon API Gateway와 AWS Step Functions는 Lambda 함수를 동기적으로 호출할 수 있지만, Amazon Kinesis Data Firehose는 주로 스트리밍 데이터에 사용되며 Lambda를 동기적으로 호출하지 않고, Amazon Cognito는 사용자 인증에 중점을 두고 있습니다.",
            "옵션 2는 잘못되었습니다. Amazon Lex는 Lambda 함수를 호출할 수 있지만, Amazon CloudFront와 Amazon S3 Batch는 Lambda를 동기적으로 호출하지 않습니다. CloudFront는 요청/응답 조작을 위해 Lambda@Edge를 사용하고, S3 Batch는 비동기적으로 작동합니다.",
            "옵션 4는 잘못되었습니다. Amazon Kinesis Data Firehose는 Lambda와 통합할 수 있지만, Lambda를 동기적으로 호출하지 않습니다. 또한 Amazon S3 Batch는 Lambda 함수를 동기적으로 호출하도록 설계되지 않았습니다."
        ]
    },
    {
        "Question Number": "16",
        "Situation": "한 기술 회사가 AWS Elastic Beanstalk를 사용하여 웹 애플리케이션의 새 버전을 배포하고 있습니다. 이 애플리케이션은 고객 거래에 필수적이며, 회사는 배포 과정에서 다운타임을 최소화하고자 합니다. 그들은 목표를 달성하기 위해 Elastic Beanstalk에서 제공하는 다양한 배포 정책을 고려하고 있습니다.",
        "Question": "애플리케이션 배포 중 최소한의 다운타임을 보장하기 위해 솔루션 아키텍트가 선택해야 할 배포 정책은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "Blue/Green",
            "2": "RollingWithAdditionalBatch",
            "3": "Immutable",
            "4": "Rolling",
            "5": "AllAtOnce"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "RollingWithAdditionalBatch",
            "Immutable"
        ],
        "Explanation": "'RollingWithAdditionalBatch'와 'Immutable' 배포 정책 모두 배포 중 애플리케이션 가용성을 유지하는 데 도움을 줍니다. 'RollingWithAdditionalBatch'는 배포가 시작되기 전에 추가 인스턴스 배치를 시작할 수 있도록 하여 용량을 유지합니다. 'Immutable'은 새로운 애플리케이션 버전으로 새로운 인스턴스 집합을 별도의 Auto Scaling 그룹에서 시작하여, 새로운 인스턴스가 준비될 때까지 이전 버전이 그대로 유지되도록 하여 다운타임을 제로로 제공합니다.",
        "Other Options": [
            "'AllAtOnce'는 새 버전을 모든 인스턴스에 동시에 배포하므로, 배포가 실패하거나 새 버전에서 문제가 발생할 경우 다운타임이 발생할 수 있습니다.",
            "'Rolling'은 표준 롤링 배포를 가능하게 하지만, 이전 인스턴스가 업데이트되기 전에 추가 인스턴스가 준비되지 않을 수 있으므로 'RollingWithAdditionalBatch'와 같은 수준의 용량 보장을 제공하지 않습니다.",
            "'Blue/Green'은 Elastic Beanstalk의 직접적인 배포 정책이 아니라, 두 개의 동일한 환경 간에 트래픽을 전환하는 배포 전략을 의미합니다. 이는 다운타임 제로를 달성할 수 있지만, Elastic Beanstalk 내에서 배포 정책으로 분류되지 않습니다."
        ]
    },
    {
        "Question Number": "17",
        "Situation": "한 금융 서비스 회사가 규제가 엄격한 환경에서 애플리케이션 워크로드를 위해 Amazon EC2 인스턴스에 의존하고 있습니다. 회사는 모든 EC2 인스턴스가 보안 기준을 준수하기 위해 정기적으로 패치되도록 해야 합니다. IT 보안 팀은 패치 빈도, 패치 유형 및 롤백 절차의 필요성을 명시하는 패치 관리 정책을 수립했습니다. 회사는 EC2 인스턴스의 패치를 자동화하면서 다운타임을 최소화하고 패치 관리 정책을 준수하고자 합니다.",
        "Question": "회사가 패치 관리 정책을 준수하면서 EC2 인스턴스의 패치를 자동화하기 위한 최선의 접근 방식은 무엇입니까?",
        "Options": {
            "1": "AWS Config 규칙을 활용하여 EC2 인스턴스의 패치 관리 정책 준수를 모니터링합니다. AWS Config에서 생성된 준수 보고서를 기반으로 수동으로 패치를 적용합니다.",
            "2": "EC2 인스턴스에 AWS 서비스와 통합되는 서드파티 패치 관리 도구를 배포하여 패치 프로세스를 자동화하고 보고 기능을 제공합니다.",
            "3": "일정에 따라 트리거되는 AWS Lambda 함수를 설정하여 SSH를 사용하여 EC2 인스턴스에 직접 패치를 적용합니다. 실패 시 함수가 재시도하도록 오류 처리를 구현합니다.",
            "4": "AWS Systems Manager Patch Manager를 사용하여 정의된 패치 일정에 따라 패치를 자동화합니다. 패치를 적용할 시기를 지정하기 위해 유지 관리 창을 구성합니다. 패치 기준선에 필요한 패치가 포함되어 있는지 확인합니다."
        },
        "Correct Answer": "AWS Systems Manager Patch Manager를 사용하여 정의된 패치 일정에 따라 패치를 자동화합니다. 패치를 적용할 시기를 지정하기 위해 유지 관리 창을 구성합니다. 패치 기준선에 필요한 패치가 포함되어 있는지 확인합니다.",
        "Explanation": "AWS Systems Manager Patch Manager를 사용하는 것은 EC2 인스턴스의 패치를 자동화하는 최적의 솔루션입니다. 이는 AWS 서비스와 직접 통합되며, 유지 관리 창을 예약할 수 있고, 중앙 집중식 패치 관리 접근 방식을 제공합니다. 이를 통해 회사의 패치 관리 정책을 준수하면서 다운타임을 최소화할 수 있습니다.",
        "Other Options": [
            "AWS Lambda 함수를 설정하여 SSH를 통해 패치를 관리하는 것은 자동화를 위한 최선의 방법이 아닙니다. 이는 사용자 정의 코딩이 필요하고, Systems Manager의 내장 준수 기능이 부족하며, SSH 키가 올바르게 관리되지 않을 경우 보안 위험을 초래할 수 있습니다.",
            "AWS Config 규칙을 활용하여 준수를 모니터링하는 것은 유용하지만, 패치 프로세스를 자동화하지는 않습니다. 이는 준수 상태에 대한 가시성만 제공하므로 패치를 적용하기 위해 여전히 수동 개입이 필요합니다.",
            "서드파티 패치 관리 도구를 배포하는 것은 복잡성을 추가하고 잠재적인 통합 문제를 일으킬 수 있습니다. 또한, AWS Systems Manager와 같은 수준의 AWS 서비스 통합을 제공하지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "18",
        "Situation": "한 금융 서비스 회사가 AWS에 호스팅된 새로운 온라인 뱅킹 애플리케이션을 개발하고 있습니다. 이 애플리케이션은 장애 발생 시 높은 가용성과 최소한의 데이터 손실을 보장해야 하며, 여러 지역의 최종 사용자에게 낮은 대기 시간을 유지해야 합니다.",
        "Question": "온라인 뱅킹 애플리케이션의 높은 가용성과 재해 복구를 달성하기 위한 가장 효과적인 아키텍처는 무엇입니까?",
        "Options": {
            "1": "AWS Lambda를 애플리케이션 로직에 사용하고 DynamoDB를 데이터베이스로 사용하여, 단일 지역에 프로비저닝된 처리량으로 배포하여 피크 부하를 처리합니다.",
            "2": "단일 지역의 여러 가용 영역에 걸쳐 EC2 인스턴스의 Auto Scaling 그룹을 구현하고, 데이터베이스에 대해 Multi-AZ 배포가 있는 Amazon Aurora를 사용하며, Route 53을 DNS 장애 조치로 구성합니다.",
            "3": "AWS Fargate를 사용하여 서버리스 아키텍처를 만들고, 데이터 저장을 위해 Amazon S3를 사용하여, 단일 지역 내 여러 가용 영역에 배포합니다.",
            "4": "Amazon EC2 인스턴스를 Application Load Balancer 뒤에 두고 여러 AWS 리전에서 애플리케이션을 배포합니다. 각 리전에서 Amazon RDS와 읽기 복제본을 사용하고, 교차 리전 복제를 활성화합니다."
        },
        "Correct Answer": "Amazon EC2 인스턴스를 Application Load Balancer 뒤에 두고 여러 AWS 리전에서 애플리케이션을 배포합니다. 각 리전에서 Amazon RDS와 읽기 복제본을 사용하고, 교차 리전 복제를 활성화합니다.",
        "Explanation": "여러 AWS 리전에서 애플리케이션을 배포하면 하나의 리전이 다운되더라도 애플리케이션이 계속 가용성을 유지할 수 있습니다. EC2 인스턴스와 Application Load Balancer를 사용하면 트래픽을 효율적으로 분산할 수 있습니다. 각 리전의 Amazon RDS와 읽기 복제본은 데이터 중복성과 다양한 리전의 사용자에게 낮은 대기 시간 접근을 제공하며, 교차 리전 복제는 지역 장애 발생 시 데이터 손실을 완화합니다.",
        "Other Options": [
            "AWS Lambda와 DynamoDB를 단일 지역에서 사용하는 것은 지역 간 중복성이 부족하고 지역 장애에 취약하므로 충분한 높은 가용성이나 재해 복구를 제공하지 않습니다.",
            "Multi-AZ 배포가 있는 Auto Scaling 그룹을 구현하면 단일 지역 내에서 가용성을 개선하지만, 지역 장애에 대한 보호를 제공하지 않으므로 금융 서비스 애플리케이션에 중요합니다.",
            "AWS Fargate와 S3를 사용하는 서버리스 아키텍처는 단일 지역에서 높은 가용성과 재해 복구를 보장하기에 충분하지 않으며, 최소한의 다운타임과 데이터 손실을 보장하기 위해 필요한 교차 지역 중복성이 부족합니다."
        ]
    },
    {
        "Question Number": "19",
        "Situation": "대규모 전자상거래 회사가 빠른 성장을 경험하고 있으며, 확장성과 복원력을 보장하기 위해 아키텍처를 재설계해야 합니다. 이 회사는 비용을 최소화하면서 변동하는 트래픽 패턴을 수용하는 것을 목표로 하고 있습니다. 그들은 수동 개입 없이 수요에 따라 자원을 자동으로 조정할 수 있는 솔루션이 필요하며, 피크 사용 시간 동안 높은 가용성과 성능을 유지하는 비즈니스 목표와 일치해야 합니다.",
        "Question": "다음 중 회사의 탄력적이고 비용 효율적인 솔루션 요구 사항을 가장 잘 충족하는 아키텍처 설계는 무엇입니까?",
        "Options": {
            "1": "수신 트래픽을 처리하기 위해 Application Load Balancer 뒤에 EC2 인스턴스가 있는 자동 확장 그룹을 구현합니다. CPU 활용도 메트릭을 기반으로 확장 정책을 구성합니다.",
            "2": "모든 노드에서 고정된 수의 작업을 통해 트래픽을 관리하기 위해 Amazon ECS와 같은 컨테이너 오케스트레이션 서비스를 설정하여 자원이 항상 사용 가능하도록 합니다.",
            "3": "AWS Lambda 함수를 사용하여 수신 요청을 처리하고 사용량에 따라 자동으로 확장합니다. Amazon API Gateway를 통합하여 프론트 엔드에 RESTful 인터페이스를 제공합니다.",
            "4": "여러 가용 영역에 걸쳐 고정 크기의 EC2 인스턴스 군을 배포하여 높은 가용성을 보장합니다. 동적 확장 없이 DNS 기반 장애 조치를 위해 Route 53을 사용합니다."
        },
        "Correct Answer": "수신 트래픽을 처리하기 위해 Application Load Balancer 뒤에 EC2 인스턴스가 있는 자동 확장 그룹을 구현합니다. CPU 활용도 메트릭을 기반으로 확장 정책을 구성합니다.",
        "Explanation": "이 옵션은 동적 확장 기능을 제공하여 아키텍처가 실시간 수요에 따라 자동으로 조정될 수 있도록 합니다. Application Load Balancer와 함께 자동 확장 그룹을 사용하면 자원을 효율적으로 확장하거나 축소할 수 있어 트래픽 변동 시 복원력과 비용 효율성을 제공합니다.",
        "Other Options": [
            "이 옵션은 동적 확장 기능을 제공하지 않습니다. 가용 영역에 인스턴스를 분산시켜 높은 가용성을 보장하지만, 변화하는 트래픽 패턴에 적응할 수 없어 저 트래픽 기간 동안 과도한 프로비저닝과 비용 증가로 이어질 수 있습니다.",
            "AWS Lambda 함수를 사용하는 것은 확장 가능한 솔루션이지만, 잘 정의된 RESTful 인터페이스에 필수적인 Amazon API Gateway의 사용을 언급하지 않습니다. 또한 특정 시나리오에서 EC2 인스턴스만큼 복잡한 작업을 효율적으로 처리하지 못할 수 있습니다.",
            "이 옵션은 동적 확장을 제공하지 않습니다. Amazon ECS는 컨테이너를 관리할 수 있지만, 고정된 수의 작업은 아키텍처가 변동하는 트래픽에 대응하는 능력을 제한하여 피크 시간 동안 성능 문제를 일으킬 수 있습니다."
        ]
    },
    {
        "Question Number": "20",
        "Situation": "한 금융 서비스 회사가 Amazon EC2 인스턴스를 사용하여 클라우드에서 애플리케이션을 실행하고 있습니다. 그들은 일부 인스턴스가 지속적으로 과소 사용되고 있는 반면, 다른 인스턴스는 최대 용량으로 실행되고 있다는 것을 발견했습니다. 팀은 비용과 성능을 최적화하기 위해 어떤 자원이 과소 사용되고 있고 어떤 자원이 과다 사용되고 있는지를 식별하기 위해 사용 보고서를 분석하고자 합니다. 그들은 AWS CloudWatch 메트릭과 AWS Cost Explorer에 접근할 수 있습니다.",
        "Question": "사용 보고서를 분석하고 과소 사용 및 과다 사용된 EC2 인스턴스를 식별하기 위한 최선의 접근 방식은 무엇입니까?",
        "Options": {
            "1": "AWS Trusted Advisor를 활용하여 인스턴스 활용도를 검토하고 추천을 받습니다.",
            "2": "CloudWatch에서 EC2 인스턴스 메트릭을 분석하여 시간에 따른 CPU 및 메모리 사용 패턴을 식별합니다.",
            "3": "AWS Cost Explorer를 사용하여 각 인스턴스와 관련된 총 비용을 평가하고 이상 현상을 식별합니다.",
            "4": "AWS Budgets를 활용하여 각 EC2 인스턴스에 대한 지출 한도를 설정하고 보고서를 분석합니다."
        },
        "Correct Answer": "CloudWatch에서 EC2 인스턴스 메트릭을 분석하여 시간에 따른 CPU 및 메모리 사용 패턴을 식별합니다.",
        "Explanation": "CloudWatch에서 EC2 인스턴스 메트릭을 분석하면 시간에 따른 CPU 및 메모리 활용도와 같은 성능 메트릭을 직접 관찰할 수 있습니다. 이 데이터는 인스턴스가 과소 사용되고 있는지 또는 과다 사용되고 있는지를 실제 사용 패턴에 따라 결정하는 데 중요하며, 효과적인 자원 최적화를 가능하게 합니다.",
        "Other Options": [
            "AWS Trusted Advisor는 모범 사례 및 자원 최적화를 기반으로 추천을 제공하지만, 과소 사용 또는 과다 사용된 인스턴스를 정확하게 식별하는 데 필요한 시간에 따른 세부 메트릭을 제공하지 않습니다.",
            "AWS Cost Explorer는 전체 비용 및 추세를 이해하는 데 유용하지만, 개별 인스턴스 성능을 효과적으로 평가하는 데 필요한 특정 사용 메트릭을 제공하지 않습니다.",
            "AWS Budgets는 지출 한도를 추적하는 데 도움이 되지만, EC2 인스턴스의 과소 사용 또는 과다 사용을 식별하는 데 필요한 세부 성능 메트릭을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "21",
        "Situation": "한 회사가 정기적인 구성 업데이트 및 유지 관리 작업이 필요한 Amazon ECS 컨테이너 인스턴스 군을 관리하고 있습니다. 운영 팀은 각 인스턴스에 개별적으로 로그인하지 않고 여러 컨테이너 인스턴스에서 명령을 실행하는 프로세스를 간소화하고자 합니다. 그들은 이러한 명령의 상태와 결과를 확인할 수 있는 솔루션이 필요하며, 컨테이너 인스턴스에 대한 안전한 접근을 보장해야 합니다.",
        "Question": "운영 팀이 ECS 컨테이너 인스턴스 전반에 걸쳐 구성 업데이트 및 관리 작업을 효율적으로 관리하기 위해 어떤 AWS 서비스를 사용해야 합니까?",
        "Options": {
            "1": "AWS CloudFormation을 활용하여 ECS 컨테이너 인스턴스의 원하는 상태를 정의하는 스택을 생성하여 모든 구성이 군 전체에 일관되게 적용되도록 합니다.",
            "2": "Amazon EventBridge를 활용하여 각 ECS 컨테이너 인스턴스에서 로컬로 스크립트를 실행하는 작업을 예약하여 구성 업데이트 및 관리 작업을 수행합니다.",
            "3": "AWS Systems Manager Run Command를 사용하여 여러 ECS 컨테이너 인스턴스에서 동시에 명령을 실행하고, 명령 실행 상태 및 결과에 대한 중앙 집중식 뷰를 제공합니다.",
            "4": "AWS Lambda 함수를 구현하여 CloudWatch Events에서 트리거하여 구성 변경이 있을 때마다 ECS 컨테이너 인스턴스를 자동으로 업데이트합니다."
        },
        "Correct Answer": "AWS Systems Manager Run Command를 사용하여 여러 ECS 컨테이너 인스턴스에서 동시에 명령을 실행하고, 명령 실행 상태 및 결과에 대한 중앙 집중식 뷰를 제공합니다.",
        "Explanation": "AWS Systems Manager Run Command는 여러 EC2 인스턴스 또는 ECS 컨테이너 인스턴스에서 관리 및 자동화 작업을 안전하고 효율적으로 수행할 수 있게 해줍니다. 명령을 실행하고 그 상태를 확인할 수 있는 중앙 집중식 인터페이스를 제공하여 주어진 시나리오에 이상적입니다.",
        "Other Options": [
            "AWS CloudFormation은 인프라를 코드로 관리하는 데 사용되며, 기존 실행 중인 인스턴스에서 명령을 실행하거나 구성을 관리하는 직접적인 기능을 제공하지 않습니다. 자원을 프로비저닝하고 관리하는 데 중점을 두고 있습니다.",
            "AWS Lambda 함수는 이벤트 기반 아키텍처에 가장 적합합니다. 이벤트에 따라 작업을 트리거하는 데 사용할 수 있지만, 여러 ECS 인스턴스에서 대량의 명령을 실행하거나 명령 실행 결과에 대한 가시성을 제공하는 간단한 방법을 제공하지 않습니다.",
            "Amazon EventBridge는 AWS 환경에서 이벤트에 응답하는 서버리스 이벤트 버스 서비스이지만, ECS 컨테이너 인스턴스에서 로컬로 명령을 실행하는 기능을 본질적으로 제공하지 않습니다. 스크립트를 실행하려면 추가 설정이 필요하며, Systems Manager의 중앙 집중식 명령 실행 및 보고 기능이 부족합니다."
        ]
    },
    {
        "Question Number": "22",
        "Situation": "한 금융 서비스 회사가 애플리케이션을 AWS로 마이그레이션하고 있으며, 모든 민감한 데이터가 저장 중 및 전송 중에 암호화되도록 해야 합니다. 팀은 효과적인 암호화 관리를 위해 다양한 AWS 서비스를 고려하고 있으며, 산업 표준 준수를 보장하고자 합니다. 그들은 암호화 키 관리의 운영 부담을 최소화하는 솔루션을 구현하고자 합니다.",
        "Question": "회사가 저장 중 및 전송 중 데이터에 대해 효과적으로 암호화를 구현하기 위해 어떤 전략을 채택해야 합니까?",
        "Options": {
            "1": "AWS CloudHSM을 사용하여 암호화 키를 관리하고 전송 중 데이터에 대한 애플리케이션 수준의 암호화를 구성합니다.",
            "2": "AWS Key Management Service (KMS)를 사용하여 암호화 키를 관리하고 KMS 키로 S3 서버 측 암호화를 활성화합니다.",
            "3": "Amazon S3 버킷 정책을 배포하여 접근을 제한하고 저장 중 데이터에 대해 클라이언트 측 암호화를 사용합니다.",
            "4": "Amazon RDS 암호화를 활성화하고 추가 키 관리 없이 SSL/TLS를 사용하여 전송 중 데이터를 보호합니다."
        },
        "Correct Answer": "AWS Key Management Service (KMS)를 사용하여 암호화 키를 관리하고 KMS 키로 S3 서버 측 암호화를 활성화합니다.",
        "Explanation": "AWS Key Management Service (KMS)를 사용하면 암호화 키 관리가 간소화되고 AWS 서비스와의 통합이 용이해집니다. KMS 키로 S3 서버 측 암호화를 활성화하면 저장 중 데이터에 대한 강력한 암호화를 제공하며, 규제 요구 사항 준수를 가능하게 합니다. 이 접근 방식은 HTTPS와 결합할 때 저장 중 및 전송 중 데이터 모두를 효과적으로 보호합니다.",
        "Other Options": [
            "AWS CloudHSM을 활용하면 키 관리의 복잡성과 운영 부담이 증가하며, AWS KMS가 더 간단한 솔루션을 제공할 수 있는 경우에는 필요하지 않을 수 있습니다. 애플리케이션 수준의 암호화는 추가 구현 노력이 필요합니다.",
            "Amazon RDS 암호화를 활성화하면 저장 중 데이터에 대한 보호를 제공하지만, SSL/TLS가 전송 중 데이터를 보호하는 동안 이 옵션은 키 관리 문제를 해결하지 않습니다. 두 가지 측면 모두를 위한 보다 포괄적인 솔루션이 필요합니다.",
            "Amazon S3 버킷 정책을 배포하면 접근을 제한할 수 있지만, 저장 중 데이터 자체에 대한 암호화를 제공하지 않습니다. 클라이언트 측 암호화는 애플리케이션에 키 관리의 부담을 주어 효율성이 떨어집니다."
        ]
    },
    {
        "Question Number": "23",
        "Situation": "한 금융 서비스 회사는 자동으로 장애에서 복구할 수 있는 아키텍처가 필요합니다. 이 아키텍처는 중요한 애플리케이션이 최소한의 다운타임으로 사용 가능하도록 보장하고, 서로 다른 지역 간의 장애 조치를 효율적으로 관리할 수 있어야 합니다. 회사는 최소한의 수동 개입으로 AWS 서비스를 활용하는 솔루션을 선호합니다.",
        "Question": "다음 솔루션 중 회사의 애플리케이션에 가장 효과적인 자동 복구 메커니즘을 제공하는 것은 무엇입니까?",
        "Options": {
            "1": "여러 AWS 리전에서 애플리케이션을 배포하고 Amazon Route 53을 사용하여 상태 점검 및 장애 조치 라우팅 정책을 구성합니다. 장애 발생 시 애플리케이션 상태의 백업을 트리거하는 AWS Lambda 함수를 설정합니다.",
            "2": "Amazon RDS를 사용하여 데이터베이스 복제를 위한 다중 리전 아키텍처를 구현합니다. Amazon Route 53을 DNS 장애 조치에 사용하고, 데이터베이스 인스턴스가 비정상 상태가 될 때 경고하도록 Amazon CloudWatch를 구성합니다.",
            "3": "단일 리전의 여러 가용 영역에 걸쳐 AWS Elastic Load Balancing을 설정합니다. 상태 점검이 있는 Amazon EC2 인스턴스를 사용하여 트래픽이 건강한 인스턴스에만 라우팅되도록 합니다.",
            "4": "Amazon EC2 Auto Scaling을 사용하여 단일 리전에서 항상 최소 수의 건강한 인스턴스가 실행되도록 합니다. CloudWatch 알람을 구성하여 인스턴스를 모니터링하고 비정상 인스턴스를 자동으로 교체합니다."
        },
        "Correct Answer": "여러 AWS 리전에서 애플리케이션을 배포하고 Amazon Route 53을 사용하여 상태 점검 및 장애 조치 라우팅 정책을 구성합니다. 장애 발생 시 애플리케이션 상태의 백업을 트리거하는 AWS Lambda 함수를 설정합니다.",
        "Explanation": "이 옵션은 다중 리전 배포를 활용하여 가용성과 복원력을 향상시키는 가장 포괄적인 자동 복구 메커니즘을 제공합니다. Route 53 상태 점검을 사용하면 리전별 장애 발생 시 원활한 장애 조치가 가능하며, Lambda 함수는 애플리케이션 상태가 보존되고 복구 가능하도록 보장합니다.",
        "Other Options": [
            "이 옵션은 단일 리전 내에서 Auto Scaling에만 의존하며, 지리적 중복성을 제공하지 않으며 지역 장애를 효과적으로 처리하지 못할 수 있습니다.",
            "이 옵션은 다중 리전 설정을 포함하지만 주로 데이터베이스 복제에 초점을 맞추고 있으며, 포괄적인 재해 복구를 위한 애플리케이션 수준의 장애 조치 메커니즘을 충분히 다루지 않습니다.",
            "이 옵션은 단일 리전에 한정되어 있으며 가용 영역 간의 로드 밸런싱에 초점을 맞추고 있습니다. 지역 전체 장애 발생 시 자동 복구를 위한 필요한 조항이 부족하여 회사의 요구 사항에 덜 효과적입니다."
        ]
    },
    {
        "Question Number": "24",
        "Situation": "한 금융 서비스 회사가 레거시 애플리케이션을 AWS로 마이그레이션할 계획입니다. 이러한 애플리케이션은 종속성과 자원 활용도를 분석해야 하는 여러 구성 요소로 이루어져 있습니다. 회사는 지속적인 비즈니스 운영에 최소한의 방해로 클라우드로 원활하게 전환되기를 원합니다. 그들은 발견 및 마이그레이션 프로세스를 지원하기 위해 다양한 AWS 도구를 고려하고 있습니다.",
        "Question": "마이그레이션 계획 단계에서 기존 레거시 애플리케이션의 종속성과 자원 활용도를 식별하는 데 가장 효과적인 도구는 무엇입니까?",
        "Options": {
            "1": "AWS Application Discovery Service를 사용하여 온프레미스 애플리케이션에 대한 데이터 수집 및 분석을 수행하고, 자원 활용도 및 종속성을 포함합니다.",
            "2": "AWS CloudTrail을 사용하여 마이그레이션이 발생한 후 AWS 계정 내의 API 호출 및 사용자 활동을 모니터링합니다.",
            "3": "AWS Config를 사용하여 마이그레이션 후 애플리케이션의 자원 구성 및 준수를 추적합니다.",
            "4": "AWS Systems Manager를 사용하여 마이그레이션 후 AWS 환경에서 애플리케이션 운영을 관리하고 자동화합니다."
        },
        "Correct Answer": "AWS Application Discovery Service를 사용하여 온프레미스 애플리케이션에 대한 데이터 수집 및 분석을 수행하고, 자원 활용도 및 종속성을 포함합니다.",
        "Explanation": "AWS Application Discovery Service는 조직이 AWS로의 마이그레이션을 계획하는 데 도움을 주기 위해 설계되었으며, 애플리케이션 종속성과 자원 활용도를 자동으로 식별합니다. 이는 보다 정보에 기반한 마이그레이션 전략을 가능하게 합니다.",
        "Other Options": [
            "AWS CloudTrail은 AWS 계정 내의 API 활동을 기록하고 모니터링하는 데 중점을 두고 있으며, 마이그레이션 전에 온프레미스 애플리케이션의 종속성이나 자원 활용도에 대한 통찰력을 제공하지 않습니다.",
            "AWS Config는 AWS 자원의 구성 모니터링 및 관리를 위해 사용되지만, 마이그레이션 전에 레거시 애플리케이션을 분석하는 데는 적용되지 않습니다.",
            "AWS Systems Manager는 주로 AWS 내에서 애플리케이션을 관리하고 운영하는 데 사용되며, 마이그레이션 후에는 유용한 관리 기능을 제공하지만, 온프레미스 애플리케이션 종속성 발견에는 도움이 되지 않습니다."
        ]
    },
    {
        "Question Number": "25",
        "Situation": "한 금융 서비스 회사가 기존의 온프레미스 애플리케이션을 AWS로 마이그레이션할 계획을 세우고 있습니다. 이 회사는 여러 작업 부하를 가지고 있으며, 그 중 일부는 비즈니스 운영에 중요하고, 다른 일부는 덜 긴급합니다. 마이그레이션 팀이 구성되었으며, 그들은 어떤 작업 부하를 먼저 마이그레이션할지 우선순위를 정해야 합니다. 그들은 비즈니스에 미치는 중단을 최소화하고 클라우드의 이점을 극대화하기를 원합니다.",
        "Question": "마이그레이션 팀이 AWS로의 마이그레이션을 위해 작업 부하의 우선순위를 정하는 가장 효과적인 접근 방식은 무엇입니까?",
        "Options": {
            "1": "비즈니스 영향과 마이그레이션의 복잡성을 기반으로 작업 부하의 우선순위를 정합니다.",
            "2": "일관성을 유지하기 위해 작업 부하를 알파벳 순으로 마이그레이션합니다.",
            "3": "마이그레이션 프로세스를 테스트하기 위해 가장 덜 중요한 작업 부하부터 시작합니다.",
            "4": "전체 다운타임을 최소화하기 위해 모든 작업 부하를 한 번에 마이그레이션합니다."
        },
        "Correct Answer": "비즈니스 영향과 마이그레이션의 복잡성을 기반으로 작업 부하의 우선순위를 정합니다.",
        "Explanation": "이 접근 방식은 마이그레이션 팀이 가장 중요한 애플리케이션에 먼저 집중할 수 있게 하여, 클라우드 환경에서 가장 중요한 서비스가 원활하게 작동하도록 보장합니다. 또한 마이그레이션 프로세스에서 발생할 수 있는 잠재적인 문제를 조기에 식별하여 향후 더 나은 계획을 세울 수 있도록 도와줍니다.",
        "Other Options": [
            "이 옵션은 모든 작업 부하를 한 번에 마이그레이션하면 리소스가 과부하되어 잠재적인 실패로 이어질 수 있으므로 상당한 다운타임을 초래할 수 있습니다.",
            "알파벳 순으로 마이그레이션하는 것은 실제 비즈니스 요구나 애플리케이션의 복잡성을 고려하지 않으므로 중단과 비효율성을 초래할 수 있습니다.",
            "가장 덜 중요한 작업 부하부터 시작하면 클라우드의 이점을 실현하는 데 지연이 발생할 수 있으며, 더 중요한 작업 부하가 해결되지 않아 불필요한 위험을 초래할 수 있습니다."
        ]
    },
    {
        "Question Number": "26",
        "Situation": "한 금융 서비스 회사가 운영 효율성을 개선하고 비용을 절감하기 위해 새로운 기술과 관리형 서비스를 도입하여 인프라를 강화하려고 합니다. 이 회사는 클라우드 네이티브 솔루션을 활용할 수 있는 여러 영역을 식별했지만, 구현을 위한 명확한 전략이 부족합니다. 그들은 규정 준수와 보안을 보장하면서 아키텍처를 현대화할 옵션을 고려하고 있습니다.",
        "Question": "회사가 위험을 최소화하면서 새로운 기술과 관리형 서비스를 효과적으로 도입하기 위해 어떤 접근 방식을 취해야 합니까?",
        "Options": {
            "1": "현재 작업 부하에 대한 철저한 평가를 수행하고 관리형 서비스가 전통적인 인프라를 대체할 수 있는 특정 사용 사례를 식별한 후 단계적 구현 계획을 수립합니다.",
            "2": "상세한 평가 없이 모든 기존 애플리케이션을 서버리스 아키텍처로 즉시 마이그레이션하여 클라우드 기능을 활용합니다.",
            "3": "여러 클라우드 공급자에 작업 부하를 분산시켜 공급업체 종속을 피하기 위해 멀티 클라우드 전략을 구현합니다. 관리가 복잡해지더라도 말입니다.",
            "4": "모든 애플리케이션을 클라우드로 리프트 앤 시프트 전략을 채택하여 재설계 없이 현재 인프라에 최소한의 변경을 보장합니다."
        },
        "Correct Answer": "현재 작업 부하에 대한 철저한 평가를 수행하고 관리형 서비스가 전통적인 인프라를 대체할 수 있는 특정 사용 사례를 식별한 후 단계적 구현 계획을 수립합니다.",
        "Explanation": "철저한 평가를 수행하면 회사가 현재 작업 부하를 이해하고 관리형 서비스의 혜택을 받을 수 있는 특정 영역을 식별할 수 있습니다. 이 접근 방식은 서두른 마이그레이션과 관련된 위험을 줄이고 비즈니스 목표에 맞춘 구조적이고 단계적인 구현을 가능하게 합니다.",
        "Other Options": [
            "상세한 평가 없이 모든 기존 애플리케이션을 서버리스 아키텍처로 즉시 마이그레이션하면 예기치 않은 문제, 호환성 문제 및 비용 증가로 이어질 수 있습니다. 모든 애플리케이션이 서버리스 모델에 적합하지 않기 때문입니다.",
            "명확한 필요 없이 멀티 클라우드 전략을 구현하면 관리가 복잡해지고 운영 오버헤드가 증가하며 보안 및 규정 준수에서 문제를 일으킬 수 있으며 즉각적인 이점을 제공하지 않습니다.",
            "리프트 앤 시프트 전략은 애플리케이션이 클라우드 환경에 최적화되지 않아 성능 저하와 비용 비효율성을 초래하는 경우가 많으며, 클라우드 네이티브 기능의 이점을 놓칠 수 있습니다."
        ]
    },
    {
        "Question Number": "27",
        "Situation": "한 회사가 다양한 작업 부하에 가장 적합한 EC2 인스턴스 유형을 평가하고 있습니다. 그들은 높은 I/O 성능이 필요한 웹 애플리케이션, 높은 계산 능력이 필요한 머신 러닝 모델, 캐싱을 위한 상당한 메모리 용량이 필요한 데이터베이스를 보유하고 있습니다.",
        "Question": "회사의 작업 부하의 요구를 가장 잘 충족하는 인스턴스 패밀리 조합은 무엇입니까? (두 개 선택)",
        "Options": {
            "1": "버스트 성능을 위한 T3 인스턴스.",
            "2": "계산 집약적인 작업 부하를 위한 C5 인스턴스.",
            "3": "높은 I/O 성능을 위한 I3 인스턴스.",
            "4": "일반 용도의 작업 부하를 위한 M5 인스턴스.",
            "5": "메모리 집약적인 작업 부하를 위한 R5 인스턴스."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "높은 I/O 성능을 위한 I3 인스턴스.",
            "계산 집약적인 작업 부하를 위한 C5 인스턴스."
        ],
        "Explanation": "I3 인스턴스는 높은 I/O 성능에 최적화되어 있어 저장소에 빠르게 접근해야 하는 작업 부하에 적합합니다. C5 인스턴스는 계산 집약적인 작업을 위해 설계되어 높은 수준의 처리 능력을 제공하며, 이는 머신 러닝 모델 및 기타 계산 집약적인 애플리케이션에 적합합니다.",
        "Other Options": [
            "R5 인스턴스는 메모리 최적화되어 있지만, 상황에서 지정된 높은 I/O 성능이나 계산 집약적인 작업의 주요 요구 사항이 아닙니다.",
            "T3 인스턴스는 가변 작업 부하에 적합한 버스트 성능을 제공하지만, 지정된 애플리케이션에 필요한 I/O 또는 계산 능력을 제공하지 않습니다.",
            "M5 인스턴스는 일반 용도로 설계되어 있으며, 언급된 대로 특수한 I/O 또는 계산 능력이 필요한 작업 부하에 가장 적합하지 않습니다."
        ]
    },
    {
        "Question Number": "28",
        "Situation": "한 회사가 클라우드 리소스 사용에 대한 가시성을 높이기 위해 태깅 전략을 구현하여 AWS 비용을 최적화하려고 합니다. 이 회사는 각기 다른 예산과 리소스 요구 사항을 가진 여러 비즈니스 유닛을 보유하고 있습니다. 리소스가 이러한 비즈니스 유닛과 일치하도록 태그가 지정되고 비용 추적이 용이하도록 해야 합니다.",
        "Question": "비용 할당을 위한 효과적인 태깅 전략을 구현하는 데 도움이 될 수 있는 옵션은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "각 비즈니스 유닛과 관련된 모든 리소스에 특정 태그 사용을 의무화하는 태깅 정책을 생성합니다.",
            "2": "특정 태그와 관련된 비용을 분석하기 위해 AWS Cost Explorer를 구현합니다.",
            "3": "태그 없이 비즈니스 유닛별로 지출을 모니터링하기 위해 AWS Budgets를 사용합니다.",
            "4": "리소스 생성 및 태깅과 관련된 API 호출을 추적하기 위해 AWS CloudTrail을 활용합니다.",
            "5": "리소스 태그를 평가하는 AWS Config 규칙을 사용하여 태깅 준수를 강제합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "각 비즈니스 유닛과 관련된 모든 리소스에 특정 태그 사용을 의무화하는 태깅 정책을 생성합니다.",
            "특정 태그와 관련된 비용을 분석하기 위해 AWS Cost Explorer를 구현합니다."
        ],
        "Explanation": "태깅 정책을 생성하면 모든 리소스가 비즈니스 유닛에 따라 일관되게 태그가 지정되어 비용을 효과적으로 추적하기가 더 쉬워집니다. AWS Cost Explorer는 정의한 태그를 기반으로 비용을 분석할 수 있게 하여 비즈니스 유닛별 지출에 대한 가시성을 제공합니다.",
        "Other Options": [
            "AWS Budgets는 지출을 모니터링할 수 있지만 운영을 위해 태깅을 본질적으로 요구하지 않으므로 태깅 전략 구현에 덜 효과적입니다.",
            "AWS CloudTrail은 API 호출 감사에 유용하지만 태깅이나 비용 할당 전략에 직접 기여하지 않습니다.",
            "AWS Config 규칙은 태깅 준수를 강제할 수 있지만 해당 태그와 관련된 비용 분석에는 도움이 되지 않습니다."
        ]
    },
    {
        "Question Number": "29",
        "Situation": "한 금융 서비스 조직이 애플리케이션을 AWS로 마이그레이션하고 있습니다. 이 조직은 여러 AWS 계정에서 사용자 신원 및 접근 권한을 관리하기 위한 안전한 방법이 필요합니다. 그들은 사용자가 다양한 AWS 서비스에 단일 로그인(SSO)으로 접근할 수 있도록 하면서 세분화된 접근 제어를 유지할 수 있는 솔루션을 구현하고자 합니다. 이 조직은 이미 사용자 관리를 위해 기업 디렉토리를 사용하고 있습니다.",
        "Question": "여러 AWS 계정에서 사용자 접근을 관리하기 위한 조직의 요구 사항을 가장 잘 충족하는 접근 방식은 무엇입니까?",
        "Options": {
            "1": "각 AWS 계정에 IAM 사용자를 생성하고 그들의 접근 권한을 수동으로 관리합니다. AWS Organizations를 사용하여 청구를 통합합니다.",
            "2": "AWS IAM 역할을 활용하고 각 사용자에 대해 교차 계정 역할 접근을 설정하며, 모든 사용자에 대해 수동 자격 증명 관리를 요구합니다.",
            "3": "AWS IAM Identity Center (AWS SSO)를 설정하고 이를 기업 디렉토리에 연결합니다. AWS 계정 간 사용자 접근 수준을 정의하기 위해 권한 세트를 생성합니다.",
            "4": "AWS Cognito를 사용하여 사용자 신원 및 접근 권한을 관리하는 신원 연합 솔루션을 배포합니다."
        },
        "Correct Answer": "AWS IAM Identity Center (AWS SSO)를 설정하고 이를 기업 디렉토리에 연결합니다. AWS 계정 간 사용자 접근 수준을 정의하기 위해 권한 세트를 생성합니다.",
        "Explanation": "AWS IAM Identity Center (AWS SSO)를 사용하면 여러 계정에서 사용자 신원 및 접근 권한을 중앙 집중식으로 관리할 수 있으며, 단일 로그인 기능을 제공하여 조직의 보안 및 사용 편의성 요구 사항에 직접 부합합니다.",
        "Other Options": [
            "각 계정에 IAM 사용자를 생성하는 것은 비효율적이며 중앙 집중식 관리 솔루션을 제공하지 않습니다. 이 접근 방식은 각 계정에서 권한을 별도로 관리해야 하므로 관리 오버헤드와 복잡성이 증가합니다.",
            "AWS Cognito는 사용자 신원을 관리할 수 있지만, 주로 웹 및 모바일 애플리케이션을 위해 설계되었으며, 여러 계정에서 AWS 서비스에 대한 접근을 관리하는 데 있어 AWS IAM Identity Center와 같은 수준의 통합 및 관리를 제공하지 않습니다.",
            "교차 계정 접근을 위한 IAM 역할 사용은 사용자가 자신의 자격 증명을 관리해야 하며 간단한 SSO 경험을 제공하지 않습니다. 이 접근 방식은 보안 위험과 자격 증명 관리의 복잡성을 증가시킬 수 있습니다."
        ]
    },
    {
        "Question Number": "30",
        "Situation": "한 금융 서비스 회사가 다양한 비즈니스 유닛을 관리하기 위해 여러 AWS 계정을 운영하고 있습니다. 각 계정은 특정 AWS 리소스가 수정될 때 중앙 집중식 Amazon SNS 주제로부터 이벤트 알림을 받을 수 있어야 합니다. 솔루션 아키텍트는 모든 관련 계정에 이벤트 알림이 전달되도록 하면서 보안 및 관리에 대한 모범 사례를 준수해야 합니다.",
        "Question": "AWS 서비스를 사용하여 다중 계정 이벤트 알림을 설정하는 가장 효과적인 방법은 무엇입니까?",
        "Options": {
            "1": "마스터 계정에서 AWS Lambda를 활용하여 각 멤버 계정의 이벤트를 폴링한 다음 해당 이벤트를 중앙 집중식 Amazon SNS 주제로 게시합니다.",
            "2": "각 멤버 계정에 Amazon EventBridge 이벤트 버스를 배포하고 마스터 계정의 Amazon SNS 주제로 이벤트를 전송하는 규칙을 구성합니다.",
            "3": "마스터 계정에 Amazon SNS 주제를 생성하고 각 멤버 계정이 해당 주제를 구독할 수 있도록 교차 계정 권한을 구성합니다.",
            "4": "각 멤버 계정에서 AWS Config 규칙을 설정하여 AWS Step Function을 트리거하여 마스터 계정의 Amazon SNS 주제로 알림을 전송합니다."
        },
        "Correct Answer": "마스터 계정에 Amazon SNS 주제를 생성하고 각 멤버 계정이 해당 주제를 구독할 수 있도록 교차 계정 권한을 구성합니다.",
        "Explanation": "마스터 계정에 Amazon SNS 주제를 생성하고 교차 계정 권한을 구성하면 모든 멤버 계정이 중앙 집중식 주제를 안전하게 구독할 수 있습니다. 이 접근 방식은 알림 프로세스를 간소화하고 다중 계정 아키텍처에 대한 모범 사례를 준수합니다.",
        "Other Options": [
            "각 멤버 계정에 Amazon EventBridge 이벤트 버스를 배포하는 것은 불필요한 복잡성을 추가합니다. 목표는 마스터 계정에서 알림을 중앙 집중화하는 것이므로 이 옵션은 이벤트 전달을 위한 추가 구성이 필요합니다.",
            "각 멤버 계정에서 이벤트를 폴링하기 위해 AWS Lambda를 사용하는 것은 오버헤드를 발생시키고 지연 및 비용 증가를 초래할 수 있습니다. 교차 계정 구독을 사용하는 SNS를 직접 사용하는 것이 더 효율적입니다.",
            "AWS Config 규칙을 설정하면 리소스 변경에 대한 이벤트가 생성되지만 알림을 직접 촉진하지는 않습니다. 이 옵션은 SNS 주제가 제공하는 직접적인 통합 및 효율성이 부족합니다."
        ]
    },
    {
        "Question Number": "31",
        "Situation": "스타트업이 하루 동안 가변적인 작업 부하를 경험하는 Amazon EC2 인스턴스에서 웹 애플리케이션을 운영하고 있습니다. 스타트업은 애플리케이션이 피크 시간 동안 반응성을 유지하면서 비용을 줄이는 것에 대해 우려하고 있습니다. 현재 On-Demand Instances를 사용하고 있지만 성능을 희생하지 않으면서 더 비용 효율적인 옵션을 탐색하고자 합니다.",
        "Question": "비용을 최적화하면서 애플리케이션 성능을 유지하기 위해 솔루션 아키텍트가 추천해야 할 아키텍처 선택은 무엇입니까?",
        "Options": {
            "1": "EC2 인스턴스를 완전히 프로비저닝하지 않고 서버리스 가격을 활용하기 위해 애플리케이션을 AWS Lambda로 마이그레이션합니다.",
            "2": "모든 EC2 인스턴스를 On-Demand Instances로 배포하고 피크 시간 동안 인스턴스 크기를 늘려 트래픽을 처리합니다.",
            "3": "모든 EC2 인스턴스에 대해 예약 인스턴스를 사용하여 애플리케이션이 항상 낮은 비용으로 사용 가능하도록 합니다.",
            "4": "On-Demand 및 Spot Instances의 혼합을 사용하여 Auto Scaling을 구현하여 비피크 시간 동안 비용 절감을 허용합니다."
        },
        "Correct Answer": "On-Demand 및 Spot Instances의 혼합을 사용하여 Auto Scaling을 구현하여 비피크 시간 동안 비용 절감을 허용합니다.",
        "Explanation": "On-Demand 및 Spot Instances의 조합으로 Auto Scaling을 사용하면 스타트업이 작업 부하 변화에 동적으로 적응할 수 있으며, 수요가 적은 시간 동안 저렴한 Spot Instances를 활용하여 상당한 비용 절감을 달성할 수 있습니다.",
        "Other Options": [
            "애플리케이션이 지속적인 상태를 요구하거나 장기 실행 프로세스가 있는 경우 AWS Lambda로 마이그레이션하는 것은 실현 가능하지 않을 수 있으며, Lambda는 이벤트 기반의 짧은 기간 작업에 가장 적합합니다.",
            "모든 EC2 인스턴스에 대해 예약 인스턴스를 사용하는 것은 스타트업을 장기 계약에 묶어 두며, 이는 가변적인 작업 부하와 재정 상황을 고려할 때 최적이 아닐 수 있습니다.",
            "Spot Instances나 Auto Scaling을 고려하지 않고 모든 EC2 인스턴스를 On-Demand Instances로 배포하면 비용이 더 높아질 가능성이 있으며, 피크 및 비피크 시간 동안 필요한 유연성을 제공하지 않을 것입니다."
        ]
    },
    {
        "Question Number": "32",
        "Situation": "금융 서비스 회사가 온프레미스 작업 부하를 AWS로 마이그레이션하려고 합니다. 현재 아키텍처는 전용 서버에서 실행되는 모놀리식 애플리케이션으로, 확장성과 유지 관리가 어렵습니다. 회사는 데이터 무결성과 보안에 대한 엄격한 규정 준수 요구 사항이 있습니다. 그들은 점진적인 마이그레이션 전략을 지원하고 비즈니스 운영에 최소한의 중단을 보장할 수 있는 다양한 AWS 서비스를 평가하고 있습니다.",
        "Question": "기존 작업 부하를 AWS로 마이그레이션하면서 확장성과 규정 준수 요구 사항을 해결하기 위해 솔루션 아키텍트가 추천해야 할 옵션은 무엇입니까?",
        "Options": {
            "1": "AWS Shield를 추가 보안으로 구현하면서 전체 애플리케이션을 Amazon EC2 인스턴스로 리프트 앤 시프트합니다.",
            "2": "정적 콘텐츠 배포를 위해 Amazon S3 버킷을 사용하여 AWS Elastic Beanstalk로 애플리케이션을 재구성합니다.",
            "3": "AWS Lambda를 사용하여 애플리케이션을 마이크로서비스로 리팩토링하고, 데이터는 Amazon RDS에 저장하여 트랜잭션 무결성을 유지합니다.",
            "4": "Amazon ECS를 사용하여 애플리케이션을 컨테이너화하고 Amazon EFS로 배포하여 공유 스토리지 접근을 제공합니다."
        },
        "Correct Answer": "AWS Lambda를 사용하여 애플리케이션을 마이크로서비스로 리팩토링하고, 데이터는 Amazon RDS에 저장하여 트랜잭션 무결성을 유지합니다.",
        "Explanation": "AWS Lambda를 사용하여 애플리케이션을 마이크로서비스로 리팩토링하면 더 나은 확장성과 유연성을 제공합니다. Amazon RDS를 사용함으로써 회사는 데이터 무결성과 규정 준수 요구 사항을 충족하면서 비용 효율성과 운영 부담을 줄일 수 있는 서버리스 아키텍처를 활용할 수 있습니다.",
        "Other Options": [
            "리프트 앤 시프트는 모놀리식 아키텍처의 고유한 확장성과 유지 관리 문제를 해결하지 않으며, AWS Shield에만 의존하는 것은 데이터 무결성 요구 사항을 준수하지 않습니다.",
            "AWS Elastic Beanstalk를 사용하면 배포가 간소화될 수 있지만, 서버리스 아키텍처의 이점을 완전히 활용하지 못할 수 있어 성장하는 애플리케이션에 대한 확장성과 유연성을 제한할 수 있습니다.",
            "Amazon ECS로 애플리케이션을 컨테이너화하면 컨테이너 관리 및 오케스트레이션과 관련된 복잡성이 도입되어 점진적인 마이그레이션 전략의 목표와 일치하지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "33",
        "Situation": "금융 서비스 회사가 Amazon EC2에서 호스팅되는 중요한 애플리케이션에 대한 재해 복구(DR) 전략을 구현하고 있습니다. 그들은 재해 발생 시 최소한의 다운타임과 데이터 손실을 보장하는 솔루션이 필요합니다. 회사는 탄력적인 DR 아키텍처를 달성하기 위해 다양한 옵션을 고려하고 있습니다.",
        "Question": "최소한의 데이터 손실로 최고의 가용성을 보장하기 위해 솔루션 아키텍트가 추천해야 할 재해 복구 전략은 무엇입니까?",
        "Options": {
            "1": "재해 발생 시 신속하게 확장할 수 있는 다른 지역에서 EC2 인스턴스가 실행되는 웜 스탠바이 아키텍처를 설정합니다.",
            "2": "Amazon Route 53을 사용하여 트래픽 분산을 위해 여러 AWS 리전에서 액티브-액티브 구성을 구현합니다.",
            "3": "백업 저장소로 Amazon S3를 사용하고 정의된 기간 후에 오래된 백업을 삭제하는 수명 주기 정책을 설정합니다.",
            "4": "보조 리전에서 애플리케이션의 최소한의 발자국을 유지하여 신속하게 활성화할 수 있는 파일럿 라이트 DR 전략을 배포합니다."
        },
        "Correct Answer": "Amazon Route 53을 사용하여 트래픽 분산을 위해 여러 AWS 리전에서 액티브-액티브 구성을 구현합니다.",
        "Explanation": "액티브-액티브 구성은 애플리케이션이 여러 리전에서 완전히 운영되도록 하여 최고의 가용성을 제공하고 다운타임을 최소화합니다. 이 설정은 Amazon Route 53을 사용하여 원활한 트래픽 분산 및 로드 밸런싱을 가능하게 하여 강력한 재해 복구 솔루션을 제공합니다.",
        "Other Options": [
            "Amazon S3를 백업 저장소로 사용하고 수명 주기 정책을 구현하는 것은 즉각적인 장애 조치 기능을 제공하지 않습니다. 데이터 보존에는 필수적이지만, 재해 발생 시 다운타임을 최소화하지 않으며 이는 중요한 요구 사항입니다.",
            "웜 스탠바이 아키텍처는 신속하게 확장할 수 있는 축소된 버전의 애플리케이션을 유지하는 것을 포함하지만, 여전히 일부 다운타임이 발생할 수 있습니다. 이 접근 방식은 액티브-액티브 구성과 동일한 수준의 가용성을 보장하지 않습니다.",
            "파일럿 라이트 DR 전략은 액티브-액티브 설정에 비해 보조 환경을 완전히 활성화하는 데 더 많은 시간이 필요합니다. 비용 효율적인 접근 방식이지만, 재해 발생 시 즉각적인 가용성을 제공하지 않아 데이터 손실 및 서비스 중단으로 이어질 수 있습니다."
        ]
    },
    {
        "Question Number": "34",
        "Situation": "한 회사가 AWS에서 낮은 지연 시간과 높은 처리량을 요구하는 고가용성 애플리케이션을 배포하고 있습니다. 이들은 Elastic Load Balancing을 사용하여 들어오는 트래픽을 여러 대상에 분산시키는 것을 고려하고 있습니다. 애플리케이션은 다양한 지리적 위치에서 접근될 것이며, 회사는 트래픽이 효율적으로 라우팅되도록 해야 합니다. 또한, 온프레미스 네트워크와의 더 나은 통합을 위해 정적 IP 주소를 설정하고자 합니다.",
        "Question": "회사가 이러한 요구 사항을 충족하기 위해 활용해야 할 기능의 조합은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "WebSocket 연결만 처리하는 Application Load Balancer를 배포합니다.",
            "2": "각 가용 영역에 정적 IP 주소가 있는 Network Load Balancer를 구현합니다.",
            "3": "스티키 세션이 구성된 Application Load Balancer를 사용합니다.",
            "4": "Network Load Balancer를 활용하여 VPC 엔드포인트 서비스를 생성합니다.",
            "5": "인바운드 트래픽 제어를 위해 Network Load Balancer를 보안 그룹을 사용하도록 구성합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "각 가용 영역에 정적 IP 주소가 있는 Network Load Balancer를 구현합니다.",
            "Network Load Balancer를 활용하여 VPC 엔드포인트 서비스를 생성합니다."
        ],
        "Explanation": "정적 IP 주소가 있는 Network Load Balancer를 구현하면 회사는 온프레미스 네트워크에서 더 쉽게 연결할 수 있는 알려진 IP 주소를 유지할 수 있으며, Network Load Balancer를 VPC 엔드포인트 서비스에 사용하면 VPC 내 애플리케이션 대상에 대한 트래픽을 효율적으로 라우팅할 수 있습니다.",
        "Other Options": [
            "스티키 세션이 구성된 Application Load Balancer를 사용하는 것은 정적 IP 주소와 높은 처리량이 필요하다는 요구 사항을 충족하지 않기 때문에 적합하지 않습니다. 이러한 요구 사항은 Network Load Balancer가 더 잘 처리합니다.",
            "WebSocket 연결만을 위해 Application Load Balancer를 배포하는 것은 정적 IP 필요성을 해결하지 않으며 모든 유형의 트래픽에 대해 최상의 성능을 제공하지 않을 수 있습니다.",
            "Network Load Balancer를 보안 그룹을 사용하도록 구성하는 것은 잘못된 것입니다. Network Load Balancer는 연결 수준에서 작동하며 인스턴스 수준에서 작동하지 않기 때문에 보안 그룹을 지원하지 않습니다."
        ]
    },
    {
        "Question Number": "35",
        "Situation": "한 회사가 AWS CloudFormation을 사용하여 인프라를 관리하고 있습니다. 이 회사는 데이터베이스 비밀번호와 API 키와 같은 민감한 정보를 템플릿에 하드코딩하지 않고 안전하게 저장하고자 합니다. 이를 위해 Systems Manager Parameter Store를 활용하기로 결정했습니다. 솔루션 아키텍트는 CloudFormation 템플릿에서 이러한 매개변수를 참조해야 합니다.",
        "Question": "CloudFormation 템플릿에서 Systems Manager 매개변수를 올바르게 참조하는 구성은 무엇입니까?",
        "Options": {
            "1": "Parameters: MyParameter: Type: AWS::SSM::Parameter::Value<String> Default: /myapp/dbpassword",
            "2": "Parameters: MyParameter: Type: AWS::SSM::Parameter::Value<String> Value: /myapp/dbpassword",
            "3": "Parameters: MyParameter: Type: AWS::SSM::Parameter::Value<String>",
            "4": "Parameters: MyParameter: Type: String Default: /myapp/dbpassword"
        },
        "Correct Answer": "Parameters: MyParameter: Type: AWS::SSM::Parameter::Value<String> Default: /myapp/dbpassword",
        "Explanation": "올바른 옵션은 CloudFormation에서 Systems Manager 매개변수를 정의하는 데 적절한 구문을 사용합니다. 유형을 AWS::SSM::Parameter::Value<String>으로 올바르게 지정하고 유효한 기본값을 제공하여 CloudFormation이 Parameter Store에서 매개변수를 가져올 수 있도록 합니다.",
        "Other Options": [
            "이 옵션은 기본값을 지정하지 않기 때문에 잘못된 것입니다. 기본값은 CloudFormation이 Systems Manager에서 매개변수를 검색하는 데 필요합니다.",
            "이 옵션은 유형을 올바르게 지정하지만 기본값을 정의하지 않기 때문에 잘못된 것입니다. 기본값이 없으면 CloudFormation이 매개변수를 가져올 수 없습니다.",
            "이 옵션은 이 맥락에서 'Value' 키가 유효하지 않기 때문에 잘못된 것입니다. 대신, 매개변수 키를 지정하기 위해 'Default'를 사용하는 것이 올바른 접근 방식입니다."
        ]
    },
    {
        "Question Number": "36",
        "Situation": "한 조직이 온프레미스 Oracle 데이터베이스를 Amazon RDS for Oracle로 마이그레이션할 계획을 세우고 있습니다. 이 데이터베이스는 조직의 운영에 중요한 여러 기능을 가지고 있습니다. 데이터베이스 관리자는 RDS 환경에서 모든 필요한 기능이 지원되는지 확인해야 합니다.",
        "Question": "Amazon RDS for Oracle을 사용할 때 지원되지 않는 Oracle 데이터베이스 기능은 무엇입니까?",
        "Options": {
            "1": "Real Application Clusters (Oracle RAC)",
            "2": "Automatic Storage Management (ASM)",
            "3": "데이터 전송을 위한 Amazon S3와의 통합",
            "4": "MySQL을 위한 교차 지역 복제"
        },
        "Correct Answer": "Real Application Clusters (Oracle RAC)",
        "Explanation": "Amazon RDS for Oracle은 Real Application Clusters (Oracle RAC)를 지원하지 않습니다. 이는 Oracle 데이터베이스를 마이그레이션할 때 고려해야 할 주요 제한 사항으로, RAC는 클러스터링 기능을 통해 높은 가용성과 확장성을 제공하도록 설계되었지만 RDS에서는 사용할 수 없습니다.",
        "Other Options": [
            "Automatic Storage Management (ASM)은 Amazon RDS for Oracle에서 지원되지 않지만, 이 옵션은 지원되는 기능을 묻는 질문에 명시적으로 언급되지 않아 오해의 소지가 있습니다.",
            "MySQL을 위한 교차 지역 복제는 RDS에서 지원되는 기능이지만 Oracle 데이터베이스와는 관련이 없으므로 질문의 Oracle 기능에 대한 초점을 다루지 않습니다.",
            "데이터 전송을 위한 Amazon S3와의 통합은 Amazon RDS for Oracle의 지원되는 기능으로, 안전하고 효율적인 데이터 전송을 가능하게 하여 이 옵션은 질문과 일치하지 않으므로 잘못된 것입니다."
        ]
    },
    {
        "Question Number": "37",
        "Situation": "한 미디어 회사가 이미지 및 비디오 파일 저장을 위해 Amazon S3를 사용하고 있습니다. 이들은 S3 버킷에서 버전 관리를 활성화하여 미디어 파일의 여러 버전을 유지하고 있습니다. 솔루션 아키텍트는 회사가 삭제된 파일을 복구하고 버전을 효과적으로 관리할 수 있도록 적절한 보안 조치를 구현해야 합니다.",
        "Question": "video.mp4라는 파일이 이미 동일한 파일의 버전이 있는 버전 관리가 활성화된 S3 버킷에 업로드될 때, 이전 버전과 새 업로드 처리에 관한 다음 중 어떤 진술이 사실입니까?",
        "Options": {
            "1": "video.mp4의 새 버전이 생성되며, 이전 버전은 덮어쓰이지 않고 버킷에 남아 있습니다.",
            "2": "이전 버전이 버킷에 존재하면 업로드 작업이 실패합니다.",
            "3": "video.mp4의 이전 버전에 삭제 마커가 적용되어 현재 버전이 됩니다.",
            "4": "video.mp4의 이전 버전이 영구적으로 삭제되어 복구할 수 없습니다."
        },
        "Correct Answer": "video.mp4의 새 버전이 생성되며, 이전 버전은 덮어쓰이지 않고 버킷에 남아 있습니다.",
        "Explanation": "버전 관리가 활성화된 S3 버킷에서는 기존 객체의 새 버전을 업로드해도 이전 버전이 삭제되거나 덮어쓰이지 않습니다. 대신, 새 업로드에는 새 버전 ID가 할당되며, 이전 버전은 버킷에서 계속 접근할 수 있습니다.",
        "Other Options": [
            "이 옵션은 버전 관리가 활성화되면 새 업로드가 발생할 때 이전 버전을 유지할 수 있도록 하여, 특별히 요청하지 않는 한 영구 삭제를 방지하므로 잘못된 것입니다.",
            "이 옵션은 버전 관리된 버킷에서 업로드 작업이 항상 성공하므로 잘못된 것입니다. 이전 버전이 동일한 키에 존재하더라도 마찬가지입니다.",
            "이 옵션은 객체가 명시적으로 삭제될 때만 삭제 마커가 적용되므로 잘못된 것입니다. 새 버전이 업로드될 때는 적용되지 않습니다."
        ]
    },
    {
        "Question Number": "38",
        "Situation": "한 금융 서비스 회사가 실시간 거래 처리 및 분석이 필요한 새로운 애플리케이션을 구축하고 있습니다. 이 애플리케이션은 낮은 대기 시간으로 높은 데이터 볼륨을 효율적으로 처리해야 하며, 데이터는 보고 목적으로 쉽게 쿼리할 수 있어야 합니다. 솔루션 아키텍트는 이러한 요구 사항을 충족하기 위해 다양한 데이터베이스 옵션을 평가하고 있습니다.",
        "Question": "실시간 거래 처리 시스템을 구현하고 효율적인 쿼리 기능을 제공하는 데 가장 적합한 데이터베이스 솔루션은 무엇입니까?",
        "Options": {
            "1": "Amazon RDS for MySQL과 읽기 복제본을 사용하여 높은 처리량을 처리하고 실시간 분석을 위한 낮은 대기 시간을 제공합니다.",
            "2": "복잡한 쿼리에 최적화된 데이터 웨어하우징을 위한 Amazon Redshift, 그러나 실시간 거래 처리에는 적합하지 않습니다.",
            "3": "실시간 거래를 위한 낮은 대기 시간 접근을 보장하고 분석을 위한 높은 가용성을 제공하는 프로비저닝된 처리량을 갖춘 Amazon DynamoDB.",
            "4": "PostgreSQL 호환성을 갖춘 Amazon Aurora로, 높은 거래량을 처리하기 위해 서버리스 기능을 활용하여 확장하면서 쿼리 성능을 유지합니다."
        },
        "Correct Answer": "PostgreSQL 호환성을 갖춘 Amazon Aurora로, 높은 거래량을 처리하기 위해 서버리스 기능을 활용하여 확장하면서 쿼리 성능을 유지합니다.",
        "Explanation": "PostgreSQL 호환성을 갖춘 Amazon Aurora는 높은 성능을 위해 설계되었으며, 실시간 거래 처리를 효율적으로 처리할 수 있습니다. 서버리스 기능은 수요에 따라 자동으로 확장할 수 있도록 하여 높은 거래량을 수용하면서 쿼리에 대한 낮은 대기 시간을 유지할 수 있습니다. 이는 이 시나리오에 이상적입니다.",
        "Other Options": [
            "Amazon RDS for MySQL과 읽기 복제본은 실시간 거래 처리에 최적의 선택이 아니며, 분석을 위한 복제 지연으로 인해 대기 시간이 발생할 수 있으며, Aurora만큼 효과적으로 확장되지 않을 수 있습니다.",
            "Amazon DynamoDB는 낮은 대기 시간 접근에 적합하지만, Aurora와 같은 관계형 데이터베이스에 비해 분석에 자주 필요한 복잡한 조인 및 쿼리 기능을 제공하지 않을 수 있습니다.",
            "Amazon Redshift는 주로 복잡한 분석 쿼리를 위해 설계된 데이터 웨어하우징 솔루션으로, 실시간 거래 처리에는 적합하지 않으므로 이 애플리케이션의 요구 사항에 맞지 않습니다."
        ]
    },
    {
        "Question Number": "39",
        "Situation": "한 다국적 기업이 사용자가 Google 계정을 사용하여 인증할 수 있는 모바일 애플리케이션을 개발했습니다. 이 애플리케이션은 인증된 사용자를 대신하여 AWS 리소스에 안전하게 접근해야 하며, 사용자가 AWS 자격 증명을 직접 관리할 필요가 없습니다. 회사는 이 인증 및 권한 부여 프로세스를 용이하게 하기 위해 AWS 서비스를 사용하는 것을 고려하고 있습니다.",
        "Question": "다음 중 애플리케이션이 인증된 사용자에 대한 임시 AWS 자격 증명을 얻을 수 있도록 하는 솔루션은 무엇입니까? (두 개 선택)",
        "Options": {
            "1": "사용자가 제공한 Google 인증 토큰을 사용하여 임시 보안 자격 증명을 얻기 위해 AssumeRoleWithWebIdentity를 구현합니다.",
            "2": "애플리케이션의 각 사용자에 대해 IAM 사용자를 생성하고 인증을 위해 액세스 키를 배포합니다.",
            "3": "사용자 로그인을 기반으로 임시 자격 증명을 발급하기 위해 AWS STS와 인터페이스하는 사용자 정의 ID 공급자를 활용합니다.",
            "4": "AWS Cognito를 사용하여 사용자를 인증하고 특정 AWS 리소스에 대한 접근을 허용하는 역할을 구성합니다.",
            "5": "AWS SSO를 사용하여 사용자 접근을 직접 관리하고 애플리케이션에 대한 연합 인증을 활성화합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Cognito를 사용하여 사용자를 인증하고 특정 AWS 리소스에 대한 접근을 허용하는 역할을 구성합니다.",
            "사용자가 제공한 Google 인증 토큰을 사용하여 임시 보안 자격 증명을 얻기 위해 AssumeRoleWithWebIdentity를 구현합니다."
        ],
        "Explanation": "AWS Cognito와 AssumeRoleWithWebIdentity는 Google과 같은 외부 ID 공급자를 통해 인증된 사용자에게 임시 보안 자격 증명을 제공하도록 설계되었습니다. AWS Cognito는 사용자 풀 및 역할 관리를 쉽게 할 수 있도록 하며, AssumeRoleWithWebIdentity는 웹 ID 토큰을 사용하여 연합 인증을 직접 지원합니다.",
        "Other Options": [
            "모든 애플리케이션 사용자에 대해 IAM 사용자를 생성하는 것은 확장성이 없으며, 장기 자격 증명 관리를 피하기 위해 설계된 연합 접근의 목적을 무색하게 합니다.",
            "AWS SSO는 AWS 계정 및 서비스 간의 접근 관리를 중심으로 하며, 외부 웹 ID 공급자를 사용하여 임시 자격 증명을 직접 발급하지 않습니다.",
            "사용자 정의 ID 공급자를 활용하는 것은 불필요한 복잡성을 초래할 수 있으며, AWS 서비스에서 제공하는 내장 지원에 비해 임시 AWS 자격 증명을 얻기 위한 표준 접근 방식이 아닙니다."
        ]
    },
    {
        "Question Number": "40",
        "Situation": "글로벌 온라인 소매 회사가 국제 사용자들의 성능을 개선하고 지연 시간을 줄이기 위해 애플리케이션을 AWS로 마이그레이션하고 있습니다. 이 회사는 여러 AWS 서비스 엔드포인트를 통해 서로 통신하는 여러 마이크로서비스를 보유하고 있습니다. 솔루션 아키텍트는 애플리케이션이 보안을 유지하고 비용을 최소화하면서 AWS 서비스와 원활하게 상호작용할 수 있도록 해야 합니다.",
        "Question": "솔루션 아키텍트가 AWS 서비스 엔드포인트의 사용을 최적화하기 위해 구현해야 할 전략은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "인터넷을 통과하지 않고 AWS 서비스에 비공식적으로 연결하기 위해 VPC 엔드포인트를 활용합니다.",
            "2": "여러 AWS 리전에서 호스팅되는 애플리케이션의 가용성과 성능을 개선하기 위해 AWS Global Accelerator를 구현합니다.",
            "3": "공용 IP를 사용하지 않고 다른 VPC에 호스팅된 서비스에 안전하게 접근하기 위해 AWS PrivateLink를 구성합니다.",
            "4": "온프레미스 데이터 센터에서 AWS로 전용 네트워크 연결을 설정하기 위해 AWS Direct Connect를 활용합니다.",
            "5": "여러 VPC와 온프레미스 네트워크 간의 연결을 단순화하기 위해 AWS Transit Gateway를 사용합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "인터넷을 통과하지 않고 AWS 서비스에 비공식적으로 연결하기 위해 VPC 엔드포인트를 활용합니다.",
            "공용 IP를 사용하지 않고 다른 VPC에 호스팅된 서비스에 안전하게 접근하기 위해 AWS PrivateLink를 구성합니다."
        ],
        "Explanation": "VPC 엔드포인트를 사용하면 인터넷에 트래픽을 노출하지 않고 AWS 서비스에 비공식적으로 연결할 수 있어 보안이 강화되고 지연 시간이 줄어듭니다. AWS PrivateLink는 공용 IP 주소를 사용하지 않고 다른 VPC에 호스팅된 서비스에 안전하게 접근할 수 있는 방법을 제공하여 서비스 상호작용의 보안성과 효율성을 높입니다.",
        "Other Options": [
            "AWS Global Accelerator를 구현하는 것은 리전 간의 성능과 가용성을 개선하는 데 유용하지만 서비스 엔드포인트 사용 최적화에 직접적으로 대응하지 않습니다.",
            "AWS Transit Gateway를 사용하면 VPC 간의 네트워크 관리와 연결을 단순화하지만 서비스 엔드포인트 사용을 직접적으로 최적화하지는 않습니다.",
            "AWS Direct Connect를 활용하면 AWS에 전용 연결을 제공하여 하이브리드 아키텍처에 유익하지만 서비스 엔드포인트 사용 최적화에 초점을 맞추지 않습니다."
        ]
    },
    {
        "Question Number": "41",
        "Situation": "한 회사가 인프라 비용을 줄이고 확장성을 개선하기 위해 기존 온프레미스 애플리케이션을 AWS로 마이그레이션할 계획입니다. 그들은 강력한 데이터베이스 솔루션이 필요한 웹 애플리케이션과 백엔드 서비스의 혼합을 보유하고 있습니다. 이 회사는 성능을 저하시키지 않으면서 비용 최적화에 특히 관심이 있습니다. 그들은 사용자 트래픽과 데이터 양 증가를 처리하기 위해 애플리케이션을 확장하는 장기 성장 전략을 가지고 있습니다.",
        "Question": "다음 중 AWS에서 비용 최적화 및 확장성의 목표에 가장 잘 부합하는 자산 계획 전략은 무엇입니까?",
        "Options": {
            "1": "웹 애플리케이션을 AWS Lambda 함수로 변환하고 데이터베이스에 Amazon Aurora Serverless를 사용하여 수요에 따라 자동으로 확장하고 비용을 줄이기 위해 서버리스 아키텍처를 채택합니다.",
            "2": "트래픽 패턴에 따라 리소스를 수동으로 확장하면서 Amazon EC2 인스턴스에 애플리케이션을 배포하여 AWS로 마이그레이션하지만, 이는 리소스 낭비와 비용 증가로 이어질 수 있습니다.",
            "3": "기존 가상 머신을 Amazon EC2 인스턴스로 이동하는 리프트 앤 시프트 마이그레이션 전략을 구현하고, 비용 최적화를 고려하지 않고 기존 데이터베이스에 Amazon RDS를 사용합니다.",
            "4": "Amazon ECS에서 Fargate로 실행되도록 애플리케이션을 재구성하고 데이터베이스를 Amazon DynamoDB로 마이그레이션하여 확장성을 개선하지만 아키텍처의 복잡성으로 인해 운영 비용이 증가합니다."
        },
        "Correct Answer": "웹 애플리케이션을 AWS Lambda 함수로 변환하고 데이터베이스에 Amazon Aurora Serverless를 사용하여 수요에 따라 자동으로 확장하고 비용을 줄이기 위해 서버리스 아키텍처를 채택합니다.",
        "Explanation": "이 옵션은 회사의 비용 최적화 및 확장성 목표를 효과적으로 충족합니다. AWS Lambda를 활용한 서버리스 아키텍처를 사용함으로써 회사는 사용한 컴퓨팅 시간에 대해서만 비용을 지불하므로 인프라 비용을 크게 줄일 수 있습니다. 또한 Amazon Aurora Serverless는 실제 작업량에 따라 용량을 조정하는 온디맨드 자동 확장 데이터베이스 솔루션을 제공하여 성능과 비용 효율성을 모두 제공합니다.",
        "Other Options": [
            "이 옵션은 리프트 앤 시프트 접근 방식을 포함하고 있어 비용 최적화를 효과적으로 다루지 않으며, AWS의 확장성 기능을 활용하지 않아 운영 비용이 더 높아질 수 있습니다.",
            "이 옵션은 확장 가능한 솔루션을 제안하지만 Amazon DynamoDB를 사용하면 기존 애플리케이션에 필요할 수 있는 관계형 데이터베이스 기능을 제공하지 않을 수 있으며, 복잡성이 증가할 수 있습니다.",
            "이 접근 방식은 수동 확장이 리소스의 과잉 제공 또는 부족 제공을 초래할 수 있어 비효율적인 리소스 활용으로 이어질 수 있으며, 궁극적으로 비용을 증가시키고 최적의 확장성을 달성하지 못할 수 있습니다."
        ]
    },
    {
        "Question Number": "42",
        "Situation": "글로벌 소매 회사는 재고 및 전자상거래 플랫폼을 관리하기 위해 온프레미스 데이터 센터와 AWS 클라우드 리소스를 운영하고 있습니다. 이 회사는 온프레미스 인프라에서의 DNS 쿼리가 내부 및 외부 도메인 이름을 원활하게 해결할 수 있도록 보장하고자 합니다. 또한 조건부 포워딩 및 DNS 쿼리 로깅과 같은 고급 DNS 기능을 구현할 수 있는 솔루션을 원하고 있습니다. 그들은 이 목표를 달성하기 위해 Amazon Route 53 Resolver를 사용하는 것을 고려하고 있습니다.",
        "Question": "다음 중 지연 시간과 관리 오버헤드를 최소화하면서 온프레미스 DNS와 Amazon Route 53 Resolver의 가장 효율적인 통합을 제공하는 옵션은 무엇입니까?",
        "Options": {
            "1": "VPC에서 Route 53 Resolver 인바운드 엔드포인트를 구성합니다. 온프레미스 DNS 서버에서 AWS 호스팅 도메인에 대한 쿼리를 Resolver로 전달하기 위해 조건부 포워더를 설정합니다. Route 53에서 DNS 쿼리 로깅을 구현하여 트래픽 패턴을 모니터링합니다.",
            "2": "내부 도메인 이름에 대한 Route 53 개인 호스팅 영역과 VPC에 아웃바운드 엔드포인트를 생성합니다. 온프레미스 DNS 서버를 아웃바운드 엔드포인트에 지정하여 AWS 리소스를 해결하고 외부 DNS 해석은 별도로 유지합니다.",
            "3": "온프레미스 데이터 센터와 AWS 간에 VPN 연결을 설정하고 온프레미스 DNS 서버가 AWS 도메인 이름을 직접 해결하도록 구성합니다. 외부 DNS 관리를 위해 Route 53을 사용하지만 온프레미스 DNS와 통합하지 않습니다.",
            "4": "VPC 내에서 DNS 프록시로 EC2 인스턴스를 배포하여 모든 DNS 쿼리를 온프레미스 DNS 서버로 전달합니다. 온프레미스 DNS를 설정하여 AWS 리소스에 대한 요청을 EC2 인스턴스로 전달합니다. Amazon CloudWatch를 활용하여 DNS 쿼리를 모니터링합니다."
        },
        "Correct Answer": "VPC에서 Route 53 Resolver 인바운드 엔드포인트를 구성합니다. 온프레미스 DNS 서버에서 AWS 호스팅 도메인에 대한 쿼리를 Resolver로 전달하기 위해 조건부 포워더를 설정합니다. Route 53에서 DNS 쿼리 로깅을 구현하여 트래픽 패턴을 모니터링합니다.",
        "Explanation": "Route 53 Resolver 인바운드 엔드포인트를 구성함으로써 온프레미스 DNS는 AWS 호스팅 도메인에 대한 쿼리를 Route 53으로 직접 전달할 수 있어 원활한 통합이 가능합니다. 이는 쿼리가 AWS 환경 내에서 해결되므로 지연 시간을 최소화하며, 조건부 포워딩 및 쿼리 로깅과 같은 고급 기능을 사용할 수 있어 관리가 간소화됩니다.",
        "Other Options": [
            "EC2 인스턴스를 DNS 프록시로 배포하면 불필요한 복잡성과 관리 오버헤드가 추가됩니다. 모든 DNS 쿼리가 추가 레이어를 통해 라우팅되므로 지연 시간이 증가하며, Route 53 Resolver와의 직접 통합에 비해 최적이 아닙니다.",
            "VPN 연결을 설정하고 온프레미스 DNS 서버가 AWS 도메인 이름을 직접 해결하도록 허용하는 것은 Route 53 Resolver의 고급 기능이 부족합니다. 이 접근 방식은 조건부 포워딩이나 로깅 기능을 제공하지 않아 회사의 DNS 관리 능력을 제한합니다.",
            "개인 호스팅 영역과 아웃바운드 엔드포인트를 생성하면 내부 도메인 해석이 가능하지만 외부 쿼리에 대한 원활한 통합을 촉진하지 않습니다. 또한 온프레미스 DNS 서버를 아웃바운드 엔드포인트에 지정하면 조건부 포워딩과 같은 Route 53 Resolver의 이점을 제한합니다."
        ]
    },
    {
        "Question Number": "43",
        "Situation": "한 금융 서비스 회사가 Amazon EC2 인스턴스와 Amazon S3 스토리지의 예측할 수 없는 사용 패턴과 증가하는 비용을 경험하고 있습니다. 이 회사는 AWS 가시성 도구를 사용하여 자원 활용에 대한 더 나은 통찰력을 얻고 자원을 효과적으로 최적화하고자 합니다. 솔루션 아키텍트는 이러한 자원의 사용을 평가하고 최적화하기 위한 최선의 접근 방식을 식별하는 임무를 맡고 있습니다.",
        "Question": "솔루션 아키텍트가 컴퓨팅 및 스토리지 자원을 효과적으로 분석하고 최적화하기 위해 어떤 도구를 활용해야 합니까?",
        "Options": {
            "1": "일반적인 모범 사례를 위한 AWS Trusted Advisor와 자원에 대한 지출을 추적하기 위한 AWS Budgets를 구현합니다.",
            "2": "EC2 인스턴스 사용을 평가하기 위해 AWS Compute Optimizer를 활용하고, 스토리지 최적화 통찰력을 위해 Amazon S3 Storage Lens를 사용합니다.",
            "3": "지출 패턴을 분석하기 위해 AWS Cost Explorer를 사용하고, 자원의 API 사용을 모니터링하기 위해 AWS CloudTrail을 사용합니다.",
            "4": "준수 평가를 위해 AWS Config를 활용하고, 자원 성능의 실시간 모니터링을 위해 Amazon CloudWatch를 사용합니다."
        },
        "Correct Answer": "EC2 인스턴스 사용을 평가하기 위해 AWS Compute Optimizer를 활용하고, 스토리지 최적화 통찰력을 위해 Amazon S3 Storage Lens를 사용합니다.",
        "Explanation": "AWS Compute Optimizer는 실제 사용에 기반하여 EC2 인스턴스 유형을 최적화하기 위한 권장 사항을 제공하며, Amazon S3 Storage Lens는 스토리지 사용 패턴에 대한 통찰력을 제공하여 컴퓨팅 및 스토리지 자원에서 비용 절감 기회를 식별하는 데 도움을 줍니다.",
        "Other Options": [
            "AWS Trusted Advisor는 일반적인 모범 사례를 제공하지만 EC2 및 S3에 대한 자원 활용 또는 최적화에 대한 구체적인 통찰력을 제공하지 않습니다. AWS Budgets는 자원 최적화보다는 비용 추적에 중점을 둡니다.",
            "AWS Cost Explorer는 지출 패턴을 분석하는 데 도움이 되지만, 컴퓨팅 및 스토리지 자원에 대한 최적화 권장 사항을 직접 제공하지 않습니다. AWS CloudTrail은 주로 API 호출 모니터링에 사용되며 자원 최적화에는 도움이 되지 않습니다.",
            "AWS Config는 자원의 준수를 평가하고 특정 기준을 충족하는지 확인하는 데 사용되지만 성능 최적화에 중점을 두지 않습니다. Amazon CloudWatch는 모니터링에 유용하지만 자원 할당 또는 비용 최적화를 위한 구체적인 통찰력을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "44",
        "Situation": "한 회사가 온프레미스 데이터베이스를 AWS로 마이그레이션하고 있습니다. 데이터베이스 스키마가 복잡하며 Amazon RDS 인스턴스의 형식에 맞게 변환해야 합니다. 이 회사는 마이그레이션을 효율적으로 처리하기 위해 AWS Schema Conversion Tool (AWS SCT)을 사용하기로 결정했습니다. 또한, 데이터를 안전하게 단계적으로 전송하기 위해 AWS Snowball Edge 장치를 사용할 계획입니다. 추가적으로, 소스 데이터베이스와 대상 데이터베이스 간의 상당한 차이로 인해 변환이 필요합니다.",
        "Question": "AWS Schema Conversion Tool (AWS SCT)와 AWS SCT 에이전트를 사용하여 데이터베이스 마이그레이션 프로세스를 어떻게 촉진할 수 있는지 가장 잘 설명하는 것은 무엇입니까?",
        "Options": {
            "1": "마이그레이션 프로세스에서 외부 에이전트의 필요성을 없애고 AWS SCT에만 의존하여 스키마 변환과 데이터 추출을 모두 수행합니다.",
            "2": "AWS SCT를 사용하여 데이터베이스 스키마를 변환하고 에이전트 없이 직접 대상 Amazon RDS 인스턴스에 연결하여 데이터 마이그레이션을 수행합니다.",
            "3": "AWS SCT를 스키마 변환에 사용하고 AWS Lambda 함수를 사용하여 데이터를 대상 Amazon RDS 인스턴스로 마이그레이션하는 동안 변환합니다.",
            "4": "AWS SCT를 사용하여 스키마를 변환하고 Amazon EC2 인스턴스에 AWS SCT 에이전트를 배포하여 마이그레이션 중 추가 데이터 변환을 처리합니다."
        },
        "Correct Answer": "AWS SCT를 사용하여 스키마를 변환하고 Amazon EC2 인스턴스에 AWS SCT 에이전트를 배포하여 마이그레이션 중 추가 데이터 변환을 처리합니다.",
        "Explanation": "정답은 스키마 변환을 위한 AWS SCT와 데이터 변환을 위한 AWS SCT 에이전트의 결합 사용을 강조합니다. 에이전트는 EC2 인스턴스에서 필요한 변환을 수행할 수 있으며, 이는 소스와 대상 데이터베이스 간의 차이가 클 때 필수적입니다.",
        "Other Options": [
            "이 옵션은 잘못되었습니다. AWS SCT는 데이터베이스 스키마를 변환할 수 있지만 복잡한 변환을 위해 에이전트 없이 대상 Amazon RDS 인스턴스에 직접 연결할 수 없습니다.",
            "이 옵션은 잘못되었습니다. AWS SCT에만 의존하여 스키마 변환과 데이터 추출을 모두 수행하는 것은 복잡한 변환이 필요한 경우에는 불가능합니다.",
            "이 옵션은 잘못되었습니다. AWS Lambda 함수는 마이그레이션 중 데이터 변환을 위한 AWS SCT와 통합되어 있지 않으며, 에이전트의 역할은 이러한 작업을 위해 특별히 설계되었습니다."
        ]
    },
    {
        "Question Number": "45",
        "Situation": "한 금융 서비스 회사가 미션 크리티컬 애플리케이션을 AWS로 마이그레이션하고 있습니다. 이 애플리케이션은 대량의 트랜잭션을 효율적으로 처리하기 위해 저지연 및 고처리량 스토리지가 필요합니다. 솔루션 아키텍트는 이러한 성능 요구 사항을 충족하면서 비용과 내구성을 균형 있게 맞출 수 있는 가장 적합한 Amazon EBS 볼륨 유형을 선택해야 합니다.",
        "Question": "솔루션 아키텍트가 애플리케이션의 최적 성능과 내구성을 보장하기 위해 선택해야 하는 Amazon EBS 볼륨 유형은 무엇입니까?",
        "Options": {
            "1": "일반 워크로드에 적합한 가격과 성능의 균형을 제공하는 gp2 볼륨이지만, 높은 트랜잭션 요구를 충족하지 못할 수 있습니다.",
            "2": "처리량 집약적인 워크로드를 위해 설계된 st1 볼륨이지만 저지연 애플리케이션에 필요한 성능이 부족합니다.",
            "3": "트랜잭션 워크로드에 이상적인 높은 성능, 저지연 및 99.999% 내구성을 제공하는 io2 볼륨입니다.",
            "4": "가장 저렴한 옵션인 sc1 볼륨이지만 자주 접근하거나 저지연 요구 사항에는 적합하지 않습니다."
        },
        "Correct Answer": "트랜잭션 워크로드에 이상적인 높은 성능, 저지연 및 99.999% 내구성을 제공하는 io2 볼륨입니다.",
        "Explanation": "io2 볼륨은 저지연 트랜잭션 워크로드를 위해 특별히 설계되어 있으며, 최대 IOPS 64,000과 99.999%의 내구성을 제공하여 최고의 성능과 내구성을 제공합니다. 이는 금융 서비스 애플리케이션에 가장 적합한 선택입니다.",
        "Other Options": [
            "gp2 볼륨은 일반 워크로드에 대해 좋은 균형을 제공할 수 있지만, 미션 크리티컬 금융 애플리케이션에 필요한 일관된 저지연 및 고처리량을 제공하지 못할 수 있습니다.",
            "st1 볼륨은 처리량에서 뛰어난 저비용 HDD 옵션이지만 저지연 워크로드를 위해 설계되지 않아 이 시나리오에 적합하지 않습니다.",
            "sc1 볼륨은 자주 접근하지 않는 데이터와 콜드 스토리지를 위해 최적화되어 있어, 고수요 저지연 애플리케이션의 성능 요구를 충족하지 못합니다."
        ]
    },
    {
        "Question Number": "46",
        "Situation": "한 금융 서비스 회사가 Amazon RDS에서 호스팅되는 온라인 거래 처리 시스템의 성능 문제를 겪고 있습니다. 애플리케이션은 피크 사용 기간 동안 느린 응답 시간을 경험하고 있으며, 경영진은 성능 병목 현상을 식별하고 해결하고자 합니다. 회사는 기존 아키텍처에 대한 변경을 최소화하면서 쿼리 성능 및 리소스 활용에 대한 통찰력을 제공할 수 있는 솔루션을 고려하고 있습니다.",
        "Question": "다음 옵션 중 Amazon RDS 데이터베이스에서 성능 병목 현상을 식별하는 가장 효과적인 방법은 무엇입니까?",
        "Options": {
            "1": "Amazon CloudWatch 경고를 구현하여 RDS 인스턴스의 CPU 및 디스크 I/O 메트릭을 모니터링합니다. 임계값이 초과되면 데이터베이스 성능 메트릭을 수동으로 검토하여 잠재적인 병목 현상을 식별합니다.",
            "2": "AWS CloudTrail을 활용하여 RDS 인스턴스에 대한 API 호출을 기록하고 데이터베이스 사용 패턴에 대한 정보를 수집합니다. 로그를 분석하여 피크 시간 동안 리소스 경합 문제를 식별합니다.",
            "3": "Amazon RDS Performance Insights를 활성화하여 데이터베이스 부하를 분석하고 문제 쿼리를 식별합니다. 대시보드를 사용하여 시간에 따른 CPU, 메모리 및 I/O 사용량을 모니터링합니다. 제공된 통찰력을 기반으로 식별된 쿼리를 최적화합니다.",
            "4": "RDS 인스턴스에서 향상된 모니터링을 활성화하여 운영 체제 성능에 대한 자세한 메트릭을 캡처합니다. OS 수준의 메트릭을 검토하여 기본 서버 리소스가 성능 문제의 원인인지 확인합니다."
        },
        "Correct Answer": "Amazon RDS Performance Insights를 활성화하여 데이터베이스 부하를 분석하고 문제 쿼리를 식별합니다. 대시보드를 사용하여 시간에 따른 CPU, 메모리 및 I/O 사용량을 모니터링합니다. 제공된 통찰력을 기반으로 식별된 쿼리를 최적화합니다.",
        "Explanation": "Amazon RDS Performance Insights는 데이터베이스 성능을 분석하기 위한 강력한 도구를 제공합니다. 데이터베이스 부하에 대한 시각적 표현을 제공하며, 성능 병목 현상을 유발할 수 있는 특정 쿼리로 깊이 들어갈 수 있습니다. 이 접근 방식은 아키텍처에 대한 광범위한 변경 필요성을 최소화하면서 최적화를 위한 실행 가능한 통찰력을 제공합니다.",
        "Other Options": [
            "AWS CloudTrail은 주로 API 호출을 기록하고 모니터링하는 데 사용됩니다. 데이터베이스 성능이나 리소스 활용에 대한 직접적인 통찰력을 제공하지 않으므로 RDS에서 성능 병목 현상을 식별하는 데 덜 효과적입니다.",
            "Amazon CloudWatch는 CPU 및 I/O 메트릭을 모니터링할 수 있지만, 임계값이 초과될 때 메트릭을 수동으로 검토하는 것은 Performance Insights와 같은 전용 성능 분석 도구를 활용하는 것만큼 효과적이지 않습니다.",
            "향상된 모니터링은 OS 수준의 메트릭을 제공하지만 데이터베이스 성능 문제와 직접적으로 연관되지 않을 수 있습니다. Performance Insights가 제공하는 쿼리 성능 및 부하 분배에 대한 집중적인 통찰력이 부족하여 RDS에서 병목 현상을 식별하는 데 덜 관련성이 있습니다."
        ]
    },
    {
        "Question Number": "47",
        "Situation": "한 회사는 두 개의 AWS 계정을 보유하고 있습니다: 개발 계정과 생산 계정. 개발 계정은 애플리케이션 인프라를 생성하고 관리해야 하는 개발자 및 운영자 팀을 호스팅합니다. 보안 및 거버넌스를 유지하기 위해 회사는 애플리케이션이 배포된 생산 계정에 대한 제어된 액세스를 제공하고자 합니다. 회사는 두 계정 모두에서 모범 사례에 따라 IAM 그룹과 사용자를 설정했습니다.",
        "Question": "회사는 개발 계정의 개발자와 운영자가 최소 권한 원칙을 준수하면서 생산 계정에 안전하게 액세스할 수 있도록 IAM 역할과 정책을 어떻게 구성해야 합니까?",
        "Options": {
            "1": "개발 계정에 애플리케이션 인프라를 관리할 수 있는 권한을 가진 공유 IAM 역할을 생성하고, 생산 계정이 이 역할을 맡을 수 있도록 허용합니다.",
            "2": "생산 계정에 애플리케이션 관리 권한이 있는 IAM 그룹을 생성하고, 개발 계정의 IAM 사용자를 이 그룹에 직접 추가합니다.",
            "3": "생산 계정에 애플리케이션 인프라를 생성하고 삭제할 수 있는 권한을 가진 공유 IAM 역할을 생성합니다. 신뢰 정책을 업데이트하여 개발 계정의 사용자가 이 역할을 맡을 수 있도록 합니다.",
            "4": "개발 계정의 각 개발자 및 운영자를 위해 생산 계정에 IAM 사용자를 생성하고, 애플리케이션 인프라를 생성하고 삭제할 수 있는 권한을 부여합니다."
        },
        "Correct Answer": "생산 계정에 애플리케이션 인프라를 생성하고 삭제할 수 있는 권한을 가진 공유 IAM 역할을 생성합니다. 신뢰 정책을 업데이트하여 개발 계정의 사용자가 이 역할을 맡을 수 있도록 합니다.",
        "Explanation": "생산 계정에 필요한 권한을 가진 공유 IAM 역할을 생성하면 개발 계정의 사용자에게 제어된 액세스를 허용할 수 있습니다. 신뢰 정책을 업데이트함으로써 개발자와 운영자가 이 역할을 맡을 수 있도록 하여 최소 권한 원칙을 준수하면서 필요한 액세스를 제공합니다.",
        "Other Options": [
            "생산 계정에 각 개발자 및 운영자를 위한 IAM 사용자를 생성하는 것은 관리 오버헤드와 잠재적인 보안 위험을 초래할 수 있으므로 모범 사례가 아닙니다. 대신 역할을 사용하는 것이 더 안전하고 관리하기 쉬운 솔루션을 제공합니다.",
            "생산 계정에 IAM 그룹을 생성하고 개발 계정의 IAM 사용자를 이 그룹에 직접 추가하는 것은 작동하지 않습니다. 한 계정의 IAM 사용자는 다른 계정의 그룹에 추가될 수 없기 때문입니다. 교차 계정 역할이 액세스 관리에 적합한 메커니즘입니다.",
            "개발 계정에 공유 IAM 역할을 생성하는 것은 운영자와 개발자가 생산 계정에 액세스하는 데 도움이 되지 않습니다. 역할은 생산 계정에서 정의되어야 하며, 개발 계정이 이를 맡을 수 있도록 신뢰 정책이 필요합니다."
        ]
    },
    {
        "Question Number": "48",
        "Situation": "한 회사가 기존 온프레미스 워크로드를 AWS로 마이그레이션할 계획을 세우고 있습니다. 아키텍처는 비용 효율적이어야 하며 리소스가 효율적으로 활용되도록 해야 합니다. 회사는 특히 계절적 워크로드에 대한 충분한 용량을 보장하면서 비용 관리를 중시하고 있습니다. EC2 인스턴스와 RDS 데이터베이스에 적합한 최상의 가격 모델을 이해하고자 합니다.",
        "Question": "변동 워크로드를 수용하면서 비용을 최적화하기 위해 솔루션 아키텍트가 고려해야 할 가격 모델은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "Savings Plans와 Spot Instances를 결합하여 워크로드 전반에 걸쳐 비용 절감을 최적화합니다.",
            "2": "모든 워크로드에 대해 On-Demand Instances를 활용하여 최대 유연성을 유지합니다.",
            "3": "여러 인스턴스 패밀리와 리전에서 유연한 가격 옵션을 위해 Savings Plans를 사용합니다.",
            "4": "Spot Instances를 활용하여 사용되지 않는 EC2 용량을 저렴한 요금으로 이용합니다.",
            "5": "장기 워크로드를 위해 Reserved Instances를 구매하고 용량 예약을 보장합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "여러 인스턴스 패밀리와 리전에서 유연한 가격 옵션을 위해 Savings Plans를 사용합니다.",
            "Savings Plans와 Spot Instances를 결합하여 워크로드 전반에 걸쳐 비용 절감을 최적화합니다."
        ],
        "Explanation": "Savings Plans는 인스턴스 유형과 리전 전반에 걸쳐 유연성을 제공하여 변동 워크로드에 유리합니다. 이를 Spot Instances와 결합하면 회사는 덜 중요한 워크로드에 대해 더 낮은 가격을 활용하여 전체 비용을 최적화할 수 있습니다.",
        "Other Options": [
            "Reserved Instances를 구매하면 회사가 특정 인스턴스 유형과 리전으로 고정되므로 유연성이 필요한 변동 워크로드에 이상적이지 않을 수 있습니다.",
            "모든 워크로드에 대해 On-Demand Instances를 활용하면 비용이 많이 들 수 있으며, 장기 사용이나 사용되지 않는 용량과 관련된 비용 절감을 제공하지 않습니다.",
            "Spot Instances만 활용하면 피크 시간 동안 용량을 보장하지 못할 수 있으며, 이는 중요한 워크로드에 대한 서비스 중단을 초래할 수 있습니다."
        ]
    },
    {
        "Question Number": "49",
        "Situation": "금융 서비스 회사는 민감한 데이터의 저장 및 전송 시 암호화를 의무화하는 엄격한 규제 요구 사항을 준수해야 합니다. 이 회사는 애플리케이션을 AWS로 마이그레이션하고 있으며, AWS 서비스와의 데이터 전송이 모두 암호화되도록 해야 합니다. 또한, Amazon S3에 저장된 데이터도 세분화된 접근 제어를 허용하는 방법으로 암호화되어야 합니다.",
        "Question": "어떤 조합의 행동이 암호화 요구 사항 준수를 보장할 수 있습니까?",
        "Options": {
            "1": "Amazon S3 Transfer Acceleration을 사용하여 암호화 없이 업로드 속도를 높입니다. IAM 정책을 사용하여 모든 사용자가 S3 객체에 접근할 수 있도록 허용합니다. 객체 수명 주기를 관리하기 위해 데이터 보존 정책을 설정합니다.",
            "2": "S3 버킷에 대해 AWS KMS 키를 사용하여 서버 측 암호화를 활성화합니다. AWS 서비스에 대한 모든 API 호출에 HTTPS를 사용합니다. KMS 키에 대한 접근을 제한하기 위해 IAM 정책을 설정합니다.",
            "3": "S3에 업로드하기 전에 데이터에 대해 클라이언트 측 암호화를 구현합니다. AWS와 온프레미스 데이터 센터 간에 암호화되지 않은 데이터 전송을 사용합니다. 접근 제어를 위해 S3 버킷 정책에 의존합니다.",
            "4": "AWS CloudHSM을 사용하여 S3의 암호화 키를 관리합니다. 모든 애플리케이션을 암호화되지 않은 HTTP를 사용하여 데이터 전송하도록 구성합니다. S3 버킷에 대한 접근을 제한하기 위해 보안 그룹을 구현합니다."
        },
        "Correct Answer": "S3 버킷에 대해 AWS KMS 키를 사용하여 서버 측 암호화를 활성화합니다. AWS 서비스에 대한 모든 API 호출에 HTTPS를 사용합니다. KMS 키에 대한 접근을 제한하기 위해 IAM 정책을 설정합니다.",
        "Explanation": "AWS KMS 키를 사용하여 서버 측 암호화를 활성화하면 S3에 저장된 데이터가 암호화되고, HTTPS를 사용하면 전송 중인 데이터가 암호화됩니다. KMS 키에 대한 접근을 제한하기 위해 IAM 정책을 설정하면 암호화 키에 대한 추가 보안 및 제어 계층이 추가되어 규제 요구 사항을 충족합니다.",
        "Other Options": [
            "AWS CloudHSM을 사용하여 암호화 키를 관리하는 것은 안전한 접근 방식이지만, 애플리케이션을 암호화되지 않은 HTTP를 사용하도록 구성하는 것은 전송 중 암호화 요구 사항을 충족하지 않으므로 이 옵션은 규정을 준수하지 않습니다.",
            "Amazon S3 Transfer Acceleration을 활용하면 성능 이점을 제공할 수 있지만 암호화를 강제하지는 않습니다. 모든 사용자가 S3 객체에 접근할 수 있도록 허용하는 것은 세분화된 접근 제어의 필요성을 무시하여 준수 기준을 충족하지 못합니다.",
            "클라이언트 측 암호화를 구현하는 것은 S3에 도달하기 전에 데이터를 보호하는 유효한 전략이지만, 암호화되지 않은 데이터 전송을 사용하는 것은 전송 중 데이터의 보안을 저해합니다. S3 버킷 정책에만 의존하는 것은 규제 프레임워크의 엄격한 요구 사항을 충족하기에 불충분합니다."
        ]
    },
    {
        "Question Number": "50",
        "Situation": "한 회사가 전자 상거래 플랫폼을 지원하기 위해 AWS에서 마이크로서비스 아키텍처를 구축하고 있습니다. 각 서비스는 특정 비즈니스 기능을 담당하며 다른 서비스와 원활하게 통신해야 합니다. 회사는 서비스가 느슨하게 결합되고 독립적으로 확장될 수 있도록 보장하고자 합니다. 솔루션 아키텍트는 이러한 마이크로서비스 간의 통신을 촉진하기 위해 가장 적합한 애플리케이션 통합 서비스를 선택하는 임무를 맡고 있습니다.",
        "Question": "솔루션 아키텍트가 마이크로서비스의 통합 요구 사항을 달성하기 위해 구현해야 할 옵션은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "AWS AppSync를 사용하여 마이크로서비스를 클라이언트 애플리케이션에 직접 연결합니다.",
            "2": "Amazon EventBridge를 활용하여 특정 패턴에 따라 마이크로서비스 간의 이벤트를 라우팅합니다.",
            "3": "Amazon Simple Queue Service (SQS)를 사용하여 서비스를 분리하고 비동기 통신을 가능하게 합니다.",
            "4": "AWS Step Functions를 구성하여 마이크로서비스 간의 워크플로를 조정합니다.",
            "5": "Amazon SNS를 구현하여 이벤트 발생 시 여러 서비스에 알림을 보냅니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon Simple Queue Service (SQS)를 사용하여 서비스를 분리하고 비동기 통신을 가능하게 합니다.",
            "Amazon EventBridge를 활용하여 특정 패턴에 따라 마이크로서비스 간의 이벤트를 라우팅합니다."
        ],
        "Explanation": "Amazon SQS를 사용하면 마이크로서비스 간의 비동기적이고 분리된 통신이 가능하여 확장성과 복원력을 향상시킵니다. Amazon EventBridge를 활용하면 이벤트 기반 아키텍처를 가능하게 하여 서비스가 실시간으로 이벤트에 반응하면서 느슨한 결합을 유지할 수 있습니다.",
        "Other Options": [
            "Amazon SNS는 여러 서비스에 알림을 푸시할 수 있지만, SQS와 같은 수준의 분리 및 비동기 처리를 제공하지 않습니다.",
            "AWS AppSync는 주로 GraphQL API에 사용되며 이 시나리오에서 마이크로서비스 통합에 가장 적합하지 않을 수 있습니다.",
            "AWS Step Functions는 워크플로를 조정하는 데 더 적합하며 마이크로서비스 간의 직접적인 통신을 제공하는 데는 적합하지 않습니다."
        ]
    },
    {
        "Question Number": "51",
        "Situation": "금융 서비스 회사가 민감한 고객 데이터를 처리할 새로운 애플리케이션을 개발하고 있습니다. 이 회사는 보안 모범 사례를 준수하기 위해 모든 AWS 서비스와 리소스가 최소 권한 접근 원칙을 준수하도록 구성되도록 솔루션 아키텍트를 지정했습니다. 아키텍트는 애플리케이션 내 다양한 역할에 대한 사용자 권한을 설정하여 사용자가 특정 작업 기능을 수행하는 데 필요한 리소스에만 접근할 수 있도록 해야 합니다.",
        "Question": "솔루션 아키텍트가 애플리케이션 사용자에 대한 최소 권한 접근 원칙을 가장 잘 구현하기 위해 어떤 조치를 취해야 합니까?",
        "Options": {
            "1": "각 작업 기능에 대해 특정 권한을 가진 IAM 역할을 생성하고 이를 사용자에게 할당합니다.",
            "2": "광범위한 권한을 가진 단일 IAM 역할을 생성하고 이를 모든 사용자에게 할당합니다.",
            "3": "모든 사용자에게 관리자의 동일한 권한을 부여하여 필요한 모든 접근을 보장합니다.",
            "4": "모든 사용자에게 전체 접근을 허용하여 애플리케이션 개발 중 권한 문제를 방지합니다."
        },
        "Correct Answer": "각 작업 기능에 대해 특정 권한을 가진 IAM 역할을 생성하고 이를 사용자에게 할당합니다.",
        "Explanation": "각 작업 기능에 대해 특정 권한을 가진 IAM 역할을 생성하면 사용자가 자신의 작업에 필요한 리소스에만 접근할 수 있도록 보장합니다. 이는 최소 권한 원칙에 부합하며 과도한 권한 부여와 관련된 보안 위험을 최소화합니다.",
        "Other Options": [
            "모든 사용자에게 전체 접근을 허용하는 것은 불필요한 권한을 제공하여 보안을 저해하며, 이는 최소 권한 원칙에 위배됩니다.",
            "광범위한 권한을 가진 단일 IAM 역할을 생성하면 모든 사용자가 필요하지 않은 리소스에 접근할 수 있어 보안 위험을 초래합니다.",
            "사용자에게 관리자의 동일한 권한을 부여하는 것은 최소 권한 원칙을 저해하며 민감한 리소스의 우발적 또는 의도적인 오용으로 이어질 수 있습니다."
        ]
    },
    {
        "Question Number": "52",
        "Situation": "미디어 회사는 사용자가 매일 생성하고 업로드하는 대량의 비디오 콘텐츠를 보유하고 있습니다. 회사는 이 콘텐츠를 효율적으로 저장하고 관리해야 하며, 비디오가 스트리밍을 위해 접근 가능해야 합니다. 업로드된 비디오의 대부분은 업로드 후 며칠이 지나면 거의 접근되지 않지만, 규정 준수를 위해 보존해야 합니다. 솔루션 아키텍트는 비용을 최소화하면서 비디오에 대한 내구성과 접근성을 제공하는 저장 솔루션을 설계하는 임무를 맡고 있습니다.",
        "Question": "다음 중 회사의 비용 효율적인 저장 및 비디오 콘텐츠 접근성 요구 사항을 가장 잘 충족하는 저장 솔루션은 무엇입니까?",
        "Options": {
            "1": "모든 비디오에 대해 Amazon S3 Standard를 사용하고, 라이프사이클 정책을 구현하여 오래된 콘텐츠를 Amazon S3 Glacier로 전환합니다.",
            "2": "모든 비디오를 Amazon S3 Intelligent-Tiering에 저장하여 사용 패턴에 따라 자주 접근하는 계층과 드물게 접근하는 계층 간에 데이터를 자동으로 이동합니다.",
            "3": "모든 비디오 저장에 Amazon EFS를 사용하여 여러 인스턴스에서 쉽게 공유하고 접근할 수 있도록 하며, 라이프사이클 관리에 대한 걱정 없이 사용할 수 있습니다.",
            "4": "최근에 업로드된 비디오에 대해 Amazon S3 Standard를 사용하고, 30일 동안 접근이 없으면 Amazon S3 One Zone-IA로 전환하는 라이프사이클 정책을 구성합니다."
        },
        "Correct Answer": "사용 패턴에 따라 자주 접근하는 계층과 드물게 접근하는 계층 간에 데이터를 자동으로 이동하기 위해 Amazon S3 Intelligent-Tiering을 사용합니다.",
        "Explanation": "Amazon S3 Intelligent-Tiering은 알 수 없거나 변화하는 접근 패턴을 가진 데이터를 위해 설계되었습니다. 이 서비스는 두 개의 접근 계층인 자주 접근하는 계층과 드물게 접근하는 계층 간에 데이터를 자동으로 이동하여 수동 개입 없이 비용을 최적화합니다. 이는 미디어 회사가 새로 업로드된 콘텐츠에 대한 접근성을 보장하면서 비용을 최소화해야 하는 요구 사항에 이상적입니다.",
        "Other Options": [
            "모든 비디오에 대해 Amazon S3 Standard를 사용하는 것은 특히 초기 업로드 후 거의 접근되지 않는 비디오에 대해 더 높은 비용이 발생할 수 있어 Intelligent-Tiering에 비해 비용 효율적이지 않습니다.",
            "Amazon EFS는 일반적으로 대량의 데이터를 저장하는 데 S3보다 더 비쌉니다. 특히 드물게 접근되는 콘텐츠의 경우에는 더욱 그렇습니다.",
            "Amazon S3 Standard를 사용하고 30일 후 S3 One Zone-IA로 전환하는 라이프사이클 정책을 구성하는 것은 잠재적인 옵션이지만, 비디오의 예측할 수 없는 접근 패턴을 고려할 때 Intelligent-Tiering이 제공하는 자동 최적화가 부족합니다."
        ]
    },
    {
        "Question Number": "53",
        "Situation": "금융 서비스 회사는 확장성을 개선하고 운영 비용을 줄이기 위해 온프레미스 데이터베이스를 AWS로 마이그레이션하고 있습니다. 그들은 Amazon RDS 인스턴스로 전송해야 하는 대량의 트랜잭션 데이터를 처리하고 있습니다. 회사는 마이그레이션 중 최소한의 다운타임을 보장하고 데이터 무결성을 유지하고자 합니다. 솔루션 아키텍트는 AWS로 데이터베이스를 전송하기 위한 가장 적절한 방법을 선택하는 임무를 맡고 있습니다.",
        "Question": "최소한의 다운타임과 데이터 무결성을 유지하면서 데이터베이스를 마이그레이션하기 위한 가장 적합한 솔루션은 무엇입니까?",
        "Options": {
            "1": "데이터베이스를 수동으로 백업하고, 백업 파일을 Amazon RDS로 전송한 후 데이터베이스를 복원하며, 이 과정에서 애플리케이션이 오프라인 상태가 되도록 합니다.",
            "2": "데이터베이스를 평면 파일로 내보내고, 이를 Amazon S3에 업로드한 후 RDS 인스턴스로 가져오며, 이 과정에서 상당한 다운타임이 필요합니다.",
            "3": "AWS Database Migration Service를 사용하여 지속적인 데이터 복제를 위한 복제 인스턴스를 설정하여 거의 제로 다운타임 마이그레이션을 가능하게 합니다.",
            "4": "AWS Snowball을 사용하여 전체 데이터베이스를 AWS로 전송하며, 이 과정에서 며칠이 걸리고 마이그레이션 중에 긴 다운타임이 발생합니다."
        },
        "Correct Answer": "지속적인 데이터 복제를 위한 복제 인스턴스를 설정하여 거의 제로 다운타임 마이그레이션을 가능하게 하는 AWS Database Migration Service를 사용합니다.",
        "Explanation": "AWS Database Migration Service(DMS)는 최소한의 다운타임으로 데이터베이스를 마이그레이션할 수 있는 방법을 제공합니다. 복제 인스턴스를 사용함으로써 DMS는 소스 데이터베이스에서 대상 RDS 인스턴스로 변경 사항을 지속적으로 복제할 수 있어, 최종 전환까지 애플리케이션이 운영 상태를 유지할 수 있으며, 데이터 무결성과 최소한의 중단을 보장합니다.",
        "Other Options": [
            "데이터베이스를 평면 파일로 내보내는 것은 내보내기 과정에서 데이터베이스가 오프라인 상태여야 하므로 상당한 다운타임이 필요하며, 이는 다운타임을 최소화하는 데 적합하지 않습니다.",
            "수동 백업 및 복원 프로세스를 수행하면 애플리케이션이 오프라인 상태가 되어야 하므로 마이그레이션 중 상당한 다운타임과 서비스 중단이 발생합니다.",
            "AWS Snowball을 사용하여 데이터베이스를 전송하는 것은 비효율적이며, 데이터가 물리적으로 전송되고 AWS에 업로드되는 동안 긴 다운타임이 발생합니다."
        ]
    },
    {
        "Question Number": "54",
        "Situation": "금융 서비스 회사는 AWS에 호스팅된 중요한 애플리케이션에 대한 재해 복구 솔루션을 구현해야 합니다. 애플리케이션은 실패 시 최소한의 다운타임과 데이터 손실로 계속 사용 가능해야 합니다. 회사는 현재 단일 리전 내에서 고가용성을 위해 여러 가용 영역을 사용하고 있지만, 재해 복구 전략을 강화하고자 합니다. 예산이 제한되어 있으며, 복구 지점 목표(RPO)가 1시간 미만이어야 합니다.",
        "Question": "AWS에서 회사의 최소한의 다운타임과 낮은 데이터 손실 요구 사항을 가장 잘 충족하는 재해 복구 솔루션은 무엇입니까?",
        "Options": {
            "1": "두 개의 AWS 리전에서 동기식 데이터 복제를 통해 활성-활성 아키텍처를 구현하고, DNS 장애 조치를 위해 Route 53을 사용합니다.",
            "2": "Amazon RDS Multi-AZ 배포로 따뜻한 대기 솔루션을 구축하고, 복구를 위해 데이터를 Amazon S3에 정기적으로 백업합니다.",
            "3": "저장소로 Amazon S3를 사용하고 필요할 때 AWS Lambda를 사용하여 장애 조치 프로세스를 자동화하는 활성-수동 아키텍처를 배포합니다.",
            "4": "다른 리전의 Amazon RDS 읽기 복제를 사용하여 파일럿 라이트 재해 복구 전략을 설정하고, 빠른 배포를 위해 AWS CloudFormation을 활용합니다."
        },
        "Correct Answer": "Amazon RDS Multi-AZ 배포로 따뜻한 대기 솔루션을 구축하고, 복구를 위해 데이터를 Amazon S3에 정기적으로 백업합니다.",
        "Explanation": "Amazon RDS Multi-AZ의 따뜻한 대기 솔루션은 자동 장애 조치 기능을 제공하며 고가용성을 보장합니다. Amazon S3에 대한 정기적인 백업은 1시간 미만의 RPO 요구 사항을 충족하여 실패 시 효율적인 복구를 가능하게 합니다.",
        "Other Options": [
            "활성-활성 아키텍처를 구현하는 것은 일반적으로 더 복잡하고 비용이 많이 들며, 최소한의 다운타임을 제공할 수 있지만 회사의 제한된 예산을 초과할 수 있으며, 그들의 요구 사항을 고려할 때 필요하지 않습니다.",
            "파일럿 라이트 전략은 비용 효율적인 솔루션을 제공하지만, 일반적으로 재해 발생 시 더 많은 수동 개입과 설정 시간이 필요하므로 1시간 미만의 RPO를 효과적으로 충족하지 못할 수 있습니다.",
            "S3와 AWS Lambda를 사용하는 활성-수동 아키텍처는 장애 조치에 지연을 초래할 수 있으며, 애플리케이션의 신속한 가용성을 보장하지 못하므로 회사의 최소한의 다운타임 요구 사항에 적합하지 않습니다."
        ]
    },
    {
        "Question Number": "55",
        "Situation": "금융 서비스 회사는 내구성, 보안 및 규제 요구 사항 준수를 보장하는 방식으로 민감한 고객 데이터를 저장해야 합니다. 이들은 라이프사이클 관리 기능과 데이터 암호화를 제공하는 확장 가능한 객체 저장소를 제공할 수 있는 AWS 저장 솔루션을 찾고 있습니다. 회사는 또한 데이터에 API를 통해 접근할 수 있고, 드물게 접근할 때 낮은 비용이 발생하도록 보장하고자 합니다.",
        "Question": "이 요구 사항을 충족하기 위해 솔루션 아키텍트가 추천해야 할 AWS 저장 서비스는 무엇입니까?",
        "Options": {
            "1": "데이터 보호를 위한 Object Lock이 활성화된 Amazon S3와 서버 측 암호화.",
            "2": "고급 보안 기능을 갖춘 관리형 Windows 파일 시스템을 제공하는 Amazon FSx for Windows File Server.",
            "3": "데이터 보안을 보장하기 위한 암호화 및 백업 기능을 갖춘 Amazon Elastic File System (Amazon EFS).",
            "4": "데이터를 보호하기 위한 스냅샷 및 볼륨 암호화가 포함된 Amazon Elastic Block Store (EBS)."
        },
        "Correct Answer": "데이터 보호를 위한 Object Lock이 활성화된 Amazon S3와 서버 측 암호화.",
        "Explanation": "Amazon S3는 방대한 양의 데이터를 안전하게 저장할 수 있는 확장 가능한 객체 저장소를 제공합니다. Object Lock이 활성화되면 규제 요구 사항 준수를 보장하는 데이터 보존 정책을 설정할 수 있습니다. 또한, 서버 측 암호화는 데이터가 저장될 때 보호하며, S3는 비용 효율적인 저장 옵션을 위한 라이프사이클 관리 기능을 제공합니다.",
        "Other Options": [
            "Amazon Elastic File System (Amazon EFS)는 주로 파일 저장을 위해 설계되었으며, 대규모 객체 저장소에 대해 비용 효율적이지 않을 수 있습니다, 특히 드물게 접근하는 데이터의 경우.",
            "Amazon FSx for Windows File Server는 Windows 애플리케이션에 맞춰져 있으며, Amazon S3와 비교할 때 객체 저장소 요구 사항이나 API 접근 요구 사항에 가장 적합하지 않을 수 있습니다.",
            "Amazon Elastic Block Store (EBS)는 일반적으로 EC2 인스턴스에 연결된 블록 저장소에 사용되며, 스냅샷과 암호화를 제공하지만 대규모 객체 저장소 시나리오에 적합한 확장성과 라이프사이클 관리 기능을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "56",
        "Situation": "글로벌 소매 조직은 비용, 보안 및 규정 준수를 더 잘 관리하기 위해 AWS 계정을 통합하고자 합니다. 이 조직은 각 부서마다 자체 AWS 계정을 보유하고 있으며, 성장에 따라 확장할 수 있는 새로운 계정 구조를 고려하고 있습니다. 각 부서는 자신의 작업에 대한 필요한 자율성을 유지할 수 있어야 합니다. 솔루션 아키텍트는 조직의 요구 사항을 가장 잘 충족하는 계정 구조를 추천해야 합니다.",
        "Question": "비용 관리, 보안 및 규정 준수를 달성하면서 부서 자율성을 허용하기 위해 솔루션 아키텍트가 추천해야 할 계정 구조는 무엇입니까?",
        "Options": {
            "1": "각 부서에 대해 별도의 AWS 계정을 생성하고, 청구 및 규정 준수를 감독할 중앙 관리 계정을 설정하여 하이브리드 접근 방식을 사용합니다.",
            "2": "각 부서에 대해 하나씩 AWS Organizations를 배포하여 완전한 자율성을 허용하지만 청구 및 규정 준수의 중앙 관리를 복잡하게 만듭니다.",
            "3": "조직 전체에 대해 단일 AWS 계정을 생성하고 IAM 역할을 사용하여 부서별 리소스 접근을 관리하여 각 부서가 자신의 작업을 제어할 수 있도록 합니다.",
            "4": "여러 개의 조직 단위(OU)를 가진 하나의 AWS Organization을 생성하고 각 부서에 자신의 OU를 할당하여 자원을 독립적으로 관리하면서 중앙 집중식 청구를 유지합니다."
        },
        "Correct Answer": "여러 개의 조직 단위(OU)를 가진 하나의 AWS Organization을 생성하고 각 부서에 자신의 OU를 할당하여 자원을 독립적으로 관리하면서 중앙 집중식 청구를 유지합니다.",
        "Explanation": "이 옵션은 조직이 AWS Organizations를 활용하여 여러 OU를 가진 계층 구조를 생성할 수 있게 합니다. 각 부서는 자신의 리소스와 정책을 관리할 수 있으며, 중앙 집중식 청구 및 관리의 이점을 누릴 수 있어 비용 관리, 보안 및 규정 준수의 필요에 부합합니다.",
        "Other Options": [
            "이 옵션은 조직의 비용 및 보안을 효과적으로 관리할 수 있는 능력을 제한합니다. IAM 역할이 접근 제어를 제공할 수 있지만, 단일 계정은 AWS Organizations가 제공하는 유연성과 조직 기능이 부족합니다.",
            "이 옵션은 관리의 불필요한 복잡성을 초래합니다. 여러 AWS Organizations는 중앙 집중식 청구, 규정 준수 추적 및 리소스 공유에서 문제를 일으킬 수 있으며, 효율적인 관리가 필요한 조직에는 이상적이지 않습니다.",
            "이 옵션은 각 부서에 대한 일정 수준의 분리를 제공하지만, 청구 및 규정 준수의 단편화된 관리로 이어질 수 있습니다. AWS Organizations를 통한 중앙 집중식 접근 방식이 조직의 목표에 더 효과적입니다."
        ]
    },
    {
        "Question Number": "57",
        "Situation": "한 회사는 여러 AWS 리전에서 다계층 웹 애플리케이션을 배포하고 있으며, 데이터베이스 계층에 Amazon RDS를 사용하고 있습니다. 이 애플리케이션은 비즈니스 운영에 필수적이며, 회사는 지역 장애 발생 시 최소한의 다운타임을 보장하기 위해 재해 복구 계획을 수립했습니다. 이 계획을 검증하기 위해 회사는 생산 환경에 영향을 주지 않고 재해 복구 테스트를 수행하고자 합니다.",
        "Question": "생산 환경에 대한 위험을 최소화하는 방식으로 재해 복구 테스트를 수행하기 위해 솔루션 아키텍트가 추천해야 할 접근 방식은 무엇입니까?",
        "Options": {
            "1": "다른 리전에서 Amazon RDS 읽기 복제본을 배포하고 이를 독립형 데이터베이스로 승격시킨 후 재해 복구 테스트에 사용합니다.",
            "2": "생산과 동일한 리전에서 다른 가용 영역에 Amazon RDS 데이터베이스를 설정하고 이 새로운 인스턴스를 사용하여 재해 복구 테스트를 수행합니다.",
            "3": "AWS CloudFormation을 사용하여 별도의 AWS 계정에 생산 인프라를 복제한 후, 생산 리소스에 영향을 주지 않고 그곳에서 재해 복구 테스트를 수행합니다.",
            "4": "생산 RDS 데이터베이스의 스냅샷을 생성하고 이를 동일한 리전 내 테스트 환경에 복원한 후, 해당 스냅샷으로 재해 복구 테스트를 수행합니다."
        },
        "Correct Answer": "AWS CloudFormation을 사용하여 별도의 AWS 계정에 생산 인프라를 복제한 후, 생산 리소스에 영향을 주지 않고 그곳에서 재해 복구 테스트를 수행합니다.",
        "Explanation": "AWS CloudFormation을 사용하여 별도의 AWS 계정에 생산 인프라를 복제하면 생산 환경에 영향을 주지 않고 재해 복구 테스트를 수행할 수 있는 안전한 환경을 제공합니다. 이를 통해 테스트를 격리된 상태에서 수행하면서 재해 복구 계획을 효과적으로 검증할 수 있습니다.",
        "Other Options": [
            "생산 RDS 데이터베이스의 스냅샷을 생성하고 동일한 리전에서 복원하는 것은 테스트 중 생산 환경에서 성능 영향이나 데이터 일관성 문제의 위험이 있습니다.",
            "다른 리전에서 Amazon RDS 읽기 복제본을 배포하고 이를 독립형 데이터베이스로 승격시키는 것은 복제 지연에 의존하므로 데이터 손실이나 불일치로 이어질 수 있으며, 생산 설정의 재해 복구 계획을 진정으로 테스트하는 것이 아닙니다.",
            "동일한 리전에서 다른 가용 영역에 Amazon RDS 데이터베이스를 설정하는 것은 테스트를 생산 환경에서 완전히 격리하지 않으며, 테스트가 전체 지역 리소스에 영향을 미칠 경우 의도하지 않은 결과를 초래할 수 있습니다."
        ]
    },
    {
        "Question Number": "58",
        "Situation": "한 미디어 회사가 온프레미스 비디오 저장소를 AWS로 마이그레이션하려고 합니다. 이 회사는 대용량 비디오 파일을 저장하고 높은 가용성과 내구성을 제공할 수 있는 솔루션이 필요합니다. 또한, 이 솔루션은 자주 접근하는 비디오에 즉시 접근할 수 있도록 하면서, 자주 접근하지 않는 콘텐츠를 비용 효율적으로 저장할 수 있어야 합니다. 이 회사는 다양한 AWS 저장 옵션을 고려하고 있습니다.",
        "Question": "다음 중 회사의 높은 가용성, 내구성, 자주 접근하는 비디오에 대한 즉각적인 접근, 그리고 자주 접근하지 않는 콘텐츠에 대한 비용 효율적인 저장 요구 사항을 가장 잘 충족하는 AWS 저장 솔루션은 무엇입니까?",
        "Options": {
            "1": "비디오 파일에 대한 고성능 접근을 위한 프로비저닝된 IOPS가 포함된 Amazon EBS.",
            "2": "자주 및 드물게 접근하는 비디오를 위한 Intelligent-Tiering 저장 클래스가 포함된 Amazon S3.",
            "3": "모든 비디오 파일의 장기 아카이빙을 위한 Amazon S3 Glacier.",
            "4": "여러 인스턴스 간 비디오 파일을 공유하기 위한 Amazon FSx for Windows File Server."
        },
        "Correct Answer": "자주 및 드물게 접근하는 비디오를 위한 Intelligent-Tiering 저장 클래스가 포함된 Amazon S3.",
        "Explanation": "Intelligent-Tiering이 포함된 Amazon S3는 접근 패턴이 변경될 때 데이터를 두 개의 접근 계층 간에 자동으로 이동시켜 비용을 최적화하도록 설계되었습니다. 이 솔루션은 대용량 비디오 파일에 대한 높은 가용성과 내구성을 제공하며, 자주 접근하는 비디오를 즉시 검색할 수 있도록 보장하여 미디어 회사의 요구 사항에 이상적입니다.",
        "Other Options": [
            "Amazon EBS는 주로 EC2 인스턴스에 연결된 블록 저장소에 사용되며, 대용량 비디오 파일에 대해 S3와 동일한 수준의 내구성과 가용성을 제공하지 않습니다. 또한 드물게 접근하는 콘텐츠에 필요한 자동 비용 최적화 기능이 부족합니다.",
            "Amazon S3 Glacier는 장기 저장을 위해 설계되었으며, 비디오 파일에 대한 즉각적인 접근에는 적합하지 않으며, 검색 시간이 분에서 시간까지 걸릴 수 있어 회사의 자주 사용되는 비디오에 대한 빠른 접근 요구 사항을 충족하지 않습니다.",
            "Amazon FSx for Windows File Server는 파일 공유에 적합한 완전 관리형 Windows 파일 시스템 서비스이지만, 대규모 비디오 저장을 위한 Amazon S3와 동일한 확장성, 내구성 및 비용 효율성을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "59",
        "Situation": "한 미디어 회사가 비디오 스트리밍 애플리케이션을 AWS로 마이그레이션하고 있습니다. 이 애플리케이션은 여러 지리적 위치에 있는 사용자에게 최소한의 지연으로 고품질 비디오 전송을 지원해야 합니다. 현재 아키텍처는 비디오 파일 처리를 위해 Amazon EC2 인스턴스를 사용하고, 비디오 파일 저장을 위해 Amazon S3 버킷을 사용하고 있습니다. 관리팀은 온프레미스 저장소에서 AWS로 비디오 파일을 효율적으로 전송하기 위한 다양한 메커니즘을 고려하고 있습니다.",
        "Question": "비디오 파일을 위한 가장 효율적인 전송 메커니즘을 제공하는 옵션 조합은 무엇입니까? (두 개 선택)",
        "Options": {
            "1": "AWS SDK를 사용하여 비디오 파일의 빠른 업로드를 위한 다중 파트 업로드 전략을 구현합니다.",
            "2": "AWS Storage Gateway를 사용하여 원활한 데이터 전송을 위한 하이브리드 클라우드 저장 솔루션을 만듭니다.",
            "3": "AWS Transfer Family를 사용하여 SFTP 프로토콜로 인터넷을 통해 비디오 파일을 전송합니다.",
            "4": "AWS와 온프레미스 간의 전용 네트워크 연결을 설정하기 위해 AWS Direct Connect를 활용합니다.",
            "5": "AWS Snowball을 활용하여 대량의 비디오 파일을 안전하게 AWS로 전송합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS와 온프레미스 간의 전용 네트워크 연결을 설정하기 위해 AWS Direct Connect를 활용합니다.",
            "대량의 비디오 파일을 안전하게 AWS로 전송하기 위해 AWS Snowball을 활용합니다."
        ],
        "Explanation": "AWS Direct Connect를 사용하면 대용량 비디오 파일 전송에 적합한 고대역폭, 저지연 연결을 제공하여 효율적이고 신뢰할 수 있는 데이터 전송을 보장합니다. AWS Snowball은 대규모 데이터 마이그레이션을 위해 특별히 설계되어, 대량의 데이터를 안전하고 효율적으로 AWS로 직접 전송할 수 있도록 하여 대역폭 제약에 의존하지 않습니다.",
        "Other Options": [
            "AWS Storage Gateway는 대량 데이터 전송보다는 지속적인 데이터 동기화에 더 적합하여 처음에 대용량 비디오에 대해 덜 효율적입니다.",
            "AWS Transfer Family는 소규모 파일 전송에 효과적이지만, 잠재적인 인터넷 대역폭 제한 및 지연으로 인해 대용량 비디오 파일에는 최적이 아닐 수 있습니다.",
            "다중 파트 업로드 전략은 HTTP를 통한 업로드 속도를 개선하는 데 유용하지만, 대량의 데이터에 대해서는 AWS Snowball이나 Direct Connect가 더 효율적입니다."
        ]
    },
    {
        "Question Number": "60",
        "Situation": "한 금융 서비스 조직이 자동화의 혜택을 받을 수 있는 영역을 식별하기 위해 클라우드 아키텍처를 검토하고 있습니다. 이 아키텍처에는 Amazon EC2, Amazon RDS, AWS Lambda와 같은 여러 AWS 서비스가 포함되어 있습니다. 팀은 운영 효율성을 개선하고 수동 개입을 줄이는 데 집중하고 있습니다.",
        "Question": "조직이 AWS 아키텍처 전반에 걸쳐 운영 효율성을 향상시키기 위해 우선적으로 고려해야 할 자동화 기회는 무엇입니까?",
        "Options": {
            "1": "AWS Management Console을 사용하여 각 서비스의 성능 메트릭을 수동으로 모니터링합니다.",
            "2": "서비스 간의 일상적인 작업을 위해 AWS Lambda 함수를 트리거하는 Amazon CloudWatch Events를 구현합니다.",
            "3": "자동화된 알림 없이 AWS Systems Manager Run Command를 사용하여 정기적인 EC2 인스턴스 유지 관리를 예약합니다.",
            "4": "각 서비스에 대한 인프라 변경을 수동으로 배포하기 위해 AWS CloudFormation을 활용합니다."
        },
        "Correct Answer": "서비스 간의 일상적인 작업을 위해 AWS Lambda 함수를 트리거하는 Amazon CloudWatch Events를 구현합니다.",
        "Explanation": "Amazon CloudWatch Events를 구현하여 AWS Lambda 함수를 트리거하면 일상적인 작업을 자동화할 수 있어 수동 개입을 줄이고 아키텍처 전반에 걸쳐 실시간 이벤트 대응을 가능하게 하여 운영 효율성을 향상시킵니다.",
        "Other Options": [
            "성능 메트릭을 수동으로 모니터링하는 것은 반응적인 접근 방식이며 자동화를 활용하지 않기 때문에 효율성 개선을 제한합니다.",
            "자동화된 알림 없이 정기적인 유지 관리를 예약하면 문제 해결에 지연이 발생할 수 있으며, 이는 자동화가 제공하는 능동적인 모니터링 및 대응 기능이 부족합니다.",
            "AWS CloudFormation을 수동으로 활용하는 것은 코드로서의 인프라의 목적을 무색하게 하며, 이는 배포 및 관리 프로세스를 자동화하도록 설계되었습니다."
        ]
    },
    {
        "Question Number": "61",
        "Situation": "대형 미디어 회사가 온프레미스 데이터 센터에서 AWS로 방대한 양의 아카이브 데이터를 마이그레이션해야 합니다. 데이터 전송은 안전하고 비용 효율적이어야 하며, 회사의 기존 네트워크 성능에 큰 영향을 미치지 않으면서 페타바이트의 데이터를 처리할 수 있어야 합니다. 솔루션 아키텍트는 이러한 기준을 충족하면서 마이그레이션 프로세스에 필요한 시간을 최소화할 수 있는 가장 적합한 데이터 마이그레이션 도구를 선택해야 합니다.",
        "Question": "다음 중 온프레미스 데이터 센터에서 AWS로 대량의 아카이브 데이터를 안전하고 효율적으로 마이그레이션하는 데 가장 적합한 AWS 서비스는 무엇입니까?",
        "Options": {
            "1": "AWS Transfer Family는 FTP, SFTP 및 FTPS 프로토콜을 사용하여 AWS로 파일을 전송하는 간단한 방법을 제공하므로 대량 데이터 마이그레이션에 적합합니다.",
            "2": "AWS Snowball은 안전하고 견고한 장치를 사용하여 대량의 데이터를 물리적으로 전송하도록 특별히 설계되었으므로 페타바이트 규모의 마이그레이션에 이상적입니다.",
            "3": "AWS DataSync는 인터넷을 통한 자동화되고 안전한 데이터 전송을 제공하며, 내장된 암호화 기능이 있어 대규모 데이터 마이그레이션에 최적화되어 있습니다.",
            "4": "S3 Transfer Acceleration은 Amazon CloudFront의 전 세계적으로 분산된 엣지 위치를 사용하여 Amazon S3로의 콘텐츠 업로드 속도를 높여 대량 데이터 세트에 효과적입니다."
        },
        "Correct Answer": "AWS Snowball은 안전하고 견고한 장치를 사용하여 대량의 데이터를 물리적으로 전송하도록 특별히 설계되었으므로 페타바이트 규모의 마이그레이션에 이상적입니다.",
        "Explanation": "AWS Snowball은 물리적 장치를 사용하여 페타바이트의 데이터를 안전하게 전송할 수 있는 능력 덕분에 방대한 양의 아카이브 데이터를 마이그레이션하는 데 가장 좋은 선택입니다. 이 방법은 회사의 인터넷 대역폭 과부하를 피하고 마이그레이션 과정에서 빠르고 안전한 데이터 처리를 보장합니다.",
        "Other Options": [
            "AWS DataSync는 인터넷을 통한 자동화된 데이터 전송에 적합하지만 Snowball과 같은 물리적 장치에 비해 페타바이트 데이터를 전송하는 데 가장 비용 효율적이지 않을 수 있습니다.",
            "AWS Transfer Family는 파일 전송 프로토콜을 위해 설계되었지만, 특히 페타바이트의 아카이브 데이터를 처리할 때 대규모 데이터 마이그레이션에 최적화되어 있지 않습니다.",
            "S3 Transfer Acceleration은 S3로의 업로드 속도를 높일 수 있지만 인터넷에 의존하므로 대량의 데이터를 전송할 때 병목 현상이 발생할 수 있어 이 시나리오에 덜 적합합니다."
        ]
    },
    {
        "Question Number": "62",
        "Situation": "한 금융 서비스 회사가 AWS에 다계층 애플리케이션을 배포했습니다. 이 애플리케이션은 애플리케이션 계층을 위한 Amazon EC2 인스턴스, 데이터베이스 계층을 위한 Amazon RDS, 사용자 업로드 문서를 저장하기 위한 Amazon S3를 포함합니다. 솔루션 아키텍트는 애플리케이션이 높은 트래픽을 경험하는 피크 사용 시간 동안 충분히 신뢰할 수 없는 영역을 식별하기 위해 기존 아키텍처를 평가하는 임무를 맡고 있습니다. 회사는 데이터베이스나 애플리케이션 서버에 대한 중복성이나 장애 조치 형태를 구현하지 않았습니다.",
        "Question": "피크 트래픽 기간 동안 아키텍처의 신뢰성을 향상시키기 위해 솔루션 아키텍트가 추천해야 할 다음 행동은 무엇입니까?",
        "Options": {
            "1": "트래픽 급증을 처리하기 위해 더 큰 인스턴스 유형의 EC2 인스턴스에서 애플리케이션을 배포합니다.",
            "2": "EC2 인스턴스에 대해 Auto Scaling을 구현하고 Amazon RDS Multi-AZ 배포를 사용하여 데이터베이스의 고가용성을 보장합니다.",
            "3": "데이터 저장을 위해 Amazon DynamoDB로 전환하여 중복성과 확장성의 필요성을 없앱니다.",
            "4": "성능 개선을 위해 프로비저닝된 IOPS를 사용하는 단일 EC2 인스턴스로 애플리케이션을 마이그레이션합니다."
        },
        "Correct Answer": "EC2 인스턴스에 대해 Auto Scaling을 구현하고 Amazon RDS Multi-AZ 배포를 사용하여 데이터베이스의 고가용성을 보장합니다.",
        "Explanation": "EC2 인스턴스에 대해 Auto Scaling을 구현하면 애플리케이션이 트래픽 수요에 따라 인스턴스 수를 자동으로 조정할 수 있으며, Amazon RDS Multi-AZ 배포는 데이터베이스의 고가용성과 장애 조치 지원을 제공하여 피크 부하나 중단 시에도 애플리케이션이 계속 운영될 수 있도록 보장합니다.",
        "Other Options": [
            "Amazon DynamoDB로 전환하면 성능이 향상될 수 있지만 기존 아키텍처의 신뢰성 문제를 직접 해결하지 않으며 데이터 모델링에서 추가적인 복잡성을 초래할 수 있습니다.",
            "애플리케이션을 단일 EC2 인스턴스로 마이그레이션하면 단일 실패 지점이 생성되며, 피크 트래픽 동안 중복성이나 확장성을 제공하지 않아 신뢰성에 치명적입니다.",
            "더 큰 EC2 인스턴스에서 애플리케이션을 배포하면 성능이 향상될 수 있지만 중복성이나 장애 조치의 필요성을 해결하지 않아 애플리케이션이 중단에 취약하게 됩니다."
        ]
    },
    {
        "Question Number": "63",
        "Situation": "데이터 분석 회사가 높은 처리량과 낮은 대기 시간이 필요한 대규모 데이터 세트를 처리하고 있습니다. 이들은 여러 Amazon EC2 인스턴스를 활용하는 분산 애플리케이션 아키텍처를 사용하고 있으며, 자주 접근되는 데이터에 대해 빠른 성능을 제공할 수 있는 공유 파일 시스템이 필요합니다. 회사는 비용을 최적화하면서 파일 시스템이 기존 S3 데이터 레이크와 원활하게 통합될 수 있도록 하고자 합니다.",
        "Question": "다음 중 회사의 요구 사항을 가장 잘 충족하는 고성능 공유 파일 시스템을 제공하면서 Amazon S3와 효율적으로 통합될 수 있는 솔루션은 무엇입니까?",
        "Options": {
            "1": "Amazon FSx for Lustre를 활용하여 Amazon S3에서 데이터를 로드하여 처리하는 고성능 공유 파일 시스템을 생성하여 자주 접근되는 데이터에 대한 낮은 대기 시간을 보장합니다.",
            "2": "Amazon S3 버킷을 설정하고 라이프사이클 정책을 통해 자주 접근되는 데이터를 자동으로 Amazon Glacier로 전환하여 저장 비용을 절감합니다.",
            "3": "Windows 기반 애플리케이션과 데이터에 대한 공유 액세스를 제공하고 인증을 위해 Active Directory와 통합하기 위해 Amazon FSx for Windows File Server 파일 시스템을 배포합니다.",
            "4": "Amazon Elastic File System (EFS)을 구현하여 EC2 인스턴스에 대한 확장 가능한 파일 저장소를 제공하고, 변동하는 작업 부하를 수용하기 위해 자동으로 확장할 수 있도록 합니다."
        },
        "Correct Answer": "Amazon FSx for Lustre를 활용하여 Amazon S3에서 데이터를 로드하여 처리하는 고성능 공유 파일 시스템을 생성하여 자주 접근되는 데이터에 대한 낮은 대기 시간을 보장합니다.",
        "Explanation": "Amazon FSx for Lustre는 고성능 작업 부하를 처리하도록 설계되었으며 Amazon S3와 직접 통합할 수 있어 데이터를 빠르고 효율적으로 접근할 수 있습니다. 이는 성능과 비용 최적화라는 회사의 요구 사항에 이상적인 솔루션입니다.",
        "Other Options": [
            "Amazon FSx for Windows File Server를 배포하는 것은 Windows 기반 애플리케이션을 위해 설계되었으므로 고성능 작업 부하에 최적이 아니며 데이터 분석 회사에 필요한 처리량과 대기 시간을 제공하지 못할 수 있습니다.",
            "Amazon Elastic File System (EFS)을 구현하면 확장성을 제공하지만, 대규모 데이터 세트 작업 시 FSx for Lustre와 비교하여 데이터 분석 작업의 고성능 요구를 충족하지 못할 수 있습니다.",
            "Amazon S3 버킷을 설정하고 데이터를 Amazon Glacier로 전환하는 라이프사이클 정책을 설정하는 것은 적합하지 않으며, Glacier는 자주 접근되지 않는 데이터에 적합하게 설계되어 있어 회사의 빠르고 공유된 접근 필요에 대한 대기 시간을 증가시킬 것입니다."
        ]
    },
    {
        "Question Number": "64",
        "Situation": "금융 서비스 회사는 Amazon S3에 저장된 중요한 데이터에 대한 신뢰할 수 있는 백업 솔루션이 필요합니다. 데이터는 자동으로 백업되어야 하며, 비용 효율적이어야 하고, 중단 시 데이터 손실을 방지하기 위해 여러 가용 영역에서 비즈니스 연속성을 보장해야 합니다.",
        "Question": "다음 아키텍처 중 회사의 요구 사항을 가장 잘 충족하는 자동화된 비용 효율적인 백업 솔루션은 무엇입니까? 이 솔루션은 여러 가용 영역에서 비즈니스 연속성을 지원해야 합니다.",
        "Options": {
            "1": "AWS Lambda 함수를 예약하여 기본 S3 버킷에서 다른 지역의 버킷으로 객체를 복사합니다.",
            "2": "Amazon S3 크로스 리전 복제를 다른 지역의 버킷에 구현하고, 라이프사이클 정책을 사용하여 이전 버전을 Amazon S3 Glacier로 전환합니다.",
            "3": "Amazon S3 객체 잠금을 사용하고 버전 관리를 활성화하여 동일한 버킷 내에서 여러 복사본을 유지합니다.",
            "4": "AWS Backup을 사용하여 버전 관리가 활성화된 상태에서 S3 데이터를 동일한 지역의 다른 버킷으로 자동으로 백업하는 백업 계획을 생성합니다."
        },
        "Correct Answer": "Amazon S3 크로스 리전 복제를 다른 지역의 버킷에 구현하고, 라이프사이클 정책을 사용하여 이전 버전을 Amazon S3 Glacier로 전환합니다.",
        "Explanation": "이 옵션은 데이터가 다른 지역에 자동으로 백업되어 내구성과 가용성을 향상시키고, 라이프사이클 정책을 활용하여 데이터를 저비용 스토리지 클래스로 전환하여 비용을 관리할 수 있도록 보장합니다.",
        "Other Options": [
            "AWS Backup은 좋은 기능을 제공하지만, 동일한 지역의 다른 버킷으로 백업하는 것은 여러 가용 영역 또는 지역에서 비즈니스 연속성 요구 사항을 충족하지 않습니다.",
            "데이터 복사를 위한 예약된 AWS Lambda 함수를 사용하는 것은 복잡성을 도입하고 잠재적인 실패 지점을 만들 수 있어, 크로스 리전 복제와 같은 내장 기능에 비해 백업 솔루션으로서 신뢰성이 떨어집니다.",
            "Amazon S3 객체 잠금과 버전 관리는 데이터 보존 및 우발적인 삭제로부터 보호하는 데 유용하지만, 비즈니스 연속성에 필수적인 크로스 리전 백업 솔루션을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "65",
        "Situation": "금융 기관은 Amazon S3를 사용하여 민감한 고객 데이터를 저장하고 있습니다. 규제 준수 요구 사항으로 인해 이 데이터는 특정 보존 기간 동안 삭제되거나 수정될 수 없도록 해야 합니다. 기관은 이 데이터의 무결성을 보장하면서 필요할 때 효율적으로 접근하고 검색할 수 있는 솔루션을 구현하고자 합니다. 그들은 데이터 보존 및 보호를 관리하기 위한 다양한 옵션을 고려하고 있습니다.",
        "Question": "금융 기관이 민감한 데이터의 우발적인 삭제 또는 수정을 방지하면서 데이터 보존 정책을 준수하기 위해 어떤 솔루션을 구현해야 합니까?",
        "Options": {
            "1": "버전 관리된 버킷에서 S3 객체 잠금을 준수 모드로 활성화하여 지정된 보존 기간 동안 객체의 삭제 또는 수정을 방지합니다.",
            "2": "Amazon S3 전송 가속화를 활용하여 데이터 전송 속도를 높이고 접근성을 개선하며, IAM 정책을 사용하여 버킷에 대한 접근을 제어합니다.",
            "3": "AWS Backup을 구현하여 S3 버킷 내용의 정기적인 백업을 생성하고, 삭제된 경우 이전 버전을 복원할 수 있도록 합니다.",
            "4": "Amazon CloudTrail을 설정하여 S3 버킷에 대한 접근을 모니터링하고 삭제 작업에 대한 경고를 보내어 관리자가 수정 조치를 취할 수 있도록 합니다."
        },
        "Correct Answer": "버전 관리된 버킷에서 S3 객체 잠금을 준수 모드로 활성화하여 지정된 보존 기간 동안 객체의 삭제 또는 수정을 방지합니다.",
        "Explanation": "S3 객체 잠금을 준수 모드로 활성화하면 지정된 보존 기간 동안 객체를 삭제하거나 덮어쓸 수 없으므로 데이터 보호 및 무결성에 대한 규제 요구 사항을 충족합니다.",
        "Other Options": [
            "AWS Backup을 구현하는 것은 객체의 삭제 또는 수정을 방지하지 않으며, 단순히 이전 버전의 복구를 허용할 뿐이므로 보존 기간 동안 변경을 방지하는 요구 사항을 충족하지 않습니다.",
            "Amazon S3 전송 가속화를 활용하면 전송 속도가 개선되지만 삭제 또는 수정에 대한 보호를 제공하지 않으며, 준수 요구 사항을 충족하지 않습니다.",
            "Amazon CloudTrail을 설정하면 S3 버킷에서 수행된 작업을 모니터링할 수 있지만 삭제 또는 수정은 방지하지 않으므로 데이터 보존 보호의 필요성을 충족하지 않습니다."
        ]
    },
    {
        "Question Number": "66",
        "Situation": "한 회사는 AWS CloudFormation을 사용하여 인프라를 코드로 관리하고 있습니다. 이 회사는 여러 리소스로 구성된 스택을 가지고 있으며, 스택 업데이트 중 특정 리소스만 업데이트할 수 있도록 스택 정책을 구현하고자 합니다. 또한, 회사는 환경의 일관성을 유지하기 위해 여러 계정과 지역에 걸쳐 동일한 스택을 배포해야 합니다.",
        "Question": "다음 접근 방식 중 회사가 스택 업데이트를 시행하면서 여러 계정과 지역에 걸쳐 CloudFormation 스택을 배포할 수 있도록 하는 것은 무엇입니까?",
        "Options": {
            "1": "기본적으로 모든 리소스에 대한 업데이트를 거부하는 스택 정책을 생성하고, 업데이트의 유연성을 위해 IAM 역할을 사용하여 서로 다른 AWS 계정에 서로 다른 스택 정책을 할당합니다.",
            "2": "모든 리소스에 대한 업데이트를 허용하는 스택 정책을 구현하고, 제한 없이 여러 지역에 걸쳐 배포를 관리하기 위해 AWS CloudFormation StackSets를 활용합니다.",
            "3": "AWS CloudFormation StackSets를 사용하여 모든 리소스를 포함하는 단일 스택을 생성하고 기본적으로 업데이트를 방지합니다. 이 시나리오에서는 별도의 스택 정책을 구현할 수 없습니다.",
            "4": "특정 리소스에 대해서만 업데이트를 명시적으로 허용하는 JSON 형식의 스택 정책을 정의합니다. AWS CloudFormation StackSets를 사용하여 모든 대상 계정과 지역에 스택 정책 및 템플릿을 배포합니다."
        },
        "Correct Answer": "특정 리소스에 대해서만 업데이트를 명시적으로 허용하는 JSON 형식의 스택 정책을 정의합니다. AWS CloudFormation StackSets를 사용하여 모든 대상 계정과 지역에 스택 정책 및 템플릿을 배포합니다.",
        "Explanation": "이 옵션은 특정 리소스에 대한 업데이트를 허용하는 스택 정책을 정의하는 과정과 StackSets를 사용하여 다중 계정 및 다중 지역 배포를 수행하는 과정을 올바르게 설명합니다. 이는 코드로 인프라를 관리하기 위한 AWS 모범 사례를 준수합니다.",
        "Other Options": [
            "이 옵션은 AWS CloudFormation이 서로 다른 계정에 대해 서로 다른 스택 정책을 허용하지 않기 때문에 잘못되었습니다. 단일 스택 정책은 스택을 업데이트하려는 모든 사용자에게 적용됩니다.",
            "이 옵션은 업데이트를 방지하는 정책이 있는 단일 스택을 생성하는 것을 제안하므로 오해의 소지가 있습니다. 모든 리소스에 대한 업데이트를 거부하는 스택 정책은 특정 리소스에 대한 업데이트를 허용하는 요구 사항을 충족하지 않습니다.",
            "이 옵션은 모든 리소스에 대한 업데이트를 허용하는 스택 정책을 구현하는 것이므로 스택 업데이트 중 특정 리소스를 보호해야 한다는 요구 사항과 모순됩니다."
        ]
    },
    {
        "Question Number": "67",
        "Situation": "한 금융 서비스 회사가 AWS 환경 전반에 걸쳐 모든 보안 이벤트에 대한 중앙 집중식 로깅 솔루션을 구현하려고 합니다. 이 회사는 규제 요구 사항을 준수하면서 사고 대응 시간을 개선하고자 합니다. 솔루션 아키텍트는 다양한 AWS 서비스와 애플리케이션에서 로깅을 포함하는 전략을 개발해야 하며, 로그가 안전하게 저장되고 감사 시 쉽게 접근할 수 있도록 해야 합니다.",
        "Question": "회사를 위한 중앙 집중식 보안 이벤트 알림 및 감사에 가장 적합한 아키텍처는 무엇입니까?",
        "Options": {
            "1": "AWS Config를 설정하여 리소스 구성 및 변경 사항을 모니터링하고, 이를 AWS Security Hub와 통합하여 규정 위반에 따라 경고를 전송합니다. 장기 저장을 위해 Amazon S3에 로그를 저장합니다.",
            "2": "Amazon CloudWatch Logs를 활용하여 AWS 서비스의 로그를 집계하고, 특정 보안 이벤트에 대한 알림을 전송하기 위해 Amazon SNS를 설정합니다. 보존 관리를 위해 라이프사이클 정책과 함께 Amazon S3에 로그를 저장합니다.",
            "3": "Amazon Elasticsearch Service 클러스터를 배포하여 다양한 AWS 서비스의 로그를 인덱싱하고, 로그를 클러스터로 푸시하기 위한 맞춤형 솔루션을 사용합니다. Elasticsearch 쿼리를 기반으로 Amazon SNS를 통해 경고를 구성합니다.",
            "4": "AWS CloudTrail을 구현하여 API 호출을 캡처하고, 로그를 Amazon Kinesis로 스트리밍하여 실시간 처리를 수행합니다. 로그 저장을 위해 Amazon S3를 사용하고, 특정 로그 패턴에 따라 경고를 트리거하기 위해 AWS Lambda를 구성합니다."
        },
        "Correct Answer": "Amazon CloudWatch Logs를 활용하여 AWS 서비스의 로그를 집계하고, 특정 보안 이벤트에 대한 알림을 전송하기 위해 Amazon SNS를 설정합니다. 보존 관리를 위해 라이프사이클 정책과 함께 Amazon S3에 로그를 저장합니다.",
        "Explanation": "Amazon CloudWatch Logs를 사용하면 다양한 AWS 서비스의 로그를 집계할 수 있어 보안 이벤트에 대한 중앙 집중식 뷰를 제공합니다. 이를 Amazon SNS와 결합하면 특정 이벤트에 대한 적시 알림을 제공하여 사고 대응을 강화합니다. Amazon S3에 로그를 라이프사이클 정책과 함께 저장하면 데이터 보존 요구 사항을 준수하면서 저장 비용을 최적화할 수 있습니다.",
        "Other Options": [
            "AWS CloudTrail을 구현하면 주로 API 호출을 캡처하지만 모든 서비스의 보안 이벤트에 대한 포괄적인 로깅 솔루션을 제공하지 않습니다. Kinesis는 실시간 처리를 가능하게 하지만 모든 사용 사례에 필요하지 않을 수 있으며, 중앙 집중식 로깅에 대한 명확한 이점 없이 복잡성을 추가합니다.",
            "Amazon Elasticsearch Service 클러스터를 배포하면 추가 관리 오버헤드가 필요하며 보안 이벤트에 대한 알림 메커니즘을 본질적으로 제공하지 않습니다. 로그를 푸시하기 위한 맞춤형 솔루션은 복잡성을 추가하고 잠재적인 실패 지점을 만들 수 있어 적시 이벤트 대응을 저해할 수 있습니다.",
            "AWS Config를 설정하는 것은 보안 이벤트의 중앙 집중식 로깅보다는 리소스 구성을 모니터링하는 데 더 중점을 둡니다. 규정 준수 경고를 제공할 수 있지만 AWS 서비스 전반에 걸친 보안 이벤트의 폭을 포괄하지 않아 포괄적인 감사 전략에 덜 적합합니다."
        ]
    },
    {
        "Question Number": "68",
        "Situation": "한 회사가 AWS에서 마이크로서비스 아키텍처를 개발하고 있으며, 서로 다른 서비스 간의 신뢰할 수 있는 통신이 필요합니다. 서비스는 분리된 방식으로 메시지를 보내고 받아야 하며, 수신 서비스가 일시적으로 사용할 수 없더라도 메시지가 손실되지 않도록 해야 합니다. 아키텍처는 이벤트의 실시간 처리를 요구하는 다양한 유형의 워크로드를 지원해야 합니다.",
        "Question": "마이크로서비스 간의 신뢰할 수 있는 메시징 시스템을 구현하기 위해 다음 AWS 서비스 중 어떤 것이 가장 좋은 선택입니까?",
        "Options": {
            "1": "Amazon Simple Queue Service (Amazon SQS)를 사용하여 메시지 처리를 위한 큐를 생성합니다.",
            "2": "Amazon Kinesis Data Streams를 사용하여 실시간 데이터 스트림을 처리하고 분석합니다.",
            "3": "AWS Step Functions를 사용하여 서비스 간의 워크플로를 직접 조정합니다.",
            "4": "Amazon Simple Notification Service (Amazon SNS)를 사용하여 모든 구독자에게 메시지를 전송합니다."
        },
        "Correct Answer": "Amazon Simple Queue Service (Amazon SQS)를 사용하여 메시지 처리를 위한 큐를 생성합니다.",
        "Explanation": "Amazon SQS는 마이크로서비스 간의 분리된 통신을 허용하는 신뢰할 수 있고 확장 가능하며 완전 관리되는 메시지 큐잉 서비스를 제공합니다. 메시지가 손실되지 않도록 보장하며 비동기적으로 처리할 수 있어 마이크로서비스 아키텍처에 적합합니다.",
        "Other Options": [
            "Amazon SNS는 퍼블리시/구독 메시징을 위해 설계되었으며, 서비스 간의 신뢰할 수 있는 메시지 처리를 보장하기보다는 여러 구독자에게 메시지를 방송하는 데 더 적합합니다.",
            "AWS Step Functions는 복잡한 워크플로를 조정하고 애플리케이션의 상태를 관리하는 데 주로 사용되며 메시징 서비스로서의 역할을 하지 않습니다.",
            "Amazon Kinesis Data Streams는 실시간 데이터 스트리밍 및 처리를 중심으로 하며, 마이크로서비스 간의 신뢰할 수 있는 메시징에 대한 주요 요구 사항이 아닙니다."
        ]
    },
    {
        "Question Number": "69",
        "Situation": "한 글로벌 금융 서비스 회사가 여러 온프레미스 데이터 센터를 보유하고 있으며, AWS와 시스템을 통합하면서 안전하고 효율적인 데이터 전송을 보장하고자 합니다. 이들은 실시간 처리를 위해 안전한 연결과 낮은 대기 시간이 필요한 민감한 데이터를 보유하고 있습니다. 이 회사는 하이브리드 아키텍처를 최적화하기 위해 온프레미스 네트워크를 AWS에 연결하는 옵션을 평가하고 있습니다.",
        "Question": "회사의 온프레미스 데이터 센터를 AWS와 통합하기 위해 가장 효율적이고 안전한 연결을 제공하며, 실시간 처리를 위한 대기 시간을 최소화하는 옵션은 무엇입니까?",
        "Options": {
            "1": "AWS Direct Connect를 설정하여 온프레미스 데이터 센터와 AWS 간에 전용 광섬유 연결을 구축하고, 중복성을 위해 VPN 백업을 추가합니다. 모든 데이터 전송에 Direct Connect를 사용하여 대기 시간을 최소화하고 대역폭을 극대화합니다.",
            "2": "AWS Transit Gateway를 구현하여 여러 VPC와 온프레미스 네트워크를 연결합니다. AWS Direct Connect와 VPN 연결을 백업으로 사용합니다. 이 설정은 관리 간소화와 안전하고 효율적인 연결을 보장합니다.",
            "3": "AWS VPN CloudHub를 사용하여 여러 원격 사이트를 AWS VPC에 연결합니다. 이 솔루션은 안전한 연결을 제공하지만 인터넷 기반 VPN 연결의 특성으로 인해 추가 대기 시간이 발생할 수 있습니다.",
            "4": "AWS Site-to-Site VPN을 사용하여 온프레미스 데이터 센터를 AWS에 연결하는 VPN 연결을 설정합니다. 높은 대역폭 요구 사항을 위해 AWS Direct Connect를 활용하여 트래픽이 보안을 위해 VPN을 통해 라우팅되도록 합니다."
        },
        "Correct Answer": "AWS Direct Connect를 설정하여 온프레미스 데이터 센터와 AWS 간에 전용 광섬유 연결을 구축하고, 중복성을 위해 VPN 백업을 추가합니다. 모든 데이터 전송에 Direct Connect를 사용하여 대기 시간을 최소화하고 대역폭을 극대화합니다.",
        "Explanation": "AWS Direct Connect를 사용하면 신뢰할 수 있고 고속의 연결을 제공하며 낮은 대기 시간이 실시간 데이터 처리에 이상적입니다. 중복성을 위해 VPN과 결합하면 Direct Connect 링크가 실패할 경우 안전한 연결을 보장합니다.",
        "Other Options": [
            "AWS Site-to-Site VPN과 함께 VPN 연결을 설정하면 불필요한 복잡성이 추가됩니다. VPN은 Direct Connect 링크를 통해 트래픽을 라우팅하므로 낮은 대기 시간의 일부 이점을 상쇄합니다.",
            "AWS Transit Gateway를 구현하면 관리가 간소화되지만 트래픽 라우팅에서 오버헤드와 대기 시간이 추가될 수 있습니다. 이는 간단한 연결보다는 복잡한 네트워크 아키텍처에 더 유리합니다.",
            "AWS VPN CloudHub를 사용하면 원격 사이트를 연결하지만 인터넷 연결에 의존하므로 대기 시간이 증가할 수 있습니다. 이 옵션은 회사의 낮은 대기 시간 연결 요구 사항에 적합하지 않습니다."
        ]
    },
    {
        "Question Number": "70",
        "Situation": "한 회사가 비용과 성능을 최적화하기 위해 클라우드 포트폴리오를 평가하고 있습니다. 현재 아키텍처에는 다양한 애플리케이션을 실행하는 여러 EC2 인스턴스가 포함되어 있지만, 회사는 자원을 효율적으로 활용하고 있는지 확신이 없습니다. 솔루션 아키텍트는 잠재적인 개선 사항을 식별하기 위해 포트폴리오 평가를 수행하는 임무를 맡고 있습니다.",
        "Question": "솔루션 아키텍트가 EC2 인스턴스의 현재 자원 활용도를 평가하기 위해 FIRST로 취해야 할 행동은 무엇입니까?",
        "Options": {
            "1": "모든 EC2 인스턴스에 대해 Auto Scaling 그룹을 구현하여 효율성을 개선합니다.",
            "2": "AWS CloudWatch를 배포하여 EC2 인스턴스의 CPU 및 메모리 활용도를 모니터링합니다.",
            "3": "AWS Cost Explorer를 활성화하여 지난 6개월 동안의 지출 패턴을 분석합니다.",
            "4": "AWS CloudTrail을 사용하여 성능 메트릭을 위한 EC2 인스턴스에 대한 API 호출을 검토합니다."
        },
        "Correct Answer": "AWS CloudWatch를 배포하여 EC2 인스턴스의 CPU 및 메모리 활용도를 모니터링합니다.",
        "Explanation": "AWS CloudWatch를 배포하여 CPU 및 메모리 활용도를 모니터링하면 자원이 어떻게 사용되고 있는지에 대한 즉각적인 통찰력을 제공합니다. 이 데이터는 저활용 또는 과잉 프로비저닝된 인스턴스를 식별하는 데 필수적이며, 자원 최적화에 대한 정보에 기반한 결정을 내릴 수 있게 합니다.",
        "Other Options": [
            "Auto Scaling 그룹을 구현하는 것은 자원 할당을 최적화하기 위한 전략이지만, 현재 활용도에 대한 즉각적인 통찰력을 제공하지 않으므로 자원 사용을 평가한 후의 2차적인 단계입니다.",
            "AWS CloudTrail을 사용하는 것은 감사 및 보안 목적으로 유용하지만, 자원 활용도와 관련된 성능 메트릭을 직접적으로 제공하지 않습니다. 포트폴리오 평가에서 가장 좋은 첫 단계가 아닙니다.",
            "AWS Cost Explorer를 활성화하면 지출을 추적하는 데 도움이 되지만, 실시간 자원 활용도 데이터를 제공하지 않습니다. 자원이 현재 어떻게 활용되고 있는지를 이해하는 것이 비용 분석 전에 중요합니다."
        ]
    },
    {
        "Question Number": "71",
        "Situation": "한 금융 서비스 회사가 현재의 배포 프로세스를 평가하여 개선할 수 있는 영역을 식별하고 있습니다. 회사의 애플리케이션은 Amazon EC2 인스턴스에 배포되어 있지만, 팀은 확장성과 운영 효율성에 어려움을 겪고 있습니다. 그들은 자원 활용 및 관리가 더 나은 현대적인 아키텍처로의 전환을 고려하고 있습니다. 목표는 성능을 향상시키면서 운영 비용을 줄이는 것입니다.",
        "Question": "회사의 확장성 및 운영 효율성 개선 요구 사항을 고려할 때, 회사가 목표를 달성하기 위해 채택해야 할 배포 전략은 무엇입니까?",
        "Options": {
            "1": "애플리케이션을 Amazon EC2 On-Demand 및 Reserved Instances의 혼합에 배포하여, 예상 작업량에 따라 수동 개입을 통해 확장을 처리합니다.",
            "2": "애플리케이션을 Amazon ECS로 AWS Fargate와 함께 마이그레이션하여 EC2 인스턴스를 수동으로 관리할 필요를 없애고 수요에 따라 자동으로 확장합니다.",
            "3": "Amazon EC2 인스턴스를 계속 사용하되, 인스턴스 사용을 최적화하고 관찰된 성능 메트릭에 따라 수동으로 확장을 조정하기 위해 포괄적인 모니터링 솔루션을 구현합니다.",
            "4": "애플리케이션을 AWS Lambda에서 실행되도록 리팩토링하여 이벤트 및 사용 패턴에 따라 자동으로 확장되는 서버리스 아키텍처를 가능하게 합니다."
        },
        "Correct Answer": "애플리케이션을 Amazon ECS로 AWS Fargate와 함께 마이그레이션하여 EC2 인스턴스를 수동으로 관리할 필요를 없애고 수요에 따라 자동으로 확장합니다.",
        "Explanation": "Amazon ECS로 AWS Fargate로 마이그레이션하면 회사는 기본 EC2 인스턴스를 관리하지 않고 애플리케이션 배포에 집중할 수 있습니다. Fargate는 자동 확장 기능을 제공하여 자원 사용을 최적화하고 운영 오버헤드를 줄이며, 이는 회사의 효율성 및 비용 절감 목표와 일치합니다.",
        "Other Options": [
            "Amazon EC2 인스턴스를 계속 사용하는 것은 수동으로 자원을 관리하고 확장하는 데 지속적인 어려움을 초래할 수 있으며, 이는 회사의 운영 효율성 개선 요구를 해결하지 않습니다.",
            "On-Demand 및 Reserved Instances의 혼합을 배포하는 것은 관리 단순화나 자동 확장을 제공하지 않으며, 이는 잠재적으로 더 높은 운영 비용과 비효율적인 자원 활용으로 이어질 수 있습니다.",
            "애플리케이션을 AWS Lambda에서 실행되도록 리팩토링하는 것은 모든 작업 부하에 적합하지 않을 수 있으며, 특히 이벤트 기반이 아니거나 장기 실행 프로세스가 필요한 경우에는 더욱 그렇습니다. 이 접근 방식은 복잡성을 초래할 수 있으며 현재 아키텍처와 일치하지 않을 수 있습니다."
        ]
    },
    {
        "Question Number": "72",
        "Situation": "한 금융 서비스 회사가 온프레미스 애플리케이션을 AWS로 마이그레이션할 계획을 세우고 있습니다. 애플리케이션은 웹 서버, 애플리케이션 서버 및 데이터베이스의 혼합으로 구성되어 있습니다. 회사는 마이그레이션 중 최소한의 다운타임을 보장하고 애플리케이션 성능을 유지하고자 합니다. 그들은 이 과정을 용이하게 하기 위해 다양한 AWS 마이그레이션 도구를 고려하고 있습니다.",
        "Question": "온프레미스 애플리케이션 종속성을 평가하고 마이그레이션 전략을 계획하는 데 가장 적합한 AWS 도구는 무엇입니까?",
        "Options": {
            "1": "AWS Database Migration Service",
            "2": "AWS Server Migration Service",
            "3": "AWS Application Migration Service",
            "4": "AWS Application Discovery Service"
        },
        "Correct Answer": "AWS Application Discovery Service",
        "Explanation": "AWS Application Discovery Service는 조직이 온프레미스 애플리케이션을 발견하고 이해하는 데 도움을 주기 위해 특별히 설계되었습니다. 여기에는 종속성 및 성능 메트릭이 포함됩니다. 이 정보는 최소한의 다운타임으로 AWS로의 효과적인 마이그레이션 전략을 계획하는 데 중요합니다.",
        "Other Options": [
            "AWS Application Migration Service는 애플리케이션의 자동 마이그레이션에 주로 초점을 맞추고 있으며, 마이그레이션 전략을 평가하고 계획하는 데는 적합하지 않습니다.",
            "AWS Database Migration Service는 데이터베이스 마이그레이션에 맞춰져 있으며, 여러 유형의 서버에 걸쳐 애플리케이션 종속성을 평가하는 데는 적합하지 않습니다.",
            "AWS Server Migration Service는 가상 서버를 AWS로 자동 마이그레이션하는 데 사용되지만, 애플리케이션 종속성에 대한 포괄적인 분석을 제공하지 않습니다."
        ]
    },
    {
        "Question Number": "73",
        "Situation": "한 회사가 클라우드 서비스의 사용 패턴 변동으로 인해 AWS 청구서가 예상치 못하게 증가하고 있습니다. 솔루션 아키텍트는 예상 사용 패턴에 따라 청구 알람을 설정하는 비용 관리 전략을 설계해야 합니다. 이 전략은 회사가 비용을 능동적으로 관리하고 예산 한도를 초과하기 전에 알림을 받을 수 있도록 도와야 합니다.",
        "Question": "예상 사용 패턴에 따라 청구 알람을 설계하는 가장 효과적인 방법은 무엇입니까?",
        "Options": {
            "1": "AWS CloudTrail을 구성하여 청구와 관련된 모든 API 호출을 기록하고, 기록된 데이터를 기반으로 알림을 설정하여 사용량 급증을 모니터링합니다.",
            "2": "AWS Budgets를 생성하여 사용자 정의 비용 및 사용 한도를 설정하고, Amazon CloudWatch를 사용하여 예산 한도를 초과할 때 알람을 트리거합니다.",
            "3": "AWS Cost Explorer를 구현하여 과거 사용량을 분석하고 평균 사용 패턴에 따라 알림을 정의하며, SNS를 사용하여 알림을 보냅니다.",
            "4": "AWS Trusted Advisor를 활용하여 월간 비용 보고서를 생성하고, 한도가 도달했을 때 알림을 트리거하기 위해 수동으로 보고서를 모니터링합니다."
        },
        "Correct Answer": "AWS Budgets를 생성하여 사용자 정의 비용 및 사용 한도를 설정하고, Amazon CloudWatch를 사용하여 예산 한도를 초과할 때 알람을 트리거합니다.",
        "Explanation": "AWS Budgets를 생성하면 회사가 예상 패턴에 맞춘 특정 비용 및 사용 한도를 정의할 수 있습니다. Amazon CloudWatch와 결합하면 한도가 초과될 때 즉각적인 알림을 받을 수 있어 능동적인 비용 관리가 가능합니다.",
        "Other Options": [
            "AWS Cost Explorer를 구현하는 것은 사용량 분석에 유용하지만 실시간 알림 기능을 제공하지 않습니다. 이는 능동적인 비용 관리보다는 회고적 분석에 도움이 됩니다.",
            "AWS CloudTrail을 구성하는 것은 API 호출 기록에 중점을 두며 청구 한도 관리와 직접적인 관련이 없습니다. 이는 주로 거버넌스, 규정 준수 및 운영 감사에 사용됩니다.",
            "AWS Trusted Advisor를 활용한 비용 보고서는 통찰력을 제공하지만 능동적인 관리에 필요한 실시간 알림 기능이 부족합니다. 수동 모니터링은 시기적절한 비용 통제에 비효율적입니다."
        ]
    },
    {
        "Question Number": "74",
        "Situation": "한 금융 서비스 회사가 AWS를 사용하여 새로운 애플리케이션을 배포하고 있습니다. 이 애플리케이션은 문제가 발생할 경우 신속하게 롤백할 수 있어야 하며, 최소한의 다운타임을 위해 블루-그린 배포를 지원해야 합니다.",
        "Question": "신속한 롤백 및 블루-그린 배포 요구 사항을 가장 잘 충족하는 전략 조합은 무엇입니까? (두 가지 선택)",
        "Options": {
            "1": "애플리케이션 버전 관리를 통해 AWS Elastic Beanstalk를 구현합니다.",
            "2": "Amazon ECS를 사용하여 롤링 업데이트 및 상태 검사를 통해 배포합니다.",
            "3": "스택 업데이트와 함께 인프라 프로비저닝을 위해 AWS CloudFormation을 사용합니다.",
            "4": "블루-그린 배포를 위해 배포 그룹과 함께 AWS CodeDeploy를 활용합니다.",
            "5": "버전이 있는 엔드포인트를 위해 AWS Lambda와 API Gateway를 활용합니다."
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "블루-그린 배포를 위해 배포 그룹과 함께 AWS CodeDeploy를 활용합니다.",
            "애플리케이션 버전 관리를 통해 AWS Elastic Beanstalk를 구현합니다."
        ],
        "Explanation": "AWS CodeDeploy를 활용하면 블루-그린 배포를 구성할 수 있어 신속한 롤백이 가능합니다. 또한, 애플리케이션 버전 관리를 통해 AWS Elastic Beanstalk를 구현하면 필요할 경우 애플리케이션의 이전 버전으로 빠르게 되돌릴 수 있습니다.",
        "Other Options": [
            "AWS CloudFormation을 사용하는 것은 코드로 인프라를 관리하는 데 유용하지만 애플리케이션 배포에 대한 롤백 메커니즘을 구체적으로 다루지 않습니다.",
            "Amazon ECS를 사용하여 롤링 업데이트로 배포하는 것은 다운타임을 최소화하는 데 효과적이지만 블루-그린 배포가 제공하는 신속한 롤백 기능을 제공하지 않을 수 있습니다.",
            "AWS Lambda와 API Gateway를 활용하는 것은 마이크로서비스에 적합하지만 블루-그린 배포나 신속한 롤백 전략을 본질적으로 지원하지 않습니다."
        ]
    },
    {
        "Question Number": "75",
        "Situation": "한 금융 서비스 회사가 단일 Amazon RDS 인스턴스에 민감한 고객 데이터를 저장하고 있습니다. 이 데이터베이스는 규정 준수 및 재해 복구를 위해 정기적인 백업이 필요합니다. 그러나 회사는 인적 오류로 인해 데이터 손실이 몇 차례 발생했으며, 데이터 무결성과 가용성을 보장하면서 자동화되고 효율적인 백업 솔루션을 설계해야 합니다.",
        "Question": "Amazon RDS 인스턴스에 대한 강력한 백업 프로세스를 구현하기 위한 가장 효과적인 솔루션은 무엇입니까?",
        "Options": {
            "1": "AWS Backup을 사용하여 RDS 인스턴스의 일일 백업을 생성하고, 규정 준수를 보장하기 위해 백업 복사본을 30일 동안 보존하도록 구성합니다.",
            "2": "매일 RDS 인스턴스의 스냅샷을 수동으로 생성하고, 필요할 경우 이전 버전을 복구하기 위해 버전 관리가 활성화된 S3 버킷에 저장합니다.",
            "3": "EC2 인스턴스에서 크론 작업을 구현하여 매주 데이터베이스를 S3 버킷으로 내보내고, 60일 후에 이전 백업을 삭제합니다.",
            "4": "RDS 인스턴스에서 자동 백업을 활성화하고, 보존 기간을 35일로 설정하며, 고가용성과 데이터 중복성을 보장하기 위해 다중 AZ 배포를 구성합니다."
        },
        "Correct Answer": "RDS 인스턴스에서 자동 백업을 활성화하고, 보존 기간을 35일로 설정하며, 고가용성과 데이터 중복성을 보장하기 위해 다중 AZ 배포를 구성합니다.",
        "Explanation": "RDS 인스턴스에서 자동 백업을 활성화하면 시점 복구가 가능하고 수동 개입 없이 정기적으로 백업이 생성됩니다. 35일의 보존 기간을 설정하면 회사가 규정 준수 요구 사항을 충족할 수 있으며, 다중 AZ 배포는 데이터 가용성과 중복성을 향상시킵니다.",
        "Other Options": [
            "스냅샷을 수동으로 생성하는 것은 백업 솔루션을 제공할 수 있지만 인적 오류와 자동화 부족의 위험을 초래하여 지속적인 데이터 보호에 덜 신뢰할 수 있습니다.",
            "AWS Backup을 사용하는 것은 좋은 옵션이지만, RDS 인스턴스에서 직접 자동 백업을 활성화하는 것에 비해 가장 효율적인 방법은 아닙니다.",
            "EC2 인스턴스에서 크론 작업을 구현하는 것은 백업 프로세스에 운영 오버헤드와 복잡성을 추가하며, 매주 데이터베이스를 내보내는 것은 데이터 손실 시 복구 시간 목표를 충족하지 못할 수 있습니다."
        ]
    }
]