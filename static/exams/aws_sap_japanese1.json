[
    {
        "Question Number": "1",
        "Situation": "ある企業が、Auto Scalingグループ内のAmazon EC2インスタンスの群でウェブアプリケーションを運用しています。このアプリケーションは、日中のビジネス時間中にピーク負荷が発生するなど、変動するトラフィックパターンを経験しています。企業は、オフピーク時間中のコストを最小限に抑えつつ、増加する負荷に適切に対応できるようにアプリケーションをスケールさせる必要があります。ソリューションアーキテクトは、需要の変化に効果的に対応するAuto Scalingポリシーを実装する必要があります。",
        "Question": "ソリューションアーキテクトは、コスト効率を確保しつつ、アプリケーションの負荷に基づいてEC2インスタンスのスケーリングを最適化するために、どのAuto Scalingポリシーを実装すべきですか？",
        "Options": {
            "1": "平均CPU使用率メトリックに基づいてインスタンスの数を調整するターゲットトラッキングスケーリングポリシーを実装します。",
            "2": "実際の需要に関係なく、毎日特定の時間にインスタンスを追加するスケジュールスケーリングポリシーを設定します。",
            "3": "特定のネットワークトラフィックメトリックの閾値に基づいてインスタンスの数を増やすステップスケーリングポリシーを使用します。",
            "4": "CPU使用率が基準レベルを下回ったときのみスケールインするシンプルスケーリングポリシーを設定します。"
        },
        "Correct Answer": "平均CPU使用率メトリックに基づいてインスタンスの数を調整するターゲットトラッキングスケーリングポリシーを実装します。",
        "Explanation": "ターゲットトラッキングスケーリングポリシーは、指定されたCPU使用率レベルを維持するためにEC2インスタンスの数を自動的に調整し、実際の負荷に応じて動的にスケーリングを行います。このアプローチは、需要が低い期間にスケールダウンすることでコストを抑えつつ、パフォーマンスを最適化します。",
        "Other Options": [
            "スケジュールスケーリングポリシーは実際の需要の変動を考慮せず、リソースの過剰供給または不足供給を引き起こし、不必要なコストやパフォーマンスの問題をもたらす可能性があります。",
            "ネットワークトラフィックに基づくステップスケーリングポリシーは機能することもありますが、アプリケーションのパフォーマンスと直接的に相関しない可能性があり、特にトラフィックパターンが予測不可能な場合にはスケーリングアクションに遅延を引き起こすことがあります。",
            "CPU使用率に基づいてのみスケールインするシンプルスケーリングポリシーは、ピーク需要時にプロアクティブにスケールアウトすることを許可せず、パフォーマンスの低下やユーザー体験の悪化を招く可能性があります。"
        ]
    },
    {
        "Question Number": "2",
        "Situation": "ある小売企業が、Amazon Rekognitionを使用して店舗のビデオフィードを分析し、顧客体験を向上させたいと考えています。目的は、顧客のデモグラフィックを特定し、フットトラフィックを追跡し、不適切なコンテンツをリアルタイムで検出することです。企業は、ソリューションが効率的でコスト効果が高いことを確保する必要があります。",
        "Question": "Amazon Rekognitionを使用してリアルタイムビデオ分析を実装するために、企業はどのアプローチを取るべきですか？",
        "Options": {
            "1": "企業は、S3に保存されたビデオセグメントを分析するためにAmazon Rekognition Videoを使用し、顧客のデモグラフィックとフットトラフィックを評価するために定期的に結果をクエリするべきです。",
            "2": "企業は、リアルタイムビデオフィードを取り込むためにAmazon Kinesis Data Streamを設定し、ストリームを分析するためにAmazon Rekognition Videoをトリガーするべきです。",
            "3": "企業は、FFmpegを使用してビデオフィードを分析し、データをAmazon Rekognitionに送信して検証するカスタムビデオ処理アプリケーションを実装するべきです。",
            "4": "企業は、AWS Snowball Edgeデバイスを使用してオンプレミスでAmazon Rekognitionを実行し、ビデオフィードをローカルで分析した後、結果をAWSにアップロードするべきです。"
        },
        "Correct Answer": "企業は、リアルタイムビデオフィードを取り込むためにAmazon Kinesis Data Streamを設定し、ストリームを分析するためにAmazon Rekognition Videoをトリガーするべきです。",
        "Explanation": "Amazon Kinesis Data Streamsを使用することで、企業はリアルタイムビデオフィードを効率的に処理できます。KinesisとAmazon Rekognition Videoを統合することで、企業は取り込まれると同時にビデオコンテンツを分析し、タイムリーな洞察を提供し、不適切なコンテンツをリアルタイムで検出することができます。",
        "Other Options": [
            "S3に保存されたビデオセグメントを分析することはリアルタイムの洞察を提供せず、録画と分析の間に遅延が生じるため、即時の顧客体験の向上には不適切です。",
            "AWS Snowball Edgeを使用したオンプレミスソリューションは、Amazon Rekognitionの全機能を活用できず、結果の処理とアップロードのために追加のステップを導入することでアーキテクチャを複雑にします。",
            "カスタムビデオ処理アプリケーションを実装すると、複雑さとメンテナンスの負担が増加し、画像やビデオ分析のために特別に設計されたAmazon Rekognitionの専門的な機能を活用できなくなります。"
        ]
    },
    {
        "Question Number": "3",
        "Situation": "あるメディアストリーミング企業が、Amazon S3に保存されたコンテンツを配信するためにAmazon CloudFrontを利用しています。彼らは、S3バケットのセキュリティを確保するためにOrigin Access Identity (OAI)を使用してきましたが、ポリシーの設定やHTTPメソッドに関して課題に直面しています。セキュリティを強化し、機能を拡張するために、CloudFrontディストリビューションに対してOrigin Access Control (OAC)を検討することにしました。ソリューションアーキテクトは、OAIからOACに移行することの主要な利点を特定する必要があります。",
        "Question": "Amazon CloudFrontにおけるOrigin Access Control (OAC)を使用する主な利点はどれですか？",
        "Options": {
            "1": "OAIはOACに比べて短期的な認証情報と頻繁な認証情報のローテーションを提供するため、より良いセキュリティプラクティスを提供します。",
            "2": "OACは、指定されたCloudFrontディストリビューションのみがコンテンツにアクセスできるようにすることで、S3オリジンへのアクセスを制限します。",
            "3": "OACは暗号化されていないS3オブジェクトのみをサポートし、すべてのAWSリージョンとの互換性を確保します。",
            "4": "OACは、詳細なポリシー設定を可能にし、PUTやDELETEを含むすべてのHTTPメソッドをサポートします。"
        },
        "Correct Answer": "OACは、指定されたCloudFrontディストリビューションのみがコンテンツにアクセスできるようにすることで、S3オリジンへのアクセスを制限します。",
        "Explanation": "Origin Access Control (OAC)は、指定されたCloudFrontディストリビューションのみにS3オリジンへのアクセスを許可することで、露出を制限し、OAIに比べてセキュリティモデルを改善します。",
        "Other Options": [
            "OACはPUTやDELETEを含むすべてのHTTPメソッドをサポートしますが、特に詳細なポリシー設定を提供するわけではないため、この記述は誤解を招くものです。",
            "OACは暗号化されたS3オブジェクトをサポートし、すべてのAWSリージョンへのアクセスを許可するため、このオプションはOACの機能を誤って表現しています。",
            "OACはOAIよりも優れたセキュリティプラクティスを取り入れるように設計されており、短期的な認証情報を含むため、このオプションは逆のことを主張しており誤りです。"
        ]
    },
    {
        "Question Number": "4",
        "Situation": "AWS Cloudに展開された医療アプリケーションは、認可されたユーザーがシステムにアクセスできるようにしながら、機密の患者データを安全に保つ必要があります。このアプリケーションは、異なるアベイラビリティゾーンに複数のサブネットを持つ仮想プライベートクラウド（VPC）を使用しています。ソリューションアーキテクトとして、コンプライアンスとセキュリティ要件を効果的に満たすためにネットワークを構成する任務を負っています。",
        "Question": "機密データを保護しながらアプリケーションへの安全なアクセスを確保するために、どのネットワーク構成を実装すべきですか？（2つ選択）",
        "Options": {
            "1": "認可されたユーザーが使用する特定のIPアドレスからのインバウンドトラフィックのみを許可するセキュリティグループを構成します。",
            "2": "プライベートサブネットからパブリックサブネットへのトラフィックのみを許可するルートテーブルを作成します。",
            "3": "特定のCIDR範囲からアプリケーションサブネットへのインバウンドトラフィックを許可するネットワークACLを使用します。",
            "4": "すべてのインバウンドトラフィックを拒否するネットワークACLを実装し、すべてのアクセスをブロックします。",
            "5": "ポート80でのすべてのIPアドレスからのトラフィックをアプリケーションに許可するセキュリティグループを設定します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "認可されたユーザーが使用する特定のIPアドレスからのインバウンドトラフィックのみを許可するセキュリティグループを構成します。",
            "特定のCIDR範囲からアプリケーションサブネットへのインバウンドトラフィックを許可するネットワークACLを使用します。"
        ],
        "Explanation": "特定のIPアドレスからのインバウンドトラフィックのみを許可するセキュリティグループを使用することで、認可されたユーザーのみが医療アプリケーションにアクセスできるようになり、セキュリティが強化されます。さらに、特定のCIDR範囲からのトラフィックを許可するネットワークACLを実装することで、サブネットレベルでの追加のセキュリティ層が提供され、信頼できるソースのみがリソースにアクセスできるようになります。",
        "Other Options": [
            "プライベートサブネットからパブリックサブネットへのトラフィックのみを許可するルートテーブルを作成しても、アプリケーションへのアクセスを制御しないため、機密データのセキュリティは提供されません。",
            "すべてのインバウンドトラフィックを拒否するネットワークACLを実装すると、認可されたユーザーからのアクセスもブロックされ、アプリケーションが利用できなくなります。",
            "ポート80でのすべてのIPアドレスからのトラフィックをアプリケーションに許可するセキュリティグループを設定すると、インターネット上の誰でも無制限にアクセスできるため、アプリケーションが攻撃にさらされる可能性があります。"
        ]
    },
    {
        "Question Number": "5",
        "Situation": "ヘルステック企業が、ユーザーがフィットネス活動や健康指標を追跡できるモバイルアプリケーションを開発しています。このアプリケーションは、ユーザーデータのリアルタイム更新を必要とし、シームレスな体験を確保するためにオフライン機能を提供しなければなりません。開発チームは、ユーザープロファイル用のNoSQLデータベースやカスタムデータ処理用のAWS Lambda関数を含むさまざまなソースからのデータ管理を促進するためにAWS AppSyncを使用することを検討しています。ユーザーがオフラインになると、そのデータが引き続きアクセス可能であり、オフライン中に行われた変更が再接続時に同期されることを確保したいと考えています。チームは、データ同期中に発生する可能性のある競合の処理についても懸念しています。",
        "Question": "アプリケーションのリアルタイムデータアクセス、オフライン機能、および競合解決の要件を満たすために、AWS AppSyncを実装する最も効果的な方法は何ですか？",
        "Options": {
            "1": "AWS AppSyncをAmazon RDSデータベースと統合し、リアルタイム更新、オフラインアクセス、および競合解決を手動で処理するカスタムAPIを実装します。",
            "2": "AWS AppSyncをサブスクリプションモデルで構成し、リアルタイム更新を提供し、オフライン使用のためのローカルデータアクセスを確保しながらAppSyncの組み込みメカニズムを使用して競合解決を有効にします。",
            "3": "AWS AppSyncをポーリングメカニズムで使用して定期的に更新を取得し、組み込みの競合解決なしでオフラインストレージと同期のカスタムソリューションを実装します。",
            "4": "AWS AppSyncをAmazon S3と連携させてすべてのユーザーデータを保存し、データをユーザーに配信するためにAmazon CloudFrontに依存しますが、これはリアルタイム更新やオフラインアクセスをサポートしません。"
        },
        "Correct Answer": "AWS AppSyncをサブスクリプションモデルで構成し、リアルタイム更新を提供し、オフライン使用のためのローカルデータアクセスを確保しながらAppSyncの組み込みメカニズムを使用して競合解決を有効にします。",
        "Explanation": "AWS AppSyncをサブスクリプションモデルで使用することで、リアルタイム更新がクライアントにプッシュされ、ユーザーが常に最新のデータにアクセスできるようになります。さらに、AppSyncのオフライン機能と競合解決の組み込みサポートにより、接続が復元されたときにデータ変更をシームレスに処理できるようになります。",
        "Other Options": [
            "ポーリングメカニズムを使用すると、リアルタイム更新が提供されず、これはアプリケーションにとって重要な要件です。さらに、オフラインストレージと同期のカスタムソリューションは、AppSyncの組み込み機能を活用するよりも複雑でエラーが発生しやすいです。",
            "AWS AppSyncをAmazon S3と単独で展開すると、リアルタイム更新の必要性に合致せず、S3は動的データの相互作用のために設計されていません。さらに、CloudFrontは主に静的コンテンツを提供し、リアルタイム通信を促進しません。",
            "AWS AppSyncをAmazon RDSデータベースと統合し、手動で更新と競合解決を処理すると、不必要な複雑さが加わり、潜在的な問題が発生する可能性があります。このアプローチは、これらのタスクを簡素化するために設計されたAppSyncの完全な機能を活用していません。"
        ]
    },
    {
        "Question Number": "6",
        "Situation": "金融サービス会社がリアルタイムで取引を処理する重要なアプリケーションを運営しています。高可用性を確保し、ダウンタイムを最小限に抑えるために、同社はAWS CloudWatchとAWS CloudTrailを使用して中央集中的な監視を実装しています。このアプリケーションは、AWSサービスを使用して自動的に障害から回復するように設計されています。（2つ選択）",
        "Question": "システム障害から積極的に回復するために、会社が実装すべき戦略はどれですか？",
        "Options": {
            "1": "AWS Configルールを実装してコンプライアンスを監視し、修復をトリガーします。",
            "2": "CloudWatch Eventsを設定してシステム状態の変化を検出し、回復プロセスを呼び出します。",
            "3": "CloudWatchアラームを有効にして、自己修復アクションのためにLambda関数をトリガーします。",
            "4": "CloudWatch LogsをAmazon SNSと統合して、重大なエラーの通知を送信します。",
            "5": "AWS CloudTrailを使用してすべてのAPIコールを監査目的のみにログします。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "CloudWatchアラームを有効にして、自己修復アクションのためにLambda関数をトリガーします。",
            "CloudWatch Eventsを設定してシステム状態の変化を検出し、回復プロセスを呼び出します。"
        ],
        "Explanation": "CloudWatchアラームを有効にしてLambda関数をトリガーすることで、特定の閾値が超えたときに自動化された自己修復アクションが可能になり、積極的な回復が確保されます。CloudWatch Eventsを設定してシステム状態の変化を検出することも回復プロセスを呼び出すことができ、障害が発生した際にシステムが反応できるようになります。",
        "Other Options": [
            "AWS CloudTrailを監査のみに使用することは、APIコールのログ記録に主に焦点を当てており、積極的な回復には寄与しません。",
            "CloudWatch LogsをAmazon SNSと統合して通知を送信することは便利ですが、自動回復プロセスには直接寄与しません。",
            "AWS Configルールを実装することはコンプライアンスを維持するのに役立ちますが、障害に応じて回復アクションを自動的にトリガーすることはありません。"
        ]
    },
    {
        "Question Number": "7",
        "Situation": "ある金融サービス会社が、主にトランザクション処理に使用される現在のデータベースソリューションにパフォーマンスの問題を抱えています。彼らは、業界標準に準拠しながらアプリケーションのパフォーマンスを向上させることを望んでいます。この会社は、リアルタイム分析、トランザクション処理、ドキュメントストレージなど、多様なデータアクセスパターンを持っています。特定のワークロードに対して目的に特化したデータベースを活用する機会を特定したいと考えています。",
        "Question": "会社が特定のワークロードに対してデータベースアーキテクチャを最適化するために実施すべき戦略はどれですか？",
        "Options": {
            "1": "すべてのデータアクセスパターンを処理するために単一のAmazon ElastiCacheクラスターを展開し、パフォーマンスを向上させる。",
            "2": "トランザクション処理にはAmazon Aurora、リアルタイム分析にはAmazon DynamoDB、ドキュメントストレージにはAmazon DocumentDBを利用する。",
            "3": "すべての既存データを単一のAmazon RDSインスタンスに移行し、管理とメンテナンスを簡素化する。",
            "4": "すべてのデータストレージとクエリニーズに対してAmazon S3とAthenaを実装し、コストを削減する。"
        },
        "Correct Answer": "トランザクション処理にはAmazon Aurora、リアルタイム分析にはAmazon DynamoDB、ドキュメントストレージにはAmazon DocumentDBを利用する。",
        "Explanation": "このアプローチは、特定のユースケースに合わせて設計された目的に特化したデータベースを活用し、最適なパフォーマンスとスケーラビリティを確保します。Amazon Auroraはトランザクションワークロードに対して高いスループットを提供し、DynamoDBはリアルタイム分析のための低遅延アクセスを提供し、DocumentDBはドキュメントベースのデータを管理するために設計されており、会社の多様な要件を効率的に満たします。",
        "Other Options": [
            "すべてのデータを単一のAmazon RDSインスタンスに移行することは管理を簡素化するかもしれませんが、異なるアクセスパターンやワークロードの要件に対応しないため、パフォーマンスのボトルネックを引き起こす可能性があります。",
            "単一のAmazon ElastiCacheクラスターを展開することは適切ではありません。なぜなら、主にキャッシングに使用され、トランザクション処理やドキュメントストレージに必要な永続的なデータストアを提供しないからです。",
            "Amazon S3とAthenaを実装することは、トランザクションワークロードには最適ではありません。S3はストレージサービスであり、Athenaはクエリサービスです。この組み合わせは、会社の特定のユースケースに必要なトランザクション機能とパフォーマンスを欠いています。"
        ]
    },
    {
        "Question Number": "8",
        "Situation": "ある医療機関は、AWS上でホストされている患者管理アプリケーションの継続的な可用性を確保する必要があります。このアプリケーションは日常業務にとって重要であり、地域的な停電や障害が発生しても機能し続ける必要があります。組織は、高可用性とフォールトトレランスを提供するアーキテクチャを設計しようとしています。",
        "Question": "障害時にアプリケーションとインフラストラクチャの可用性を確保するために役立つ設計戦略はどれですか？（2つ選択してください）",
        "Options": {
            "1": "データベース層の可用性を向上させるために、Multi-AZ展開のAmazon RDSを活用する。",
            "2": "Route 53を使用してDNSフェイルオーバーを行い、アプリケーションを複数のAWSリージョンに展開する。",
            "3": "トラフィックを管理するために単一のアベイラビリティゾーンに単一のElastic Load Balancer（ELB）を実装する。",
            "4": "アプリケーションデータを保存し、ストレージを管理するためにAWS Lambda関数とS3バケットを利用する。",
            "5": "単一のリージョン内の複数のアベイラビリティゾーンにわたるAuto Scalingグループ内でAmazon EC2インスタンスを使用する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Route 53を使用してDNSフェイルオーバーを行い、アプリケーションを複数のAWSリージョンに展開する。",
            "データベース層の可用性を向上させるために、Multi-AZ展開のAmazon RDSを活用する。"
        ],
        "Explanation": "アプリケーションを複数のAWSリージョンに展開し、Route 53を使用してDNSフェイルオーバーを行うことで、地理的冗長性が確保されます。これにより、1つのリージョンがダウンした場合でも、トラフィックが自動的に別のリージョンにルーティングされます。さらに、Multi-AZ展開のAmazon RDSを使用することで、別のアベイラビリティゾーンにあるスタンバイインスタンスへの自動フェイルオーバーが提供され、データベースの可用性とインフラストラクチャ障害に対する耐性が向上します。",
        "Other Options": [
            "単一のリージョン内の複数のアベイラビリティゾーンにわたるAuto Scalingグループ内でEC2インスタンスを使用することは、ある程度の可用性を提供しますが、地域的な障害から保護されません。地域全体の障害が発生すると、アプリケーションのダウンタイムにつながる可能性があります。",
            "単一のアベイラビリティゾーンに単一のElastic Load Balancerを実装することは冗長性を制限します。そのアベイラビリティゾーンで障害が発生した場合、アプリケーションは利用できなくなり、高可用性とフォールトトレランスの目標に反します。",
            "AWS Lambda関数とS3バケットを利用してアプリケーションデータを管理することは、アプリケーションの可用性を包括的に解決するものではありません。このアプローチは解決策の一部になる可能性がありますが、障害時にアプリケーション自体の可用性を特に向上させるものではありません。"
        ]
    },
    {
        "Question Number": "9",
        "Situation": "あるスタートアップが、コンテナ上で動作するマイクロサービスベースのアプリケーションを開発しています。開発チームは、運用オーバーヘッドを最小限に抑えながら、コンテナ化されたアプリケーションを展開、管理、スケールするためのソリューションを探しています。彼らは、基盤となるインフラストラクチャについて心配することなくアプリケーションの開発に集中したいと考えています。",
        "Question": "スタートアップのコンテナオーケストレーションニーズを管理するための最適な選択肢はどれですか？",
        "Options": {
            "1": "コストを節約しながら管理されたKubernetesサービスを実行するために、スポットインスタンスを使用したAmazon EKSを活用する。",
            "2": "EC2インスタンス上に自己管理型のDocker Swarmクラスターを設定してコンテナをオーケストレーションする。",
            "3": "Amazon EC2インスタンス上にKubernetesを展開し、コンテナオーケストレーションのためにクラスターを手動で管理する。",
            "4": "Amazon ECSをFargateと共に使用して、基盤となるEC2インスタンスを管理することなくコンテナを実行する。"
        },
        "Correct Answer": "Amazon ECSをFargateと共に使用して、基盤となるEC2インスタンスを管理することなくコンテナを実行する。",
        "Explanation": "Amazon ECSをFargateと共に使用することで、スタートアップは基盤となるインフラストラクチャを管理することなくコンテナを実行できます。このサーバーレスアプローチにより、チームはアプリケーション開発に集中でき、AWSがコンテナ環境のスケーラビリティと管理を担当します。",
        "Other Options": [
            "Amazon EC2インスタンス上にKubernetesを展開することは、クラスターの管理に関してかなりの運用オーバーヘッドを必要とし、更新、スケーリング、構成を含むため、スタートアップの運用管理を最小限に抑えるという要件に反します。",
            "スポットインスタンスを使用したAmazon EKSはコストを節約できますが、Kubernetesの設定と構成を管理する必要があるため、運用オーバーヘッドを最小限に抑えたいという彼らの希望に対して不必要な複雑さを追加します。",
            "EC2インスタンス上に自己管理型のDocker Swarmクラスターを設定することは、かなりの管理とメンテナンスの責任を伴い、スタートアップのインフラストラクチャ管理の負担なしにアプリケーション開発に集中するという目標に反します。"
        ]
    },
    {
        "Question Number": "10",
        "Situation": "ソフトウェア開発チームがAWS上でホストされているマイクロサービスアプリケーションに取り組んでいます。チームはAWS CodeCommitを使用してソースコードを管理し、AWS CodeBuildを使用してビルドとテストプロセスを自動化しています。このアプリケーションは、仮想プライベートクラウド（VPC）内にホストされているデータベースへのアクセスを必要とし、CodeBuildプロジェクトはこのアクセスのために設定する必要があります。チームは、CodeBuildプロジェクトの設定に必要なVPC ID、サブネットID、およびセキュリティグループIDを特定しました。しかし、CodeBuildがVPCリソースにアクセスできるようにするために必要な設定オプションについては不明です。",
        "Question": "AWS CodeBuildが指定されたVPC内のリソースにアクセスできるようにするために、チームは何をすべきですか？",
        "Options": {
            "1": "CodeBuildプロジェクトに環境変数を追加してVPC設定を指定します。",
            "2": "CodeBuildプロジェクトを設定して、ビルド環境設定でVPC ID、サブネットID、およびセキュリティグループIDを使用します。",
            "3": "VPCリソースへのアクセスを許可する新しいIAMロールをCodeBuild用に作成し、それをCodeBuildプロジェクトにアタッチします。",
            "4": "CodeBuildプロジェクトがVPCリソースと同じリージョンで実行されることを確認してアクセスを許可します。"
        },
        "Correct Answer": "CodeBuildプロジェクトを設定して、ビルド環境設定でVPC ID、サブネットID、およびセキュリティグループIDを使用します。",
        "Explanation": "AWS CodeBuildがVPC内のリソースにアクセスできるようにするには、CodeBuildプロジェクトの設定でVPC ID、サブネットID、およびセキュリティグループIDを提供する必要があります。この設定により、CodeBuildはVPC対応のビルド環境をセットアップでき、その後VPC内のリソースと相互作用できます。",
        "Other Options": [
            "新しいIAMロールを作成する必要はありません。CodeBuildはVPCリソースにアクセスするために特定のVPC設定を必要とし、単にIAMロールだけでは不十分です。",
            "VPCと同じリージョンで実行することは要件ですが、アクセスを保証するものではありません。CodeBuildプロジェクトには特定のVPC設定が必要です。",
            "環境変数はVPCアクセスを設定しません。VPC設定はビルド環境設定で明示的に定義する必要があります。"
        ]
    },
    {
        "Question Number": "11",
        "Situation": "金融サービス会社がレガシーの顧客関係管理（CRM）アプリケーションをAWSに移行する計画を立てています。このアプリケーションはリアルタイムの顧客インタラクションにとって重要であり、移行プロセス中に高い可用性とパフォーマンスを維持する必要があります。会社はダウンタイムを最小限に抑え、ユーザーにシームレスな移行を確保したいと考えています。移行後にアプリケーションの機能を強化するために、マイクロサービスアーキテクチャを使用してアプリケーションをモダナイズすることも検討しています。ワークロードの移行とモダナイズを加速し、パフォーマンスと可用性を確保するために、どのアプローチを取るべきでしょうか？",
        "Question": "会社は、最小限の中断でCRMアプリケーションをAWSに成功裏に移行し、将来のモダナイズを見据えた移行戦略として何を採用すべきですか？",
        "Options": {
            "1": "既存のアーキテクチャを維持しながら、専用のVPC内のEC2インスタンスにアプリケーション全体をリフトアンドシフトします。DNS管理とトラフィックルーティングにはAmazon Route 53を使用します。",
            "2": "アプリケーションをサーバーレスコンピューティングに再設計し、AWS LambdaとAmazon API Gatewayを使用して運用オーバーヘッドを削減し、移行後のスケーラビリティを向上させます。",
            "3": "AWS Database Migration Serviceを利用してCRMデータベースをAmazon RDSインスタンスにレプリケートします。特定のマイクロサービスを処理するためにAWS Lambda関数を使用して、段階的にアプリケーションを移行します。",
            "4": "AWSに移行する前にアプリケーションをマイクロサービスにリファクタリングし、各マイクロサービスをAmazon ECS上のコンテナとしてデプロイします。サービス発見と通信にはAWS App Meshを使用します。"
        },
        "Correct Answer": "AWSに移行する前にアプリケーションをマイクロサービスにリファクタリングし、各マイクロサービスをAmazon ECS上のコンテナとしてデプロイします。サービス発見と通信にはAWS App Meshを使用します。",
        "Explanation": "アプリケーションを移行する前にマイクロサービスにリファクタリングすることで、会社はAWSの機能を最大限に活用し、移行後のスケーラビリティとパフォーマンスを向上させることができます。各マイクロサービスをAmazon ECS上のコンテナとしてデプロイすることで、リソース管理とデプロイの柔軟性が向上し、AWS App Meshはマイクロサービス間のサービス発見と通信を簡素化します。",
        "Other Options": [
            "AWS Database Migration Serviceを使用することはデータベースの移行に役立ちますが、アプリケーション全体を段階的に移行することはモダナイゼーションのニーズに効果的に対処できず、長期的なダウンタイムを引き起こす可能性があります。",
            "リフトアンドシフトアプローチは、モダナイゼーションのためのAWSの機能を活用せず、運用コストが高くなり、スケーラビリティが制限される可能性があり、会社の将来の目標に合致しません。",
            "AWS LambdaとAPI Gatewayを使用してアプリケーションをサーバーレスコンピューティングに再設計することは有効なアプローチですが、複雑さを引き起こし、移行前に既存のアプリケーションアーキテクチャに大きな変更を必要とする可能性があります。"
        ]
    },
    {
        "Question Number": "12",
        "Situation": "金融サービス会社がリアルタイムで不正行為を検出するためにライブトランザクションデータを処理しています。彼らはAmazon Kinesis Data Streams（KDS）を使用してこのデータを収集および分析しています。しかし、ピークトランザクション期間中に、一部のレコードがシャードの制限によりスロットリングされていることに気付きました。経営陣は、記録を失うことなく増加したデータ負荷を処理するために、KDSのスループットを向上させたいと考えています。",
        "Question": "Kinesis Data Streamのデータ取り込み能力を高め、高可用性を確保するための最も効果的な解決策はどれですか？",
        "Options": {
            "1": "Kinesis Producer Library（KPL）を実装して、Kinesis Data Streamに送信する前にレコードをバッチ処理し、既存のシャードの利用を最大化します。",
            "2": "既存のKinesis Data Streamのシャード数を増やして、より高い書き込みスループットを確保し、ピーク期間中のスロットリングを防ぎます。",
            "3": "Amazon S3を使用してトランザクションデータを一時的に保存し、AWS Lambda関数を設定して定期的にデータをKinesis Data Streamにロードしてピーク負荷を処理します。",
            "4": "新しいKinesis Data Streamを作成し、アプリケーションを構成してトランザクションデータを元のストリームと新しいストリームの間で均等に分割して負荷をバランスさせます。"
        },
        "Correct Answer": "既存のKinesis Data Streamのシャード数を増やして、より高い書き込みスループットを確保し、ピーク期間中のスロットリングを防ぎます。",
        "Explanation": "Kinesis Data Streamのシャード数を増やすことで、データ取り込み能力が直接向上します。各シャードは特定の量のデータを処理できるため、シャードを追加することでストリームはより大きなデータ量を管理でき、ピーク期間中のスロットリングやデータ損失のリスクを減らすことができます。",
        "Other Options": [
            "Kinesis Producer Library（KPL）を実装することはレコードのバッチ処理に役立ちますが、ストリーム自体の最大スループットを本質的に増加させるものではありません。ストリームがすでにシャードの制限によりスロットリングされている場合、バッチ処理だけでは問題を解決できません。",
            "Amazon S3を一時的なストレージとして使用すると、ワークフローに追加のレイテンシと複雑さが生じます。Kinesisにデータを移動するために追加の処理が必要なため、取り込み能力の即時の増加には対処できない可能性があります。",
            "新しいKinesis Data Streamを作成して負荷をバランスさせることは可能ですが、このアプローチは複数のストリームを管理する複雑さを加え、元のストリームの既存のスロットリングの問題を解決しません。"
        ]
    },
    {
        "Question Number": "13",
        "Situation": "ある企業が、バックエンドデータベースに大きく依存するウェブアプリケーションのレイテンシー問題に直面しています。このアプリケーションは同時に多数のユーザーにサービスを提供しており、直接データベースにアクセスすることでパフォーマンスが低下しています。ソリューションアーキテクトは、データの整合性を確保しながらパフォーマンスを向上させる任務を担っています。",
        "Question": "ソリューションアーキテクトがキャッシングを通じてパフォーマンスを向上させ、データベースへの負荷を軽減するために実装すべきデザインパターンはどれですか？",
        "Options": {
            "1": "データベースのリードレプリカを展開して、増加する読み取りトラフィックを処理する。",
            "2": "Amazon SQSを組み込んで、データベースへのリクエストをキューイングする。",
            "3": "頻繁にアクセスされるデータのためにAmazon ElastiCacheを使用してキャッシングレイヤーを実装する。",
            "4": "AWS Lambdaを使用して、サーバーレスでリクエストを処理する。"
        },
        "Correct Answer": "頻繁にアクセスされるデータのためにAmazon ElastiCacheを使用してキャッシングレイヤーを実装する。",
        "Explanation": "Amazon ElastiCacheを使用してキャッシングレイヤーを実装することで、頻繁にアクセスされるデータをメモリに保存でき、ユーザーが経験するレイテンシーを大幅に削減し、データベースへの負荷を軽減します。このパターンはアプリケーションのパフォーマンスを向上させるのに効果的です。",
        "Other Options": [
            "データベースのリードレプリカを展開することで読み取りトラフィックを分散させることができますが、プライマリデータベースの高負荷によるレイテンシーには対処できません。これはキャッシング戦略というよりもスケーリングソリューションです。",
            "AWS Lambdaを使用してリクエストを処理することでスケーラビリティが向上するかもしれませんが、データベースアクセスに関連する直接的なパフォーマンス問題には特に対処していません。Lambda関数は依然としてデータベースアクセスを必要とし、それがボトルネックになる可能性があります。",
            "Amazon SQSを組み込むことでリクエストフローを管理し、信頼性を向上させることができますが、キャッシングを通じてパフォーマンスを直接向上させるものではありません。データベースクエリからのレイテンシーを削減するよりも、コンポーネントのデカップリングに適しています。"
        ]
    },
    {
        "Question Number": "14",
        "Situation": "あるメディア企業が、ビデオストリーミングサービスをAWSに移行しています。このサービスはトラフィックパターンが変動し、予測不可能なデータ転送コストを引き起こしています。ソリューションアーキテクトは、オンプレミスストレージからAWSへのデータ転送コストを最適化し、出口料金を最小限に抑えるコスト効果の高い方法を設計する必要があります。",
        "Question": "ビデオストリーミングサービスのデータ転送コストを最適化するために、ソリューションアーキテクトが実装すべき戦略はどれですか？",
        "Options": {
            "1": "Amazon S3 Transfer Accelerationを使用して、S3にビデオを迅速にアップロードし、レイテンシーを削減しつつ追加の転送コストを発生させる。",
            "2": "AWS Snowballを実装して、大量のビデオデータをAWSに転送し、送料を削減し、初期データ転送中に出口料金を発生させない。",
            "3": "Amazon CloudFrontを利用して、ユーザーに近い場所でビデオコンテンツをキャッシュし、S3からのオリジンフェッチを最小限に抑えることでデータ転送コストを削減する。",
            "4": "AWS Direct Connectを活用して専用ネットワーク接続を確立し、大きなビデオファイルのデータ転送コストを削減する。"
        },
        "Correct Answer": "AWS Snowballを実装して、大量のビデオデータをAWSに転送し、送料を削減し、初期データ転送中に出口料金を発生させない。",
        "Explanation": "AWS Snowballは、大量のデータを効率的にAWSに転送するために設計されています。初期転送プロセス中に出口料金を排除するため、メディア企業のニーズに対してコスト効果の高いソリューションとなります。",
        "Other Options": [
            "Amazon S3 Transfer Accelerationは転送速度を向上させますが、サービス利用に追加コストがかかるため、コスト最適化には理想的ではありません。",
            "AWS Direct ConnectはAWSへの信頼性が高く低レイテンシーの接続を提供しますが、初期のバルク転送よりも継続的なデータ転送により有益であり、散発的なトラフィックのコストを大幅に削減することはできません。",
            "Amazon CloudFrontはコンテンツの配信を改善しますが、大きなビデオファイルをAWSに初期転送することには対処せず、S3からの出口料金が発生する可能性があります。"
        ]
    },
    {
        "Question Number": "15",
        "Situation": "あるグローバルなeコマース企業が、顧客に対して高可用性と低レイテンシーを確保するために、複数のAWSリージョンにアプリケーションを展開しています。アプリケーションアーキテクチャは、各リージョンにインスタンスを配置したAmazon RDSをデータベースニーズに使用しています。しかし、最近のインシデントでは、リージョンの障害が発生し、サービスが中断しました。レジリエンスを強化し、ダウンタイムを最小限に抑えるために、ソリューションアーキテクトはMulti-AZおよびマルチリージョン展開を活用したより堅牢なアーキテクチャを設計する任務を担っています。",
        "Question": "リージョンの障害時にダウンタイムを最小限に抑えながら、アプリケーションの可用性とレジリエンスを最も改善するソリューションはどれですか？",
        "Options": {
            "1": "各リージョン内でMulti-AZ構成のAmazon RDSインスタンスを展開し、読み取りトラフィックを処理するためにクロスリージョンリードレプリカを有効にする。",
            "2": "単一リージョン内にMulti-AZ構成のAmazon RDSインスタンスを展開し、データベースの負荷を軽減するためにAmazon ElastiCacheを使用する。",
            "3": "すべてのリージョンにわたってMulti-AZ構成のAmazon RDSインスタンスを展開し、リージョン間のデータ同期のためにDynamoDB Global Tablesを使用する。",
            "4": "単一リージョン内にMulti-AZ構成のAmazon RDSインスタンスを展開し、スタンバイリージョンにトラフィックを誘導するためにRoute 53フェイルオーバールーティングポリシーを実装する。"
        },
        "Correct Answer": "各リージョン内でMulti-AZ構成のAmazon RDSインスタンスを展開し、読み取りトラフィックを処理するためにクロスリージョンリードレプリカを有効にする。",
        "Explanation": "このオプションは、高可用性を提供し、障害時に別のリージョンから読み取りトラフィックを処理できる能力を持っているため、レジリエンスを向上させ、ダウンタイムを効果的に最小限に抑えます。",
        "Other Options": [
            "このオプションは単一リージョン内での高可用性のみを提供します。リージョン障害時のダウンタイムを最小限に抑えるために必要なクロスリージョンレプリケーションが欠けています。",
            "このオプションは、リージョン間でのMulti-AZ構成を十分に活用しておらず、Route 53をフェイルオーバーに使用していますが、リージョン間のリアルタイムレプリケーションがないため、データの整合性に問題が生じる可能性があります。",
            "リージョン間でMulti-AZを使用することで可用性は向上しますが、DynamoDB Global Tablesのみに依存して同期を行うと、アプリケーションのパフォーマンスに影響を与える可能性のある複雑さやレイテンシーの問題が生じる可能性があります。"
        ]
    },
    {
        "Question Number": "16",
        "Situation": "ある企業が、世界中のユーザーに低遅延アクセスを提供するグローバルアプリケーションを展開する計画を立てています。このアプリケーションは、複数のマイクロサービスで構成されており、データの整合性と高可用性を確保しながら、複数のAWSリージョンに展開される必要があります。企業は、エンドユーザーのパフォーマンスを向上させ、遅延を減少させるためにグローバルキャッシュレイヤーを提供するAWSサービスを使用したいと考えています。次のうち、最も適切なソリューションはどれですか？",
        "Question": "企業は、アプリケーションのためにグローバルキャッシュレイヤーを提供するためにどのAWSサービスを使用すべきですか？",
        "Options": {
            "1": "Amazon CloudFrontを使用し、アプリケーション資産をホストする各リージョンのS3バケットへのオリジンフェイルオーバーを設定します。",
            "2": "Amazon CloudFrontとLambda@Edgeを使用して、コンテンツ配信をカスタマイズし、グローバルに遅延を減少させます。",
            "3": "Amazon ElastiCacheを使用し、異なるAWSリージョン間でキャッシュの整合性を維持するためのレプリケーショングループを設定します。",
            "4": "AWS Global Acceleratorを使用して、最寄りのアプリケーションエンドポイントにトラフィックをルーティングし、Amazon Route 53を使用してDNS管理を行います。"
        },
        "Correct Answer": "Amazon CloudFrontとLambda@Edgeを使用して、コンテンツ配信をカスタマイズし、グローバルに遅延を減少させます。",
        "Explanation": "Amazon CloudFrontは、世界中のエッジロケーションでコンテンツをキャッシュするコンテンツ配信ネットワーク（CDN）であり、ユーザーに低遅延アクセスを提供します。Lambda@Edgeを使用することで、コンテンツ配信をカスタマイズでき、アプリケーションがユーザーのリクエストに基づいて動的にコンテンツを調整し、パフォーマンスをさらに最適化します。",
        "Other Options": [
            "Amazon CloudFrontを使用し、オリジンフェイルオーバーをS3バケットに設定することは、動的コンテンツのキャッシュレイヤーを提供せず、低遅延を必要とするマイクロサービスには最適化されていません。",
            "Amazon ElastiCacheは、単一リージョン内でのキャッシング用に設計されており、グローバルアプリケーションにとって重要なグローバルキャッシングをサポートしていません。",
            "AWS Global Acceleratorは、最寄りのエンドポイントにトラフィックをルーティングすることでアプリケーションの可用性とパフォーマンスを向上させますが、遅延を減少させるために必要なキャッシング機能は提供しません。"
        ]
    },
    {
        "Question Number": "17",
        "Situation": "ある金融サービス会社が、オンプレミスアプリケーションをAWSに移行する計画を立てています。このアプリケーションは重要であり、高可用性と低遅延が求められます。企業は、アプリケーションのアーキテクチャ、依存関係、および使用する最適なAWSサービスを理解するために評価を行う必要があります。移行が既存の業務を妨げず、新しい環境がコンプライアンス要件を満たすことを確認したいと考えています。チームは、アプリケーションのアーキテクチャ、ネットワーク要件、およびパフォーマンスメトリクスに関する情報を収集し、データベースの依存関係や潜在的なボトルネックを特定する必要があります。",
        "Question": "企業は、アプリケーションの包括的な移行評価を完了するためにどのアプローチを取るべきですか？",
        "Options": {
            "1": "AWS Application Discovery Serviceを利用して、オンプレミスアプリケーションに関する詳細情報を収集し、そのアーキテクチャ、パフォーマンスメトリクス、ネットワーク依存関係を含めます。",
            "2": "第三者のコンサルティング会社を雇い、アプリケーションを分析し、クラウド移行に関する専門知識に基づいてAWSサービスを推奨します。",
            "3": "アプリケーションコードとアーキテクチャ文書の手動レビューを実施し、AWSに移行する前に依存関係とパフォーマンスボトルネックを特定します。",
            "4": "AWS上でアプリケーションの限定されたサブセットを使用したパイロットプロジェクトを実施し、パフォーマンスをテストし、完全な移行の前に潜在的な移行課題を特定します。"
        },
        "Correct Answer": "AWS Application Discovery Serviceを利用して、オンプレミスアプリケーションに関する詳細情報を収集し、そのアーキテクチャ、パフォーマンスメトリクス、ネットワーク依存関係を含めます。",
        "Explanation": "AWS Application Discovery Serviceは、組織がオンプレミスアプリケーションに関する情報を収集するために特別に設計されており、アーキテクチャ、依存関係、およびパフォーマンスメトリクスを含みます。このデータは、AWSへの移行計画を立てるために重要であり、アプリケーションのすべての側面が考慮されることを保証し、業務の中断を最小限に抑え、コンプライアンス要件を満たすのに役立ちます。",
        "Other Options": [
            "手動レビューを実施することでいくつかの洞察を得ることができるかもしれませんが、人為的なエラーが発生しやすく、自動化ツールが簡単にキャッチできる重要な依存関係やパフォーマンスメトリクスを見逃す可能性があります。",
            "パイロットプロジェクトを実施することで課題を特定することはできますが、アプリケーションのアーキテクチャと依存関係の完全なビューを提供するものではなく、包括的な移行評価には不可欠です。",
            "第三者のコンサルティング会社を雇うことで貴重な洞察を得ることができるかもしれませんが、外部の専門知識にのみ依存すると、社内チームが特定のAWSツールを使用して評価できる詳細を見逃す可能性があります。"
        ]
    },
    {
        "Question Number": "18",
        "Situation": "ある金融サービス会社が、新しいモバイルバンキングアプリケーションをサポートするためにインフラを拡張しています。彼らは、ネットワークトラフィックを効果的に監視し、疑わしい活動を検出し、規制基準に準拠することを確保する必要があります。企業は現在、Amazon VPCとAWS CloudTrailを使用していますが、監視機能を強化したいと考えています。",
        "Question": "次のうち、企業がネットワークトラフィックを効果的に監視し、規制基準に準拠するために最も適したソリューションはどれですか？",
        "Options": {
            "1": "Amazon Inspectorを使用してアプリケーションのセキュリティ評価を実施し、コンプライアンスレポートを生成します。",
            "2": "AWS WAFを展開して、アプリケーションに到達する前に悪意のあるトラフィックをブロックします。",
            "3": "AWS CloudTrailを設定して、アカウント内で行われたすべてのAPIコールをログに記録し、疑わしい活動のために定期的にログをレビューします。",
            "4": "AWS VPCフローログを実装して、VPC内のトラフィックをキャプチャおよび分析し、異常なパターンに対してアラートを設定します。"
        },
        "Correct Answer": "AWS VPCフローログを実装して、VPC内のトラフィックをキャプチャおよび分析し、異常なパターンに対してアラートを設定します。",
        "Explanation": "AWS VPCフローログは、VPC内のネットワークインターフェースに流れるトラフィックの詳細な可視性を提供します。これにより、企業はトラフィックパターンを分析し、異常を検出し、規制基準に効果的に準拠することができます。",
        "Other Options": [
            "AWS CloudTrailはAPIコールのログ記録に役立ちますが、疑わしい活動を監視するために必要な実際のネットワークトラフィックの詳細な可視性を提供しません。",
            "Amazon Inspectorは主にアプリケーションのセキュリティ評価に焦点を当てており、リアルタイムのネットワークトラフィック監視にはあまり適していません。",
            "AWS WAFは一般的なウェブ攻撃からアプリケーションを保護するために使用されますが、疑わしいネットワークパターンを分析し検出するために必要な包括的なトラフィック監視機能を提供しません。"
        ]
    },
    {
        "Question Number": "19",
        "Situation": "ある企業が、SQLインジェクションやクロスサイトスクリプティングなどの一般的なウェブ脆弱性から保護する必要がある新しいウェブアプリケーションを展開しています。彼らは、CloudFrontディストリビューションに到達する前にトラフィックをフィルタリングするためにAWS WAFを使用したいと考えています。チームは、WAFの設定とメンテナンスを簡素化するためにAWS Managed Rulesの使用を検討しています。また、特定のIPアドレスからの悪用を防ぐためにレート制限を実装したいと考えています。（2つ選択してください）",
        "Question": "このシナリオに対してAWS WAFを効果的に実装するためにどのようなアクションを取るべきですか？",
        "Options": {
            "1": "一般的な脆弱性から保護を提供するWebACLに追加するAWS Managed Ruleグループを1つ以上選択します。",
            "2": "指定されたリクエストの閾値を超えたIPアドレスをブロックするために、WebACLにレートベースのルールを実装します。",
            "3": "条件に関係なくCloudFrontディストリビューションへのすべてのトラフィックを許可するカスタムルールを作成します。",
            "4": "セキュリティを強化するために特定の地理的位置からのトラフィックのみを許可するようにWebACLを構成します。",
            "5": "WebACLのデフォルトアクションを変更して、リクエストをブロックするのではなくカウントします。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "一般的な脆弱性から保護を提供するWebACLに追加するAWS Managed Ruleグループを1つ以上選択します。",
            "指定されたリクエストの閾値を超えたIPアドレスをブロックするために、WebACLにレートベースのルールを実装します。"
        ],
        "Explanation": "AWS Managed Ruleグループを選択することで、広範な設定を必要とせずに、一般的な脆弱性からアプリケーションを自動的に保護する事前定義されたルールを活用できます。レートベースのルールを実装することで、個々のIPアドレスからのリクエスト数を制限し、悪用を効果的に防ぎ、リソースの公正な使用を確保します。",
        "Other Options": [
            "すべてのトラフィックを許可するカスタムルールを作成すると、WAFを実装する目的が無効になり、フィルタリングなしでアプリケーションがすべての種類の攻撃にさらされることになります。",
            "WebACLを特定の地理的位置からのトラフィックのみを許可するように構成すると、他の地域の正当なユーザーがブロックされ、アクセス可能性が低下する可能性があります。",
            "デフォルトアクションをリクエストのカウントに変更すると、保護措置は提供されず、単にトラフィックを記録するだけで、セキュリティポリシーを強制することはありません。"
        ]
    },
    {
        "Question Number": "20",
        "Situation": "ある組織が、異なるチームが安全に共有リソースにアクセスする必要があるマルチアカウントAWS環境を実装しています。セキュリティチームは、未承認のアクセスのリスクを軽減するために、外部IDを持つIAMロールの使用を推奨しています。組織は、外部の関係者が機密の権限を公開することなく、安全にロールを引き受けることを確実にしたいと考えています。",
        "Question": "組織は、外部の関係者がAWSアカウント内でロールを安全に引き受けるためにどのアプローチを取るべきですか？",
        "Options": {
            "1": "外部IDを使用せずに外部サービスがアカウント内のリソースにアクセスできるサービスリンクロールを定義します。",
            "2": "外部の関係者がロールを引き受ける際に外部IDを提供することを要求する信頼ポリシーを持つロールを構成します。",
            "3": "外部の関係者にアクセスを付与するIAMポリシーを設定し、彼らが必要とするリソースに直接アタッチします。",
            "4": "各外部の関係者に長期アクセスキーを持つ新しいIAMユーザーを作成し、必要な権限を提供します。"
        },
        "Correct Answer": "外部の関係者がロールを引き受ける際に外部IDを提供することを要求する信頼ポリシーを持つロールを構成します。",
        "Explanation": "外部IDを要求する信頼ポリシーを使用することで、外部の関係者が正しい外部IDを提供した場合にのみロールを引き受けることができるため、セキュリティが強化されます。これにより、未承認のユーザーによるロールの引き受けのリスクが軽減されます。",
        "Other Options": [
            "長期アクセスキーを持つIAMユーザーを作成すると、資格情報の漏洩リスクが高まり、一時的なアクセスのベストプラクティスに従っていません。",
            "サービスリンクロールはAWSサービスによって事前定義されており、外部IDやカスタム権限を許可しないため、外部の関係者にアクセスを付与するのには適していません。",
            "外部の関係者のためにリソースに直接IAMポリシーをアタッチすると、外部IDが提供する必要なセキュリティコントロールが提供されず、外部の関係者の身元を確認することなく機密の権限が公開される可能性があります。"
        ]
    },
    {
        "Question Number": "21",
        "Situation": "ある金融サービス会社が、リアルタイムでトランザクションを処理するアプリケーションを実装しています。これらのトランザクションの重要性を考慮し、会社は厳格なサービスレベル契約（SLA）を遵守し、アプリケーションのパフォーマンスを効果的に監視するための関連する主要業績評価指標（KPI）を確立する必要があります。",
        "Question": "アプリケーションが高い信頼性とパフォーマンスを維持しながらSLAとKPIを満たすことを最も確実に保証するアプローチはどれですか？",
        "Options": {
            "1": "最大応答時間と最大ダウンタイムを指定するSLAを定義し、複数のリージョンにわたる高可用性アーキテクチャを実装します。",
            "2": "SLAの遵守を確保するために、アプリケーションのパフォーマンスを手動で毎週確認する専任チームを設立します。",
            "3": "アプリケーションをホストするために単一のEC2インスタンスを利用し、障害から回復するために毎日バックアップを実施します。",
            "4": "アプリケーションのパフォーマンスメトリクスを追跡し、KPIが満たされない場合に運用チームに警告する監視ソリューションを実装します。"
        },
        "Correct Answer": "最大応答時間と最大ダウンタイムを指定するSLAを定義し、複数のリージョンにわたる高可用性アーキテクチャを実装します。",
        "Explanation": "このアプローチは、アプリケーションがSLAを考慮して設計されていることを保証し、明確なパフォーマンス期待を確立し、同時に複数リージョンアーキテクチャを通じて冗長性を提供します。この設定は、提供されるサービスの重要性に応じて可用性と回復力を大幅に向上させます。",
        "Other Options": [
            "アプリケーションのパフォーマンスメトリクスを監視することは重要ですが、アラートのみに依存することはSLAとKPIが満たされることを積極的に保証するものではありません。高い信頼性に必要な構造的保証が欠けています。",
            "単一のEC2インスタンスを利用すると、単一障害点が生じ、重要なトランザクションを処理するために必要な高可用性要件を満たしません。毎日のバックアップはリアルタイムの可用性の代わりにはなりません。",
            "手動確認プロセスは、アプリケーションのパフォーマンスを監視するためのスケーラブルで効果的な方法ではありません。この方法は遅延や人的エラーの影響を受けやすく、SLA遵守に関するリアルタイムの洞察を提供できません。"
        ]
    },
    {
        "Question Number": "22",
        "Situation": "ある企業が重要な文書を保存するためにAmazon S3バケットを利用しています。最近、これらの文書の変更を追跡するためにバージョニングを有効にしました。バージョニングを有効にした後、既存の文書や今後のアップロードにどのような影響があるのか、必要に応じて以前のバージョンに戻すことができるのかについて懸念しています。",
        "Question": "S3バケットでバージョニングを有効にすることの影響は何ですか？（2つ選択してください）",
        "Options": {
            "1": "バージョニングが有効になると、バケットを削除しない限り無効にすることはできません。",
            "2": "バケット内の既存のオブジェクトは、nullバージョンIDを保持し、影響を受けません。",
            "3": "削除されたオブジェクトは、バケット内に以前のバージョンを保持します。",
            "4": "バケットにアップロードされたすべての新しいオブジェクトは、一意のバージョンIDを受け取ります。",
            "5": "バージョニングを有効にすると、すべての既存のオブジェクトに遡及的に一意のバージョンIDが割り当てられます。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "バケット内の既存のオブジェクトは、nullバージョンIDを保持し、影響を受けません。",
            "バケットにアップロードされたすべての新しいオブジェクトは、一意のバージョンIDを受け取ります。"
        ],
        "Explanation": "S3バケットでバージョニングが有効になると、既存のオブジェクトは変更されず、バージョンIDはnullに設定されます。しかし、バケットにアップロードされた新しいオブジェクトは、一意のバージョンIDを受け取り、オブジェクトのバージョンの追跡と管理が向上します。",
        "Other Options": [
            "このオプションは不正確です。バージョニングを有効にしても、既存のオブジェクトに遡及的に一意のバージョンIDは割り当てられず、nullバージョンIDを保持します。",
            "このオプションは不正確です。バージョニングは一時停止できますが、バージョニングを停止するためにバケット自体を削除する必要はありません。",
            "このオプションは不正確です。削除されたオブジェクトは永久に削除されるわけではなく、削除されたとしてマークされ、以前のバージョンにはまだアクセスできます。"
        ]
    },
    {
        "Question Number": "23",
        "Situation": "ある企業が、エッジデバイスがローカルでデータを処理し、管理と分析のためにAWS IoTサービスと通信できるソリューションを実装しようとしています。アーキテクチャは、デバイスが断続的な接続の間でも独立して動作できることを保証する必要があります。ソリューションアーキテクトは、AWSサービスを使用して最も適切なアプローチを選択する必要があります。",
        "Question": "AWSサービスを利用した以下の構成の中で、エッジデバイスにクラウド機能を拡張し、生成したデータに基づいてアクションを実行できる最良のソリューションはどれですか？",
        "Options": {
            "1": "AWS Lambda@Edgeを使用してCloudFront内のリクエストとレスポンスを変更する関数を実行し、ユーザーに近い場所でデータを処理しますが、一貫したインターネット接続に依存します。",
            "2": "エッジデバイスにAWS IoT Greengrassを展開し、インターネット接続がなくてもAWS Lambda関数のローカル実行とAWSサービスとの安全な通信を可能にします。",
            "3": "エッジにAmazon EC2インスタンスを実装して、ローカルでデータを処理するアプリケーションを実行し、管理と分析のためにAWSに接続します。",
            "4": "AWS IoT Coreを利用してデバイスをクラウドに直接接続し、ローカル実行なしでクラウド内でデータ処理を行います。"
        },
        "Correct Answer": "エッジデバイスにAWS IoT Greengrassを展開し、インターネット接続がなくてもAWS Lambda関数のローカル実行とAWSサービスとの安全な通信を可能にします。",
        "Explanation": "AWS IoT Greengrassは、エッジデバイスがAWS Lambda関数を実行し、生成したデータに基づいてローカルアクションを実行できるようにします。この機能により、接続が利用可能なときにAWSサービスとの安全な通信を維持しながら、デバイスが停電中でも独立して機能できることが保証されます。",
        "Other Options": [
            "AWS Lambda@Edgeは、主にCloudFrontと連携してリクエストとレスポンスを変更するためにAWSネットワークのエッジで関数を実行するために設計されています。このソリューションはインターネット接続に大きく依存し、デバイス自体でのローカル実行を許可しません。",
            "エッジにAmazon EC2インスタンスを使用するとローカル処理機能を提供できますが、エッジデバイスの管理や切断状態でのAWSサービスとの安全な通信には特に対応していません。また、不要なオーバーヘッドと複雑さを導入します。",
            "AWS IoT Coreはクラウドサービスとの直接通信を可能にしますが、エッジデバイスのローカル処理機能を提供しません。このオプションは、接続の問題が発生した場合にローカルアクションが必要なシナリオには適していません。"
        ]
    },
    {
        "Question Number": "24",
        "Situation": "ソフトウェア開発チームが、アプリケーションのデプロイを自動化するためにAWSサービスを使用してCI/CDパイプラインを実装しています。コードの変更が自動的にビルド、テスト、複数の環境にデプロイされることを保証したいと考えています。チームはこの目標を達成するためにさまざまなAWSツールを検討しています。",
        "Question": "このシナリオにおいて、AWSでCI/CDパイプラインを実装する最も効果的な方法はどれですか？",
        "Options": {
            "1": "EC2インスタンスにJenkinsサーバーをセットアップして、アプリケーションのビルドとデプロイプロセスを管理します。",
            "2": "AWS Elastic Beanstalkを使用して手動デプロイプロセスを実装し、アプリケーションをステージング環境にデプロイします。",
            "3": "AWS Lambda関数を利用してデプロイトリガーを処理し、専用のパイプラインなしでCI/CDプロセスを管理します。",
            "4": "AWS CodePipelineを使用してCI/CDワークフローをオーケストレーションし、AWS CodeBuildおよびAWS CodeDeployと統合します。"
        },
        "Correct Answer": "AWS CodePipelineを使用してCI/CDワークフローをオーケストレーションし、AWS CodeBuildおよびAWS CodeDeployと統合します。",
        "Explanation": "AWS CodePipelineを使用すると、CI/CDパイプラインのステージを簡単に定義し、CodeBuildやCodeDeployなどの他のAWSサービスと統合し、コードのコミットからデプロイまでのプロセス全体を自動化できます。このアプローチは手動介入を最小限に抑え、効率を最大化します。",
        "Other Options": [
            "AWS Elastic Beanstalkを使用した手動デプロイプロセスは、適切なCI/CDパイプラインが提供する自動化と継続的インテグレーション機能を提供せず、人為的エラーのリスクが増加し、リリースサイクルが遅くなります。",
            "AWS Lambda関数をデプロイトリガーに利用することは、ビルド管理やデプロイオーケストレーションなどのCI/CDパイプラインの包括的な機能が欠けており、開発ライフサイクル全体を自動化するには効果的ではありません。",
            "EC2インスタンスにJenkinsサーバーをセットアップすることは、CodePipelineのようなAWSの管理サービスを使用するよりも不必要な複雑さとメンテナンスのオーバーヘッドを追加します。"
        ]
    },
    {
        "Question Number": "25",
        "Situation": "スタートアップ企業が、成長するウェブアプリケーションのために十分なキャパシティを確保しつつ、AWSコストを最適化しようとしています。彼らはAWSが提供するさまざまな購入オプションを検討しています。会社のワークロードは予測可能で、ビジネスアワー中は一貫した使用パターンがあり、オフピーク時間中は最小限の使用となっています。このシナリオにおいて、最もコスト効果の高い購入オプションは何ですか？",
        "Question": "ソリューションアーキテクトは、スタートアップの予測可能なワークロードのコストを最適化するために、どのAWS購入オプションを推奨すべきですか？",
        "Options": {
            "1": "ビジネスアワー中の一貫したワークロードをカバーするために、1年間の期間でリザーブドインスタンスを購入します。",
            "2": "使用パターンに基づいてコストを削減しつつ柔軟性を提供するために、セービングプランを実装します。",
            "3": "低価格を利用するために、全ワークロードにスポットインスタンスを利用します。",
            "4": "前払いのコミットメントなしで柔軟性を維持するために、オンデマンドインスタンスを活用します。"
        },
        "Correct Answer": "ビジネスアワー中の一貫したワークロードをカバーするために、1年間の期間でリザーブドインスタンスを購入します。",
        "Explanation": "1年間の期間でリザーブドインスタンスを購入することは、予測可能なワークロードにとって最もコスト効果の高いオプションです。これは、オンデマンド価格と比較して大幅な節約を提供し、ビジネスアワー中の一貫した使用のためにキャパシティが予約されることを保証します。",
        "Other Options": [
            "スポットインスタンスを使用すると中断が発生する可能性があり、一貫した稼働時間が必要な予測可能なワークロードには適していません。これらのインスタンスは、AWSによっていつでも再取得される可能性があります。",
            "セービングプランを実装することで柔軟性は得られますが、非常に予測可能なワークロードの場合、リザーブドインスタンスは通常、使用に対するコミットメントを考慮するとより大きな節約を提供します。",
            "オンデマンドインスタンスを活用することで柔軟性と前払いコストなしでの運用が可能ですが、リザーブドインスタンスと比較して予測可能なワークロードには最も高価なオプションです。"
        ]
    },
    {
        "Question Number": "26",
        "Situation": "金融サービス会社は、敏感な顧客取引データを管理するために、EC2インスタンスのセットとAmazon RDS for PostgreSQLデータベースに依存しています。データの整合性と規制要件への準拠を確保するために、堅牢なバックアップと復元戦略が必要です。会社は、アプリケーションのパフォーマンスに影響を与えずにバックアップを実行する必要があり、RTOは2時間未満、RPOは10分を超えない必要があります。さらに、敏感なデータは、転送中と静止中の両方で暗号化されなければなりません。",
        "Question": "ソリューションアーキテクトとして、アプリケーションへのパフォーマンスへの影響を最小限に抑えながら、RTO、RPO、およびデータ暗号化の要件を最もよく満たすバックアップと復元戦略はどれですか？",
        "Options": {
            "1": "RDSの自動バックアップを15分間隔で有効にします。バックアップの保存にはAmazon S3を使用し、S3管理キーでサーバー側の暗号化を設定し、データがTLSで転送中に暗号化されることを確認します。",
            "2": "RDSインスタンスの手動バックアップを30分ごとにスケジュールし、トランザクションログを5分ごとにS3バケットに保存します。AWS Secrets Managerを使用して暗号化キーを管理し、データがHTTPSで転送中に暗号化されることを確認します。",
            "3": "AWS Backupを実装してRDSインスタンスの毎日のバックアップを作成し、5分間隔で自動バックアップを有効にします。AWS Key Management Service (KMS)を使用して静止データの暗号化キーを管理し、転送中のデータにSSLが有効であることを確認します。",
            "4": "AWS Data Pipelineを使用してRDSインスタンスのバックアップを毎時スケジュールし、Amazon S3に転送します。AWS CloudHSMを使用してバックアップの暗号化を設定し、IPsecを使用して転送中のデータが暗号化されることを確認します。"
        },
        "Correct Answer": "AWS Backupを実装してRDSインスタンスの毎日のバックアップを作成し、5分間隔で自動バックアップを有効にします。AWS Key Management Service (KMS)を使用して静止データの暗号化キーを管理し、転送中のデータにSSLが有効であることを確認します。",
        "Explanation": "このオプションは、自動バックアップが最小限のパフォーマンス影響で作成され、5分のRPOを提供するため、要件を満たします。また、静止データの暗号化にはAWS KMSを利用し、転送中のデータにはSSLを使用して、会社のセキュリティポリシーに準拠しています。",
        "Other Options": [
            "このオプションは、30分ごとの手動バックアップがデータ損失を引き起こす可能性があるため、10分のRPO要件を満たしていません。さらに、AWS Secrets Managerは静止データの暗号化キーを管理するために主に設計されていません。",
            "RDSの自動バックアップは良い機能ですが、15分間隔のスナップショットでは10分のRPO要件を満たしていません。さらに、S3管理キーを使用すると、暗号化キー管理においてAWS KMSと同じレベルの制御を提供しません。",
            "AWS Data Pipelineを使用してバックアップをスケジュールすることは不必要な複雑さをもたらす可能性があり、毎時のバックアップは10分のRPO要件を満たしません。CloudHSMは強力なキー管理を提供しますが、バックアップ暗号化のためのRDSとの統合は簡単ではないかもしれません。"
        ]
    },
    {
        "Question Number": "27",
        "Situation": "ある企業が、大規模なオンプレミスアプリケーションをAWSに移行する計画を立てています。アプリケーションは、単一のリージョン内の複数のアベイラビリティゾーンにホストされます。移行戦略の一環として、企業は高可用性とパフォーマンスを維持しつつ、データ転送コストを最小限に抑えることを希望しています。特に、AWSサービスとオンプレミスデータセンター間のデータ転送に関連するコストを懸念しています。",
        "Question": "次の戦略のうち、企業が移行したアプリケーションの高可用性とパフォーマンスを確保しながらデータ転送コストを最小限に抑えるのに最も役立つのはどれですか？",
        "Options": {
            "1": "複数の仮想プライベートクラウド（VPC）間でVPCピアリングを実装し、AWSリージョン内でのデータ転送を無料で行います。",
            "2": "AWS Direct Connectを使用して、オンプレミスデータセンターからAWSへの専用接続を確立し、低遅延とデータ転送コストの削減を実現します。",
            "3": "Amazon CloudFrontをコンテンツ配信ネットワークとして利用し、エッジロケーションでデータをキャッシュして、AWS内のオリジンから転送されるデータ量を削減します。",
            "4": "AWS Global Acceleratorを活用して、オンプレミスデータセンターからAWSリージョンへの経路を最適化し、遅延を減少させ、パフォーマンスを向上させます。"
        },
        "Correct Answer": "AWS Direct Connectを使用して、オンプレミスデータセンターからAWSへの専用接続を確立し、低遅延とデータ転送コストの削減を実現します。",
        "Explanation": "AWS Direct Connectを使用すると、オンプレミスデータセンターからAWSへの専用の高帯域幅接続が提供され、インターネットを使用する場合と比較してデータ転送コストが大幅に削減されます。この方法は、低遅延と高い信頼性を確保し、高パフォーマンスアプリケーションに最適です。",
        "Other Options": [
            "Amazon CloudFrontを利用することは主に遅延を減少させ、コンテンツ配信のためのキャッシュの利点を提供しますが、オンプレミスとAWS間での大量データ移動に関連するデータ転送コストには直接対処しません。",
            "VPCピアリングを実装すると、同じリージョン内のVPC間でのデータ転送が無料になりますが、オンプレミスとAWS間のデータ転送には適用されないため、この特定のシナリオでコストを最小限に抑えるのには役立ちません。",
            "AWS Global Acceleratorを活用すると、AWSサービスへのトラフィックのルーティングが最適化されますが、オンプレミスデータセンターとAWSサービス間のデータ転送コストには直接影響しません。"
        ]
    },
    {
        "Question Number": "28",
        "Situation": "金融サービスの組織が、AWSにおいて堅牢な資格情報管理システムを実装することでセキュリティ姿勢を強化しようとしています。ソリューションアーキテクトは、APIキー、パスワード、データベースの資格情報などの機密情報を安全に管理、保存、取得できる効果的なサービスを特定する必要があります。組織は、既存のAWSサービスに簡単に統合でき、ユーザーに対して細かいアクセス制御を提供するソリューションを必要としています。（2つ選択）",
        "Question": "ソリューションアーキテクトが資格情報管理のために推奨すべきAWSサービスの組み合わせはどれですか？",
        "Options": {
            "1": "AWS Systems Manager Parameter Storeを実装して、構成データと秘密情報を管理し、組み込みの暗号化を使用します。",
            "2": "AWS Secrets Managerを使用して、機密資格情報を保存および取得し、自動的にローテーションします。",
            "3": "AWS Lambdaを活用して、環境変数を使用したカスタム資格情報管理ソリューションを作成します。",
            "4": "Amazon Cognitoを採用して、資格情報ストレージのユーザー認証とアクセス制御を管理します。",
            "5": "AWS Identity and Access Management (IAM)ロールを利用して、ユーザーのパスワードを安全に直接保存します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Secrets Managerを使用して、機密資格情報を保存および取得し、自動的にローテーションします。",
            "AWS Systems Manager Parameter Storeを実装して、構成データと秘密情報を管理し、組み込みの暗号化を使用します。"
        ],
        "Explanation": "AWS Secrets Managerは、資格情報などの機密情報を管理するために特別に設計されており、自動ローテーションと細かいアクセス制御を提供します。AWS Systems Manager Parameter Storeも、暗号化を使用して構成データ（秘密情報を含む）を安全に保存する方法を提供し、資格情報管理に適しています。",
        "Other Options": [
            "AWS Identity and Access Management (IAM)ロールは、AWSリソースへのアクセスと権限を管理するために使用されますが、ユーザーのパスワードを安全に保存するメカニズムを提供しないため、このオプションは資格情報管理には不適切です。",
            "AWS Lambdaを使用したカスタム資格情報管理ソリューションは、複雑さを増し、セキュリティリスクを引き起こす可能性があるため、資格情報管理のために設計された既存のAWSサービスを活用する代わりに、全体のソリューションを管理する必要があります。",
            "Amazon Cognitoは主にユーザー認証とアクセス制御に焦点を当てており、ユーザー資格情報を管理できますが、APIキーやデータベースパスワードなどの機密アプリケーション資格情報を安全に保存および取得するために特別に設計されていません。"
        ]
    },
    {
        "Question Number": "29",
        "Situation": "グローバルなオンライン小売会社が、最小限のダウンタイムとデータ損失を確保するために、災害復旧戦略を強化しようとしています。同社はAWSサービスを広範囲に利用していますが、まだ正式な災害復旧計画を実施していません。ソリューションアーキテクトは、会社の要件を効果的に満たす適切な災害復旧方法論とツールを特定する任務を負っています。（2つ選択）",
        "Question": "ソリューションアーキテクトが推奨すべき災害復旧方法とツールはどれですか？",
        "Options": {
            "1": "業務時間中のみバックアップと復元のためにAmazon S3を利用します。",
            "2": "異なるリージョンにAmazon EC2インスタンスを使用したウォームスタンバイアプローチを採用します。",
            "3": "AWS Backupを活用して、サービス間のバックアッププロセスを自動化します。",
            "4": "AWS Elastic Disaster Recoveryを実装して、継続的なレプリケーションを行います。",
            "5": "データ復元のためにオンプレミスのテープバックアップのみに依存します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Elastic Disaster Recoveryを実装して、継続的なレプリケーションを行います。",
            "AWS Backupを活用して、サービス間のバックアッププロセスを自動化します。"
        ],
        "Explanation": "AWS Elastic Disaster Recoveryは、AWSリソースの継続的なレプリケーションを可能にし、災害発生時の迅速な復旧を実現します。AWS Backupは、複数のAWSサービス間でバックアップタスクを自動化および集中管理し、データが定期的にバックアップされ、復旧のためにすぐに利用できるようにします。両方のオプションは、会社のクラウドインフラストラクチャに合わせた効果的な災害復旧ソリューションのニーズに応えています。",
        "Other Options": [
            "業務時間中のみAmazon S3を利用してバックアップと復元を行うのは理想的ではなく、継続的なデータ保護を保証せず、災害がその時間外に発生した場合にデータ損失を引き起こす可能性があります。",
            "異なるリージョンにAmazon EC2インスタンスを使用したウォームスタンバイアプローチは効果的ですが、AWS Elastic Disaster RecoveryやAWS Backupが提供する自動化と管理の容易さと同じレベルを提供しない可能性があります。",
            "データ復元のためにオンプレミスのテープバックアップのみに依存するのは不十分であり、クラウドベースのソリューションの利点を活用せず、復旧時間が長くなり、データ損失の可能性が高まります。"
        ]
    },
    {
        "Question Number": "30",
        "Situation": "金融サービス会社が、ユーザーが職務を遂行するために必要な権限のみを持つことを確認するために、AWS環境の監査を実施しています。これは最小権限の原則に沿ったものです。同社には異なる責任とアクセスニーズを持つ複数のチームがあります。彼らはユーザー権限管理のためにAWS Identity and Access Management (IAM)を使用しています。",
        "Question": "すべてのユーザーに対して最小権限アクセスを確保するために、AWS環境を監査する最も効果的な戦略は何ですか？",
        "Options": {
            "1": "ユーザーによって行われたすべてのAPI呼び出しを追跡する中央集権的なログソリューションを実装して、過剰な権限と使用パターンを特定します。",
            "2": "過去30日間に使用されていない権限を定期的に削除する自動スクリプトを設定します。",
            "3": "AWS IAM Access Analyzerを使用して、使用されていない権限を特定し、IAMロールとポリシーを調整します。",
            "4": "すべてのIAMポリシーとロールを手動でレビューして、ユーザーがタスクに必要な最小限の権限を持っていることを確認します。"
        },
        "Correct Answer": "AWS IAM Access Analyzerを使用して、使用されていない権限を特定し、IAMロールとポリシーを調整します。",
        "Explanation": "AWS IAM Access Analyzerを使用することは、ユーザー権限を監査する最も効果的な方法であり、ポリシーを自動的に分析し、過剰なアクセスを特定し、環境全体で最小権限アクセスを維持するための体系的な調整を可能にします。",
        "Other Options": [
            "手動レビューは時間がかかり、エラーが発生しやすいため、IAM Access Analyzerのような自動化ツールと比較して効果が低くなります。",
            "中央集権的なログはAPI呼び出しパターンに関する洞察を提供できますが、過剰または不必要な権限を直接特定することはできず、最小権限を強制するためには不可欠です。",
            "未使用の権限を削除する自動スクリプトは、ユーザーに必要なアクセスを誤って取り消す可能性があり、必要なタスクを実行する能力に潜在的な中断を引き起こす可能性があります。"
        ]
    },
    {
        "Question Number": "31",
        "Situation": "金融サービス会社は、Amazon S3に保存された取引データを定期的に処理し、変換されたデータを報告用にAmazon RDSデータベースにロードする必要があります。会社は、このプロセスを自動化し、データの整合性を確保しながらコストを最小限に抑えるソリューションを必要としています。",
        "Question": "会社は、Amazon S3からAmazon RDSへのデータの移動と変換を調整するために、どのAWSサービスを使用すべきですか？",
        "Options": {
            "1": "AWS Step Functionsを使用してワークフローを管理し、データ変換にはAWS Lambdaを使用します。",
            "2": "Amazon Kinesis Data Firehoseを使用してS3からRDSにデータをストリーミングします。",
            "3": "AWS Batchを使用してS3のデータを処理し、RDSにロードします。",
            "4": "AWS Glueを使用してETLジョブを作成し、データ転送と変換を自動化します。"
        },
        "Correct Answer": "AWS Glueを使用してETLジョブを作成し、データ転送と変換を自動化します。",
        "Explanation": "AWS GlueはETL（抽出、変換、ロード）プロセス専用に設計されており、Amazon S3からAmazon RDSへのデータの移動と変換に最適です。サーバーレスアーキテクチャを提供し、データワークフローのスケジューリングと実行を自動化し、データの整合性を確保し、運用コストを最小限に抑えます。",
        "Other Options": [
            "AWS Step Functionsは複雑なワークフローを管理するために使用されますが、ネイティブのETL機能を提供せず、データ変換には追加のサービスが必要です。",
            "Amazon Kinesis Data Firehoseは主にデータのストリーミングに使用され、RDSにロードする前にS3の既存データのバッチ処理と変換には適していない可能性があります。",
            "AWS Batchはバッチ処理ジョブ用に設計されていますが、ETLプロセスを調整したり、S3とRDS間のデータフローを管理するための簡単な方法を提供しません。"
        ]
    },
    {
        "Question Number": "32",
        "Situation": "メディアストリーミング会社は、AWSでホストされているビデオ配信サービスにパフォーマンスの問題を抱えています。ユーザーは、特にピーク時にビデオ再生中にバッファリングや遅延を報告しています。ソリューションアーキテクトとして、スムーズなユーザー体験を確保するためにビデオストリーミングサービスのパフォーマンスを向上させる必要があります。（2つ選択）",
        "Question": "ビデオ配信サービスのパフォーマンスを最適化するために、どの戦略を実装すべきですか？",
        "Options": {
            "1": "Amazon Simple Storage Service (S3)を構成して、キャッシュメカニズムなしでビデオファイルをホストします。",
            "2": "Amazon CloudFrontをコンテンツ配信ネットワーク（CDN）として実装し、ユーザーに近い場所でビデオコンテンツをキャッシュしてレイテンシを減らします。",
            "3": "AWS Global Acceleratorを使用して、複数の地理的地域にいるユーザーとのアプリケーションの可用性とパフォーマンスを向上させます。",
            "4": "メディア処理アプリケーションのためにマルチリージョンセットアップを展開し、グローバルに高可用性と低レイテンシを確保します。",
            "5": "Amazon Elastic Transcoderを有効にして、ビデオファイルをさまざまなフォーマットと解像度に自動的に変換し、最適な配信を実現します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon CloudFrontをコンテンツ配信ネットワーク（CDN）として実装し、ユーザーに近い場所でビデオコンテンツをキャッシュしてレイテンシを減らします。",
            "AWS Global Acceleratorを使用して、複数の地理的地域にいるユーザーとのアプリケーションの可用性とパフォーマンスを向上させます。"
        ],
        "Explanation": "Amazon CloudFrontを実装することで、エッジロケーションでビデオコンテンツをキャッシュし、ユーザーのレイテンシを大幅に減少させます。さらに、AWS Global Acceleratorを使用することで、アプリケーションへのルートを最適化し、異なる地域に分散するユーザーのパフォーマンスを向上させます。",
        "Other Options": [
            "Amazon Elastic Transcoderを有効にすることはメディア処理に有益ですが、配信に関連するパフォーマンスの問題には直接対処しません。コンテンツのフォーマットと品質に焦点を当てており、レイテンシを減少させることにはつながりません。",
            "マルチリージョンセットアップを展開することで可用性が向上する可能性がありますが、CDNと組み合わせない限り、パフォーマンスの問題には直接対処できません。単独ではパフォーマンスの向上を保証せず、複雑さとコストを追加します。",
            "キャッシュメカニズムなしでS3を構成すると、ユーザーはエッジキャッシングの利点なしにS3から直接ビデオコンテンツを取得しなければならず、パフォーマンスの問題が悪化する可能性があります。"
        ]
    },
    {
        "Question Number": "33",
        "Situation": "クラウドアーキテクトは、高可用性とフォールトトレランスを確保するために、さまざまなリージョンにわたって複数のAmazon EC2インスタンスを展開する必要があるソリューションを設計しています。アーキテクトは、サービス制限に達することなく、最大数のEC2インスタンスをプロビジョニングできることを確認する必要があります。",
        "Question": "アーキテクトは、EC2サービスのクォータを効果的に管理するためにどのようなアクションの組み合わせを取るべきですか？（2つ選択）",
        "Options": {
            "1": "制限に達した場合、AWSサポートセンターを通じてEC2インスタンスの制限増加をリクエストします。",
            "2": "トラフィックに基づいてインスタンスの数を動的に調整するために、Amazon EC2 Auto Scalingを構成します。",
            "3": "クォータを考慮せずにEC2インスタンスの展開を自動化するためにAWS CloudFormationを使用します。",
            "4": "EC2インスタンスの使用状況を監視し、制限に近づいたときにアラートを出すAWS Lambda関数を実装します。",
            "5": "AWS Management Consoleで各リージョンのデフォルトのEC2インスタンス制限を確認します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Management Consoleで各リージョンのデフォルトのEC2インスタンス制限を確認します。",
            "制限に達した場合、AWSサポートセンターを通じてEC2インスタンスの制限増加をリクエストします。"
        ],
        "Explanation": "EC2サービスのクォータを効果的に管理するために、アーキテクトはまずデフォルトの制限を確認し、各リージョンで利用可能なキャパシティを理解する必要があります。プロジェクトの要求がこれらの制限を超える場合、AWSサポートセンターを通じて制限増加をリクエストすることが重要です。",
        "Other Options": [
            "AWS CloudFormationを使用するとサービスクォータを考慮しないため、制限を超えた場合にデプロイメントが失敗する可能性があり、クォータ管理には効果的なアクションではありません。",
            "EC2の使用状況を監視することは有益ですが、制限に近づいたときにアラートを出すLambda関数を実装するだけでは、サービスクォータの管理に直接対処することにはなりません。",
            "EC2 Auto Scalingを構成することは需要に基づいてインスタンスのキャパシティを管理するのに役立ちますが、サービスクォータの理解や増加リクエストの必要性に直接対処するものではありません。"
        ]
    },
    {
        "Question Number": "34",
        "Situation": "中規模のeコマース会社がAWSでのコスト管理の実践を改善したいと考えています。現在、同社はEC2、S3、RDSを含む複数のAWSサービスを利用しています。月間支出が事前に定義された閾値を超えた際に財務チームに通知する自動アラートシステムを設定したいと考えています。さらに、財務チームはサービスの使用状況と関連コストに関する詳細な月次レポートを必要としています。これらの要件を最も効果的に達成する方法は何ですか？",
        "Question": "次の選択肢の中で、AWSにおけるコスト管理、アラート、報告のニーズを最もよく満たすのはどれですか？",
        "Options": {
            "1": "AWS CloudTrailを利用してログを取得し、すべてのサービスの支出を監視するためにAmazon CloudWatchアラームを設定します。",
            "2": "AWS Budgetsを設定してコスト閾値に達した際にアラートを送信し、詳細な報告のためにAWS Cost Explorerを使用します。",
            "3": "AWS Trusted Advisorを実装してサービスの使用状況をレビューし、コスト報告のためのカスタムスクリプトを設定します。",
            "4": "AWS Configを有効にしてリソースの変更を追跡し、コスト閾値に関するアラートのためにAmazon SNSを利用します。"
        },
        "Correct Answer": "AWS Budgetsを設定してコスト閾値に達した際にアラートを送信し、詳細な報告のためにAWS Cost Explorerを使用します。",
        "Explanation": "AWS Budgetsはコストと使用状況の予算を設定するために特別に設計されており、閾値が超えた際にアラートを送信する機能があります。AWS Cost Explorerはサービスの使用状況とコストに関する詳細な洞察を提供し、この選択肢が会社の要件に最も効果的です。",
        "Other Options": [
            "AWS CloudTrailは主にAPIコールの監査に使用され、コスト監視やアラート機能を直接提供しないため、会社のニーズには不十分です。",
            "AWS Trusted AdvisorはAWSリソースの最適化に関する推奨を提供しますが、コスト閾値に関するアラートや詳細な報告のための専用メカニズムを提供しません。",
            "AWS Configはリソースの構成とコンプライアンスを追跡するために使用され、コスト監視を提供せず、支出閾値に対する必要なアラート機能が欠けています。"
        ]
    },
    {
        "Question Number": "35",
        "Situation": "大手メディア会社がアーカイブおよび処理のためにテラバイトのビデオデータをAmazon S3に転送する必要があります。同社は限られたインターネット帯域幅を持ち、このような大容量のデータをアップロードするのにかかる時間を懸念しています。ストレージとコンピュートのニーズに基づいて、移行に使用するAWS Snowballアプライアンスの選択肢を評価しています。",
        "Question": "ビデオデータを効率的に転送し、デバイス上での一部の前処理も可能にするために、会社はどのAWS Snowballオプションを選択すべきですか？",
        "Options": {
            "1": "50 TBのストレージを持つStandard Snowballオプションを選択し、コンピュート機能なしでデータを直接S3に転送します。",
            "2": "Snowball Edge Storage Optimizedオプションを選択して、100 TBのストレージ容量と24 vCPUを利用し、ビデオデータをS3に転送する前に前処理を行います。",
            "3": "100 PBのストレージを提供するSnowmobileサービスを選択し、すべてのビデオデータを一度の移動でS3に転送します。",
            "4": "Snowball Edge Compute Optimizedオプションを選択し、S3に転送する前にビデオデータに対して高度な機械学習アルゴリズムを実行します。"
        },
        "Correct Answer": "Snowball Edge Storage Optimizedオプションを選択して、100 TBのストレージ容量と24 vCPUを利用し、ビデオデータをS3に転送する前に前処理を行います。",
        "Explanation": "Snowball Edge Storage Optimizedオプションは、ビデオデータの前処理を行うために必要なストレージ容量とコンピュートリソースを提供し、大量のデータを転送しながらコンピュート機能を活用するという会社のニーズに理想的です。",
        "Other Options": [
            "Standard Snowballオプションはコンピュート機能が欠けており、ビデオデータの前処理を行うことができないため、会社の要件には不適切です。",
            "Snowmobileサービスは非常に大規模なデータ移行のために設計されていますが、テラバイトのビデオデータには過剰であり、前処理機能を提供しません。",
            "Snowball Edge Compute Optimizedオプションは高度な機械学習ワークロードの実行により適しており、Storage Optimizedオプションと比較して会社のニーズに対する十分なストレージ容量を提供しない可能性があります。"
        ]
    },
    {
        "Question Number": "36",
        "Situation": "大企業がAWSに移行しており、複数のAWSアカウントおよびアプリケーション全体でユーザーのアイデンティティとアクセスを管理するための集中管理ソリューションが必要です。企業は現在、Microsoft Active Directoryをアイデンティティ管理に使用しており、シングルサインオン機能をサポートする労働力認証ソリューションを実装したいと考えています。",
        "Question": "集中管理のアイデンティティ管理とシングルサインオンアクセスの要件を最もよく満たすために、企業はどのソリューションを実装すべきですか？",
        "Options": {
            "1": "各アカウントに個別のIAMユーザーを持つ複数のAWSアカウントを設定して、ユーザー管理とアクセス制御を行います。",
            "2": "AWS Directory Serviceを展開して、別のアイデンティティストアを作成し、各AWSアカウント内でユーザーアクセスを直接管理します。",
            "3": "AWS IAM Identity Centerを実装して、既存のMicrosoft Active Directoryに接続し、AWSアカウント全体でユーザーアクセスを管理します。",
            "4": "Amazon Cognitoを使用してユーザーアイデンティティを作成し、すべてのAWSサービスおよびアプリケーションで認証を管理します。"
        },
        "Correct Answer": "AWS IAM Identity Centerを実装して、既存のMicrosoft Active Directoryに接続し、AWSアカウント全体でユーザーアクセスを管理します。",
        "Explanation": "AWS IAM Identity Centerは集中管理のアイデンティティ管理のために設計されており、組織がMicrosoft Active Directoryなどの既存のアイデンティティソースに接続できるようにします。複数のAWSアカウントおよびアプリケーション全体でシングルサインオン機能を提供し、企業の要件に完全に一致します。",
        "Other Options": [
            "AWS Directory Serviceは別のアイデンティティストアを必要とし、複数のアカウント全体で必要な集中管理を提供しないため、企業の目標には合致しません。",
            "Amazon Cognitoはアプリケーションレベルのユーザー認証により焦点を当てており、企業環境において複数のAWSアカウント全体でのアクセス管理には理想的ではありません。",
            "各アカウントに個別のIAMユーザーを設定すると、アイデンティティ管理が断片化され、アクセス管理やシームレスなシングルサインオン体験の作成が難しくなります。"
        ]
    },
    {
        "Question Number": "37",
        "Situation": "グローバルなeコマースプラットフォームが、災害復旧戦略を強化する計画を立てています。この会社は複数の地域で運営されており、アプリケーションがダウンタイムとデータ損失を最小限に抑えながら、障害から迅速に復旧できることを確保する必要があります。ソリューションアーキテクトは、コストと復旧時間の目標のバランスを取る適切な災害復旧戦略を特定する任務を負っています。",
        "Question": "ソリューションアーキテクトが実装を検討すべき災害復旧戦略はどれですか？（2つ選択してください）",
        "Options": {
            "1": "通常の運用中にアクティブなコンポーネントがないコールドスタンバイ戦略",
            "2": "必須コンポーネントがスタンバイモードで稼働するパイロットライト戦略",
            "3": "データが単一の地域に保存されるバックアップおよび復元戦略",
            "4": "完全に機能する環境の縮小版を持つウォームスタンバイ戦略",
            "5": "複数の地域にわたるアクティブ-アクティブ展開を持つマルチサイト戦略"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "必須コンポーネントがスタンバイモードで稼働するパイロットライト戦略",
            "完全に機能する環境の縮小版を持つウォームスタンバイ戦略"
        ],
        "Explanation": "パイロットライト戦略は、必要に応じて重要なコンポーネントが迅速にスケールアップできるように準備されていることを可能にし、ウォームスタンバイ戦略は、障害が発生した場合に迅速にフルキャパシティに戻すことができる部分的に稼働している環境を維持します。両方の戦略は、災害復旧シナリオにおいてコストと復旧速度の効果的なバランスを提供します。",
        "Other Options": [
            "バックアップおよび復元戦略は通常、復旧時間が長くなり、単一の場所からバックアップを復元することに依存するため、慎重に管理しないとデータ損失を引き起こす可能性があります。",
            "マルチサイト戦略は、最も迅速な復旧時間を提供しますが、複数の地域にわたって完全に運用されている環境を維持するため、コストが大幅に増加する可能性があり、すべてのアプリケーションに対して正当化されない場合があります。",
            "コールドスタンバイ戦略は、非アクティブな状態からリソースを立ち上げる必要があるため、迅速な復旧には理想的ではなく、ダウンタイムが長くなり、データ損失の可能性があります。"
        ]
    },
    {
        "Question Number": "38",
        "Situation": "ある会社が、Amazon EC2インスタンスでリアルタイムデータを処理する重要なアプリケーションをホストしています。このアプリケーションは、インスタンスの障害により時折ダウンタイムが発生しており、ビジネスオペレーションに影響を与えています。ソリューションアーキテクトは、インスタンスの障害に最小限の中断で対処できる高可用性でレジリエントなアーキテクチャを実装する必要があります。",
        "Question": "次のうち、アプリケーションへの中断を最小限に抑えながら高可用性とレジリエンシーの要件を満たすソリューションはどれですか？",
        "Options": {
            "1": "EC2インスタンスのスナップショットを作成し、毎時実行するようにスケジュールします。インスタンスの障害が発生した場合、最新のスナップショットを使用して新しいEC2インスタンスを手動で起動し、アプリケーションを復元します。",
            "2": "Amazon ECSをFargateと共に使用して、サーバーレスでアプリケーションを実行します。複数のアベイラビリティゾーンに分散された複数のタスクを持つサービスを構成します。アプリケーションロードバランサーを実装して、タスクへのトラフィックをルーティングします。",
            "3": "データストレージ用にアタッチされたAmazon Elastic Block Store (EBS)ボリュームを持つ単一のEC2インスタンスにアプリケーションをデプロイします。障害が発生した場合に復元するために、Amazon Data Lifecycle Managerを使用してEBSボリュームのバックアップを作成します。",
            "4": "複数のアベイラビリティゾーンにわたる複数のEC2インスタンスを持つAuto Scalingグループを作成します。アプリケーションロードバランサー（ALB）を使用して、Auto Scalingグループ内のインスタンスに受信トラフィックを分散します。ALBのヘルスチェックを構成して、トラフィックが健康なインスタンスにのみ送信されるようにします。"
        },
        "Correct Answer": "複数のアベイラビリティゾーンにわたる複数のEC2インスタンスを持つAuto Scalingグループを作成します。アプリケーションロードバランサー（ALB）を使用して、Auto Scalingグループ内のインスタンスに受信トラフィックを分散します。ALBのヘルスチェックを構成して、トラフィックが健康なインスタンスにのみ送信されるようにします。",
        "Explanation": "このソリューションは、複数のアベイラビリティゾーンに分散されたインスタンスを持つAuto Scalingグループを利用することで、高可用性とレジリエンシーを提供します。アプリケーションロードバランサーは、トラフィックが健康なインスタンスにのみ送信されることを保証し、ダウンタイムとユーザーへの中断を最小限に抑えます。",
        "Other Options": [
            "単一のEC2インスタンスにアプリケーションをデプロイすることは高可用性を提供しません。そのインスタンスが障害を起こすとダウンタイムが発生します。バックアップは有用ですが、障害時に継続的な運用を保証するものではありません。",
            "Amazon ECSをFargateと共に使用することはサーバーレスアプローチを提供しますが、正しく構成されていない場合、高可用性を提供しない可能性があります。ただし、レジリエンシーのための有効なオプションですが、正しい答えと比較してヘルスチェックやバランスの取れたトラフィック分配の明示的な言及が欠けています。",
            "EC2インスタンスのスナップショットを作成することは、即時のフェイルオーバー機能を提供しません。このアプローチは手動介入に依存し、継続的な運用を保証しないため、高可用性の要件には適していません。"
        ]
    },
    {
        "Question Number": "39",
        "Situation": "ある金融サービス会社は、顧客の取引データがデータ損失やサービス中断から保護されることを確保する任務を負っています。彼らは30分の復旧時間目標（RTO）と15分の復旧ポイント目標（RPO）を必要としています。アーキテクチャは、完全なAWSリージョンの障害が発生した場合でも運用を続ける必要があります。",
        "Question": "次のうち、このシナリオのRTOおよびRPO要件を最もよく満たすソリューションはどれですか？",
        "Options": {
            "1": "データを15分ごとにセカンダリリージョンにレプリケートするアクティブ-パッシブアーキテクチャを設定し、30分以内に実行できるフェイルオーバープロセスを設けます。",
            "2": "別のリージョンに毎時バックアップを行うウォームスタンバイセットアップを実装し、サービスを復元するための手動介入を可能にします。",
            "3": "データストレージにAmazon S3を使用し、ライフサイクルポリシーを設定して、データを毎時別のリージョンにレプリケートし、手動フェイルオーバープロセスを提供します。",
            "4": "複数のAWSリージョンにわたるアクティブ-アクティブアーキテクチャを実装し、データの同期レプリケーションを行い、データ損失を防ぎます。"
        },
        "Correct Answer": "データを15分ごとにセカンダリリージョンにレプリケートするアクティブ-パッシブアーキテクチャを設定し、30分以内に実行できるフェイルオーバープロセスを設けます。",
        "Explanation": "このオプションは、頻繁なデータレプリケーションを通じて15分のRPOを提供し、自動フェイルオーバープロセスで30分のRTOを満たし、ダウンタイムとデータ損失を最小限に抑えます。",
        "Other Options": [
            "アクティブ-アクティブアーキテクチャは低遅延と高可用性を提供しますが、特定のシナリオに必要なRTOとRPOを保証せず、複雑さやコストが増加する可能性があります。",
            "Amazon S3を使用して毎時レプリケーションを行うことは、15分のRPOを満たしません。最大で1時間のデータ損失を許容するため、要件を超えています。",
            "毎時バックアップを行うウォームスタンバイセットアップは、指定された要件に比べてサービスをオンラインにするのにより多くの時間がかかるため、30分のRTOを満たしません。"
        ]
    },
    {
        "Question Number": "40",
        "Situation": "金融サービス会社がリソース管理とコンプライアンスを改善するために、複数のAWSアカウントへの運用拡大を計画しています。彼らは、すべてのAWSアカウントにわたるポリシーとセキュリティコントロールの集中管理を可能にするガバナンスフレームワークを実装したいと考えています。彼らは、ガバナンス戦略の一環としてAWS Control TowerとAWS Organizationsの使用を検討しています。",
        "Question": "次の構成のうち、会社のマルチアカウント設定に対して最も効果的なガバナンスとコンプライアンス管理を提供するのはどれですか？",
        "Options": {
            "1": "AWS Control Towerを設定して、事前に構成されたガードレールを持つアカウントを作成します。AWS Organizationsを使用してアカウントを管理しますが、SCPを適用せず、IAMロールのみに依存して権限とコンプライアンスを管理します。",
            "2": "中央のAWSアカウントを作成し、AWS Organizationsを使用して他のすべてのアカウントをリンクします。コンプライアンスチェックのためにAWS Configルールを実装しますが、管理を簡素化するためにAWS Control Towerやガードレールは使用しません。",
            "3": "AWS Organizationsを使用してマルチアカウント構造を作成し、アカウント間でIAMポリシーを手動で適用します。各アカウントの活動を監視し、内部ポリシーに対するコンプライアンスを確保するために、個別のCloudTrailログを設定します。",
            "4": "AWS Control Towerを実装して新しいマルチアカウント環境を設定し、提供されたガードレールを適用します。AWS Organizationsを使用してアカウントの作成を管理し、追加のコンプライアンスコントロールのためにSCPを適用します。AWS Configを使用して定期的にアカウントを監査します。"
        },
        "Correct Answer": "AWS Control Towerを実装して新しいマルチアカウント環境を設定し、提供されたガードレールを適用します。AWS Organizationsを使用してアカウントの作成を管理し、追加のコンプライアンスコントロールのためにSCPを適用します。AWS Configを使用して定期的にアカウントを監査します。",
        "Explanation": "AWS Control Towerを使用することで、会社は組み込みのコンプライアンスガードレールを持つ安全なマルチアカウント環境を迅速に設定できます。これをAWS Organizationsと組み合わせることで、集中管理とサービスコントロールポリシー（SCP）の適用が可能になり、ガバナンスが強化されます。AWS Configを使用した定期的な監査により、継続的なコンプライアンスが確保されます。",
        "Other Options": [
            "IAMポリシーにAWS Organizationsのみを使用すると、一貫性が欠け、手動の労力が増加する可能性があります。AWS Control Towerの自動化とガードレールがないと、コンプライアンスがより困難で効果が薄くなる可能性があります。",
            "SCPを適用せずにAWS Control Towerを設定すると、ガバナンス機能が制限されます。権限のためにIAMロールのみに依存すると、集中管理と監視が欠如するため、アカウントがリスクにさらされる可能性があります。",
            "中央アカウントを作成し、AWS Control Towerやガードレールを使用せずにAWS Configルールに依存すると、環境が誤設定に対して脆弱になり、AWSガバナンステクニックの完全な機能を活用できません。"
        ]
    },
    {
        "Question Number": "41",
        "Situation": "金融サービス会社は、リアルタイムでトランザクションを処理する重要なアプリケーションを運営しています。このアプリケーションは、複数のアベイラビリティゾーンにまたがるオートスケーリンググループ内のAmazon EC2インスタンス上にホストされています。アーキテクトは、アプリケーションが障害に耐え、データ損失なしにシームレスに回復できることを保証する任務を負っています。アプリケーションはトランザクションデータをAmazon RDSデータベースに書き込みます。会社は、ダウンタイムを最小限に抑え、データの整合性を確保するソリューションを必要としています。",
        "Question": "次のうち、ソリューションアーキテクトが障害に備え、シームレスな回復を確保するために実装すべき戦略はどれですか？",
        "Options": {
            "1": "Amazon RDSスナップショットを実装して、各トランザクションの前にバックアップを作成します。AWS Lambdaを使用してフェイルオーバーと回復手順を自動化します。",
            "2": "別のリージョンにAmazon RDSインスタンスのリードレプリカをデプロイします。Amazon Route 53を使用してDNSフェイルオーバーを行い、障害発生時にトラフィックをリダイレクトします。",
            "3": "Amazon RDSのマルチAZデプロイメントを実装して、データベースの高可用性と自動フェイルオーバーを確保します。バックアップ用にAmazon S3バケットを使用し、ポイントインタイムリカバリを有効にします。",
            "4": "Amazon ECS上にサービスメッシュ構成でアプリケーションをデプロイします。トランザクションログをAmazon DynamoDBテーブルに保存して迅速な回復を図ります。"
        },
        "Correct Answer": "Amazon RDSのマルチAZデプロイメントを実装して、データベースの高可用性と自動フェイルオーバーを確保します。バックアップ用にAmazon S3バケットを使用し、ポイントインタイムリカバリを有効にします。",
        "Explanation": "Amazon RDSのマルチAZデプロイメントを実装することで、リアルタイムトランザクションを処理する重要なアプリケーションにとって不可欠なデータベースの高可用性と自動フェイルオーバーを提供します。バックアップ用にAmazon S3を使用し、ポイントインタイムリカバリを有効にすることで、障害発生時のデータ整合性と回復性を確保します。",
        "Other Options": [
            "別のリージョンにリードレプリカをデプロイすることは、プライマリデータベースの自動フェイルオーバーを提供せず、書き込み操作に追加のレイテンシをもたらす可能性があります。このオプションは、即時回復を必要とする重要なアプリケーションには適していません。",
            "各トランザクションの前にRDSスナップショットを使用することは、ゼロデータ損失を確保するための実行可能な戦略ではありません。スナップショットの作成には時間がかかり、リアルタイムでデータをキャプチャできない可能性があるため、障害発生時に最近のトランザクションの損失のリスクがあります。",
            "Amazon ECS上にサービスメッシュでアプリケーションをデプロイすることは、データベースの高可用性と回復性に直接対処するものではありません。トランザクションログをDynamoDBに保存することは、アプリケーションに必要なトランザクションデータの整合性を確保できない可能性があります。"
        ]
    },
    {
        "Question Number": "42",
        "Situation": "ある金融サービス会社が最近、AWS環境で毎晩実行される脆弱性スキャンツールを導入しました。このツールは複数の脆弱性を特定しますが、チームはこれらの発見に迅速かつ効果的に対応するのに苦労しています。彼らは、セキュリティ体制を強化し、手動介入を減らすために自動応答を優先したいと考えています。（2つ選択してください）",
        "Question": "検出された脆弱性に対処するために優先すべき自動応答はどれですか？",
        "Options": {
            "1": "脆弱性の発見についてセキュリティチームと議論するために定期的な手動レビューをスケジュールする。",
            "2": "自動修復なしで脆弱性が検出されるたびにチームに通知するCloudWatchアラームを設定する。",
            "3": "AWS Configルールを利用してセキュリティのベストプラクティスに準拠し、非準拠のリソースを自動的に修復する。",
            "4": "重大度に基づいて一般的な脆弱性を自動的に修復するためにAWS Lambda関数を実装する。",
            "5": "脆弱性に対する事前定義された修復アクションを実行するためにAWS Systems Manager Automationドキュメントを統合する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "重大度に基づいて一般的な脆弱性を自動的に修復するためにAWS Lambda関数を実装する。",
            "脆弱性に対する事前定義された修復アクションを実行するためにAWS Systems Manager Automationドキュメントを統合する。"
        ],
        "Explanation": "AWS Lambda関数を自動修復のために実装することで、脆弱性の重大度に基づいて即座に対応でき、露出のウィンドウを最小限に抑えることができます。さらに、AWS Systems Manager Automationドキュメントを統合することで、事前定義されたアクションを実行でき、修復プロセスを効率化し、脆弱性の処理における一貫性を確保します。",
        "Other Options": [
            "定期的な手動レビューをスケジュールすることは自動応答を提供せず、修復プロセスを遅延させる可能性があり、脆弱性が長期間未対応のままとなることがあります。",
            "自動修復なしで通知のためにCloudWatchアラームを設定することは脆弱性を解決するものではなく、チームに警告を発するだけで、応答時間が遅くなる可能性があります。",
            "AWS Configルールを使用することは、脆弱性の直接的な修復よりもコンプライアンスに焦点を当てており、全体的なセキュリティ体制を維持するのに役立ちますが、検出された脆弱性に対する自動応答の即時の必要性には対処していません。"
        ]
    },
    {
        "Question Number": "43",
        "Situation": "ある金融サービス会社がデータストレージをAWSに移行しています。彼らはデータ処理アプリケーションに対して高スループットと低遅延を提供できるソリューションを必要としています。また、会社は変動するワークロードに対応できるように簡単にスケールでき、災害復旧のために地域間での自動データ複製機能を提供するソリューションも必要としています。さらに、データが複数の仮想マシンからシームレスにアクセスできることを確保したいと考えています。",
        "Question": "高スループット、低遅延、スケーラビリティ、地域間複製の要件を最も満たすAWSストレージサービスの組み合わせはどれですか？",
        "Options": {
            "1": "Amazon EFSのプロビジョニングスループットと地域間複製を有効にしたもの。",
            "2": "データ管理とバージョニングのためのライフサイクルポリシーを有効にしたAmazon S3。",
            "3": "複数のアベイラビリティゾーン間でのデータ複製を行うAmazon FSx for Lustre。",
            "4": "S3 Transfer Accelerationと地域間複製を有効にしたAmazon S3。"
        },
        "Correct Answer": "複数のアベイラビリティゾーン間でのデータ複製を行うAmazon FSx for Lustre。",
        "Explanation": "Amazon FSx for Lustreは高スループットと低遅延に最適化されており、データ処理アプリケーションに適しています。データ複製をサポートしており、複数のアベイラビリティゾーン間での耐久性と可用性を向上させます。",
        "Other Options": [
            "S3 Transfer Accelerationと地域間複製を有効にしたAmazon S3は、主にオブジェクトストレージであり、データ処理アプリケーションに必要な低遅延を提供しないため、最適な選択ではありません。",
            "プロビジョニングスループットと地域間複製を有効にしたAmazon EFSはファイルストレージに適していますが、集中的なデータ処理ワークロードに必要な高スループットを提供できない可能性があります。",
            "データ管理とバージョニングのためのライフサイクルポリシーを有効にしたAmazon S3は、データ処理アプリケーションに対する高スループットと低遅延のパフォーマンス要件を満たしていません。"
        ]
    },
    {
        "Question Number": "44",
        "Situation": "ある会社が、さまざまなIoTデバイスからのイベントデータを取り込み処理するリアルタイムデータ処理アプリケーションを持っています。現在のアーキテクチャは、データ処理フレームワークを実行する複数のAmazon EC2インスタンスで構成されていますが、会社はコストを削減し、サーバーレスアーキテクチャに移行することで運用を簡素化したいと考えています。",
        "Question": "リアルタイム処理機能を維持しながら、このアプリケーションをサーバーレスアーキテクチャに移行するための最も効果的なアプローチは何ですか？",
        "Options": {
            "1": "AWS Batchにデータ処理を移行し、EC2スポットインスタンスを使用して受信データイベントを処理します。新しいイベントをBatchジョブに通知するためにAmazon SNSを使用します。",
            "2": "イベントデータ処理を行うためにサーバーレス機能を持つAmazon Elastic MapReduce (EMR)クラスターを実装します。結果を保存するためにAmazon DynamoDBを使用します。",
            "3": "AWS Lambda関数とAmazon Kinesis Data Streamsを使用して、リアルタイムでイベントデータを処理します。Kinesisストリームを構成して、各データイベントに対してLambda関数をトリガーします。",
            "4": "Amazon SQSを使用してイベントデータをバッファリングし、AWS EC2インスタンスのフリートを設定してSQSキューをポーリングして処理します。Auto Scalingを使用してEC2インスタンスを管理します。"
        },
        "Correct Answer": "AWS Lambda関数とAmazon Kinesis Data Streamsを使用して、リアルタイムでイベントデータを処理します。Kinesisストリームを構成して、各データイベントに対してLambda関数をトリガーします。",
        "Explanation": "AWS LambdaとAmazon Kinesis Data Streamsを使用することで、リアルタイムデータ処理を容易にスケールできる完全に管理されたサーバーレスアーキテクチャを提供します。このアプローチは、運用オーバーヘッドを最小限に抑え、受信イベントへの即時応答を確保します。",
        "Other Options": [
            "AWS BatchにEC2スポットインスタンスを使用して移行することは、EC2インスタンスの管理が必要であり、サーバーレスアーキテクチャを採用するという目標を達成しません。",
            "Amazon SQSを使用してEC2インスタンスのフリートを持つことは、インスタンスの継続的な管理が必要であり、真のサーバーレスアプローチの利点を活用せず、コストと運用の複雑さを増加させます。",
            "Amazon EMRクラスターを実装することは、大規模データセットを処理できますが、本質的にサーバーレスではなく、追加の管理と構成が必要であり、運用を簡素化するという目的に反します。"
        ]
    },
    {
        "Question Number": "45",
        "Situation": "ある金融サービス会社がリアルタイムでトランザクションを処理するサーバーレスアプリケーションを開発しています。ソリューションアーキテクトは、デプロイメントにAWS Serverless Application Model (AWS SAM)を使用することを決定しました。このアプリケーションは、複数のAWS Lambda関数、API Gateway、およびAWSリソースにアクセスするためのIAM権限を必要とします。アーキテクトは、デプロイメントプロセスが効率的で管理しやすいことを確保したいと考えています。",
        "Question": "アーキテクトがAWS SAMを使用してサーバーレスアプリケーションを定義しデプロイする際に、テンプレート内でクリーンで理解しやすい構造を維持するためには、どのアプローチが最適ですか？",
        "Options": {
            "1": "各AWS Lambda関数とその関連リソースを別々のAWS SAMテンプレートで定義し、各テンプレートを手動でデプロイしてアプリケーションを作成します。",
            "2": "AWS SAMを使用して、アプリケーションに必要なすべてのリソースを含む単一のAWS CloudFormationスタックを作成し、同じテンプレートファイル内で各リソースを定義します。",
            "3": "AWS SAMを利用して、各Lambda関数とそのリソースのために別々のCloudFormationスタックを作成し、出力とインポートでそれらをリンクします。",
            "4": "AWS SAMの組み込み機能を活用して、Lambda関数、API Gateway、および必要なIAMロールのための'Resources'セクションを使用して、サーバーレスアプリケーションを単一のテンプレートで定義します。"
        },
        "Correct Answer": "AWS SAMの組み込み機能を活用して、Lambda関数、API Gateway、および必要なIAMロールのための'Resources'セクションを使用して、サーバーレスアプリケーションを単一のテンプレートで定義します。",
        "Explanation": "このアプローチは、AWS SAMを使用してサーバーレスアプリケーション全体を単一のテンプレート内で管理し、明確な構造を提供し、Lambda関数やAPI Gateway統合などのSAMのリソースを使用してデプロイメントプロセスを簡素化します。",
        "Other Options": [
            "このオプションは、複雑なデプロイメントプロセスを引き起こし、複数のリソース間の依存関係や構成を管理するのが難しくなり、AWS SAMを使用する利点を無効にする可能性があります。",
            "各関数のために別々のテンプレートをデプロイすることは、デプロイメントプロセスを複雑にし、オーバーヘッドを増加させる可能性があり、AWS SAMが簡素化しようとするサーバーレスアーキテクチャには理想的ではありません。",
            "別々のスタックを作成することは、特定のシナリオでは有用ですが、異なるリソース間の相互作用を管理する際に複雑さを増し、より断片化されたデプロイメント体験をもたらす可能性があります。"
        ]
    },
    {
        "Question Number": "46",
        "Situation": "グローバルなeコマース企業が、世界中のユーザーに高い可用性と低遅延を確保するために、複数のAWSリージョンにウェブアプリケーションを展開しました。彼らは、AWS Global Acceleratorを実装して、各リージョンのアプリケーションロードバランサーに着信トラフィックを誘導しています。しかし、ピークトラフィック時にパフォーマンスが不安定であることに気づき、設定を最適化するための解決策を求めています。（2つ選択してください）",
        "Question": "次の構成のうち、アプリケーションのパフォーマンスと可用性を向上させるのに役立つものはどれですか？（2つ選択してください）",
        "Options": {
            "1": "AWS Shield Advancedを実装して、Global Acceleratorエンドポイントに対するDDoS保護を強化します。",
            "2": "Global Acceleratorを2つの静的IPアドレスで構成し、Anycast機能を有効にして、トラフィックを最寄りのリージョンにルーティングします。",
            "3": "Amazon CloudFrontをアプリケーションの前にキャッシングレイヤーとして利用し、グローバルユーザーの遅延を減少させます。",
            "4": "Global Acceleratorでヘルスチェックを設定し、すべてのリージョンで健康なエンドポイントにのみトラフィックが送信されるようにします。",
            "5": "各リージョンに追加のアプリケーションロードバランサーを展開し、ピーク時のトラフィックの増加に対応します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Global Acceleratorを2つの静的IPアドレスで構成し、Anycast機能を有効にして、トラフィックを最寄りのリージョンにルーティングします。",
            "Global Acceleratorでヘルスチェックを設定し、すべてのリージョンで健康なエンドポイントにのみトラフィックが送信されるようにします。"
        ],
        "Explanation": "Anycastを使用してGlobal Acceleratorを構成することで、トラフィックが最寄りの健康なエンドポイントにルーティングされ、パフォーマンスと可用性が向上します。さらに、ヘルスチェックを設定することで、ユーザーが不健康なエンドポイントに誘導されないようにし、アプリケーションの信頼性をさらに高めます。",
        "Other Options": [
            "追加のアプリケーションロードバランサーを展開することは、トラフィックの増加に対応するのに役立つかもしれませんが、Global Acceleratorが提供するルーティングとパフォーマンスの利点に直接対処するものではありません。",
            "AWS Shield Advancedを実装することでDDoS保護が提供されますが、Global Acceleratorを通じてトラフィックのルーティングやパフォーマンスを直接最適化するものではありません。",
            "Amazon CloudFrontを利用することで遅延を減少させることができますが、これは別のサービスであり、Global Acceleratorのルーティング機能の利点を活用するものではありません。"
        ]
    },
    {
        "Question Number": "47",
        "Situation": "金融サービス会社は、異なるリージョンで複数のVPCを運営しており、機密性の高い顧客データを管理しています。会社は、アプリケーション通信のためにこれらのVPC間で安全かつ効率的な接続を確立し、遅延とコストを最小限に抑える必要があります。ソリューションアーキテクトは、これらの要件を満たすための最適な接続オプションを評価する任務を負っています。",
        "Question": "複数のVPC間の接続ニーズに最も適した解決策はどれですか？安全性と低遅延を確保しながら。",
        "Options": {
            "1": "各VPCのペア間にVPN接続を設定し、暗号化された通信を確保しますが、管理が複雑になり、パフォーマンスの問題が発生する可能性があります。",
            "2": "AWS Direct Connectを利用して各VPCに専用接続を確立し、低遅延を提供しますが、かなりのインフラ投資と管理が必要です。",
            "3": "すべてのVPC間にVPCピアリング接続を作成し、各接続のルートテーブルを手動で構成して適切なトラフィックフローを確保しつつ、安全性を維持します。",
            "4": "AWS Transit Gatewayを使用してVPCを相互接続し、接続の集中管理を可能にし、すべてのVPC間でスケーラブルで安全な通信を実現します。"
        },
        "Correct Answer": "AWS Transit Gatewayを使用してVPCを相互接続し、接続の集中管理を可能にし、すべてのVPC間でスケーラブルで安全な通信を実現します。",
        "Explanation": "AWS Transit Gatewayは、複数のVPCを相互接続するプロセスを簡素化し、効率的なルーティングと管理を可能にする中央ハブを提供します。数千のVPCをサポートし、スケーラブルで安全な通信を可能にするため、このシナリオに最適な選択肢です。",
        "Other Options": [
            "VPCピアリング接続を作成すると、VPCの数が増えるにつれて複雑で面倒になり、管理のオーバーヘッドや潜在的なルーティングの問題が発生する可能性があります。",
            "各VPCのペア間にVPN接続を設定すると、各接続を個別に管理しなければならず、複雑さとパフォーマンスのボトルネックが大幅に増加します。",
            "AWS Direct Connectを利用するには、インフラへの大規模な投資と継続的な管理が必要であり、柔軟性と低コストが優先されるシナリオには適していません。"
        ]
    },
    {
        "Question Number": "48",
        "Situation": "グローバル企業がアプリケーションをAWSに移行し、AWS Organizationsを使用してマルチアカウント戦略を実装したいと考えています。目標は、セキュリティを強化し、請求を簡素化し、さまざまなチームや部門間でリソースを効果的に管理することです。",
        "Question": "組織のニーズを満たす安全で効率的なマルチアカウントAWS環境を作成するために、ソリューションアーキテクトが推奨すべき戦略はどれですか？",
        "Options": {
            "1": "各アプリケーションチームのために別々のアカウントを作成し、コスト管理のためにリソースタグ付けを適用します。",
            "2": "すべてのアカウントを単一のアカウントに統合し、請求とリソース管理を簡素化します。",
            "3": "すべてのアカウントに対して単一のIAMロールを使用し、組織全体で均一に権限を管理します。",
            "4": "AWS Organizationsでサービスコントロールポリシー（SCP）を実装し、アカウント間のガバナンスを強化します。"
        },
        "Correct Answer": "AWS Organizationsでサービスコントロールポリシー（SCP）を実装し、アカウント間のガバナンスを強化します。",
        "Explanation": "サービスコントロールポリシー（SCP）を実装することで、組織は複数のアカウントにわたる権限のガードレールを定義でき、アカウントが特定の機能に必要なAWSサービスにのみアクセスできるようにします。これにより、セキュリティとコンプライアンスが強化され、集中管理が可能になります。",
        "Other Options": [
            "すべてのアカウントを単一のアカウントに統合すると、マルチアカウント戦略から得られる隔離とセキュリティの利点が失われ、爆風半径の制限やより詳細なアクセス制御ができなくなります。",
            "すべてのアカウントに対して単一のIAMロールを使用することは、過剰なアクセス権をもたらす可能性があり、特定の役割やチームに合わせた個別のIAMポリシーの利点を活用できないため、ベストプラクティスではありません。",
            "各アプリケーションチームのために別々のアカウントを作成し、リソースタグ付けを適用するだけでは、ガバナンスやセキュリティポリシーを効果的に強制することはできません。タグ付けはコスト管理に役立ちますが、SCPが提供する必要な制御を提供しません。"
        ]
    },
    {
        "Question Number": "49",
        "Situation": "金融サービス会社がAWS上に重要なアプリケーションを展開しており、断続的な障害が発生しています。ソリューションアーキテクトは、アプリケーションの信頼性を向上させ、一貫したパフォーマンスと可用性を確保する任務を負っています。現在のアーキテクチャには、複数のアベイラビリティゾーンにわたるAuto Scaling Group内のEC2インスタンスが含まれています。アーキテクトは、信頼性を向上させるための戦略を推奨する必要があります。",
        "Question": "信頼性を向上させるためにアーキテクトが実施すべき戦略はどれですか？（2つ選択してください）",
        "Options": {
            "1": "AWS Lambda関数を使用して非同期タスクを処理し、メインアプリケーションの負荷を軽減します。",
            "2": "Amazon RDSをMulti-AZ構成で展開し、データベース層の高可用性を提供します。",
            "3": "AWS Global Acceleratorを実装してトラフィックをルーティングし、地域間の可用性を向上させます。",
            "4": "Amazon Route 53のヘルスチェックを設定して、アプリケーションのエンドポイントを監視し、フェイルオーバーをトリガーします。",
            "5": "Amazon CloudFrontを設定して静的コンテンツをキャッシュし、オリジンサーバーの負荷を軽減します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon RDSをMulti-AZ構成で展開し、データベース層の高可用性を提供します。",
            "Amazon Route 53のヘルスチェックを設定して、アプリケーションのエンドポイントを監視し、フェイルオーバーをトリガーします。"
        ],
        "Explanation": "Amazon RDSをMulti-AZ構成で展開することで、プライマリインスタンスが故障した場合にスタンバイインスタンスが利用可能になり、データベースの信頼性が向上します。また、Amazon Route 53のヘルスチェックを設定することで、アプリケーションのエンドポイントを自動的に監視し、障害が発生した場合に健康なインスタンスへのフェイルオーバーを促進し、さらなる信頼性の向上が図れます。",
        "Other Options": [
            "AWS Global Acceleratorを実装することでパフォーマンスが向上し、レイテンシが低減する可能性がありますが、アプリケーション自体の信頼性を直接向上させるものではありません。",
            "Amazon CloudFrontを設定することはキャッシュに有益でパフォーマンスを向上させることができますが、アプリケーションとデータベースに関連するコアの信頼性の懸念には対処していません。",
            "AWS Lambda関数を使用することでタスクのオフロードが可能ですが、メインアプリケーションの信頼性を本質的に向上させるものではありません。これは別のサービスです。"
        ]
    },
    {
        "Question Number": "50",
        "Situation": "金融サービス会社がアプリケーションをAWSに移行しており、データベースの認証情報、APIキー、その他の秘密情報を管理するための信頼性の高い方法が必要です。同社は、既存のAWSサービスとシームレスに統合され、アクセス制御を提供し、アプリケーションコードにハードコーディングせずに秘密情報の安全な保存と取得を確保するソリューションを必要としています。（2つ選択してください）",
        "Question": "秘密情報管理の要件を満たすためにソリューションアーキテクトが実施すべきソリューションはどれですか？",
        "Options": {
            "1": "AWS Systems Manager Parameter Storeを暗号化付きで実装し、秘密情報とパラメータを保存します。",
            "2": "サーバーサイド暗号化を有効にしたAmazon S3に機密情報を保存します。",
            "3": "AWS Secrets Managerを使用して、すべての機密情報を安全に保存および管理します。",
            "4": "IAMロールを使用して、アクセスの容易さのために認証情報をアプリケーションコードに直接埋め込みます。",
            "5": "EC2インスタンス上に自己ホスト型のボールトソリューションを展開して秘密情報を管理します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS Secrets Managerを使用して、すべての機密情報を安全に保存および管理します。",
            "AWS Systems Manager Parameter Storeを暗号化付きで実装し、秘密情報とパラメータを保存します。"
        ],
        "Explanation": "AWS Secrets Managerは、さまざまなAWSサービスとの組み込み統合を備えた機密情報の安全な保存と管理を可能にし、AWS Systems Manager Parameter Storeは、構成データと秘密情報を保存するためのスケーラブルなソリューションを提供し、暗号化のオプションがあります。両方のサービスは、機密情報の安全なアクセスと管理に関する会社の要件を満たしています。",
        "Other Options": [
            "暗号化があっても、Amazon S3に機密情報を保存することは、Secrets ManagerやParameter Storeと同じレベルのアクセス制御や管理機能を提供せず、秘密情報管理には適していません。",
            "認証情報をアプリケーションコードに直接埋め込むことはセキュリティを損なうものであり、秘密情報の容易なローテーションや管理を許可せず、ベストプラクティスに反します。",
            "自己ホスト型のボールトソリューションは運用上のオーバーヘッドと複雑さを追加し、AWSが提供する堅牢な秘密情報管理機能があるため、必ずしも必要ではありません。"
        ]
    },
    {
        "Question Number": "51",
        "Situation": "金融サービス会社は、顧客取引を処理するオンプレミスでホストされたレガシーアプリケーションに依存しています。このアプリケーションは日常業務にとって重要ですが、スケーラビリティと機敏性に欠けています。経営陣は、パフォーマンスを向上させ、運用コストを削減するためにアプリケーションをAWSに移行することを決定しました。既存のサービスへの影響を最小限に抑えながら、アプリケーションの近代化を可能にするソリューションを求めています。",
        "Question": "アプリケーションを効果的に近代化し、スムーズな移行を確保するためにソリューションアーキテクトが推奨すべき戦略はどれですか？",
        "Options": {
            "1": "アプリケーション全体をAmazon EC2インスタンスにリフトアンドシフトし、必要に応じてAWSサービスを活用するためにアプリケーションを徐々にリファクタリングします。",
            "2": "AWS Lambdaとマイクロサービスアーキテクチャを使用してアプリケーション全体を再構築し、最初からサーバーレス機能を完全に活用します。",
            "3": "データベースをAmazon RDSに移行し、レガシーアプリケーションをオンプレミスに維持しながら、徐々にクラウドネイティブソリューションに移行します。",
            "4": "アプリケーションをコンテナ化し、Amazon ECSに展開し、その後、スケーラビリティを向上させるためにマイクロサービスにリファクタリングします。"
        },
        "Correct Answer": "アプリケーションをコンテナ化し、Amazon ECSに展開し、その後、スケーラビリティを向上させるためにマイクロサービスにリファクタリングします。",
        "Explanation": "アプリケーションをコンテナ化することで、リソースの利用効率が向上し、依存関係の管理が容易になります。Amazon ECSを使用することで、会社はコンテナを効果的にオーケストレーションでき、マイクロサービスへの徐々のリファクタリングにより、完全なオーバーホールなしで段階的な近代化が可能になり、影響を最小限に抑えます。",
        "Other Options": [
            "リフトアンドシフトは、クラウドネイティブ機能の最良の利点を提供しない可能性があり、アプリケーションを近代化せずに既存の非効率を継続することがよくあります。",
            "アプリケーション全体をゼロから再構築することはリスクが高く、リソースを多く消費するアプローチであり、長時間のダウンタイムや高コストを招く可能性があり、即時の利益を保証するものではありません。",
            "レガシーアプリケーションをオンプレミスに維持しながらデータベースを移行することは、クラウド機能を効果的に活用せず、レガシー依存関係を保持することで近代化プロセスを複雑にする可能性があります。"
        ]
    },
    {
        "Question Number": "52",
        "Situation": "金融サービス会社がAWS上でマイクロサービスアーキテクチャを設計しています。ソリューションアーキテクトは、さまざまなサービスがサービスエンドポイントを使用して安全かつ効率的に通信できることを確認する必要があります。会社には、内部サービスへのプライベート接続の使用を規定する厳格なコンプライアンス要件があります。",
        "Question": "コンプライアンス要件を遵守しながら、安全なサービス統合を可能にするために、ソリューションアーキテクトはどの構成を実装すべきですか？（2つ選択してください）",
        "Options": {
            "1": "サービス間の直接接続を可能にするために、VPC間でVPCピアリングを構成し、コンプライアンスを維持します。",
            "2": "複数のVPCとオンプレミスネットワークを接続するためにAWS Transit Gatewayを設定し、マイクロサービスの安全な通信を促進します。",
            "3": "AWS PrivateLinkを使用してサービスのプライベートエンドポイントを作成し、トラフィックがパブリックインターネットを通過しないようにします。",
            "4": "Amazon API Gatewayを利用してウェブインターフェースでサービスを公開し、外部クライアントによる簡単なアクセスを可能にします。",
            "5": "AWS Direct Connectを実装して、オンプレミスデータセンターからAWSへの専用ネットワーク接続を確立します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "AWS PrivateLinkを使用してサービスのプライベートエンドポイントを作成し、トラフィックがパブリックインターネットを通過しないようにします。",
            "複数のVPCとオンプレミスネットワークを接続するためにAWS Transit Gatewayを設定し、マイクロサービスの安全な通信を促進します。"
        ],
        "Explanation": "AWS PrivateLinkはVPCとサービス間のプライベート接続を提供し、データがAWSネットワークを離れないことを保証することで、コンプライアンス要件を満たします。AWS Transit Gatewayは、複数のVPCとオンプレミスネットワークを安全に接続するプロセスを簡素化し、マイクロサービスアーキテクチャにおけるサービス間通信の管理を容易にします。",
        "Other Options": [
            "VPCピアリングは直接接続の有効なオプションですが、VPCの数が増えると管理が複雑になる可能性があり、PrivateLinkほどコンプライアンスに対処できません。",
            "Amazon API Gatewayはサービスへの公開アクセスを目的として設計されており、このシナリオでのプライベート接続とコンプライアンスの要件に反します。",
            "AWS Direct Connectは専用接続に役立ちますが、VPCアーキテクチャ内でのサービス間統合にはPrivateLinkやTransit Gatewayほど効果的ではありません。"
        ]
    },
    {
        "Question Number": "53",
        "Situation": "金融サービス会社がAmazon RDS for PostgreSQLを使用して取引データベースを管理しています。このデータベースには敏感な顧客情報が含まれており、日常業務にとって重要です。会社は、災害復旧とコンプライアンスのためにデータが複数のリージョンに複製されることを確保する必要があります。RTOは1時間、RPOは10分を要求しています。",
        "Question": "会社の要件を効果的に満たすために、ソリューションアーキテクトはどのオプションを実装すべきですか？（2つ選択してください）",
        "Options": {
            "1": "同じリージョンにRDSインスタンスのリードレプリカを作成して、迅速な復旧を可能にします。",
            "2": "RDSインスタンスの自動バックアップを別のリージョンのS3バケットに10分ごとにスケジュールします。",
            "3": "AWS Database Migration Service (DMS)を実装して、別のリージョンのターゲットデータベースにデータを継続的に複製します。",
            "4": "Amazon RDSスナップショットを使用して手動バックアップを取り、1時間ごとに別のリージョンにコピーします。",
            "5": "Amazon RDSクロスリージョンレプリケーションを有効にして、データベースの変更を別のリージョンに複製します。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "Amazon RDSクロスリージョンレプリケーションを有効にして、データベースの変更を別のリージョンに複製します。",
            "AWS Database Migration Service (DMS)を実装して、別のリージョンのターゲットデータベースにデータを継続的に複製します。"
        ],
        "Explanation": "Amazon RDSクロスリージョンレプリケーションを有効にすることで、別のリージョンへの変更のほぼリアルタイムの複製が可能になり、RPO要件の10分を満たします。さらに、AWS DMSを使用した継続的な複製は、ターゲットリージョンのデータが常に最新であることを確保する効果的な方法を提供し、災害復旧計画にとって重要です。",
        "Other Options": [
            "同じリージョンにリードレプリカを作成することは、クロスリージョンの災害復旧を提供せず、別のリージョンへのデータ複製の要件を満たしません。",
            "10分ごとのS3への自動バックアップはRPOを満たす可能性がありますが、手動復元プロセスが必要なため、即時フェイルオーバーを許可せず、RTO要件を満たしません。",
            "1時間ごとの手動バックアップのためにAmazon RDSスナップショットを使用することは、スナップショット間でデータ変更が失われる可能性があるため、10分のRPO要件を満たしません。"
        ]
    },
    {
        "Question Number": "54",
        "Situation": "ある会社がAWS上で高可用性を必要とする重要なアプリケーションを運用しています。現在、1つのAWSリージョンにプライマリデータベースがあり、障害が発生した場合に別のリージョンにあるセカンダリデータベースへの自動フェイルオーバー戦略を実装したいと考えています。",
        "Question": "ダウンタイムを最小限に抑えながら、データベースの最も信頼性の高い自動フェイルオーバーを提供するアプローチはどれですか？",
        "Options": {
            "1": "クロスリージョンフェイルオーバー機能のためにAmazon Aurora Global Databaseを利用します。",
            "2": "自動フェイルオーバーのためにAmazon RDSをMulti-AZデプロイメントで使用します。",
            "3": "別のリージョンにリードレプリカを実装し、障害時に昇格させます。",
            "4": "データを別のリージョンに継続的に複製するためにデータベース移行サービスを設定します。"
        },
        "Correct Answer": "クロスリージョンフェイルオーバー機能のためにAmazon Aurora Global Databaseを利用します。",
        "Explanation": "Amazon Aurora Global Databaseはクロスリージョンレプリケーションのために設計されており、低遅延の読み取りと自動フェイルオーバー機能を提供します。これにより、ダウンタイムを最小限に抑え、高可用性を確保するための最も信頼性の高いオプションとなります。",
        "Other Options": [
            "Amazon RDSのMulti-AZデプロイメントは、単一リージョン内での自動フェイルオーバーを提供しますが、別のリージョンへのフェイルオーバーをサポートしていないため、クロスリージョンの高可用性には不適切です。",
            "別のリージョンにリードレプリカを実装するには、プライマリに昇格させるための手動介入が必要であり、フェイルオーバー中に追加のダウンタイムが発生する可能性があります。",
            "データを継続的に複製するためにデータベース移行サービスを設定することは実行可能なオプションですが、複雑さとフェイルオーバーの遅延を引き起こす可能性があり、高可用性の要件を満たさないかもしれません。"
        ]
    },
    {
        "Question Number": "55",
        "Situation": "金融サービス会社がAWS上でいくつかの重要なアプリケーションを運用しています。彼らはアプリケーションが最適に機能していることを確認し、潜在的な問題が迅速に検出され解決されることを必要としています。会社には厳格なコンプライアンス要件があり、すべての操作に対して詳細なログ記録とアラート機構が必要です。ITチームは、手動介入を最小限に抑えながら、システムのパフォーマンスと健康状態に対する包括的な可視性を確保する監視戦略を実装したいと考えています。",
        "Question": "次のうち、会社のアプリケーションに対して最も効果的な監視およびアラートシステムを、最小限の手動監視で提供するソリューションはどれですか？",
        "Options": {
            "1": "AWS CloudTrailを使用してAPIコールを追跡し、Amazon S3にログを記録します。AWS Lambda関数を設定してログを分析し、事前定義された基準に基づいてアラートを送信します。",
            "2": "Amazon CloudWatch Service Lensを活用してアプリケーションのパフォーマンスを監視し、自動的に異常を検出し、AWS Configと統合してコンプライアンスを確保し、構成変更に対してアラートを送信します。",
            "3": "AWS X-Rayを実装してアプリケーション内のリクエストをトレースし、パフォーマンスのボトルネックを可視化し、Amazon SNSを設定してX-Rayの異常に基づいて通知を送信します。",
            "4": "Amazon CloudWatchを設定してカスタムメトリクスを追跡し、パフォーマンスの閾値に対してアラームを作成します。CloudWatch Logsを使用してアプリケーションログを集約し、特定のログパターンに対してアラートを設定します。"
        },
        "Correct Answer": "Amazon CloudWatch Service Lensを活用してアプリケーションのパフォーマンスを監視し、自動的に異常を検出し、AWS Configと統合してコンプライアンスを確保し、構成変更に対してアラートを送信します。",
        "Explanation": "Amazon CloudWatch Service Lensは、アプリケーションのパフォーマンスを監視し、異常を自動的に検出し、コンプライアンス管理のためにAWS Configと統合する包括的な監視ソリューションを提供し、手動監視を最小限に抑えるための最も効率的な選択肢です。",
        "Other Options": [
            "Amazon CloudWatchをカスタムメトリクスとアラームの設定には、いくつかの手動設定とメンテナンスが必要であり、Service Lensのような完全に統合されたソリューションよりも効率が劣ります。",
            "AWS X-Rayはパフォーマンスの問題をトレースするのに優れていますが、会社が必要とするコンプライアンス要件に対する包括的な監視とアラートを提供しません。",
            "AWS CloudTrailを使用すると、主にAPIコールの追跡に焦点を当てており、アプリケーションのパフォーマンスを監視することはできず、Lambdaがログを処理できますが、追加の設定が必要であり、直接的な監視機能を提供しません。"
        ]
    },
    {
        "Question Number": "56",
        "Situation": "金融サービス組織はAWS IAMを使用して、従業員と第三者ベンダーのアクセスを管理しています。組織はセキュリティポリシーの厳守を必要としており、ユーザーが特定の役割に必要なリソースにのみアクセスできるようにする必要があります。さらに、組織は契約者のために一時的なアクセスを実装したいと考えており、プロジェクトが完了すると自動的に期限切れになります。",
        "Question": "次のうち、ソリューションアーキテクトが組織の要件を満たすために実装すべきIAMソリューションはどれですか？",
        "Options": {
            "1": "IAMグループを利用して、従業員と契約者をアクセス要件に基づいてグループ化し、契約者が業務時間中のみリソースにアクセスできるようにアクセスキーを作成します。",
            "2": "各従業員と契約者のためにIAMユーザーアカウントを作成し、各ユーザーにユニークなパスワードを割り当て、特定のリソースへのアクセスを許可するポリシーを添付します。プロジェクト完了後に契約者アカウントを無効化するためにスケジュールされたLambda関数を使用します。",
            "3": "各特定の職務機能に対して対応するポリシーを持つIAMロールを作成します。ユーザーを職務要件に基づいてこれらのロールに割り当てます。契約者のために、プロジェクトのタイムラインに合わせた最大セッション期間を持つロールを作成し、一時的にそのロールを引き受けることを許可する信頼関係を作成します。",
            "4": "従業員と契約者のための中央ユーザーグループに添付されたIAMポリシーを実装します。リソースに割り当てられたタグに基づいて権限を設定し、契約者が適切なタグを持つリソースにのみアクセスできるようにします。"
        },
        "Correct Answer": "各特定の職務機能に対して対応するポリシーを持つIAMロールを作成します。ユーザーを職務要件に基づいてこれらのロールに割り当てます。契約者のために、プロジェクトのタイムラインに合わせた最大セッション期間を持つロールを作成し、一時的にそのロールを引き受けることを許可する信頼関係を作成します。",
        "Explanation": "各職務機能に対してIAMロールを作成することで、権限を正確に制御できます。契約者が一時的にロールを引き受けることを許可することで、セキュリティのベストプラクティスに従いながら、アクセスが彼らのニーズに合わせて調整されることを保証できます。さらに、契約者ロールの最大セッション期間を設定することで、アクセスが自動的にプロジェクトのタイムラインに制限されることを確保します。",
        "Other Options": [
            "このオプションは不正解です。契約者のためにIAMユーザーアカウントを使用し、自動無効化プロセスがない場合、アカウントが適切に管理されないとセキュリティリスクが生じる可能性があります。スケジュールされたLambda関数は複雑さを加え、セキュリティのギャップを残す可能性があります。",
            "このオプションは不正解です。IAMグループを使用すると、一時的なアクセスに必要な細かい制御が提供されません。契約者のためのアクセスキーは、ロールベースのアクセスよりも安全性が低く、自動的に期限切れにならない可能性があり、悪用される可能性があります。",
            "このオプションは不正解です。タグに基づくIAMポリシーを使用すると、時間に敏感な方法でアクセスを制限することは本質的にできません。契約者のアクセスが一時的であることを保証するための必要なメカニズムを提供しません。"
        ]
    },
    {
        "Question Number": "57",
        "Situation": "AWS上にホストされている医療アプリケーションがあり、Amazon S3に敏感な患者データを保存し、API Gatewayを使用してバックエンドサービスにアクセスしています。このアプリケーションはHIPAA規制に準拠する必要があり、AWSサービスへの安全なアクセスを確保しながらデータをプライベートに保つ必要があります。チームは公共インターネットへの露出を最小限に抑え、AWSサービスへのすべての通信が安全でプライベートであることを確保したいと考えています。アーキテクチャにはすでに高可用性のために構成された複数のサブネットを持つ仮想プライベートクラウド（VPC）が含まれています。",
        "Question": "この医療アプリケーションのHIPAAコンプライアンスを遵守しながら、Amazon S3へのプライベート接続を確保するための最も効果的なAWSサービス構成はどれですか？",
        "Options": {
            "1": "VPCとオンプレミスネットワーク間にVPN接続を設定し、すべてのS3トラフィックをVPN経由でルーティングしてセキュリティを強化します。",
            "2": "パブリックサブネットにNAT Gatewayを展開し、すべてのS3トラフィックをそれを通じてルーティングしてアプリケーションアーキテクチャをプライベートに保ちます。",
            "3": "Amazon S3のゲートウェイエンドポイントを作成し、プライベートサブネットに関連付けられたルートテーブルを更新して、S3行きのトラフィックをエンドポイントを通じてルーティングします。",
            "4": "Amazon S3のインターフェースエンドポイントを構成し、プライベートサブネット内のアプリケーションインスタンスへのアクセスを制御するセキュリティグループにリンクします。"
        },
        "Correct Answer": "Amazon S3のゲートウェイエンドポイントを作成し、プライベートサブネットに関連付けられたルートテーブルを更新して、S3行きのトラフィックをエンドポイントを通じてルーティングします。",
        "Explanation": "Amazon S3のゲートウェイエンドポイントを作成することで、公共インターネットを経由せずにVPC内からS3へのプライベート接続が可能になり、HIPAAコンプライアンスにとって重要です。この構成はルーティングを簡素化し、S3への公共アクセスを排除することでセキュリティを強化します。",
        "Other Options": [
            "パブリックサブネットにNAT Gatewayを展開すると、Amazon S3への必要なプライベート接続を提供せず、トラフィックが公共インターネットにさらされるため、HIPAA規制に準拠しません。",
            "Amazon S3のインターフェースエンドポイントを構成することは無効です。S3はゲートウェイエンドポイントのみをサポートしており、このサービスのために特に設計されており、必要なプライベート接続を提供します。",
            "VPN接続を設定することは、S3へのアクセスに最適なソリューションではなく、不要な複雑さとレイテンシを引き起こします。ゲートウェイエンドポイントは、VPC内からS3に接続するためのより効率的でコンプライアンスに準拠した方法です。"
        ]
    },
    {
        "Question Number": "58",
        "Situation": "セキュリティチームは、AWSワークロードの安全性を確保する責任があります。彼らは、Amazon Inspectorを活用してリソースの脆弱性や意図しない露出を継続的に監視したいと考えています。チームは特にAmazon EC2インスタンスとAWS Lambda関数に焦点を当てています。",
        "Question": "セキュリティチームがAmazon Inspectorの効果を最大化するために実装すべき設定はどれですか？（2つ選択）",
        "Options": {
            "1": "オーバーヘッドを減らすために、Amazon Lambda関数の自動スキャンを無効にする。",
            "2": "すべての稼働中のAmazon EC2インスタンスにAmazon Inspectorエージェントをインストールする。",
            "3": "Amazon InspectorをAWS CloudTrailとリンクさせて、すべての発見の詳細なログを取得する。",
            "4": "Amazon Inspectorを使用して、Amazon EC2インスタンスの定期的な評価をスケジュールする。",
            "5": "Amazon Inspectorを設定して、発見を自動的にAWS Security Hubに送信する。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "すべての稼働中のAmazon EC2インスタンスにAmazon Inspectorエージェントをインストールする。",
            "Amazon Inspectorを使用して、Amazon EC2インスタンスの定期的な評価をスケジュールする。"
        ],
        "Explanation": "Amazon EC2インスタンスのセキュリティを完全に評価するためには、Amazon Inspectorエージェントのインストールが不可欠です。これにより、潜在的な脆弱性の包括的な分析が可能になります。さらに、定期的な評価をスケジュールすることで、チームはリソースのセキュリティ姿勢に対して警戒を保ち、特定された問題に迅速に対処できます。",
        "Other Options": [
            "AWS Lambda関数の自動スキャンを無効にすると、脆弱性検出の効果が低下し、安全な環境を維持するという目的に反します。",
            "Amazon InspectorをAWS CloudTrailとリンクさせることで、いくつかのログの利点が得られますが、スキャンプロセスや脆弱性管理の効果を直接向上させるものではありません。",
            "Amazon InspectorをAWS Security Hubに発見を送信するように設定することは有益ですが、EC2およびLambda関数の脆弱性の初期評価や監視に直接寄与するものではありません。"
        ]
    },
    {
        "Question Number": "59",
        "Situation": "ある金融サービス会社は、取引を処理するウェブアプリケーションの需要が増加しています。アプリケーションは現在、単一のAmazon EC2インスタンスにデプロイされており、ピーク取引時に負荷を処理するのに苦労しています。会社は、既存のアーキテクチャに最小限の変更を加えながら、高可用性とパフォーマンスを確保したいと考えています。",
        "Question": "アプリケーションのスケーラビリティと信頼性を向上させるために、ソリューションアーキテクトが実装すべき戦略はどれですか？",
        "Options": {
            "1": "アプリケーションをAWS Lambdaに移行して取引処理を行い、リクエストルーティングにAmazon API Gatewayを使用する。",
            "2": "EC2インスタンスをより大きなインスタンスタイプにアップグレードし、メインデータベースからの読み取りクエリをオフロードするためにAmazon RDSリードレプリカを設定する。",
            "3": "負荷を分散するために単一の追加EC2インスタンスをデプロイし、Route 53を設定してDNSベースのトラフィック分配を行う。",
            "4": "EC2インスタンスのためにAuto Scalingグループを実装し、Elastic Load Balancerを使用して、インスタンス間で受信トラフィックを均等に分配する。"
        },
        "Correct Answer": "EC2インスタンスのためにAuto Scalingグループを実装し、Elastic Load Balancerを使用して、インスタンス間で受信トラフィックを均等に分配する。",
        "Explanation": "Auto ScalingグループとElastic Load Balancerを組み合わせて使用することで、アプリケーションは需要に応じて自動的にキャパシティを調整し、スケーラビリティと高可用性を確保します。この設定により、アプリケーションは変動する負荷を効率的に処理できます。",
        "Other Options": [
            "AWS Lambdaに移行することは、アプリケーションアーキテクチャに大幅な変更を必要とし、特にアプリケーションがステートフルであるか持続的な接続を必要とする場合、すべての取引処理シナリオに適しているわけではありません。",
            "より大きなEC2インスタンスにアップグレードすることは一時的な救済を提供するかもしれませんが、ピーク時のスケーラビリティの懸念には対処せず、単一のインスタンスは依然としてボトルネックになる可能性があり、冗長性を提供しません。",
            "単一の追加EC2インスタンスをデプロイすることで負荷分散はある程度改善されますが、Auto Scalingグループの動的スケーリング機能が欠如しており、高可用性を保証するものではありません。両方のインスタンスが失敗する可能性があります。"
        ]
    },
    {
        "Question Number": "60",
        "Situation": "ある会社は、さまざまなワークロードを処理するために複数のEC2インスタンスを管理するAuto Scalingグループを持っています。彼らは、メンテナンスのためにインスタンスをAuto Scalingグループから切り離したいと考えていますが、残りのインスタンスが希望するキャパシティを維持し続けることを確保したいと考えています。また、インスタンスが関連するロードバランサーから適切に削除されることも確認したいと考えています。",
        "Question": "インスタンスをAuto Scalingグループから切り離し、ロードバランサーから登録解除されることを確保するための正しいアプローチは何ですか？",
        "Options": {
            "1": "DetachInstances APIを使用してインスタンスをAuto Scalingグループから削除し、ロードバランサーも切り離されることを確認する。",
            "2": "DetachLoadBalancers APIを使用してAuto Scalingグループからインスタンスを切り離し、ロードバランサーから削除されることを確認する。",
            "3": "スケーリングプロセスを一時停止し、手動でインスタンスをAuto Scalingグループから切り離し、その後ロードバランサーから登録解除する。",
            "4": "DetachInstances APIを使用してインスタンスを切り離すと、ロードバランサーの登録解除も自動的に処理される。"
        },
        "Correct Answer": "DetachInstances APIを使用してインスタンスを切り離すと、ロードバランサーの登録解除も自動的に処理される。",
        "Explanation": "DetachInstances APIを使用することで、インスタンスはAuto Scalingグループから削除され、関連するロードバランサーからも登録解除されるため、スケーリンググループは希望するキャパシティを維持します。",
        "Other Options": [
            "このオプションは、DetachInstances APIを使用することを誤って示唆し、ロードバランサーが切り離される必要があることを述べていますが、これはAPIによって自動的に処理されます。",
            "スケーリングプロセスを一時停止することでインスタンスの置き換えを防ぐことはできますが、ロードバランサーからの自動登録解除には対処しておらず、このアプローチは効率的ではありません。",
            "DetachLoadBalancers APIはClassic Load Balancerのみを切り離し、Auto Scalingグループからインスタンスを切り離すことには対処していないため、このオプションは無効です。"
        ]
    },
    {
        "Question Number": "61",
        "Situation": "ある金融サービス会社がデータウェアハウジングのニーズにAmazon Redshiftを使用しています。複数のユーザーが複雑な分析クエリを実行するピーク時にパフォーマンスの問題が発生しています。会社のデータアナリストは、クエリの実行に長い待ち時間がかかるとしばしば不満を述べています。アーキテクチャチームは、短いクエリが大幅な遅延なしに実行できるようにしながら、クエリパフォーマンスを最適化するオプションを検討しています。",
        "Question": "Amazon Redshiftで同時実行性を管理しながらクエリパフォーマンスを最も効果的に最適化する方法は何ですか？",
        "Options": {
            "1": "Amazon Redshiftのワークロード管理を無効にして、すべてのクエリが制限なしに実行できるようにします。",
            "2": "wlm_query_slot_countを増やして、より多くの同時クエリを許可し、異なるクエリタイプに適切なサービスクラスを設定します。",
            "3": "クエリスケジューリングシステムを実装して、長時間実行されるクエリがピーク時に短いクエリの実行に影響を与えないようにします。",
            "4": "Redshiftクラスターのノード数を減らして、同時クエリ間のリソース競合を減少させます。"
        },
        "Correct Answer": "wlm_query_slot_countを増やして、より多くの同時クエリを許可し、異なるクエリタイプに適切なサービスクラスを設定します。",
        "Explanation": "wlm_query_slot_countを増やすことで、より多くのクエリが同時に実行できるようになり、ピーク時の全体的なパフォーマンスが向上します。サービスクラスを適切に設定することで、実行優先順位がさらに最適化され、短いクエリが長時間実行されるクエリよりも優先されるようになります。",
        "Other Options": [
            "Redshiftクラスターのノード数を減らすと、利用可能なリソースが制限され、パフォーマンスの問題が悪化する可能性があります。",
            "クエリスケジューリングシステムを実装することはAmazon Redshiftの直接的な機能ではなく、同時実行性の問題の根本原因に対処せずに不必要な複雑さを導入する可能性があります。",
            "ワークロード管理を無効にすると、クエリ実行を管理するための制御がなくなり、特にピーク時にすべてのクエリの待ち時間が長くなる可能性があります。"
        ]
    },
    {
        "Question Number": "62",
        "Situation": "データ分析チームは現在、Amazon EMRとApache Sparkを使用して大規模なデータセットを処理しています。彼らはコストを削減しながら高いパフォーマンスを維持するために、処理ワークフローを最適化したいと考えています。チームは頻繁にAmazon S3からデータを取得し、さらに分析のために中間結果を保存する必要があります。彼らはコストを管理しながらEMRクラスターの効率を改善するオプションを検討しています。",
        "Question": "Amazon EMRを使用しているチームのデータ処理コストを最適化するために、ソリューションアーキテクトはどの戦略を推奨すべきですか？",
        "Options": {
            "1": "コストの変動に関係なく可用性と信頼性を確保するために、オンデマンドインスタンスのみでEMRクラスターを起動し、マスターノードにはリザーブドインスタンスを使用します。",
            "2": "すべての中間ストレージニーズにAmazon S3を利用し、データ転送コストを最小限に抑えるためにデータシャッフルなしで単一ステージでデータを処理するようにEMRジョブを構成します。",
            "3": "コストを効果的に管理しながら、データが処理可能であることを確保するために、オフピーク時のみEMRクラスターを実行するようにスケジュールします。",
            "4": "EMRクラスターにスポットインスタンスを使用して、非クリティカルなワークロードのための低価格を活用し、ワークロードの需要に基づいてクラスターを自動的にスケールインおよびスケールアウトするように構成します。"
        },
        "Correct Answer": "EMRクラスターにスポットインスタンスを使用して、非クリティカルなワークロードのための低価格を活用し、ワークロードの需要に基づいてクラスターを自動的にスケールインおよびスケールアウトするように構成します。",
        "Explanation": "スポットインスタンスを使用することで、チームはEMRクラスターに関連するコストを大幅に削減しながら、ワークロードの要件に応じてスケールする能力を維持できます。このアプローチは、停止を許容できる非クリティカルなワークロードに最適です。需要に基づいてクラスターを自動的にスケールすることで、コストがさらに最適化されます。",
        "Other Options": [
            "オンデマンドインスタンスのみでEMRクラスターを起動すると、信頼性は確保されますが、コストを効果的に最適化することはできません。オンデマンドインスタンスはスポットインスタンスよりも高価です。",
            "すべての中間ストレージにAmazon S3を利用することは良いプラクティスですが、データを単一ステージでシャッフルなしに処理することは、複雑なワークフローには常に実現可能ではなく、リソースの非効率的な利用につながる可能性があります。",
            "EMRクラスターをオフピーク時に実行するようにスケジュールすることはコスト管理に役立ちますが、リアルタイムまたはほぼリアルタイムでデータ処理が必要な場合には、すべてのワークロードにとって実用的ではないかもしれません。"
        ]
    },
    {
        "Question Number": "63",
        "Situation": "ある金融サービス会社がスケーラビリティを向上させ、コストを削減するためにデータストレージをAWSに移行しています。彼らは、大量の非構造化データを保存しながら、耐久性とアクセスの容易さを確保できるソリューションを必要としています。さらに、既存のワークフローとシームレスに統合されるバックアップ戦略を実装する予定です。ソリューションアーキテクトは、これらの要件を満たすAWSストレージサービスを推奨するよう求められています。（2つ選択）",
        "Question": "会社のニーズに対してソリューションアーキテクトが推奨すべきAWSストレージソリューションはどれですか？",
        "Options": {
            "1": "耐久性のあるオブジェクトストレージとバックアップソリューションのためのAmazon S3、データを管理するためのライフサイクルポリシー付き。",
            "2": "SMBプロトコルのサポートが必要なWindowsベースのアプリケーションをホストするためのAmazon FSx for Windows File Server。",
            "3": "EC2インスタンスに高性能ストレージを提供するためのブロックストレージとしてのAmazon EBS。",
            "4": "複数のインスタンスが同時にファイルにアクセスできる共有ファイルストレージのためのAmazon Elastic File System (EFS)。",
            "5": "バックアップのためにオンプレミス環境とクラウドストレージを統合するAWS Storage Gateway。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "耐久性のあるオブジェクトストレージとバックアップソリューションのためのAmazon S3、データを管理するためのライフサイクルポリシー付き。",
            "バックアップのためにオンプレミス環境とクラウドストレージを統合するAWS Storage Gateway。"
        ],
        "Explanation": "Amazon S3は高い耐久性、スケーラビリティ、非構造化データのライフサイクル管理を提供し、会社のストレージニーズに最適です。AWS Storage Gatewayは、オンプレミス環境とクラウドストレージのシームレスな統合を可能にし、会社の既存のワークフローに沿ったバックアップソリューションを提供します。",
        "Other Options": [
            "Amazon Elastic File System (EFS)は共有ファイルストレージにより適しており、大量の非構造化データの耐久性を必要とする場合には最適ではないかもしれません。",
            "Amazon FSx for Windows File ServerはSMBプロトコルが必要なWindowsアプリケーション向けに特化しており、会社の非構造化データストレージの要件には必要ないかもしれません。",
            "Amazon EBSはブロックストレージに効果的ですが、会社が必要とする大規模な非構造化データストレージには設計されていません。"
        ]
    },
    {
        "Question Number": "64",
        "Situation": "金融サービス会社がデータアーカイブ戦略をAWSに移行しています。この会社は機密性の高い金融データを扱っており、コストを最小限に抑えつつ、コンプライアンスを確保し、必要なときに迅速にデータにアクセスできる長期保存のソリューションが必要です。ソリューションアーキテクトは、アーカイブ用の適切なAmazon S3ストレージクラスを選定する任務を負っています。データはあまり頻繁にはアクセスされませんが、必要な場合には数分以内に取得可能でなければなりません。",
        "Question": "次の選択肢の中で、会社の要件を最も満たす適切なソリューションはどれですか？",
        "Options": {
            "1": "S3 Glacier Flexible Retrievalを利用して最適なコスト削減を図り、重要度の低いデータの取得時間を数時間に設定します。",
            "2": "データをS3 Standardに保存し、頻繁にアクセスした後、関連性が低くなったらS3 Glacierに移行します。",
            "3": "S3 Glacier Instant Retrievalを使用して、迅速なアクセスを実現し、アクセス頻度が低いためにストレージコストを最小限に抑えます。",
            "4": "S3 Standard-IAを実装してアクセス頻度が低いデータを管理し、データ取得には手動プロセスに依存します。"
        },
        "Correct Answer": "S3 Glacier Instant Retrievalを使用して、迅速なアクセスを実現し、アクセス頻度が低いためにストレージコストを最小限に抑えます。",
        "Explanation": "S3 Glacier Instant Retrievalは、あまり頻繁にアクセスされないデータの即時取得を目的としています。これは、データへの迅速なアクセスが必要でありながら、ストレージコストを低く抑えるという会社のニーズに完全に合致しており、アーカイブ戦略に最適な選択肢です。",
        "Other Options": [
            "S3 Standardは、アクセス頻度が低いデータの長期アーカイブにはコスト効率が悪く、Glacierオプションよりも高いストレージコストがかかります。",
            "S3 Glacier Flexible Retrievalはコスト削減には適していますが、即時アクセスの要件を満たしておらず、データの取得には数時間かかる可能性があります。",
            "S3 Standard-IAはアクセス頻度が低いデータ用に設計されていますが、長期保存のニーズに対してGlacierオプションほどのコスト削減を提供しません。"
        ]
    },
    {
        "Question Number": "65",
        "Situation": "ある会社がAWS Lambdaを使用してAmazon Kinesisストリームからのレコードを処理しています。ソリューションアーキテクトは、Lambda関数が最も効率的なバッチ構成で呼び出されるようにデータ処理を最適化する必要があります。会社は、Lambda関数がペイロードサイズの制限を超えないように、バッチ内の最大レコード数を処理できることを要求しています。",
        "Question": "Amazon Kinesisストリームから読み取る際に、AWS Lambda関数が単一バッチで処理できる最大レコード数は何ですか？",
        "Options": {
            "1": "1,000レコード/バッチ",
            "2": "10,000レコード/バッチ",
            "3": "6 MBペイロードサイズ",
            "4": "2,000レコード/バッチ"
        },
        "Correct Answer": "1,000レコード/バッチ",
        "Explanation": "Amazon Kinesisストリームからレコードを処理するLambda関数の最大バッチサイズは1,000レコードです。この制限により、関数が6 MBの最大ペイロードサイズを超えないように保たれます。",
        "Other Options": [
            "10,000レコード/バッチは不正解です。Kinesisの最大バッチサイズはペイロードサイズに関係なく1,000レコードに制限されています。",
            "6 MBペイロードサイズは不正解です。これはペイロードの合計サイズ制限を指しますが、バッチ内で処理される最大レコード数を指定していません。",
            "2,000レコード/バッチは不正解です。Kinesisの最大バッチサイズは1,000レコードに制限されており、2,000ではありません。"
        ]
    },
    {
        "Question Number": "66",
        "Situation": "金融サービス会社がアプリケーションをAWSに移行しています。彼らは、Webサーバー、アプリケーションサーバー、データベースなど、さまざまなワークロードに対してEC2インスタンスの混合を展開しています。現在のEC2インスタンスのパフォーマンスとコストを監視した結果、一部のインスタンスは過小利用されている一方で、他のインスタンスは過剰利用されていることに気付きました。会社は、ワークロードにより適した形でEC2インスタンスのリサイズを行うことで、AWSリソースを最適化したいと考えています。（2つ選択してください）",
        "Question": "次のアクションの中で、会社がEC2インスタンスのリサイズをより良く達成するのに役立つものはどれですか？",
        "Options": {
            "1": "AWS Compute Optimizerを実装して、利用パターンに基づくインスタンスのリサイズに関する推奨を受け取ります。",
            "2": "各インスタンスタイプのコスト分析を行い、パフォーマンス要件に関係なくすべてのワークロードに対して最も安価なインスタンスを選択します。",
            "3": "AWS Lambda関数を使用して、指定されたCPU利用率の閾値を下回るインスタンスを自動的に終了します。",
            "4": "データベース層で使用されているEC2インスタンスタイプを見直し、管理を簡素化するために単一のインスタンスタイプに移行します。",
            "5": "CloudWatchメトリクスを分析して、過小利用されているEC2インスタンスを特定し、それらをより小さなインスタンスタイプにダウンサイジングします。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "CloudWatchメトリクスを分析して、過小利用されているEC2インスタンスを特定し、それらをより小さなインスタンスタイプにダウンサイジングします。",
            "AWS Compute Optimizerを実装して、利用パターンに基づくインスタンスのリサイズに関する推奨を受け取ります。"
        ],
        "Explanation": "CloudWatchメトリクスを分析することで、会社は過小利用されているインスタンスを特定し、コスト削減のためにダウンサイジングするデータ駆動の意思決定を行うことができます。さらに、AWS Compute Optimizerは、過去の使用パターンに基づく自動推奨を提供し、リサイズの機会を特定するのを容易にします。",
        "Other Options": [
            "インスタンスタイプを見直すことは役立つかもしれませんが、単一のインスタンスタイプに移行することは、多様なワークロードに対するパフォーマンスやコスト効率を必ずしも解決するものではなく、リサイズには効果的なアプローチではありません。",
            "CPU利用率のみに基づいてインスタンスを終了するLambda関数を使用すると、重要なアプリケーションに意図しないダウンタイムが発生する可能性があり、全体的なパフォーマンスやワークロードの性質を考慮していません。",
            "特定のパフォーマンス要件を考慮せずに最も安価なインスタンスタイプを選択すると、アプリケーションのパフォーマンスが低下し、ユーザーの不満やビジネスの損失につながる可能性があります。"
        ]
    },
    {
        "Question Number": "67",
        "Situation": "金融サービス会社は、機密性の高い顧客データを扱ういくつかのアプリケーションをAWS上に展開しています。セキュリティとコンプライアンスを強化するために、同社はAWS環境を監視し評価するのに役立つAWSセキュリティツールを実装することを決定しました。ソリューションアーキテクトは、セキュリティの脆弱性、コンプライアンス状況、およびアクセス制御設定に関する洞察を提供できる適切なツールを選定する任務を負っています。複数のAWSアカウントにわたるセキュリティアラートと発見の統合ビューが必要です。",
        "Question": "会社のセキュリティ監視とコンプライアンスの要件を最も満たすAWSサービスの組み合わせはどれですか？",
        "Options": {
            "1": "AWS Security Hub, AWS CloudTrail, Amazon Inspector, AWS IAM Access Analyzer",
            "2": "Amazon CloudWatch, AWS Config, AWS Shield, AWS Firewall Manager",
            "3": "AWS Lambda, AWS Budgets, Amazon S3, AWS CloudFormation",
            "4": "AWS Trusted Advisor, Amazon GuardDuty, AWS WAF, AWS Systems Manager"
        },
        "Correct Answer": "AWS Security Hub, AWS CloudTrail, Amazon Inspector, AWS IAM Access Analyzer",
        "Explanation": "AWS Security Hub、AWS CloudTrail、Amazon Inspector、およびAWS IAM Access Analyzerの組み合わせは、セキュリティ監視とコンプライアンスに対する包括的なアプローチを提供します。AWS Security Hubはセキュリティアラートを集約し優先順位を付け、AWS CloudTrailはアカウントの活動を可視化します。Amazon Inspectorはアプリケーションの脆弱性を評価し、AWS IAM Access Analyzerはリソースへの意図しないアクセスを特定するのに役立ち、セキュリティポリシーの遵守を確保します。",
        "Other Options": [
            "このオプションには、主にリソースの監視と管理に焦点を当てたサービスが含まれていますが、セキュリティ評価やコンプライアンス監視のための専用ツールが不足しています。",
            "このオプションはDDoS攻撃に対する保護を提供し、セキュリティルールを管理するサービスを特徴としていますが、セキュリティアラートやコンプライアンスチェックの包括的なビューを提供しません。",
            "このオプションにはコスト最適化とパフォーマンス監視を提供するサービスが含まれていますが、セキュリティの脆弱性やコンプライアンス要件には対処していません。"
        ]
    },
    {
        "Question Number": "68",
        "Situation": "ある会社は、既存のオンプレミスアプリケーションをAWSに移行する計画を立てています。パフォーマンスと信頼性を向上させるために、新しいAWSサービスと機能を活用したいと考えています。ソリューションアーキテクトは、移行中のダウンタイムを最小限に抑えながらアプリケーションアーキテクチャを近代化する移行戦略を策定する必要があります。また、アーキテクチャは将来のスケーラビリティとメンテナンス性もサポートする必要があります。",
        "Question": "このシナリオで会社が取るべき最も適切なアプローチはどれですか？",
        "Options": {
            "1": "アプリケーションをAmazon RDSインスタンスに移行し、データベース機能を利用するためにリファクタリングしますが、アプリケーションはオンプレミスにホストされたままにします。",
            "2": "Amazon ECSを使用してアプリケーションをコンテナ化し、Amazon EC2インスタンスにデプロイしてマイクロサービスの管理と展開を容易にします。",
            "3": "アプリケーションをAWS LambdaとAmazon API Gatewayを使用するように再設計し、サーバーレスアーキテクチャを確保して自動的にスケールし、運用オーバーヘッドを最小限に抑えます。",
            "4": "アプリケーションをAmazon EC2インスタンスに変更なしでリフトアンドシフトし、移行が完了した後に近代化を計画します。"
        },
        "Correct Answer": "アプリケーションをAWS LambdaとAmazon API Gatewayを使用するように再設計し、サーバーレスアーキテクチャを確保して自動的にスケールし、運用オーバーヘッドを最小限に抑えます。",
        "Explanation": "このオプションは、サーバーレスアーキテクチャを利用してアプリケーションを近代化するための最良のアプローチを提供します。AWS LambdaとAPI Gatewayは自動スケーリングを可能にし、サーバー管理の必要性を減少させ、全体的なパフォーマンスと信頼性を向上させます。",
        "Other Options": [
            "このアプローチは、AWSサービスを活用してアプリケーションを近代化することができません。これにより運用コストが高くなる可能性があり、スケーラビリティやパフォーマンスの向上をサポートしません。",
            "コンテナ化は管理と展開を向上させることができますが、このオプションは依然としてEC2に依存しており、基盤となるインフラストラクチャの管理が必要で、サーバーレスアーキテクチャの利点を完全に活用していません。",
            "このオプションはデータベース移行のみに焦点を当てており、アプリケーション層には対処していません。アプリケーションをオンプレミスに保持するため、スケーラビリティが制限され、AWSサービスの完全な機能を活用していません。"
        ]
    },
    {
        "Question Number": "69",
        "Situation": "グローバルなオンラインゲーム会社は、世界中の何百万ものプレイヤーにサービスを提供しており、レイテンシを減少させ、コンテンツ配信を改善することでゲーム体験を最適化する必要があります。同社は、複数のAWSリージョンにゲームサーバーを展開しており、地理的に迅速なコンテンツ配信とシームレスなプレイヤー体験を提供できるソリューションを探しています。さらに、地域的な障害が発生した場合に高可用性と自動フェイルオーバーを確保したいと考えています。",
        "Question": "低レイテンシのコンテンツ配信と高可用性に対する会社の要件を最も満たすソリューションはどれですか？",
        "Options": {
            "1": "AWS Lambda@EdgeをAmazon CloudFrontと組み合わせて実装し、ゲームデータをプレイヤーの近くにキャッシュし、Amazon Route 53を使用して高可用性のためのDNSフェイルオーバーを管理します。",
            "2": "ゲームコンテンツのストレージにAmazon S3を展開し、データ転送のためにAWS Direct Connectを使用してゲームサーバーへの専用回線を提供します。これによりレイテンシとパフォーマンスが向上します。",
            "3": "Amazon CloudFrontを使用してゲームコンテンツをグローバルに配信します。AWS Global Acceleratorを実装してプレイヤーを最寄りのゲームサーバーにルーティングし、自動フェイルオーバーで可用性を向上させます。",
            "4": "複数のリージョンにわたってAmazon Elastic Load Balancingを利用してトラフィックをゲームサーバー間で均等に分配し、Amazon RDSをMulti-AZで設定してデータベースの冗長性を確保します。"
        },
        "Correct Answer": "Amazon CloudFrontを使用してゲームコンテンツをグローバルに配信します。AWS Global Acceleratorを実装してプレイヤーを最寄りのゲームサーバーにルーティングし、自動フェイルオーバーで可用性を向上させます。",
        "Explanation": "Amazon CloudFrontを使用することで、プレイヤーの近くのエッジロケーションでコンテンツをキャッシュし、レイテンシを減少させながらゲームコンテンツを効率的に配信できます。AWS Global Acceleratorは、最適なゲームサーバーにトラフィックをインテリジェントにルーティングすることで可用性をさらに向上させ、プレイヤーに最小限の遅延とシームレスな体験を提供します。",
        "Other Options": [
            "ゲームコンテンツのストレージにAmazon S3を展開し、AWS Direct Connectを使用することでデータ転送パフォーマンスが向上しますが、低レイテンシのコンテンツ配信やゲームサーバーの自動フェイルオーバー機構には直接対処していません。",
            "AWS Lambda@EdgeをAmazon CloudFrontと組み合わせてキャッシュを実装し、Amazon Route 53を使用してDNSフェイルオーバーを行うことは一部の利点を提供しますが、AWS Global Acceleratorほどの自動フェイルオーバーやルーティング最適化を提供しない可能性があります。",
            "Amazon Elastic Load Balancingを利用してトラフィックを分配し、Amazon RDSをMulti-AZで設定してデータベースの冗長性を確保することは高可用性戦略として良いですが、グローバルなコンテンツ配信や世界中のプレイヤーベースのレイテンシ削減には特に対処していません。"
        ]
    },
    {
        "Question Number": "70",
        "Situation": "ある金融サービス会社がウェブアプリケーションをAWSに移行しています。この会社は、内部APIとサービスをSSL/TLS証明書で保護する必要があります。セキュリティチームは、追加の設定なしでクライアントアプリケーションやブラウザに自動的に信頼される証明書の使用を好んでいます。この目的のためにAWS Certificate Managerの使用を検討しています。",
        "Question": "クライアントアプリケーションとブラウザとのシームレスな信頼を確保するために、会社はAWS Certificate Managerを使用してどのタイプの証明書を発行すべきですか？",
        "Options": {
            "1": "公開証明書のためにサードパーティの証明書機関を使用する。",
            "2": "すべての内部アプリケーションに自己署名証明書を使用する。",
            "3": "内部サービスのためにプライベートSSL/TLS証明書を発行する。",
            "4": "外部サービスのために公開SSL/TLS証明書を発行する。"
        },
        "Correct Answer": "外部サービスのために公開SSL/TLS証明書を発行する。",
        "Explanation": "AWS Certificate Managerを通じて公開SSL/TLS証明書を発行することで、証明書はブラウザやクライアントアプリケーションによって自動的に信頼され、追加の設定なしでシームレスな信頼を確保するという会社の要件を満たします。",
        "Other Options": [
            "プライベートSSL/TLS証明書を発行する場合、クライアントアプリケーションで証明書を信頼するための明示的な設定が必要となり、シームレスな信頼の要件を満たしません。",
            "自己署名証明書の使用は、本番環境では推奨されません。デフォルトでは信頼されず、各クライアントに対して追加の設定が必要になるため、要件に反します。",
            "サードパーティの証明書機関を使用すると、不必要な複雑さやコストが発生する可能性がありますが、AWS Certificate Managerは自動的に信頼される無料の公開証明書を提供します。"
        ]
    },
    {
        "Question Number": "71",
        "Situation": "ある多国籍企業が、ユーザーのトラフィックを効率的にルーティングし、高可用性を提供するために、AWS上にグローバルに分散したアプリケーションを展開しています。このアプリケーションはさまざまな地理的な場所からアクセスされ、会社はレイテンシを最小限に抑えつつ、ユーザーを最寄りの利用可能なリソースに誘導することを目指しています。彼らはこの目標を達成するために、AWS Route 53が提供するさまざまなルーティングポリシーを検討しています。",
        "Question": "ユーザーを地理的な位置に基づいて最寄りのアプリケーションエンドポイントに誘導するために、AWS Route 53の次のルーティングポリシーの中で最も効果的なものはどれですか？",
        "Options": {
            "1": "重み付けルーティングポリシー",
            "2": "地理位置ルーティングポリシー",
            "3": "フェイルオーバールーティングポリシー",
            "4": "レイテンシルーティングポリシー"
        },
        "Correct Answer": "地理位置ルーティングポリシー",
        "Explanation": "地理位置ルーティングポリシーを使用すると、Route 53はユーザーの地理的な位置に基づいてトラフィックを誘導できます。これにより、ユーザーは最寄りのアプリケーションエンドポイントにルーティングされ、レイテンシが減少し、パフォーマンスが向上します。これは、ユーザーエクスペリエンスを最適化するために地理的な近接性が重要なシナリオに特に設計されています。",
        "Other Options": [
            "レイテンシルーティングポリシーは、ヘルスチェックに基づいて最も低いレイテンシを提供するエンドポイントにユーザーを誘導しますが、ユーザーの地理的な位置を特に考慮しません。これにより、必ずしもユーザーを最寄りのリソースに誘導するとは限らず、これはこのシナリオの主な要件です。",
            "重み付けルーティングポリシーは、割り当てられた重みに基づいて複数のエンドポイントにトラフィックを分配することを可能にしますが、地理的な位置を考慮しません。これにより、レイテンシの観点から非効率なルーティングが発生する可能性があり、ユーザーが最も近いリソースに誘導されないことがあります。",
            "フェイルオーバールーティングポリシーは、プライマリエンドポイントにトラフィックをルーティングし、障害が発生した場合にセカンダリエンドポイントにフェイルオーバーするために使用されます。このポリシーは、高可用性を目的としており、ユーザーの近接性やレイテンシを最適化するためのものではないため、ユーザーを最寄りのアプリケーションエンドポイントに誘導する要件には適していません。"
        ]
    },
    {
        "Question Number": "72",
        "Situation": "ある会社がオンプレミスからAWSへのアーキテクチャの移行を行っています。彼らは、プライベートサブネット内のインスタンスが更新やパッチのためにインターネットにアクセスできる一方で、インスタンスが直接インターネットトラフィックにさらされないようにするソリューションを必要としています。チームはこの要件を達成するためにNATの最適な使用法を評価しています。",
        "Question": "接続タイムアウトの文脈において、NATインスタンスとNATゲートウェイの動作を正しく説明しているのはどの文ですか？",
        "Options": {
            "1": "NATインスタンスはタイムアウト時に接続を閉じるためにFINパケットを送信し、NATゲートウェイはそれを終了させるためにRSTパケットを送信します。",
            "2": "NATインスタンスとゲートウェイの両方がタイムアウト時に接続を終了させるためにRSTパケットを送信します。",
            "3": "NATインスタンスとゲートウェイの両方がタイムアウト時に接続を終了させるためにFINパケットを送信します。",
            "4": "NATゲートウェイはタイムアウト時に接続を閉じるためにFINパケットを送信し、NATインスタンスはそれを終了させるためにRSTパケットを送信します。"
        },
        "Correct Answer": "NATインスタンスはタイムアウト時に接続を閉じるためにFINパケットを送信し、NATゲートウェイはそれを終了させるためにRSTパケットを送信します。",
        "Explanation": "NATインスタンスとNATゲートウェイは接続タイムアウトを異なる方法で処理します。NATインスタンスはプライベートリソースにFINパケットを送信して接続を優雅に閉じますが、NATゲートウェイはRSTパケットを送信し、適切なシャットダウンシーケンスなしに接続を強制的に終了させます。",
        "Other Options": [
            "NATゲートウェイがFINパケットを送信するのは誤りです。実際には、接続タイムアウト時にRSTパケットを送信します。",
            "これは誤りです。なぜなら、FINパケットを送信するのはNATインスタンスのみであり、NATゲートウェイはRSTパケットを送信するからです。",
            "これは誤りです。NATインスタンスとゲートウェイは、タイムアウト時に両方ともFINパケットを送信することはなく、接続終了のために異なるメカニズムを利用しています。"
        ]
    },
    {
        "Question Number": "73",
        "Situation": "金融サービス会社がアプリケーションをAWSに移行しており、コンテナホスティングプラットフォームを選択する必要があります。会社は、簡単なスケーリング、高可用性、既存のCI/CDパイプラインとの統合を可能にするソリューションを必要としています。アプリケーションはマイクロサービスベースであり、迅速なデプロイとロールバック機能をサポートしながら、セキュリティとコンプライアンス要件を満たす必要があります。",
        "Question": "次のうち、会社の要件に最も適したコンテナホスティングプラットフォームはどれですか？",
        "Options": {
            "1": "Amazon EC2にDockerをインストールして、仮想マシン上でコンテナを直接実行し、完全な制御を提供しますが、スケーリングと管理が複雑になります。",
            "2": "Amazon ECSとAWS Fargateを使用してコンテナを管理し、サーバーレスコンピューティングを可能にし、スケーリングとデプロイを簡素化します。",
            "3": "AWS Lambdaを使用してコンテナ化されたアプリケーションをサーバーレスで実行し、コンテナ管理の必要を排除しますが、制御が制限されます。",
            "4": "Amazon EKSとKubernetesを使用してコンテナを管理し、高度なオーケストレーション機能を提供しますが、運用オーバーヘッドが増加します。"
        },
        "Correct Answer": "Amazon ECSとAWS Fargateを使用してコンテナを管理し、サーバーレスコンピューティングを可能にし、スケーリングとデプロイを簡素化します。",
        "Explanation": "Amazon ECSとAWS Fargateは、基盤となるインフラストラクチャを抽象化するサーバーレスコンテナホスティングオプションを提供し、会社がサーバーのメンテナンスを気にせずにアプリケーションのデプロイと管理に集中できるようにします。簡単なスケーリングをサポートし、CI/CDパイプラインとの統合も良好で、会社の要件を満たします。",
        "Other Options": [
            "Amazon EKSとKubernetesはKubernetesコントロールプレーンの管理が必要で、複雑さと運用オーバーヘッドが増加し、シンプルさと使いやすさを求めるチームには不向きです。",
            "AWS Lambdaはサーバーレスアーキテクチャでコードを実行するために設計されていますが、ECSやEKSと同じレベルのコンテナ化されたアプリケーションの制御を提供せず、マイクロサービスを効果的に管理する能力を制限します。",
            "Amazon EC2にDockerをインストールすると、環境に対する完全な制御が得られますが、スケーリングと管理が複雑になり、会社の効率的で管理可能なソリューションのニーズに反します。"
        ]
    },
    {
        "Question Number": "74",
        "Situation": "ある会社がAmazon DynamoDBを主要なデータベースとして使用する新しいサーバーレスアプリケーションを設計しています。このアプリケーションはさまざまなワークロードを処理し、開発チームはデータアクセスパターンの最適化とコストの最小化に注力しています。効率的なデータ取得と保存を確保するために、適切なプライマリキーの使用を決定する必要があります。（2つ選択）",
        "Question": "DynamoDBで最適なパフォーマンスとコスト効率を確保するための2つの構成はどれですか？（2つ選択）",
        "Options": {
            "1": "適応キャパシティを設定して、高トラフィックを経験しているパーティションのスループットを自動的に調整し、総提供キャパシティを超えないようにします。",
            "2": "単純なプライマリキーを使用して、パーティション間でアイテムが均等に分散されるようにします。",
            "3": "グローバルセカンダリインデックスを使用して、プライマリキー以外の属性に基づいてクエリを実行できるようにします。",
            "4": "パーティションキーとソートキーを持つ複合プライマリキーを使用して、関連アイテムの効率的なクエリを可能にします。",
            "5": "単一テーブル設計を実装して、すべての関連データを単一のDynamoDBテーブルに統合し、パフォーマンスを向上させます。"
        },
        "Is_Multiple": true,
        "Correct Answer": [
            "パーティションキーとソートキーを持つ複合プライマリキーを使用して、関連アイテムの効率的なクエリを可能にします。",
            "適応キャパシティを設定して、高トラフィックを経験しているパーティションのスループットを自動的に調整し、総提供キャパシティを超えないようにします。"
        ],
        "Explanation": "複合プライマリキーを使用することで、関連アイテムの効率的なクエリと取得が可能になり、複雑なアクセスパターンを持つアプリケーションには重要です。さらに、適応キャパシティを設定することで、アプリケーションがさまざまなワークロードを処理できるようになり、スロットリングや過剰プロビジョニングによる不要なコストを回避できます。",
        "Other Options": [
            "単純なプライマリキーを使用すると、関連アイテムを扱う際に効率的なデータ取得に必要な柔軟性が提供されず、非効率的なクエリやパフォーマンスの問題を引き起こす可能性があります。",
            "グローバルセカンダリインデックスは便利ですが、最適なパフォーマンスのためのプライマリキー設計に直接対処するものではなく、二次的なアクセスパターンとして機能し、追加のコストが発生する可能性があります。",
            "単一テーブル設計を実装することは、いくつかのシナリオでは有益ですが、最適なプライマリキー構成の必要性に直接対処せず、データアクセスパターンを複雑にする可能性があります。"
        ]
    },
    {
        "Question Number": "75",
        "Situation": "金融サービス会社がAWS Lambdaを使用してリアルタイムトランザクションを処理する新しいサーバーレスアプリケーションを開発しています。このアプリケーションは、日中にさまざまなトラフィックレベルを持ち、ビジネス時間中にピーク使用が予想されます。ソリューションアーキテクトは、コストを最小限に抑えながら、アプリケーションが突然のトラフィックの急増に対応できるようにする責任があります。",
        "Question": "ソリューションアーキテクトは、アプリケーションが突然のトラフィックの急増に効率的に対応できるようにするために、どの同時実行制御方法を実装すべきですか？",
        "Options": {
            "1": "プロビジョニングされた同時実行と予約された同時実行の両方を組み合わせて使用し、トラフィックを効果的に管理し、コストを最適化します。",
            "2": "予約された同時実行を設定して、スロットリングを避けるためにすべてのLambda関数での同時実行の最大数を制限します。",
            "3": "AWSアカウントの総同時実行制限を増やして、すべての関数での同時実行を増やします。",
            "4": "プロビジョニングされた同時実行を設定して、ピークトラフィック時に即座に利用可能な特定の数のLambdaインスタンスを事前にウォームアップします。"
        },
        "Correct Answer": "プロビジョニングされた同時実行を設定して、ピークトラフィック時に即座に利用可能な特定の数のLambdaインスタンスを事前にウォームアップします。",
        "Explanation": "プロビジョニングされた同時実行を使用することで、アーキテクトは特定の数のLambdaインスタンスを事前に初期化でき、リクエストに即座に対応できるようになります。これは、突然のトラフィックの急増を経験するアプリケーションにとって重要です。",
        "Other Options": [
            "予約された同時実行を設定することは、最大同時実行を制限するだけで、即時の応答時間を保証せず、ピーク負荷時に遅延を引き起こす可能性があります。",
            "プロビジョニングされた同時実行と予約された同時実行の両方を組み合わせることでいくつかの利点が得られるかもしれませんが、アーキテクチャが複雑になり、突然の急増を効果的に管理するためには必要ないかもしれません。",
            "AWSアカウントの総同時実行制限を増やすことは、トラフィックの急増時にLambdaインスタンスの即時利用可能性の必要性に対処せず、追加のコストが発生する可能性があります。"
        ]
    }
]